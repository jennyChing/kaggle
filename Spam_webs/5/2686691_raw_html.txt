<!DOCTYPE html>
<html lang="en">
 <head>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <meta content="" name="keywords"/>
  <meta content="" name="description"/>
  <title>
   NASpberry Pi : Raspberry IO
  </title>
  <link href="/static/img/favicon.ico" rel="shortcut icon"/>
  <link href="/static/img/apple-touch-icon.png" rel="apple-touch-icon"/>
  <link href="/static/CACHE/css/93d24e27e6d1.css" media="all" rel="stylesheet" type="text/css"/>
  <!--[if lt IE 9]&gt;
    &lt;script src="/static/js/html5shiv.js"&gt;&lt;/script&gt;
    &lt;![endif]-->
  <script src="/static/js/libs/modernizr-2.5.3.js">
  </script>
  <script type="text/javascript">
   var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-38295988-1']);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
  </script>
 </head>
 <body class="" id="project-detail">
  <div id="page">
   <div class="navbar navbar-static-top" id="global-nav">
    <div class="navbar-inner">
     <div class="container">
      <a class="btn btn-navbar" data-target=".nav-collapse" data-toggle="collapse">
       <span class="icon-bar">
       </span>
       <span class="icon-bar">
       </span>
       <span class="icon-bar">
       </span>
      </a>
      <a class="brand" href="/">
       <img alt="Razzy head" src="/static/img/razzy-head.png" width="20"/>
       Raspberry IO
      </a>
      <div class="nav-collapse collapse">
       <div class="right-block">
        <ul class="nav">
         <li class="visible-phone">
          <a href="/projects/add/">
           Create
          </a>
         </li>
         <li class="visible-phone">
          <a href="/projects/">
           Explore
          </a>
         </li>
         <li class="visible-phone">
          <a href="/wiki/">
           Learn
          </a>
         </li>
         <li class="visible-phone">
          <a href="/community/">
           Community
          </a>
         </li>
         <li>
          <a href="/accounts/login/">
           Log In
          </a>
         </li>
         <li>
          <a href="/account/signup/">
           Sign Up
          </a>
         </li>
        </ul>
        <form action="/search/" class="navbar-search">
         <input class="search-query" name="q" placeholder="Search" type="text"/>
        </form>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="container">
    <div id="content">
     <header>
      <h2>
       NASpberry Pi
      </h2>
     </header>
     <div class="steps-timeline hidden-phone">
      <hr/>
      <ul>
       <li>
        <a href="#overview">
         Overview
        </a>
       </li>
       <li>
        <a href="#step1">
         1
        </a>
       </li>
       <li>
        <a href="#step2">
         2
        </a>
       </li>
       <li>
        <a href="#step3">
         3
        </a>
       </li>
       <li>
        <a href="#step4">
         4
        </a>
       </li>
       <li>
        <a href="#step5">
         5
        </a>
       </li>
      </ul>
     </div>
     <div class="overview row">
      <div class="featured span7">
       <img alt="/home/raspberryio/www/production/raspberryio/public/media/images/project_featured_photos/NASpberry_Pi.png" src="/media/images/project_featured_photos/NASpberry_Pi.png"/>
      </div>
      <div class="span5">
       <div class="userinfo">
        <a href="/users/megamark16/">
         <img alt="megamark16" class="profile" src="http://www.gravatar.com/avatar/a76c69534f992acf4a0810de4609d3a8?s=35"/>
        </a>
        <p>
         <strong>
          Created by:
         </strong>
         <a href="/users/megamark16/">
          megamark16
         </a>
        </p>
        <p class="date">
         Published Mar. 18, 2013
        </p>
       </div>
       <p>
        It's possible to set up a Raspberry Pi to run as a lightweight, energy efficient home media and file server, running the following services:
       </p>
       <ul>
        <li>
         <a href="/projects/view/naspberry-pi/#step1">
          MiniDLNA
         </a>
         - A uPnP compliant media server for streaming videos, music, and pictures across your home network to any uPnP compliant client.
         <span>
          Here is a list of
         </span>
         <a href="http://en.wikipedia.org/wiki/List_of_UPnP_AV_media_servers_and_clients#UPnP_AV_clients">
          uPnP clients
         </a>
         <span>
          .
         </span>
        </li>
        <li>
         <span>
          <a href="/projects/view/naspberry-pi/#step2">
           Samba
          </a>
          -
         </span>
         <span>
          <span>
           A service that lets you serve files to Microsoft Windows clients, and to any other operating system that supports this protocol (which is most of them).
          </span>
         </span>
        </li>
        <li>
         <span>
          <span>
           OpenSSH - Allows you to securely connect to and from your device across the internet. This service should come pre-installed on the Raspbian distrobution.
          </span>
         </span>
        </li>
        <li>
         <span>
          <span>
           <a href="/projects/view/naspberry-pi/#step3">
            Transmission-daemon
           </a>
           - A torrenting service with a we interface, allowing you to manage your torrenting from any computer on your network through a web browser.
          </span>
         </span>
        </li>
        <li>
         <span>
          <span>
           <a href="/projects/view/naspberry-pi/#step4">
            OpenVPN Client
           </a>
           - Allows youtoanonymizeyour torrenting traffic by tunneling through a secure VPN connection.
          </span>
         </span>
        </li>
       </ul>
       <p class="categories">
        <strong>
         Related categories:
        </strong>
        Tutorial
       </p>
      </div>
     </div>
     <div class="steps" id="step1">
      <div class="row">
       <div class="span12">
        <h3>
         Step 1: MiniDLNA
        </h3>
       </div>
      </div>
      <div class="row">
       <div class="span7">
        <div id="videoDiv1">
         <iframe frameborder="0" height="300" src="http://www.youtube.com/embed/Ns-Ew8_Qmc8?wmode=transparent" type="text/html" width="100%">
         </iframe>
        </div>
       </div>
       <div class="span5">
        <p>
         MiniDLNA is a fully complient uPnP (Universal Plug and Play) digital media server, which allows you to stream video and audio, and to access pictures, from your NASpberry Pi over your network from any uPnP complient renderer. Here is a list of
         <a href="http://en.wikipedia.org/wiki/List_of_UPnP_AV_media_servers_and_clients#UPnP_AV_clients">
          uPnP clients
         </a>
         .
        </p>
        <p>
         Installing MiniDLNA:
        </p>
        <pre>
         sudo apt-get update
sudo apt-get install minidlna
        </pre>
        <p>
         Open /etc/minidlna.conf in your favorite text editor, as superuser:
        </p>
        <pre>
         sudo vi /etc/minidlna.conf
        </pre>
        <p>
         Tell MiniDLNA where to look for your media:
        </p>
        <pre>
         media_dir=/home/pi/media
        </pre>
        <p>
         Set the name for our media server that will show up on clients:
        </p>
        <pre>
         friendly_name=[Your Name Here] Media Device
        </pre>
        <p>
         Download a video to make sure it works:
        </p>
        <pre>
         mkdir /home/pi/media
cd /home/pi/media
wget http://archive.org/download/Debian6.0.4Lxde/Debian6.0.4LXDEPresentation.mp4
wget http://archive.org/download/Free_20s_Jazz_Collection/2to2_64kb.mp3
        </pre>
        <p>
         Restart the MiniDLNA service:
        </p>
        <pre>
         sudo service minidlna restart
        </pre>
        <p>
         Now you should be able to connect to your server from a uPNP client on the same network as your NASpberry Pi, and you should be able to stream the test video and music.
        </p>
       </div>
      </div>
     </div>
     <div class="steps" id="step2">
      <div class="row">
       <div class="span12">
        <h3>
         Step 2: Samba
        </h3>
       </div>
      </div>
      <div class="row">
       <div class="span12">
        <p style="">
         Samba is an open source network protocol that lets you serve files to Microsoft Windows clients, and to any other operating system that supports this protocol (which is most of them).
        </p>
        <p style="">
         Installing Samba Server:
        </p>
        <pre style="">
         sudo apt-get update
sudo apt-get install samba samba-common-bin
        </pre>
        <p style="">
         Create a folder for your network shares, create a public and private folder, and put some test files in them so we'll know if everything is working correctly:
        </p>
        <pre style="">
         cd ~/
mkdir shares
mkdir shares/public
touch shares/public/Public.txt
mkdir shares/private
touch shares/private/Private.txt
        </pre>
        <p style="">
         Open /etc/samba/smb.conf in your favorite text editor, as superuser:
        </p>
        <pre style="">
         sudo vi /etc/samba/smb.conf
        </pre>
        <p style="">
         Define which folders you want to share and what kind of access they will have:
        </p>
        <pre style="">
         [public]
    comment = Public Files
    path = /home/pi/shares/public
    browseable = yes
    writeable = yes
    guest ok = yes
    read only = no

[private]
    comment = Private Files
    path = /home/pi/shares/private
    browseable = yes
    writeable = yes
    guest ok = no
    read only = no
        </pre>
        <p style="">
         Restart the Samba service:
        </p>
        <pre style="">
         sudo service samba restart
        </pre>
        <p style="">
         Create a Samba user/password for accessing the private share:
        </p>
        <pre style="">
         sudo smbpasswd -a pi
        </pre>
        <p style="">
         You should be prompted to enter a new password, this is the password you will use to log into the private share from another computer on your network:
        </p>
        <pre style="">
         pi@raspberrypi ~ $ sudo smbpasswd -a pi
New SMB password:
Retype new SMB password:
Added user pi.
        </pre>
        <p style="">
         In order to be able to make changes to the public share, you need to grant write access to the /home/pi/shares/public folder:
        </p>
        <pre style="">
         chmod -R 777 /home/pi/shares/public
        </pre>
        <p style="">
         Now you should be able to connect to your server from any client computer on the same network as your NASpberry Pi and access files in the public share. The private share will require your username and password to access.
        </p>
        <hr style=""/>
        <p style="">
         <em>
          <a href="http://elinux.org/R-Pi_NAS" style="">
           Here is a more in-depth guide
          </a>
          to setting up a Samba server on a Raspberry Pi and configuring clients to connect to it.
         </em>
        </p>
       </div>
      </div>
     </div>
     <div class="steps" id="step3">
      <div class="row">
       <div class="span12">
        <h3>
         Step 3: Transmission
        </h3>
       </div>
      </div>
      <div class="row">
       <div class="span7">
        <div id="videoDiv3">
         <iframe frameborder="0" height="300" src="http://www.youtube.com/embed/Y9ytbmUj3hE?wmode=transparent" type="text/html" width="100%">
         </iframe>
        </div>
       </div>
       <div class="span5">
        <p>
         The transmission-daemon is a full featured torrent client that runs all the time on your NASpberry Pi, and which provides a web-based front end for managing your torrents. This means that you can manage your torrenting from any computer on your network, through a web browser.
        </p>
        <p>
         Installing the Transmission Daemon:
        </p>
        <pre>
         sudo apt-get update
sudo apt-get install transmission-daemon
        </pre>
        <p>
         Create a folder to download your torrents to and grant global write permissions so that the transmission-daemon process has access to write to it:
        </p>
        <pre>
         cd ~/
mkdir torrents
chmod -R 777 torrents
        </pre>
        <p>
         Stop the transmission-daemon:
        </p>
        <pre>
         sudo service transmission-daemon stop
        </pre>
        <p>
         Open /etc/transmission-daemon/settings.json in your favorite text editor, as superuser:
        </p>
        <pre>
         sudo vi /etc/transmission-daemon/settings.json
        </pre>
        <p>
         Tell transmission-daemon where to download your torrents to and open up access to the web interface from anywhere on your network by changing these settings:
        </p>
        <pre>
         { 
    ...
    "download-dir": "/home/pi/torrents",
    ...
    "rpc-whitelist-enabled": false,
    ...
}
        </pre>
        <p>
         Restart the transmission-daemon service:
        </p>
        <pre>
         sudo service transmission-daemon start
        </pre>
        <p>
         Point your browser to http://localhost:9091, and when prompted to log in, use "transmission" for both the username and the password. You can replace "localhost" with the ip address of your NASpberry Pi if you're trying to access it from another machine on your network
        </p>
       </div>
      </div>
     </div>
     <div class="steps" id="step4">
      <div class="row">
       <div class="span12">
        <h3>
         Step 4: OpenVPN
        </h3>
       </div>
      </div>
      <div class="row">
       <div class="span7">
        <div id="videoDiv4">
         <iframe frameborder="0" height="300" src="http://www.youtube.com/embed/yHBpWqkM8NU?wmode=transparent" type="text/html" width="100%">
         </iframe>
        </div>
       </div>
       <div class="span5">
        <p>
         There are two main types of VPN connections supported by linux, PPTP and OpenVPN. For simplicity we're going to focus on OpenVPN. This tutorial assumes that you have a VPN service that provided you with a config file, and either a username and password, a CA certificate, or both.
        </p>
        <p>
         I personally use
         <a href="http://www.privateinternetaccess.com/">
          privateinternetaccess.com
         </a>
         ($6.95/month), but there are some free ones available (
         <a href="http://www.vpnbook.com/">
          vpnbook.com
         </a>
         for example) that you can use for this tutorial if you don't want to sign up for a paid VPN right away.
        </p>
        <p>
         Install OpenVPN:
        </p>
        <pre>
         sudo apt-get update
sudo apt-get install openvpn
        </pre>
        <p>
         Create a script to kick off your vpn connection and make it executable:
        </p>
        <pre>
         cd ~/
touch vpn.sh
chmod +x vpn.sh
        </pre>
        <p>
         Now edit your vpn.sh script to look like this:
        </p>
        <pre>
         #!/bin/sh
sudo openvpn --config /path/to/your/openvpn/config/file --script-security 2
        </pre>
        <p style="">
         Now you should be able to execute this script to connect to your vpn:
        </p>
        <pre style="">
         ./vpn.sh
        </pre>
        <p style="">
        </p>
        <p>
         <span style="">
          It will most likely prompt you for your username and password, and then you will be connected to the VPN and all of your traffic should tunnel through there.
         </span>
        </p>
        <p>
         <strong>
          How do I know I'm connected to the VPN?
         </strong>
         - An easy way to check that you are connected to your VPN is to point your browser at
         <a href="https://duckduckgo.com/?q=ip">
          https://duckduckgo.com/?q=ip
         </a>
         before and after you connect to your VPN. This pag will show you what your current ip address is, and it should be different when you are connected to the VPN than it is when you are not.
        </p>
        <p>
         You can also check your ip address from the command line using this command:
        </p>
        <pre>
         curl ifconfig.me/ip
        </pre>
        <div>
         <strong>
          How do I keep the VPN connected when I log out?
         </strong>
         - You can use a program called
         <a href="http://www.gnu.org/software/screen/">
          GNU Screen
         </a>
         to keep programs running after you close out of terminal or disconnect from an SSH connection to your server. You can install GNU Screen by running:
        </div>
        <div>
        </div>
        <div>
         <pre>
          sudo apt-get update
sudo apt-get install screen
         </pre>
        </div>
        <div>
         And just type "screen" to start a screen session. From within a screen session you can run your vpn.sh script, and then press "Ctrl+a d" (press Ctrl+a and then press the d key) to disconnect from your screen session while leaving it running in the background. To reconnect to your screen session later just run:
        </div>
        <div>
         <pre>
          screen -r
         </pre>
        </div>
        <div>
        </div>
       </div>
      </div>
     </div>
     <div class="steps" id="step5">
      <div class="row">
       <div class="span12">
        <h3>
         Step 5: Transmission Over OpenVPN
        </h3>
       </div>
      </div>
      <div class="row">
       <div class="span7">
        <div id="videoDiv5">
         <iframe frameborder="0" height="300" src="http://www.youtube.com/embed/2PY6T8gEB4s?wmode=transparent" type="text/html" width="100%">
         </iframe>
        </div>
       </div>
       <div class="span5">
        <p>
         In general, all of your network traffic should use your VPN connection, if it is active, so by default Transmission should tunnel all of your torrent traffic over the VPN. That's fine until your VPN connection drops and all of your torrent traffic starts using your regular internet connection, which is kind of what we were trying to avoid with the VPN in the first place.
        </p>
        <p>
         While OpenVPN is usually pretty good about reconnecting if the connection is lost, it's better if that doesn't happen, so in this tutorial we'll setup Transmission to
         <strong>
          only
         </strong>
         route our torrent traffic through the VPN, and if the VPN is not connected Transmission will just stop torrenting until the VPN is reconnected.
        </p>
        <p>
         We need to create a template of our transmission-daemon setting.json file so that we can update the ip address that we download torrents through every time the VPN connects:
        </p>
        <pre>
         sudo cp /etc/transmission-daemon/settings.json /etc/transmission-daemon/settings_template.json
        </pre>
        <p>
         Open /etc/transmission-daemon/settings_template.json in your favorite text editor (as superuser) and change the following value:
        </p>
        <pre>
         { 
    ...
    "bind-address-ipv4": "IP_ADDRESS",
    ...
}
        </pre>
        <p>
         Now setup a new script that OpenVPN will call when a VPN connection is successfully established.
        </p>
        <pre>
         sudo touch /etc/openvpn/up.sh
sudo chmod +x /etc/openvpn/up.sh
        </pre>
        <p>
         Open /etc/openvpn/up.sh in your favorite text editor (as superuser) and set it up like this:
        </p>
        <pre>
         #!/bin/sh

/etc/init.d/transmission-daemon stop
sed s/IP_ADDRESS/$4/ /etc/transmission-daemon/settings_template.json &gt; /etc/transmission-daemon/settings.json
/etc/init.d/transmission-daemon start
        </pre>
        <p>
         Now edit your vpn.sh script from the
         <a href="http://www.naspberrypi.com/openvpn.html">
          OpenVPN tutorial
         </a>
         and update it to look like this:
        </p>
        <pre>
         #!/bin/sh

sudo openvpn --config /path/to/your/openvpn/config/file --script-security 2 --up /etc/openvpn/up.sh
        </pre>
        <p>
         From now on, when you connect to the VPN it will force your torrent traffic to use the VPN connection, and if you get disconnected it should stop torrenting until you reconnect. You can use a tool like
         <a href="http://checkmytorrentip.com/">
          CheckMyTorrentIP
         </a>
         to ensure that your torrent traffic is going over the VPN correctly.
        </p>
       </div>
      </div>
     </div>
     <h2>
      Comments
     </h2>
     <div id="disqus_thread">
     </div>
     <a class="dsq-brlink" href="http://disqus.com">
      comments powered by
      <span class="logo-disqus">
       Disqus
      </span>
     </a>
    </div>
   </div>
   <div id="push">
   </div>
   <div class="navbar navbar-fixed-bottom hidden-phone" id="footer-nav">
    <div class="navbar-inner">
     <div class="container">
      <ul class="nav">
       <li class="create">
        <a href="/projects/add/">
         Create
        </a>
       </li>
       <li class="explore">
        <a href="/projects/">
         Explore
        </a>
       </li>
       <li class="about">
        <div class="tabWrapper">
         <a class="tab" href="#">
          <img alt="About Raspberry IO" height="60" src="/static/img/razzy-small.png" width="50"/>
         </a>
         <div class="tabContent">
          <h4>
           Raspberry IO
          </h4>
          Create, Share, Learn, and Teach. Opening the circuitry of the mind with open culture, open source, Python, and the Raspberry Pi.
          <a href="/about-raspberry-io/">
           Learn more 
          </a>
         </div>
        </div>
       </li>
       <li class="learn">
        <a href="/wiki/">
         Learn
        </a>
       </li>
       <li class="community">
        <a href="/community/">
         Community
        </a>
       </li>
      </ul>
     </div>
    </div>
    <footer>
     <ul class="container">
      <li>
       <a class="twitter-follow-button" data-show-count="false" href="https://twitter.com/raspberryio">
        Follow @raspberryio
       </a>
      </li>
      <li>
       2015
       <a href="http://www.python.org/psf/">
        Python Software Foundation
       </a>
      </li>
     </ul>
    </footer>
   </div>
  </div>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js">
  </script>
  <script>
  </script>
  <script src="/static/js/libs/bootstrap.min.js">
  </script>
  <script src="/static/CACHE/js/255271868a25.js" type="text/javascript">
  </script>
  <script src="/static/js/libs/swipe.js">
  </script>
  <script>
   var swipes = []
    $('.swipe').each(function(i, obj) {
            swipes[i] = new Swipe(obj);
        });
  </script>
  <script src="/static/js/libs/google_jsapi.js" type="text/javascript">
  </script>
  <script type="text/javascript">
   google.load("swfobject", "2.1");
            function _run() {
                var videoID = "Ns-Ew8_Qmc8";
                var params = { allowScriptAccess: "always" };
                var atts = { id: "ytPlayer" };
                swfobject.embedSWF("http://www.youtube.com/v/" + videoID + "?version=3&amp;enablejsapi=1&amp;playerapiid=player1", "videoDiv1", "100%", "350", "9", null, null, params, atts);
            };
            google.setOnLoadCallback(_run);
  </script>
  <script type="text/javascript">
   google.load("swfobject", "2.1");
            function _run() {
                var videoID = "Y9ytbmUj3hE";
                var params = { allowScriptAccess: "always" };
                var atts = { id: "ytPlayer" };
                swfobject.embedSWF("http://www.youtube.com/v/" + videoID + "?version=3&amp;enablejsapi=1&amp;playerapiid=player1", "videoDiv3", "100%", "350", "9", null, null, params, atts);
            };
            google.setOnLoadCallback(_run);
  </script>
  <script type="text/javascript">
   google.load("swfobject", "2.1");
            function _run() {
                var videoID = "yHBpWqkM8NU";
                var params = { allowScriptAccess: "always" };
                var atts = { id: "ytPlayer" };
                swfobject.embedSWF("http://www.youtube.com/v/" + videoID + "?version=3&amp;enablejsapi=1&amp;playerapiid=player1", "videoDiv4", "100%", "350", "9", null, null, params, atts);
            };
            google.setOnLoadCallback(_run);
  </script>
  <script type="text/javascript">
   google.load("swfobject", "2.1");
            function _run() {
                var videoID = "2PY6T8gEB4s";
                var params = { allowScriptAccess: "always" };
                var atts = { id: "ytPlayer" };
                swfobject.embedSWF("http://www.youtube.com/v/" + videoID + "?version=3&amp;enablejsapi=1&amp;playerapiid=player1", "videoDiv5", "100%", "350", "9", null, null, params, atts);
            };
            google.setOnLoadCallback(_run);
  </script>
  <script type="text/javascript">
   var publish_project_url = "/projects/publish/naspberry-pi/"
        $(function() {
            var $publish_project = $('#publish-project'),
                $publish = $('#publish');
            $publish_project.click(function(){
                $.post(publish_project_url, function(data) {
                    $publish_project.fadeOut();
                    $publish.children('h4')
                            .html('w00t! This project is now published.')
                            .addClass('done');
                    $publish.delay(1000).fadeOut();
                });
            });
        });
  </script>
  <script type="text/javascript">
   var disqus_shortname = 'raspberryio';
        var disqus_identifier = '25';
        var disqus_url = 'http://raspberry.io/projects/view/naspberry-pi/';

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
  </script>
  <noscript>
   Please enable JavaScript to view the
   <a href="http://disqus.com/?ref_noscript">
    comments powered by Disqus.
   </a>
  </noscript>
  <script type="text/javascript">
   var uvOptions = {};
  (function() {
    var uv = document.createElement('script'); uv.type = 'text/javascript'; uv.async = true;
    uv.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'widget.uservoice.com/xO0Kz9W86KwsD0bRPdwMw.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(uv, s);
  })();
  </script>
 </body>
</html>