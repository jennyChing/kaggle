<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head profile="http://gmpg.org/xfn/11">
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <title>
   JavaScript Tricks And Good Programming Style  alexander kirk   Blog Archive
  </title>
  <meta content="WordPress 4.2.2" name="generator"/>
  <!-- leave this for stats -->
  <link href="http://feeds.feedburner.com/alexanderkirk" rel="alternate" title="RSS 2.0" type="application/rss+xml"/>
  <link href="https://alexander.kirk.at/xmlrpc.php" rel="pingback"/>
  <link href="https://openid.rebam.com/alex" rel="openid.server"/>
  <link href="https://openid.rebam.com/alex" rel="openid2.provider"/>
  <link href="https://alexander.kirk.at/wp-content/themes/alex/style.css" media="screen" rel="stylesheet" type="text/css"/>
  <style media="screen" type="text/css">
   /*	To accomodate differing install paths of WordPress, images are referred only here,
	and not in the wp-layout.css file. If you prefer to use only CSS for colors and what
	not, then go right ahead and delete the following lines, and the image files. */
		
/*	body { background: url("https://alexander.kirk.at/wp-content/themes/alex/images/kubrickbgcolor.jpg"); }	*/
	#page { background: url("https://alexander.kirk.at/wp-content/themes/alex/images/kubrickbg.gif") repeat-y top;  }
	#header { background: url("https://alexander.kirk.at/wp-content/themes/alex/images/kubrickheader.jpg") no-repeat bottom center; }
	#footer { background: url("https://alexander.kirk.at/wp-content/themes/alex/images/kubrickfooter.jpg") no-repeat bottom; border: none;}


	a[href^="http://"], a[href^="https://"] {
		background: url('https://alexander.kirk.at/wp-content/themes/alex/images/external.gif') center right no-repeat;
		    padding-right: 13px;
	}
	a[href^="http://technorati.com"] {
		background: url('https://alexander.kirk.at/wp-content/themes/alex/images/technorati.gif') center left no-repeat;
		    padding-left: 16px;
		    padding-right: 0;
	}

	/* But not to absolute links in this domain */
	a[href^="https://alexander.kirk.at"] {
		background: transparent;
		padding-right: 0px;
	}
  </style>
  <style media="print" type="text/css">
   body {
	font: 11pt Verdana, Arial, Sans-Serif;
}
pre {
	font: 11pt 'Courier New', Courier, Fixed;
}
a {
	color: #000;
}

#sidebarrest, #sidebar, #footer, #comxentform, .navigation {
	display: none;
}
  </style>
  <link href="https://alexander.kirk.at/2015/05/" rel="archives" title="May 2015"/>
  <link href="https://alexander.kirk.at/2015/03/" rel="archives" title="March 2015"/>
  <link href="https://alexander.kirk.at/2015/02/" rel="archives" title="February 2015"/>
  <link href="https://alexander.kirk.at/2014/09/" rel="archives" title="September 2014"/>
  <link href="https://alexander.kirk.at/2014/08/" rel="archives" title="August 2014"/>
  <link href="https://alexander.kirk.at/2014/04/" rel="archives" title="April 2014"/>
  <link href="https://alexander.kirk.at/2013/04/" rel="archives" title="April 2013"/>
  <link href="https://alexander.kirk.at/2013/02/" rel="archives" title="February 2013"/>
  <link href="https://alexander.kirk.at/2012/12/" rel="archives" title="December 2012"/>
  <link href="https://alexander.kirk.at/2012/10/" rel="archives" title="October 2012"/>
  <link href="https://alexander.kirk.at/2012/02/" rel="archives" title="February 2012"/>
  <link href="https://alexander.kirk.at/2012/01/" rel="archives" title="January 2012"/>
  <link href="https://alexander.kirk.at/2011/12/" rel="archives" title="December 2011"/>
  <link href="https://alexander.kirk.at/2011/10/" rel="archives" title="October 2011"/>
  <link href="https://alexander.kirk.at/2011/05/" rel="archives" title="May 2011"/>
  <link href="https://alexander.kirk.at/2011/03/" rel="archives" title="March 2011"/>
  <link href="https://alexander.kirk.at/2011/01/" rel="archives" title="January 2011"/>
  <link href="https://alexander.kirk.at/2010/12/" rel="archives" title="December 2010"/>
  <link href="https://alexander.kirk.at/2010/07/" rel="archives" title="July 2010"/>
  <link href="https://alexander.kirk.at/2010/02/" rel="archives" title="February 2010"/>
  <link href="https://alexander.kirk.at/2009/10/" rel="archives" title="October 2009"/>
  <link href="https://alexander.kirk.at/2009/07/" rel="archives" title="July 2009"/>
  <link href="https://alexander.kirk.at/2008/12/" rel="archives" title="December 2008"/>
  <link href="https://alexander.kirk.at/2008/08/" rel="archives" title="August 2008"/>
  <link href="https://alexander.kirk.at/2008/07/" rel="archives" title="July 2008"/>
  <link href="https://alexander.kirk.at/2008/05/" rel="archives" title="May 2008"/>
  <link href="https://alexander.kirk.at/2007/11/" rel="archives" title="November 2007"/>
  <link href="https://alexander.kirk.at/2007/10/" rel="archives" title="October 2007"/>
  <link href="https://alexander.kirk.at/2007/09/" rel="archives" title="September 2007"/>
  <link href="https://alexander.kirk.at/2007/08/" rel="archives" title="August 2007"/>
  <link href="https://alexander.kirk.at/2007/06/" rel="archives" title="June 2007"/>
  <link href="https://alexander.kirk.at/2006/10/" rel="archives" title="October 2006"/>
  <link href="https://alexander.kirk.at/2006/09/" rel="archives" title="September 2006"/>
  <link href="https://alexander.kirk.at/2006/08/" rel="archives" title="August 2006"/>
  <link href="https://alexander.kirk.at/2006/07/" rel="archives" title="July 2006"/>
  <link href="https://alexander.kirk.at/2006/05/" rel="archives" title="May 2006"/>
  <link href="https://alexander.kirk.at/2006/04/" rel="archives" title="April 2006"/>
  <link href="https://alexander.kirk.at/2006/03/" rel="archives" title="March 2006"/>
  <link href="https://alexander.kirk.at/2006/02/" rel="archives" title="February 2006"/>
  <link href="https://alexander.kirk.at/2006/01/" rel="archives" title="January 2006"/>
  <link href="https://alexander.kirk.at/2005/12/" rel="archives" title="December 2005"/>
  <link href="https://alexander.kirk.at/2005/11/" rel="archives" title="November 2005"/>
  <link href="https://alexander.kirk.at/2005/10/" rel="archives" title="October 2005"/>
  <link href="https://alexander.kirk.at/2005/09/" rel="archives" title="September 2005"/>
  <link href="https://alexander.kirk.at/2005/04/" rel="archives" title="April 2005"/>
  <link href="https://alexander.kirk.at/2005/03/" rel="archives" title="March 2005"/>
  <link href="https://alexander.kirk.at/2005/01/" rel="archives" title="January 2005"/>
  <link href="https://alexander.kirk.at/2004/11/" rel="archives" title="November 2004"/>
  <link href="https://alexander.kirk.at/2004/10/" rel="archives" title="October 2004"/>
  <link href="https://alexander.kirk.at/2004/09/" rel="archives" title="September 2004"/>
  <link href="https://alexander.kirk.at/2006/08/09/javascript-tricks-and-good-programming-style/feed/" rel="alternate" title="alexander kirk  JavaScript Tricks And Good Programming Style Comments Feed" type="application/rss+xml"/>
  <script type="text/javascript">
   window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/72x72\/","ext":".png","source":{"concatemoji":"https:\/\/alexander.kirk.at\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.2.2"}};
			!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&amp;&amp;c.getContext("2d");return d&amp;&amp;d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length&gt;3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&amp;&amp;c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&amp;&amp;c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&amp;&amp;f.twemoji&amp;&amp;(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
  </script>
  <style type="text/css">
   img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
  </style>
  <link href="https://alexander.kirk.at/wp-content/plugins/jetpack/css/jetpack.css?ver=3.5.3" id="jetpack_css-css" media="all" rel="stylesheet" type="text/css"/>
  <link href="https://alexander.kirk.at/wp-content/plugins/factolex-glossary/factolex-glossary.css?ver=1" id="factolex-css" media="all" rel="stylesheet" type="text/css"/>
  <style type="text/css">
   &lt;!--
.factolex-glossary {
	border-color: ;
}
.factolex-glossary, .factolex-glossary .factolex-glossary-content h2 {
	color: ;
	background-color: ;
}
.factolex-glossary .factolex-glossary-header {
		color: ;
		background-color: ;
}
.factolex-glossary .factolex-glossary-header a, .factolex-glossary .factolex-glossary-header a:link, .factolex-glossary .factolex-glossary-header a:visited {
	color: ;
}
.factolex-glossary .factolex-glossary-header a:hover {
	color: ;
}
.factolex-glossary .factolex-glossary-content a, .factolex-glossary .factolex-glossary-content a:link, .factolex-glossary .factolex-glossary-content a:visited {
	color: ;
}
.factolex-glossary .factolex-glossary-content h2  a, .factolex-glossary .factolex-glossary-content h2  a:link, .factolex-glossary .factolex-glossary-content h2  a:visited {
	color: ;
}
.factolex-glossary .factolex-glossary-content a:hover {
	color: ;
}
--&gt;
  </style>
  <script src="https://alexander.kirk.at/wp-includes/js/jquery/jquery.js?ver=1.11.2" type="text/javascript">
  </script>
  <script src="https://alexander.kirk.at/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1" type="text/javascript">
  </script>
  <script src="https://alexander.kirk.at/wp-includes/js/jquery/jquery.form.min.js?ver=3.37.0" type="text/javascript">
  </script>
  <script type="text/javascript">
   /* &lt;![CDATA[ */
var factolexL10N = {"loadingTerms":"Loading terms...","errorLoading":"Either an error occurred when loading the terms from the Factolex API, or your text did not contain any terms available at Factolex.com. Please &lt;a href=%tryagain&gt;try again&lt;\/a&gt; or &lt;a href=%close&gt;close this&lt;\/a&gt;.","explanation":"Click the terms that you want to enlist in your glossary and select the meaning by clicking on it. The term will appear in the box on the right. &lt;a href=%close&gt;Close this&lt;\/a&gt; when you are finished.","add":"Add","tags":"Tags:","alternateSpelling":"alternate spelling","originalSpelling":"main term spelling"};
/* ]]&gt; */
  </script>
  <script src="https://alexander.kirk.at/wp-content/plugins/factolex-glossary/factolex-glossary.js?ver=2" type="text/javascript">
  </script>
  <link href="https://alexander.kirk.at/xmlrpc.php?rsd" rel="EditURI" title="RSD" type="application/rsd+xml"/>
  <link href="https://alexander.kirk.at/wp-includes/wlwmanifest.xml" rel="wlwmanifest" type="application/wlwmanifest+xml"/>
  <link href="https://alexander.kirk.at/2006/08/08/javascript-tricks-and-good-programming-style-original-version/" rel="prev" title="JavaScript Tricks And Good Programming Style  Original Version"/>
  <link href="https://alexander.kirk.at/2006/09/25/phpbb-ajaxified/" rel="next" title="phpBB ajaxified"/>
  <meta content="WordPress 4.2.2" name="generator"/>
  <link href="https://alexander.kirk.at/2006/08/09/javascript-tricks-and-good-programming-style/" rel="canonical"/>
  <link href="https://wp.me/p5gh5K-13" rel="shortlink"/>
  <script type="text/javascript">
   &lt;!--

	            function addEvent(elm, evType, fn, useCapture)
	            // addEvent and removeEvent
	            // cross-browser event handling for IE5+,  NS6 and Mozilla
	            // By Scott Andrew
	            {
	              if (elm.addEventListener){
	                  elm.addEventListener(evType, fn, useCapture);
	                  return true;
	              } else if (elm.attachEvent){
	                  var r = elm.attachEvent("on"+evType, fn);
	                  return r;
	              } else {
	                  // alert("Handler could not be removed");
	              }
	            }
	            function externalLinks() {
	             if (!document.getElementsByTagName) return;
	             var anchors = document.getElementsByTagName("a");
				 var newwindows =0;
	             for (var i=0; i&lt;anchors.length; i++) {
	               var anchor = anchors[i];
	               if (anchor.getAttribute("href") &amp;&amp; anchor.getAttribute("rel") == "external") {
	                        anchor.setAttribute("target","_blank");
							newwindows++;
					}
	             }
	            }

	            addEvent(window, "load", externalLinks);

	            //--&gt;
  </script>
  <style type="text/css">
   img#wpstats{display:none}
  </style>
  <!-- Jetpack Open Graph Tags -->
  <meta content="article" property="og:type"/>
  <meta content="JavaScript Tricks And Good Programming Style" property="og:title"/>
  <meta content="https://alexander.kirk.at/2006/08/09/javascript-tricks-and-good-programming-style/" property="og:url"/>
  <meta content="Note that this is an updated version. Original version can be found here. Thanks to the commenters I have updated this post with some better tricks. In a loose series I'd like to point out a few of..." property="og:description"/>
  <meta content="2006-08-09T09:39:34+00:00" property="article:published_time"/>
  <meta content="2007-06-21T17:03:47+00:00" property="article:modified_time"/>
  <meta content="https://alexander.kirk.at/author/alex/" property="article:author"/>
  <meta content="alexander kirk" property="og:site_name"/>
  <meta content="https://s0.wp.com/i/blank.jpg" property="og:image"/>
  <meta content="en_US" property="og:locale"/>
  <meta content="@akirk" name="twitter:site"/>
  <meta content="summary" name="twitter:card"/>
  <script src="/js/sortable.js">
  </script>
 </head>
 <body>
  <div id="page">
   <div id="header">
   </div>
   <div class="sidebar" id="sidebartop">
    <h1>
     <a href="https://alexander.kirk.at">
      alexander kirk
     </a>
    </h1>
    <div id="sidebarrest">
     <div class="description">
     </div>
     <ul>
      <li>
       <form action="/index.php" id="searchform" method="get">
        <div>
         <input id="s" name="s" type="text" value=""/>
         <input id="searchsubmit" type="submit" value="Search"/>
        </div>
       </form>
      </li>
      <li>
       <p>
        This blog is about web application development -- and related topics.
        <br/>
        <br/>
        Alexander Kirk (MSc in CS) is a web application programmer situated in Vienna, Austria.
       </p>
      </li>
      <li>
       <h2>
        Job Status
       </h2>
       <p>
        <b>
         Employed at
         <a href="http://automattic.com/about-us/">
          Automattic
         </a>
        </b>
        <br/>
        the people who create WordPress.
       </p>
      </li>
      <li class="pagenav">
       <h2>
        Pages
       </h2>
       <ul>
        <li class="page_item page-item-17">
         <a href="https://alexander.kirk.at/about/">
          About
         </a>
        </li>
        <li class="page_item page-item-238">
         <a href="https://alexander.kirk.at/contact/">
          Contact
         </a>
        </li>
        <li class="page_item page-item-23">
         <a href="https://alexander.kirk.at/curriculum-vitae/">
          Curriculum Vitae Alexander Kirk
         </a>
        </li>
        <li class="page_item page-item-29">
         <a href="https://alexander.kirk.at/diploma-thesis/">
          Diploma Thesis
         </a>
        </li>
        <li class="page_item page-item-53 page_item_has_children">
         <a href="https://alexander.kirk.at/projects/">
          Projects
         </a>
         <ul class="children">
          <li class="page_item page-item-419">
           <a href="https://alexander.kirk.at/projects/bandnews/">
            Bandnews
           </a>
          </li>
          <li class="page_item page-item-492">
           <a href="https://alexander.kirk.at/projects/blummy/">
            blummy
           </a>
          </li>
          <li class="page_item page-item-504">
           <a href="https://alexander.kirk.at/projects/colorillo/">
            Colorillo
           </a>
          </li>
          <li class="page_item page-item-478">
           <a href="https://alexander.kirk.at/projects/computerlexikon/">
            Computerlexikon
           </a>
          </li>
          <li class="page_item page-item-498">
           <a href="https://alexander.kirk.at/projects/conota/">
            Conota
           </a>
          </li>
          <li class="page_item page-item-483">
           <a href="https://alexander.kirk.at/projects/thinkery/">
            thinkery
           </a>
          </li>
          <li class="page_item page-item-413">
           <a href="https://alexander.kirk.at/projects/wizlite/">
            Wizlite
           </a>
          </li>
         </ul>
        </li>
       </ul>
      </li>
      <li>
       <h2>
        Recent Links
       </h2>
       <ul>
        <li>
         <span class="rssLinkListItemTitle">
          <a href="http://blog.thinkery.me/post/44703978158/hello-android-get-the-thinkery-app-from-the-google" title="Extracted Page: http://blog.thinkery.me/post/44703978158/hello-android-get-the-thinkery-app-from-the-googleAfter tuning the last bits were happy to announce the release of our thinkery Android App. It is now available in Googles Play Store!The app is free to use for locally storing your though">
           Hello Android! Get the thinkery App from the Google Play Store now!
          </a>
         </span>
        </li>
        <li>
         <span class="rssLinkListItemTitle">
          <a href="http://lifehacker.com/5915644/download-any-file-or-web-page-by-pasting-its-url-into-firefoxs-download-window" title="Extracted Page: http://lifehacker.com/5915644/download-any-file-or-web-page-by-pasting-its-url-into-firefoxs-download-windowIf you need to download a file, web page, or other URL to your hard drive quickly, you can actually do so in Firefox with a quick and simple keystroke.Perhaps you want to downl">
           Download Any File or Web Page by Pasting Its URL Into Firefox's Download Window
          </a>
         </span>
        </li>
        <li>
         <span class="rssLinkListItemTitle">
          <a href="http://www.devthought.com/2012/02/17/npm-tricks/" title="Extracted Page: http://www.devthought.com/2012/02/17/npm-tricks/I decided to put together a little list of tips and tricks related to NPM you might not know about, that come from my experience working with it daily, in both production and development.Dev dependenciesMake sure packages that only need">
           NPM tricks | Guillermo Rauch's Devthought
          </a>
         </span>
        </li>
        <li>
         <span class="rssLinkListItemTitle">
          <a href="http://spin.atomicobject.com/2014/08/04/debian-ubuntu-security-updates/" title="Extracted Page: http://spin.atomicobject.com/2014/08/04/debian-ubuntu-security-updates/Security patches for libraries and tools come out quite frequently. Just subscribe to any Linux distribution security list, and youll find that security updates are released with astounding frequency, sometimes">
           Debian and Ubuntu Automatic Security Updates
          </a>
         </span>
        </li>
        <li>
         <span class="rssLinkListItemTitle">
          <a href="http://www.youtube.com/watch?v=NK-T_t166TY" title="">
           YouTube: KLM Lost &amp; Found service
          </a>
         </span>
        </li>
       </ul>
      </li>
      <li>
       <h2>
        Archives
       </h2>
       <ul>
        <li>
         <a href="https://alexander.kirk.at/2015/05/">
          May 2015
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2015/03/">
          March 2015
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2015/02/">
          February 2015
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2014/09/">
          September 2014
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2014/08/">
          August 2014
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2014/04/">
          April 2014
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2013/04/">
          April 2013
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2013/02/">
          February 2013
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2012/12/">
          December 2012
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2012/10/">
          October 2012
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2012/02/">
          February 2012
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2012/01/">
          January 2012
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2011/12/">
          December 2011
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2011/10/">
          October 2011
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2011/05/">
          May 2011
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2011/03/">
          March 2011
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2011/01/">
          January 2011
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2010/12/">
          December 2010
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2010/07/">
          July 2010
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2010/02/">
          February 2010
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2009/10/">
          October 2009
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2009/07/">
          July 2009
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2008/12/">
          December 2008
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2008/08/">
          August 2008
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2008/07/">
          July 2008
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2008/05/">
          May 2008
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2007/11/">
          November 2007
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2007/10/">
          October 2007
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2007/09/">
          September 2007
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2007/08/">
          August 2007
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2007/06/">
          June 2007
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2006/10/">
          October 2006
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2006/09/">
          September 2006
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2006/08/">
          August 2006
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2006/07/">
          July 2006
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2006/05/">
          May 2006
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2006/04/">
          April 2006
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2006/03/">
          March 2006
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2006/02/">
          February 2006
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2006/01/">
          January 2006
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2005/12/">
          December 2005
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2005/11/">
          November 2005
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2005/10/">
          October 2005
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2005/09/">
          September 2005
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2005/04/">
          April 2005
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2005/03/">
          March 2005
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2005/01/">
          January 2005
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2004/11/">
          November 2004
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2004/10/">
          October 2004
         </a>
        </li>
        <li>
         <a href="https://alexander.kirk.at/2004/09/">
          September 2004
         </a>
        </li>
       </ul>
      </li>
      <li>
       <h2>
        Categories
       </h2>
       <ul>
        <li class="cat-item cat-item-3">
         <a href="https://alexander.kirk.at/category/code/">
          code
         </a>
         <ul class="children">
          <li class="cat-item cat-item-10">
           <a href="https://alexander.kirk.at/category/code/ajax/">
            ajax
           </a>
          </li>
          <li class="cat-item cat-item-5">
           <a href="https://alexander.kirk.at/category/code/linux/">
            linux
           </a>
          </li>
          <li class="cat-item cat-item-21">
           <a href="https://alexander.kirk.at/category/code/mongodb/">
            mongodb
           </a>
          </li>
          <li class="cat-item cat-item-11">
           <a href="https://alexander.kirk.at/category/code/php/">
            php
           </a>
          </li>
         </ul>
        </li>
        <li class="cat-item cat-item-1">
         <a href="https://alexander.kirk.at/category/misc/">
          misc
         </a>
        </li>
        <li class="cat-item cat-item-20">
         <a href="https://alexander.kirk.at/category/observations/">
          observations
         </a>
        </li>
        <li class="cat-item cat-item-2">
         <a href="https://alexander.kirk.at/category/personal/">
          personal
         </a>
        </li>
        <li class="cat-item cat-item-8">
         <a href="https://alexander.kirk.at/category/projects/">
          projects
         </a>
         <ul class="children">
          <li class="cat-item cat-item-9">
           <a href="https://alexander.kirk.at/category/projects/bandnews/">
            bandnews
           </a>
          </li>
          <li class="cat-item cat-item-13">
           <a href="https://alexander.kirk.at/category/projects/blummy/">
            blummy
           </a>
          </li>
          <li class="cat-item cat-item-19">
           <a href="https://alexander.kirk.at/category/projects/colorillo/">
            colorillo
           </a>
          </li>
          <li class="cat-item cat-item-14">
           <a href="https://alexander.kirk.at/category/projects/wizlite/">
            wizlite
           </a>
          </li>
         </ul>
        </li>
        <li class="cat-item cat-item-12">
         <a href="https://alexander.kirk.at/category/web/">
          web
         </a>
        </li>
       </ul>
      </li>
      <li class="linkcat" id="linkcat-16">
       <h2>
        Links
       </h2>
       <ul>
        <li>
         <a href="http://blummy.com/">
          Blummy
         </a>
        </li>
        <li>
         <a href="http://www.computerlexikon.com/">
          Computerlexikon.Com
         </a>
        </li>
        <li>
         <a href="http://www.factolex.com/" title="Factolex">
          fact lexicon
         </a>
        </li>
       </ul>
      </li>
      <li>
       <h2>
        Meta
       </h2>
       <ul>
        <li>
         <a href="https://alexander.kirk.at/wp-login.php">
          Log in
         </a>
        </li>
        <li>
         <a href="http://validator.w3.org/check/referer" title="This page validates as XHTML 1.0 Transitional">
          Valid
          <abbr title="eXtensible HyperText Markup Language">
           XHTML
          </abbr>
         </a>
        </li>
        <li>
         <a href="http://gmpg.org/xfn/">
          <abbr title="XHTML Friends Network">
           XFN
          </abbr>
         </a>
        </li>
        <li>
         <a href="http://wordpress.org/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">
          WordPress
         </a>
        </li>
       </ul>
      </li>
      <!--li&gt;&lt;a href="http://feeds.feedburner.com/alexanderkirk"&gt;&lt;img src="http://feeds.feedburner.com/~fc/alexanderkirk?bg=CCCCCC&amp;fg=000000&amp;anim=0" height="26" width="88" style="border:0" alt="" /&gt;&lt;/a&gt;&lt;/li-->
     </ul>
    </div>
   </div>
   <div class="narrowcolumn" id="content">
    <script type="text/javascript">
     /* &lt;![CDATA[ */
document.title="JavaScript Tricks And Good Programming Style";
/* ]]&gt; */
    </script>
    <div class="navigation">
     <div class="alignleft">
      
      <a href="https://alexander.kirk.at/2006/08/08/javascript-tricks-and-good-programming-style-original-version/" rel="prev">
       JavaScript Tricks And Good Programming Style  Original Version
      </a>
     </div>
     <div class="alignright">
      <a href="https://alexander.kirk.at/2006/09/25/phpbb-ajaxified/" rel="next">
       phpBB ajaxified
      </a>
      
     </div>
    </div>
    <div class="post" id="post-65">
     <h1>
      <a href="https://alexander.kirk.at/2006/08/09/javascript-tricks-and-good-programming-style/" rel="bookmark" title="Permanent Link: JavaScript Tricks And Good Programming Style">
       JavaScript Tricks And Good Programming Style
      </a>
     </h1>
     <small>
      Wednesday, August 9th, 2006 at 10:39 +0000 (UTC) by Alexander Kirk
     </small>
     <div class="entrytext">
      <p>
       Note that this is an updated version.
       <a href="https://alexander.kirk.at/2006/08/08/javascript-tricks-and-good-programming-style-original-version/">
        Original version can be found here
       </a>
       .
      </p>
      <p>
       Thanks to the commenters I have updated this post with some better tricks.
      </p>
      <p>
       In a loose series I'd like to point out a few of them. As I am currently mostly programming in JavaScript, I will write most of my samples in that language; also some of the tricks I mention only apply to JavaScript. But most of them apply to most programming languages around.
      </p>
      <p>
       <b id="optional_parameter_and_default_value">
        Optional parameter and default value
       </b>
       <a href="https://alexander.kirk.at/2006/08/09/javascript-tricks-and-good-programming-style/#optional_parameter_and_default_value">
        #
       </a>
       <br/>
       When defining a function in PHP you can declare optional parameters by giving them a default value (something like
       <tt>
        function myfunc($optional = "default value") {}
       </tt>
       ).
      </p>
      <p>
       In JavaScript it works a bit differently:
       <br/>
       <code>
        <br/>
        var myfunc = function(optional) {
        <br/>
        if (typeof optional == "undefined") {
        <br/>
        optional = "default value";
        <br/>
        }
        <br/>
        alert(optional);
        <br/>
        }
        <br/>
       </code>
      </p>
      <p>
       This is a clean method to do it. Basically I pretty much recommend the use of
       <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Operators:Special_Operators:typeof_Operator">
        typeof
       </a>
       operator.
      </p>
      <p>
       <b>
        update
       </b>
       <br/>
       <a href="http://mg.to/">
        Michael Geary
       </a>
       (
       <a href="https://alexander.kirk.at/2006/08/09/javascript-tricks-and-good-programming-style/#comment-4367">
        his comment
       </a>
       ) pointed out this solution that I like.
      </p>
      <p>
       <code>
        <br/>
        var myfunc = function(optional) {
        <br/>
        if (optional === undefined) {
        <br/>
        optional = "default value";
        <br/>
        }
        <br/>
        alert(optional);
        <br/>
        }
        <br/>
       </code>
      </p>
      <p>
       The solutions mentioned (
       <tt>
        if (!optional)
       </tt>
       ,
       <tt>
        optional = optional || "default value"
       </tt>
       , and the like) have problems when you pass
       <tt>
        0
       </tt>
       (zero) or
       <tt>
        null
       </tt>
       as an argument.
      </p>
      <p>
       Commenters said that the
       <tt>
        0/null
       </tt>
       problem is not one as this would not be the situation to use it. I would not say so. In an AJAX world where you do serialization back to a server/database often a 0/1 to false/true mapping has to be established. For default values it is important.
      </p>
      <p>
       In case you just need to make sure that an object is not
       <tt>
        null
       </tt>
       I do prefer the mentioned
       <br/>
       <code>
        <br/>
        myobject = myobject || { animal: "dog" };
        <br/>
       </code>
       <br/>
       <b>
        end update
       </b>
      </p>
      <p>
       <b id="parameter_hints">
        Parameters Hints
       </b>
       <a href="https://alexander.kirk.at/2006/08/09/javascript-tricks-and-good-programming-style/#parameter_hints">
        #
       </a>
       <br/>
       The larger your app gets, the more functions you get which you would use throughout the app. It also creates a problem with maintenance. As each function can contain multiple arguments it is not unlikely that you forget what those parameters were for (especially for boolean variables) or mix up their sequence (I am especially gifted for that).
      </p>
      <p>
       So what I do is this:
       <b>
        update
       </b>
       substitute variables with comments
       <b>
        end update
       </b>
       <br/>
       <code>
        <br/>
        var myfunc2 = function(title, enable_notify) {
        <br/>
        // [...]
        <br/>
        }
        <br/>
        myfunc2(/* title */ "test", /* enable_notify */ true);
        <br/>
       </code>
      </p>
      <p>
       This piece of code relies on the functionality of programming languages that the return value of an assignment is the assigned value. (This is something that you should also maintain in your app, for example with database storage calls, give the assignment value as a return value. It's minimal effort and you might be glad at some point that you did it).
      </p>
      <p>
       If you do this you can see at any point in the code, what parameters the function takes. Of course this is not always useful, but especially for functions with many parameters it gets very useful.
      </p>
      <p>
       <b id="search_javascript_documentation">
        Search JavaScript documentation
       </b>
       <a href="https://alexander.kirk.at/2006/08/09/javascript-tricks-and-good-programming-style/#search_javascript_documentation">
        #
       </a>
       <br/>
       When I need some documentation for JavaScript I use the mozilla development center (mdc). To quickly search for
       <tt>
        toLocaleString
       </tt>
       , I use Google:
       <a href="http://google.com/search?q=toLocaleString+mdc">
        http://google.com/search?q=toLocaleString+mdc
       </a>
      </p>
      <p>
       As I am a German speaker I also use the excellent (though a bit out-dated) JavaScript section
       <a href="http://www.selfhtml.org/">
        SelfHTML
       </a>
       . I use the downloaded version on my own computer for even faster access.
      </p>
      <p>
       <b id="self_variable">
        The
        <tt>
         self
        </tt>
        variable
       </b>
       <a href="https://alexander.kirk.at/2006/08/09/javascript-tricks-and-good-programming-style/#self_variable">
        #
       </a>
      </p>
      <p>
       <b>
        update
       </b>
       <br/>
        should be avoided. Even if someone like
       <a href="http://www.crockford.com/">
        Douglas Crockford
       </a>
       (creator of JSON)
       <a href="http://www.crockford.com/javascript/private.html">
        uses it and calls it
        <tt>
         that
        </tt>
       </a>
       .
      </p>
      <p>
       Let me quote Jack Slocum who put it best:
       <br/>
       <code>
        <br/>
        // used to fix "this" prob with Function.apply to give call proper scope
        <br/>
        // nice method to put in your lib
        <br/>
        function delegate(instance, method) {
        <br/>
        return function() {
        <br/>
        return method.apply(instance, arguments);
        <br/>
        }
        <br/>
        }
       </code>
      </p>
      <p>
       function Animal(name) {
       <br/>
       this.name = name;
       <br/>
       this.hello = function() {
       <br/>
       alert("hello " + this.name);
       <br/>
       }
       <br/>
       }
      </p>
      <p>
       var dog = new Animal("Jake");
       <br/>
       var button = {
       <br/>
       onclick : delegate(dog, dog.hello)
       <br/>
       };
       <br/>
       button.onclick();
       <br/>
      </p>
      <p>
       I removed my code as it can be considered obsolete by this.
       <br/>
       <b>
        end update
       </b>
      </p>
      <p>
       <b id="reduce_indentation_amount ">
        Reduce indentation amount
       </b>
       <a href="https://alexander.kirk.at/2006/08/09/javascript-tricks-and-good-programming-style/#reduce_indentation_amount">
        #
       </a>
      </p>
      <p>
       <b>
        update
       </b>
       <br/>
       I have removed the code because it leads people into believing something different than I meant. So let me put it differently:
      </p>
      <p>
       What I am opposing is white space deserts. If you have many levels of indentation then probably something is wrong.
      </p>
      <p>
       If a
       <tt>
        for
       </tt>
       loop only applies to a handful of cases, don't indent the whole loop in an
       <tt>
        if
       </tt>
       clause but rather catch the other cases at the top.
       <br/>
       Often it is advisable to move longer functionality to a function (there is a good reason for that name) that you call throughout a loop.
       <br/>
       <b>
        end update
       </b>
      </p>
      <p>
       That's all for now, to be continued. Further readings on this blog:
      </p>
      <ul>
       <li>
        <a href="https://alexander.kirk.at/2006/03/02/a-better-understanding-of-javascript/">
         A better understanding of JavaScript
        </a>
       </li>
       <li>
        <a href="https://alexander.kirk.at/2006/05/18/misuse-of-the-array-object-in-javascript/">
         Misuse of the Array Object in JavaScript
        </a>
       </li>
      </ul>
      <p>
       <b>
        update
       </b>
       <br/>
       Eventhough some commenters disagreed with what I said, I think posts like this are very much needed in the bloggersphere. Even if they are not free of errors on the first take, great people can help improve them. I would appreciate if more people took that risk.
       <br/>
       <b>
        end update
       </b>
      </p>
      <p>
       <a href="http://technorati.com/tag/javascript" rel="tag">
        javascript
       </a>
       ,
       <a href="http://technorati.com/tag/tricks" rel="tag">
        tricks
       </a>
       ,
       <a href="http://technorati.com/tag/coding+practices" rel="tag">
        coding practices
       </a>
      </p>
     </div>
    </div>
    <!-- You can start editing here. -->
    <h3 id="comments">
     42 Responses to JavaScript Tricks And Good Programming Style
    </h3>
    <ol class="commentlist">
     <li class="alt" id="comment-4306">
      <cite>
       <a class="url" href="http://ajaxian.com/archives/javascript-tricks-and-good-programming-style" rel="external nofollow">
        Ajaxian  JavaScript Tricks And Good Programming Style
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4306" title="">
        August 9th, 2006 at 22:28 +0000 (UTC)
       </a>
      </small>
      <p>
       [...] A wise man once said that one can never have too many Javascript hints and tricks. Well, okay - so maybe I made the man up, but the tips are real and there are some over in this new post from Alexander Kirk.   I have been programming for about 10 years now, and I am always longing for improving my code. Throughout time I added a few habits that I consider to be good practices and increase the quality of my code. [...]
      </p>
     </li>
     <li class="" id="comment-4310">
      <cite>
       <a class="url" href="http://blog.slimc.com" rel="external nofollow">
        Cody Swann
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4310" title="">
        August 10th, 2006 at 00:00 +0000 (UTC)
       </a>
      </small>
      <p>
       What version of safari will puke on your optional example? 2.x seems to work OK.
      </p>
      <p>
       Still, I like to use
      </p>
      <p>
       var myFunc = function(message)
       <br/>
       {
       <br/>
       message = message || 'HI THERE';
       <br/>
       ...
       <br/>
       }
      </p>
     </li>
     <li class="alt" id="comment-4311">
      <cite>
       <a class="url" href="http://anjanb.wordpress.com" rel="external nofollow">
        anjan bacchu
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4311" title="">
        August 10th, 2006 at 00:32 +0000 (UTC)
       </a>
      </small>
      <p>
       hi there,
      </p>
      <p>
       I know that you use wordpress but is there a way you can make your blog entries cleanly printable -- the only nice forum/blog site that I've seen which prints real clean is InfoQ -- I can just do a PRINT on the page wihtout printing the NAVIGATION bar on the side or any extraneous junk.
      </p>
      <p>
       br,
       <br/>
       `a
      </p>
     </li>
     <li class="" id="comment-4314">
      <cite>
       Martin Bialasinski
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4314" title="">
        August 10th, 2006 at 00:53 +0000 (UTC)
       </a>
      </small>
      <p>
       I don't like the "Parameter Hints" method, because it pollutes the name space, as you wrote. Using an option object gives you the hints without this disadvantage, and it also make the sequence of parameters irrelevant.
      </p>
      <p>
       function myfunc2(options){
      </p>
      <p>
       }
      </p>
      <p>
       myfunc2({title: "test", enable_notify: true});
      </p>
     </li>
     <li class="alt" id="comment-4317">
      <cite>
       Michael
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4317" title="">
        August 10th, 2006 at 01:49 +0000 (UTC)
       </a>
      </small>
      <p>
       In my experience, memory leaks are caused by referencing browser objects in a closure function.  The only way to de-reference is to restart the browser.
      </p>
     </li>
     <li class="" id="comment-4320">
      <cite>
       TI
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4320" title="">
        August 10th, 2006 at 02:03 +0000 (UTC)
       </a>
      </small>
      <p>
       RE: Parameters Hints
      </p>
      <p>
       I'm starting to get into an idea suggested by (I think Alex Russel) within the dojotoolkit.
      </p>
      <p>
       var myfunc2 = function(/*string*/ title, /*boolean*/ enable_notify) {
       <br/>
       // [...]
       <br/>
       }
      </p>
      <p>
       This feels overly verbose at times but I also work in Java so much of my time that it doesn't feel unfamiliar. You can also throw anything (keeping consistent) such as /* DOM Node */ as the def to help keep things clear.
      </p>
     </li>
     <li class="alt" id="comment-4323">
      <cite>
       <a class="url" href="http://www.philfreo.com/" rel="external nofollow">
        Phil Freo
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4323" title="">
        August 10th, 2006 at 03:04 +0000 (UTC)
       </a>
      </small>
      <p>
       In reference to "the self variable"... it is not a good idea to use the word "self" as the variable.  Douglas Crockford himself uses "that" instead of "self" now, because self can be confused in some browsers as a synonym for the global "window" object.
      </p>
     </li>
     <li class="" id="comment-4326">
      <cite>
       kourge
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4326" title="">
        August 10th, 2006 at 04:30 +0000 (UTC)
       </a>
      </small>
      <p>
       Like Cody said, it much more simple to use the boolean OR operator to stuff optional parameters with a default value.
       <br/>
       function myFunc(option) {
       <br/>
       option = option || "default value";
       <br/>
       }
      </p>
      <p>
       In Ruby, you can do it even easier:
       <br/>
       option ||= "default value"
      </p>
      <p>
       Doug Crockford also purposed ||= to be one of JavaScript's native operators.
      </p>
     </li>
     <li class="alt" id="comment-4327">
      <cite>
       <a class="url" href="http://mrclay.org/" rel="external nofollow">
        Steve Clay
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4327" title="">
        August 10th, 2006 at 05:09 +0000 (UTC)
       </a>
      </small>
      <p>
       A simple help in JS is to memorize which things are "falsy":
       <a href="http://simon.incutio.com/slides/2006/etech/javascript/js-reintroduction-notes.html#othertypes" rel="nofollow">
        http://simon.incutio.com/slides/2006/etech/javascript/js-reintroduction-notes.html#othertypes
       </a>
       <br/>
       Really that whole article is reqd. reading.
      </p>
     </li>
     <li class="" id="comment-4328">
      <cite>
       <a class="url" href="http://www.jslibrary.org" rel="external nofollow">
        Mark Kahn
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4328" title="">
        August 10th, 2006 at 05:15 +0000 (UTC)
       </a>
      </small>
      <p>
       Personally I use a "prepare arguments" function in all my code.  Put simply, it allows me to call a function with either the normal arguments or with an object containing them all, ie:
      </p>
      <p>
       myFunction(varA, varB, varC) OR myFunction({varA: 5, varB: 6, varC: 7})
      </p>
      <p>
       I find this to be very useful on functions that end up having a dozen arguments or whatnot.  Each function simply has a call to the prepArgs function:
      </p>
      <p>
       var A = prepArgs(arguments, ['ns', 'ex', 'r', 'p', 'x'], ['ns'], _, 'load');if(!A) return;
      </p>
      <p>
       this has the list of variables (ns, ex, ...), the required variables (ns), arguments that must be arrays and the function name it came from (used for throwing an error).  Arguments are then accessed with A.ns, etc instead of just "ns"
      </p>
      <p>
       function if anyone is interested, needs to be modified to work outside of my framework:
      </p>
      <p>
       function prepArgs(){
       <br/>
       var args = arguments[0];
       <br/>
       var nams = arguments[1];
       <br/>
       var reqs = arguments[2];
       <br/>
       var arys = arguments[3];
       <br/>
       var calf = arguments[4];
      </p>
      <p>
       if(args[0] &amp;&amp; args[0].callee) return prepArgs(args[0]);
      </p>
      <p>
       var result = [], n, aN=isArray(nams);
      </p>
      <p>
       if(args[0] &amp;&amp; args[0][0] &amp;&amp; (args[0][0]===JSLibrary._$)){
       <br/>
       for(n in args[0][1]){
       <br/>
       result[n] = args[0][1][n];
       <br/>
       }
       <br/>
       if(aN){
       <br/>
       for(var i=nams.length-1; i&gt;=0; i--){
       <br/>
       result[i] = result[names[i]];
       <br/>
       }
       <br/>
       }
       <br/>
       }else if(aN){
       <br/>
       for(var i=nams.length-1; i&gt;=0; i--){
       <br/>
       result[nams[i]] = result[i] = args[i];
       <br/>
       }
       <br/>
       }else{
       <br/>
       for(var i=0; i=0; i--){
       <br/>
       if(!result[reqs[i]]){
       <br/>
       if(calf) throwError(JSLibrary.missingArgs.supplant({f: calf}));
       <br/>
       return false;
       <br/>
       }
       <br/>
       }
       <br/>
       }
       <br/>
       if(arys){
       <br/>
       for(var i=arys.length-1; i&gt;=0; i--){
       <br/>
       result[arys[i]] = $A[result[arys[i]]];
       <br/>
       }
       <br/>
       }
      </p>
      <p>
       return result;
       <br/>
       }
      </p>
     </li>
     <li class="alt" id="comment-4336">
      <cite>
       <a class="url" href="http://www.jpkeisala.com" rel="external nofollow">
        Jukka-Pekka Keisala
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4336" title="">
        August 10th, 2006 at 07:56 +0000 (UTC)
       </a>
      </small>
      <p>
       Good post, nice tips regarding indent and special thanks for mdc link. Mozilla Developer Center was one of the forgotten sites on my browser but now it's my top resource for JS.
      </p>
     </li>
     <li class=" commentOfficialUser" id="comment-4338">
      <cite>
       <a class="url" href="http://alexander.kirk.at/" rel="external nofollow">
        Alexander Kirk
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4338" title="">
        August 10th, 2006 at 08:57 +0000 (UTC)
       </a>
      </small>
      <p>
       Cody, kourge, Steve Clay: I've set an example up where I try to demonstrate the problems with your solution. Mostly it reduces to the fact that you cannot use zero (0) as valid parameter value:
       <a href="http://alexander.kirk.at/area7/2006/08/10/" rel="nofollow">
        http://alexander.kirk.at/area7/2006/08/10/
       </a>
      </p>
     </li>
     <li class="alt commentOfficialUser" id="comment-4339">
      <cite>
       <a class="url" href="http://alexander.kirk.at/" rel="external nofollow">
        Alexander Kirk
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4339" title="">
        August 10th, 2006 at 09:15 +0000 (UTC)
       </a>
      </small>
      <p>
       anjan: Thanks for the notice. Is it better now?
      </p>
     </li>
     <li class="" id="comment-4340">
      <cite>
       <a class="url" href="http://hantl.info" rel="external nofollow">
        Michal Hantl
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4340" title="">
        August 10th, 2006 at 09:26 +0000 (UTC)
       </a>
      </small>
      <p>
       Nice post, but i dislike your indent sugestion. When you've got (or anybody else) 10 nested ifs, there is something wrong with your code.
      </p>
     </li>
     <li class="alt commentOfficialUser" id="comment-4341">
      <cite>
       <a class="url" href="http://alexander.kirk.at/" rel="external nofollow">
        Alexander Kirk
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4341" title="">
        August 10th, 2006 at 09:34 +0000 (UTC)
       </a>
      </small>
      <p>
       Martin, Mark: this was what I considered, too. The downside of this is that now also the names of the arguments are prone to spelling errors. Also it adds quite some overhead.
      </p>
      <p>
       Michal: As I said, 10 levels is about other people's code. I like the indentation method for just 1 level of ifs. It's much cleaner.
      </p>
      <p>
       TI: this does look indeed more verbose but it achieves what I am trying without polluting the namespace. The difference between what you wrote and my point, is that I don't want to have type hinting, but rather a hint for the meaning :)
      </p>
     </li>
     <li class="" id="comment-4346">
      <cite>
       <a class="url" href="http://blog.cotasson.info/" rel="external nofollow">
        cypher
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4346" title="">
        August 10th, 2006 at 13:05 +0000 (UTC)
       </a>
      </small>
      <p>
       Nice...
      </p>
      <p>
       Regarding your second trick, I guess prefixing your variable by something meaningful about its "type" should do the trick.
      </p>
      <p>
       In other words :
       <br/>
       myfunc2(title = "test", enable_notify = true);
       <br/>
       can be easily replaced by :
       <br/>
       myfunc2(strTest, blnEnableNotify);
      </p>
      <p>
       No much hassle involved...
      </p>
     </li>
     <li class="alt" id="comment-4347">
      <cite>
       <a class="url" href="http://geekgeekgeek.antithetical.org/" rel="external nofollow">
        Doug Mayo-Wells
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4347" title="">
        August 10th, 2006 at 13:09 +0000 (UTC)
       </a>
      </small>
      <blockquote>
       <p>
        Cody, kourge, Steve Clay: I've set an example up where I try to demonstrate the problems with your solution.
       </p>
      </blockquote>
      <p>
       This was bugging me too. I'm now combining an options object with a typeof test for values that could reasonably be "falsey."
       <br/>
       <a href="http://geekgeekgeek.antithetical.org/2006/06/passing-false-when-the-default-is-true/" rel="nofollow">
        http://geekgeekgeek.antithetical.org/2006/06/passing-false-when-the-default-is-true/
       </a>
      </p>
     </li>
     <li class="" id="comment-4350">
      <cite>
       <a class="url" href="http://hao2lian.f2o.org/ploidy/" rel="external nofollow">
        shadytrees
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4350" title="">
        August 10th, 2006 at 15:03 +0000 (UTC)
       </a>
      </small>
      <p>
       Is there any downside to |optional == null| instead of |typeof optional = 'undefined'|? It wouldn't succumb to the 0 edge case or Safari's alleged deep, emotional issues.
      </p>
     </li>
     <li class="alt" id="comment-4352">
      <cite>
       <a class="url" href="http://www.tedchoward.com" rel="external nofollow">
        Ted
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4352" title="">
        August 10th, 2006 at 15:09 +0000 (UTC)
       </a>
      </small>
      <p>
       Personally I'm not a big fan of "continue" and "break". I think it obfuscates the flow of logic. Using your example above, why not do this:
      </p>
      <p>
       var arr = ["dog", "cat"];
       <br/>
       var action = 'greet';
       <br/>
       for(i = 0, ln = arr.length; i &lt; ln; i++) {
       <br/>
       animal = arr[i];
       <br/>
       if (animal == "cat") alert("hello " + animal);
       <br/>
       }
      </p>
      <p>
       Here we have a one line if condition, so no extra indention is necessary.  Plus without the "continue" the code is easier to read.
      </p>
     </li>
     <li class=" commentOfficialUser" id="comment-4353">
      <cite>
       <a class="url" href="http://alexander.kirk.at/" rel="external nofollow">
        Alexander Kirk
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4353" title="">
        August 10th, 2006 at 15:14 +0000 (UTC)
       </a>
      </small>
      <p>
       Ted, I have shortend the example. Of course in that case it would make more sense, not to use continue. But in a longer loop it might.
       <br/>
       As always with programming: don't religiously stick to such rules. Just be consistent.
      </p>
      <p>
       Also, for continue it could make more sense to define it positively and negate the whole thing. This is often easier to understand.
       <br/>
       <code>
        <br/>
        if (!(animal == 'cat')) continue;
        <br/>
       </code>
      </p>
      <p>
       PS: I hope it's ok for you that I have merged your comments into one.
      </p>
     </li>
     <li class="alt commentOfficialUser" id="comment-4354">
      <cite>
       <a class="url" href="http://alexander.kirk.at/" rel="external nofollow">
        Alexander Kirk
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4354" title="">
        August 10th, 2006 at 15:22 +0000 (UTC)
       </a>
      </small>
      <p>
       shadytrees, your example works quite well, and I think it is mostly what you want. I have extended my sample page:
       <a href="http://alexander.kirk.at/area7/2006/08/10/" rel="nofollow">
        http://alexander.kirk.at/area7/2006/08/10/
       </a>
       <br/>
       As you can see, the only case that it handles kindof incorrectly is when you try to pass null as an argument. I agree that you would probably don't want to do that anyway, most of the time.
       <br/>
       Still the way I do it, provides a clean way to detect if the parameter was passed or not. In any case that I have tested so far.
      </p>
     </li>
     <li class="" id="comment-4356">
      <cite>
       <a class="url" href="http://brian.maybeyoureinsane.net/blog/" rel="external nofollow">
        Brian Donovan
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4356" title="">
        August 10th, 2006 at 15:39 +0000 (UTC)
       </a>
      </small>
      <p>
       I just tried running "!null" in Safari 2.0.4 and got "true". Which version has the problem you mentioned? Also, another way to handle the named arguments thing is by passing a hash rather than a list of arguments. This is how Prototype does things:
      </p>
      <p>
       var myfunc2 = function(options) {
       <br/>
       // [...]
       <br/>
       }
       <br/>
       myfunc2({title: "test", enable_notify: true});
      </p>
      <p>
       The disadvantage here is that you have no explicit list in the function declaration and the extra {}. The advantage is that you don't pollute the global scope with lots of variables.
      </p>
     </li>
     <li class="alt commentOfficialUser" id="comment-4357">
      <cite>
       <a class="url" href="http://alexander.kirk.at/" rel="external nofollow">
        Alexander Kirk
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4357" title="">
        August 10th, 2006 at 15:52 +0000 (UTC)
       </a>
      </small>
      <p>
       Brian, you are right. I am not able to reproduce it anymore ;) (if you read the comments above you can see that this is not the only benefit of the construct).
       <br/>
       I think I was referring to a difference between Firefox and Safari where you could write something in the form of
       <tt>
        if (!x)
       </tt>
       and it would work in Firefox but not Safari. I can't recall it now but I will post on my blog as soon as I come across it again.
      </p>
     </li>
     <li class="" id="comment-4367">
      <cite>
       <a class="url" href="http://mg.to/" rel="external nofollow">
        Michael Geary
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4367" title="">
        August 10th, 2006 at 23:01 +0000 (UTC)
       </a>
      </small>
      <p>
       Alex, about the "arg = arg || 'howdy';" or "arg = arg || { foo:123 };" notation... It's not really a problem that it doesn't work if arg is 0, because you don't use it in a situation like that. It's mostly useful for optional objects or arrays, so there is no ambiguity around the "false" value. It also can be useful for optional strings, as long as you're aware that "" will be treated as "false".
      </p>
      <p>
       About "self" vs. "that": What browser is confused by "self"? It is not a reserved word or anything magic. It is simply a property of the window object. In other words, the browser has done the equivalent of:
      </p>
      <p>
       window.self = window;
      </p>
      <p>
       If you use a variable named "self" inside a function, it should not be confused with this global "self". Perhaps Doug's choice of "that" is just to avoid *programmer* confusion?
      </p>
      <p>
       About the "typeof foo == 'undefined'", I prefer doing this:
      </p>
      <p>
       // At the top of the .js file, to support very old browsers
       <br/>
       window.undefined = window.undefined;
      </p>
      <p>
       Now you can code this in any browser:
      </p>
      <p>
       if( foo === undefined ) whatever;
      </p>
      <p>
       In many cases, however, you don't really need to distinguish between null and undefined values, so this is sufficient:
      </p>
      <p>
       if( foo ==null ) whatever;
      </p>
     </li>
     <li class="alt" id="comment-4373">
      <cite>
       <a class="url" href="http://www.petergasston.co.uk/2006/08/links-for-2006-08-10" rel="external nofollow">
        The Inside Of My Head  links for 2006-08-10
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4373" title="">
        August 11th, 2006 at 09:53 +0000 (UTC)
       </a>
      </small>
      <p>
       [...] JavaScript Tricks And Good Programming Style Good practice to increase the quality of your code. (tags: webdev javascript) [...]
      </p>
     </li>
     <li class="" id="comment-4375">
      <cite>
       <a class="url" href="http://geekfreak.wordpress.com/2006/08/11/links-for-2006-08-11/" rel="external nofollow">
        [[ the sirens of titan ]]  Blog Archive  links for 2006-08-11
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4375" title="">
        August 11th, 2006 at 10:18 +0000 (UTC)
       </a>
      </small>
      <p>
       [...] alexander kirk  Blog Archive  JavaScript Tricks And Good Programming Style some tips on good practice for javascript programming. (tags: javascript programming article)      Posted by geekfreak Filed in Bookmarks [...]
      </p>
     </li>
     <li class="alt" id="comment-4376">
      <cite>
       Jack Slocum
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4376" title="">
        August 11th, 2006 at 11:44 +0000 (UTC)
       </a>
      </small>
      <p>
       While I applaud the effort trying to enlighten newer developers, I hope no one who ever works on code around me follows these tips. Every code block in every tip is bad. I know that sounds harsh, but it's true.
      </p>
      <p>
       Tip 1 - Optional parameter and default value: "This is a clean method to do it. "
       <br/>
       Not true, that's a hideous way to do it. It's ok for one parameter, but if you had more than one your functions would start with multiple if + typeof statements and quickly become ugly. Fun you complain about indentation, but have no problem with multiple ifs and typeofs.
      </p>
      <p>
       Tip 2 - Parameters Hints:
       <br/>
       Talk about polluting the global namespace with unneeded variables. The proper way to do parameter hints:
      </p>
      <p>
       myfunc2(/*title*/ "test", /*enable_notify*/ true);
      </p>
      <p>
       Tip 3: Ok this one isn't bad. People should definitely read the docs.
      </p>
      <p>
       Tip 4 - The self variable
       <br/>
       "self" is a global variable already in Internet Explorer. Either way the code written is bad anyway. That is hack to get around writing bad javascript code. I have seen it all different way including the popular var _this = this.
       <br/>
       The proper way to do what you wanted:
      </p>
      <p>
       // used to fix "this" prob with Function.apply to give call proper scope
       <br/>
       // nice method to put in your lib
       <br/>
       function delegate(instance, method) {
       <br/>
       return function() {
       <br/>
       return method.apply(instance, arguments);
       <br/>
       }
       <br/>
       }
      </p>
      <p>
       function Animal(name) {
       <br/>
       this.name = name;
       <br/>
       this.hello = function() {
       <br/>
       alert("hello " + this.name);
       <br/>
       }
       <br/>
       }
      </p>
      <p>
       var dog = new Animal("Jake");
       <br/>
       var button = {
       <br/>
       onclick : delegate(dog, dog.hello);
       <br/>
       };
       <br/>
       button.onclick();
      </p>
      <p>
       Tip 5 - Reduce indentation amount:
       <br/>
       This is the worst tip of all. You are actually suggesting people to write ugly code. Common coding practices exist for a reason. People indent for a reason. These things make code more readable and easier to maintain. Control structures are indented to make it obvious where you are in the flow. Continue and break statements destroy that and should be used sparingly.
      </p>
      <p>
       What's funny is the example code block you gave is the recommended standard for Java and C#. It is a common format almost all developers will be used to.
      </p>
      <p>
       From the code and recommendations in this article I'd put your personal Javascript level as a 5 on a scale of 10. I'd devote more time to reading tutorials rather than writing them.
      </p>
     </li>
     <li class="" id="comment-4383">
      <cite>
       JT...
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4383" title="">
        August 11th, 2006 at 15:57 +0000 (UTC)
       </a>
      </small>
      <p>
       Jack
      </p>
      <p>
       var button = {
       <br/>
       onclick : delegate(dog, dog.hello);
      </p>
     </li>
     <li class="alt" id="comment-4396">
      <cite>
       Jack Slocum
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4396" title="">
        August 11th, 2006 at 21:42 +0000 (UTC)
       </a>
      </small>
      <p>
       Actually it's:
       <br/>
       var button = {
       <br/>
       onclick : delegate(dog, dog.hello)
       <br/>
       };
      </p>
      <p>
       I just edited the posted example and didn't see the extra semi-colon.
      </p>
     </li>
     <li class="" id="comment-4403">
      <cite>
       <a class="url" href="http://micahgoulart.deviantart.com" rel="external nofollow">
        Micah Goulart
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4403" title="">
        August 12th, 2006 at 06:37 +0000 (UTC)
       </a>
      </small>
      <p>
       How about this for the loop?
      </p>
      <p>
       var arr = ["dog", "cat"];
       <br/>
       for(i = 0, ln = arr.length; i
      </p>
     </li>
     <li class="alt" id="comment-4408">
      <cite>
       <a class="url" href="http://dean.edwards.name/" rel="external nofollow">
        Dean Edwards
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4408" title="">
        August 12th, 2006 at 14:32 +0000 (UTC)
       </a>
      </small>
      <p>
       I agree with Jack Slocum. Some of these tips are just plain bad. Complete your own learning before you presume to teach.
      </p>
     </li>
     <li class="" id="comment-4425">
      <cite>
       <a class="url" href="http://commontags.com" rel="external nofollow">
        Andrea Martines
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4425" title="">
        August 13th, 2006 at 10:47 +0000 (UTC)
       </a>
      </small>
      <p>
       I disagree with Jack and Dean: even when a post from an untrusted source contains some bad practices, often the right way is pointed out in some of the comments, together with interesting links. So, this kind of discussions enrich anyway my knowledge. And it's also useful in order to distinguish between trusted (as Dean's blog) and untrusted sources.
      </p>
     </li>
     <li class="alt" id="comment-4429">
      <cite>
       <a class="url" href="http://www.webmasterlibre.com/2006/08/13/adelgazar-firefox-y-buenas-practicas-para-javascript/" rel="external nofollow">
        Webmaster Libre  Archivo del weblog  Adelgazar firefox y buenas prcticas para Javascript
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4429" title="">
        August 13th, 2006 at 12:51 +0000 (UTC)
       </a>
      </small>
      <p>
       [...] de 2006 a las 13:51 y est archivada en: Enlaces. Puedes dejar un comentario, o enviar un trackback desde tusitio. [...]
      </p>
     </li>
     <li class="" id="comment-4432">
      <cite>
       <a class="url" href="http://www.alexking.org/blog/2006/08/13/around-the-web/" rel="external nofollow">
        alexking.org: Blog &gt; Around the web
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4432" title="">
        August 13th, 2006 at 15:28 +0000 (UTC)
       </a>
      </small>
      <p>
       [...] alexander kirk - JavaScript Tricks And Good Programming Style [...]
      </p>
     </li>
     <li class="alt commentOfficialUser" id="comment-4439">
      <cite>
       <a class="url" href="http://alexander.kirk.at/" rel="external nofollow">
        Alexander Kirk
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4439" title="">
        August 13th, 2006 at 20:45 +0000 (UTC)
       </a>
      </small>
      <p>
       Jack, Dean: Thanks for the input. I have clarified some of my points in my post. Eventhough you seem to disagree with most of what I say I think it is important to lean out of the window in order to get things right.
      </p>
     </li>
     <li class="" id="comment-4503">
      <cite>
       <a class="url" href="http://www.timdown.co.uk" rel="external nofollow">
        Tim Down
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4503" title="">
        August 17th, 2006 at 01:42 +0000 (UTC)
       </a>
      </small>
      <p>
       Michael Geary said:
      </p>
      <p>
       "Now you can code this in any browser:
      </p>
      <p>
       if( foo === undefined ) whatever;"
      </p>
      <p>
       Now, this is unfortunately not true. IE5 on Windows does not support undefined as an object (the error you get tells you that in fact 'undefined' is undefined). There may be other browsers that don't support it. IE5 on Windows is enough on its own to put me off, given that I still have to write code to work on it.
      </p>
     </li>
     <li class="alt" id="comment-4504">
      <cite>
       <a class="url" href="http://www.timdown.co.uk" rel="external nofollow">
        Tim Down
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4504" title="">
        August 17th, 2006 at 01:49 +0000 (UTC)
       </a>
      </small>
      <p>
       ... and now I've read the rest of Michael's post, saw
      </p>
      <p>
       window.undefined = window.undefined;
      </p>
      <p>
       ... and retract everything I just said. Sorry everyone.
      </p>
     </li>
     <li class="" id="comment-4509">
      <cite>
       <a class="url" href="http://www.ejerlejlighed-aarhus.dk" rel="external nofollow">
        Peter
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4509" title="">
        August 17th, 2006 at 08:42 +0000 (UTC)
       </a>
      </small>
      <p>
       I like wordpress, but think that they have missed a few things. I have started to use Joomla instead. It gives me more features.
      </p>
      <p>
       But thats just my opinion....
      </p>
     </li>
     <li class="alt" id="comment-4562">
      <cite>
       <a class="url" href="http://www.roks.xmgfree.com/blog/2006/08/19/javascript-tricks-and-good-programming-style/" rel="external nofollow">
        JavaScript Tricks And Good Programming Style  Dees-Planet! Blog
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4562" title="">
        August 19th, 2006 at 20:40 +0000 (UTC)
       </a>
      </small>
      <p>
       [...] Optional parameter and default valueParameters HintsSearch JavaScript documentationThe self variableReduce indentation amount | read here in detail [...]
      </p>
     </li>
     <li class="" id="comment-4709">
      <cite>
       <a class="url" href="http://jackslocum.com/yui/2006/08/16/getting-started-making-the-scripts-from-this-site-work/" rel="external nofollow">
        Jack Slocums Blog  Blog Archive  Getting Started - Making the scripts from this site work
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4709" title="">
        August 27th, 2006 at 16:10 +0000 (UTC)
       </a>
      </small>
      <p>
       [...] The second function createDelegate() is even more useful. It is used to solve the problem of what the scope (this) is set to in a method call. Ill use a modified version of the example I previously gave on Alexander Kirks blog: [...]
      </p>
     </li>
     <li class="alt" id="comment-4876">
      <cite>
       <a class="url" href="http://www.willkoca.com/2006/08/10/links-for-2006-08-10/" rel="external nofollow">
        links for 2006-08-10 at willkoca
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-4876" title="">
        September 1st, 2006 at 06:00 +0000 (UTC)
       </a>
      </small>
      <p>
       [...] alexander kirk  Blog Archive  JavaScript Tricks And Good Programming Style (tags: javascript) [...]
      </p>
     </li>
     <li class="" id="comment-6511">
      <cite>
       <a class="url" href="http://inner.geek.nz/archives/2006/10/05/delicious-4/" rel="external nofollow">
        inner.geek  Blog Archive  My del.icio.us bookmarks this . year?
       </a>
      </cite>
      Says:
      <br/>
      <small class="commentmetadata">
       <a href="#comment-6511" title="">
        October 5th, 2006 at 02:17 +0000 (UTC)
       </a>
      </small>
      <p>
       [...] alexander kirk  Blog Archive  JavaScript Tricks And Good Programming Style  (tagged: code coding design dev free javascript js learning method programming reference scripting software standards style teaching tech tools tips web web2.0 webdesign webdev bestpractices) [...]
      </p>
     </li>
    </ol>
    <div id="comxentform">
     <p>
      <img alt="Subscribe" height="10" src="https://alexander.kirk.at/wp-content/themes/alex/images/subscribe.gif" style="margin-left: 2px; margin-right: 2px" width="10"/>
      <a href="https://alexander.kirk.at/2006/08/09/javascript-tricks-and-good-programming-style/feed/">
       Subscribe to comments on this post.
      </a>
     </p>
    </div>
   </div>
   <hr/>
   <div id="footer">
    <p>
     alexander kirk weblog is proudly powered by
     <a href="http://wordpress.org">
      WordPress
     </a>
     |
     <a href="http://feeds.feedburner.com/alexanderkirk">
      Subscribe (RSS)
     </a>
     <!-- 61 queries. 0.523 seconds. -->
     |
     <a href="http://www.wkoecg.at/Web/Ecg.aspx?FirmaID=078cd522-8a22-4171-83c1-14adc5722eb5">
      Informationen gem  5 E-Commerce-Gesetz (ECG)
     </a>
    </p>
   </div>
  </div>
  <!-- Gorgeous design by Michael Heilemann - http://binarybonsai.com/kubrick/ -->
  <div style="display:none">
  </div>
  <script src="https://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201529" type="text/javascript">
  </script>
  <script src="https://secure.gravatar.com/js/gprofiles.js?ver=2015Julaa" type="text/javascript">
  </script>
  <script type="text/javascript">
   /* &lt;![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]&gt; */
  </script>
  <script src="https://alexander.kirk.at/wp-content/plugins/jetpack/modules/wpgroho.js?ver=4.2.2" type="text/javascript">
  </script>
  <script async="" defer="" src="https://stats.wp.com/e-201529.js" type="text/javascript">
  </script>
  <script type="text/javascript">
   _stq = window._stq || [];
	_stq.push([ 'view', {v:'ext',j:'1:3.5.3',blog:'77760632',post:'65',tz:'2',srv:'alexander.kirk.at'} ]);
	_stq.push([ 'clickTrackerInit', '77760632', '65' ]);
  </script>
 </body>
</html>
<!-- Dynamic page generated in 0.507 seconds. -->
