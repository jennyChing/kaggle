<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <title>
   perliaq - infrequently asked questions about Perl
  </title>
  <link href="mailto:mjd@plover.com" rev="made"/>
 </head>
 <body style="background-color: white">
  <p>
   <a name="__index__">
   </a>
  </p>
  <!-- INDEX BEGIN -->
  <ul>
   <li>
    <a href="#name">
     NAME
    </a>
   </li>
   <li>
    <a href="#description">
     DESCRIPTION
    </a>
   </li>
   <li>
    <a href="#distribution">
     DISTRIBUTION
    </a>
   </li>
   <li>
    <a href="#author_and_copyright_information">
     Author and Copyright Information
    </a>
   </li>
   <li>
    <a href="#how_do_i_determine_the_shoe_size_of_a_directory">
     How do I determine the shoe size of a directory?
    </a>
   </li>
   <li>
    <a href="#how_come_exec()_doesn't_return">
     How come
     <code>
      exec()
     </code>
     doesn't return?
    </a>
   </li>
   <li>
    <a href="#how_do_i_clear_the_screen">
     How do I clear the screen?
    </a>
   </li>
   <li>
    <a href="#how_do_i_compute_the_intersection_of_two_lists">
     How do I compute the intersection of two lists?
    </a>
   </li>
   <li>
    <a href="#how_do_i_trap_control_characters_/_signals">
     How do I trap control characters / signals?
    </a>
   </li>
   <li>
    <a href="#i_am_a_boy_scout._how_can_i_use_perl_in_my_daytoday_scout_business">
     I am a boy scout.  How can I use Perl in my day-to-day scout business?
    </a>
   </li>
   <li>
    <a href="#why_does_print_reverse_dog_print_dog,_but">
     Why does
     <code>
      print reverse "dog"
     </code>
     print
     <code>
      dog
     </code>
     , but
    </a>
   </li>
   <li>
    <a href="#how_can_i_force_perl_to_treat_a_number_as_a_string">
     How can I force Perl to treat a number as a string?
    </a>
   </li>
   <li>
    <a href="#i_tried_getpeername_and_it_gave_me_some_weird_error_message.">
     I tried
     <code>
      getpeername
     </code>
     and it gave me some weird error message.
    </a>
   </li>
   <li>
    <a href="#what_is_the_mode_argument_to_mkdir_used_for">
     What is the
     <code>
      MODE
     </code>
     argument to
     <code>
      mkdir
     </code>
     used for?
    </a>
   </li>
   <li>
    <a href="#how_can_i_find_the_creation_date_of_a_file">
     How can I find the creation date of a file?
    </a>
   </li>
   <li>
    <a href="#how_do_i_convert_a_string_to_a_number">
     How do I convert a string to a number?
    </a>
   </li>
   <li>
    <a href="#how_do_i_convert_a_number_to_a_string">
     How do I convert a number to a string?
    </a>
   </li>
   <li>
    <a href="#how_can_i_tell_if_a_string_is_a_number">
     How can I tell if a string is a number?
    </a>
   </li>
   <li>
    <a href="#how_do_i_find_the_largest_element_in_an_array">
     How do I find the largest element in an array?
    </a>
   </li>
   <li>
    <a href="#how_can_i_get_just_the_first_half_of_a_long_string">
     How can I get just the first half of a long string?
    </a>
   </li>
   <li>
    <a href="#someone_told_me_that_tr/x//d_would_be_faster_than_s/x//g.">
     Someone told me that
     <code>
      tr/x//d
     </code>
     would be faster than
     <code>
      s/x//g
     </code>
     .
    </a>
   </li>
   <li>
    <a href="#how_do_i_get_the_length_of_a_variable">
     How do I get the length of a variable?
    </a>
   </li>
   <li>
    <a href="#how_do_i_write_oo_programs_in_perl">
     How do I write OO programs in Perl?
    </a>
   </li>
   <li>
    <a href="#how_do_i_differentiate_my_object_oriented_perl_scripts_from_other_perl_scripts">
     How do I differentiate my Object Oriented Perl scripts from other perl scripts?
    </a>
   </li>
   <li>
    <a href="#how_do_i_get_my_program_to_pause_for_five_seconds">
     How do I get my program to pause for five seconds?
    </a>
   </li>
   <li>
    <a href="#how_do_i_sort_a_hash">
     How do I sort a hash?
    </a>
   </li>
   <li>
    <a href="#how_do_i_sort_a_hash_numerically">
     How do I sort a hash numerically?
    </a>
   </li>
   <li>
    <a href="#how_do_i_sort_a_hash_by_value">
     How do I sort a hash by value?
    </a>
   </li>
   <li>
    <a href="#how_do_i_sort_an_array_in_reverse">
     How do I sort an array in reverse?
    </a>
   </li>
   <li>
    <a href="#how_do_i_sort_a_2d_array">
     How do I sort a 2-D array?
    </a>
   </li>
   <li>
    <a href="#is_perl_year2000_compliant">
     Is Perl Year-2000 compliant?
    </a>
   </li>
   <li>
    <a href="#what's_a_regular_expression_to_replace_09:23:53_08oct98_with_thu_oct_8_09:23:53_1998">
     What's a regular expression to replace
     <code>
      09:23:53 08-OCT-98
     </code>
     with
     <code>
      Thu Oct  8 09:23:53 1998
     </code>
     ?
    </a>
   </li>
   <li>
    <a href="#what's_this_s///ee_thing_i_keep_hearing_about">
     What's this
     <code>
      s///ee
     </code>
     thing I keep hearing about?
    </a>
   </li>
   <li>
    <a href="#how_do_i_get_tomorrow's_date">
     How do I get tomorrow's date?
    </a>
   </li>
   <li>
    <a href="#what's_the_difference_betwen_fork()_and_split()">
     What's the difference betwen
     <code>
      fork()
     </code>
     and
     <code>
      split()
     </code>
     ?
    </a>
   </li>
   <li>
    <a href="#can_i_get_a_yacc_grammar_for_the_perl_language">
     Can I get a YACC grammar for the Perl language?
    </a>
   </li>
   <li>
    <a href="#what_are_all_those_$@%*_signs_for">
     What are all those $@%* signs for?
    </a>
   </li>
   <li>
    <a href="#do_i_always_have_to_quote_my_strings">
     Do I always have to quote my strings?
    </a>
   </li>
   <li>
    <a href="#how_do_i_block_warnings">
     How do I block warnings?
    </a>
   </li>
   <li>
    <a href="#why_do_perl_operators_have_different_precedence_than_c_operators">
     Why do Perl operators have different precedence than C operators?
    </a>
   </li>
   <li>
    <a href="#how_can_i_find_out_whether_a_number_is_odd">
     How can I find out whether a number is odd?
    </a>
   </li>
   <li>
    <a href="#how_can_i_find_out_whether_a_number_is_even">
     How can I find out whether a number is even?
    </a>
   </li>
   <li>
    <a href="#how_can_i_round_up_a_number">
     How can I round up a number?
    </a>
   </li>
   <li>
    <a href="#how_do_i_decrypt_a_string_that_i_encrypted_with_crypt()">
     How do I decrypt a string that I encrypted with
     <code>
      crypt()
     </code>
     ?
    </a>
   </li>
   <li>
    <a href="#how_do_i_get_my_perl_program_to_run_faster">
     How do I get my perl program to run faster?
    </a>
   </li>
   <li>
    <a href="#how_do_i_get_my_perl_program_to_use_less_memory">
     How do I get my perl program to use less memory?
    </a>
   </li>
   <li>
    <a href="#perldoc_isn't_running_properly._where_can_i_find_the_documentation">
     Perldoc isn't running properly.  Where can I find the documentation?
    </a>
   </li>
   <li>
    <a href="#i_have_a_lot_of_bourne_shell_scripts_i'd_like_to_convert_to_perl...">
     I have a lot of Bourne shell scripts I'd like to convert to Perl...
    </a>
   </li>
   <li>
    <a href="#i've_got_a_c_program_i_want_to_translate_to_perl...">
     I've got a C program I want to translate to Perl...
    </a>
   </li>
   <li>
    <a href="#what's_the_difference_between_single_quoted_strings_and_double_quoted_strings">
     What's the difference between single quoted strings and double quoted strings?
    </a>
   </li>
   <li>
    <a href="#what's_the_difference_between_q()_and_qw()">
     What's the difference between
     <code>
      q()
     </code>
     and
     <code>
      qw()
     </code>
     ?
    </a>
   </li>
  </ul>
  <!-- INDEX END -->
  <hr/>
  <p>
  </p>
  <h1>
   <a name="name">
    NAME
   </a>
  </h1>
  <p>
   perliaq - infrequently asked questions about Perl ($Date: 2008/01/29 16:51:33 $)
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="description">
    DESCRIPTION
   </a>
  </h1>
  <p>
   I didn't want to put this section in, but
   <code>
    pod2man
   </code>
   is a fascist.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="distribution">
    DISTRIBUTION
   </a>
  </h1>
  <p>
   This document is in the public domain.
  </p>
  <p>
   You can get a copy from
   <a href="http://perl.plover.com/IAQ/">
    http://perl.plover.com/IAQ/
   </a>
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="author_and_copyright_information">
    Author and Copyright Information
   </a>
  </h1>
  <p>
   Primary author: Mark-Jason Dominus, with contributions from a cast of
thousands, including Abigail, Adam Turoff, Bill Guindon, Kurt
Starsinic, Nat Torkington, and Roderick Schertler.
  </p>
  <p>
   To contribute, send mail to
   <code>
    mjd-perl-iaq@plover.com
   </code>
   .
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_determine_the_shoe_size_of_a_directory_i_tried_c&lt;e&gt;_but_that_didn't_work.">
    How do I determine the shoe size of a directory? 
I tried
    <code>
     -e
    </code>
    but that didn't work.
   </a>
  </h1>
  <p>
   Note that notions of shoe size vary from country to country.  See the
   <em>
    perllocale
   </em>
   man page for complete discussion.
   <code>
    -e
   </code>
   only returns a
boolean value that says whether or not the directory wears a wide
shoe.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_come_exec()_doesn't_return">
    How come
    <code>
     exec()
    </code>
    doesn't return?
   </a>
  </h1>
  <p>
   Have you considered using a mouthwash?
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_clear_the_screen">
    How do I clear the screen?
   </a>
  </h1>
  <p>
   Use this function:
  </p>
  <pre>
   sub clear_the_screen {
          print $\ x 1_000_000;
        }
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_compute_the_intersection_of_two_lists">
    How do I compute the intersection of two lists?
   </a>
  </h1>
  <p>
   Just apply De Morgan's identity:
  </p>
  <pre>
   A intersection B = complement ((complement A) union (complement B))
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_trap_control_characters_/_signals">
    How do I trap control characters / signals?
   </a>
  </h1>
  <p>
   Look into the
   <code>
    Net::*
   </code>
   modules, available from CPAN.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="i_am_a_boy_scout._how_can_i_use_perl_in_my_daytoday_scout_business_for_example,_helping_little_old_ladies_across_the_street.">
    I am a boy scout.  How can I use Perl in my day-to-day scout business?
For example,  helping little old ladies across the street.
   </a>
  </h1>
  <p>
   See the
   <em>
    perllol
   </em>
   man page.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="why_does_print_reverse_dog_print_dog,_but_c&lt;print_ucfirst_reverse_dog&gt;_prints_c&lt;god&gt;">
    Why does
    <code>
     print reverse "dog"
    </code>
    print
    <code>
     dog
    </code>
    , but
    <code>
     print ucfirst reverse "dog"
    </code>
    prints
    <code>
     God
    </code>
    ?
   </a>
  </h1>
  <p>
   Because the name of the Deity must always be capitalized.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_can_i_force_perl_to_treat_a_number_as_a_string">
    How can I force Perl to treat a number as a string?
   </a>
  </h1>
  <p>
   Try using a whip.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="i_tried_getpeername_and_it_gave_me_some_weird_error_message.">
    I tried
    <code>
     getpeername
    </code>
    and it gave me some weird error message.
   </a>
  </h1>
  <p>
   If you got `some weird error' the problem is with your frobobnitz.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="what_is_the_mode_argument_to_mkdir_used_for">
    What is the
    <code>
     MODE
    </code>
    argument to
    <code>
     mkdir
    </code>
    used for?
   </a>
  </h1>
  <p>
   Set it to a true value to create a directory with ice cream on top.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_can_i_find_the_creation_date_of_a_file">
    How can I find the creation date of a file?
   </a>
  </h1>
  <p>
   Use this function:
  </p>
  <pre>
   sub creation_date {
          use FileHandle;
          my $filename = shift or die "Usage: &amp;creation_date(filename)\n";
          my $fh1 = new FileHandle;
          open $fh1, "&lt; $filename" or return undef;
          unlink $filename or return undef;
          my $fh2 = new FileHandle;
          open $fh2, "&gt; $filename" or return undef;
          print $fh2 &lt;$fh1&gt;;
          time;
        }
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_convert_a_string_to_a_number">
    How do I convert a string to a number?
   </a>
  </h1>
  <p>
   Use this
   <code>
    atoi
   </code>
   function:
  </p>
  <pre>
   sub atoi {
          my $t;
          foreach my $d (split(//, shift())) {
            $t = $t * 10 + $d;
          }
          return $t;
        }
  </pre>
  <pre>
   $number = atoi("123");
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_convert_a_number_to_a_string">
    How do I convert a number to a string?
   </a>
  </h1>
  <p>
   Use
   <code>
    sprintf
   </code>
   :
  </p>
  <pre>
   $string = sprintf("%f", 123.45);
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_can_i_tell_if_a_string_is_a_number">
    How can I tell if a string is a number?
   </a>
  </h1>
  <p>
   The simplest method is:
  </p>
  <pre>
   if ($string == "$string") { 
          # It is a number
        }
  </pre>
  <p>
   Note the use of the
   <code>
    ==
   </code>
   operator to compare the string to its
numeric value.  However, this approach is dangerous because the
   <code>
    $string
   </code>
   might contain arbitrary code such as
   <code>
    @{[system
"rm -rf /"]}
   </code>
   which would be executed as a result of the
interpolation process.  For safety, use this regular expression:
  </p>
  <pre>
   if ($var =~ /(?=.)M{0,3}(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})/) {
    print "$var contains a number.\b";
  }
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_find_the_largest_element_in_an_array">
    How do I find the largest element in an array?
   </a>
  </h1>
  <p>
   Write a
   <code>
    foreach
   </code>
   loop to scan the elements one at a time, and stop
when you get to the largest one.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_can_i_get_just_the_first_half_of_a_long_string">
    How can I get just the first half of a long string?
   </a>
  </h1>
  <p>
   Use
  </p>
  <pre>
   $string x .5;
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="someone_told_me_that_tr/x//d_would_be_faster_than_s/x//g._is_this_true_why">
    Someone told me that
    <code>
     tr/x//d
    </code>
    would be faster than
    <code>
     s/x//g
    </code>
    . 
Is this true?  Why?
   </a>
  </h1>
  <p>
   <code>
    tr///
   </code>
   is faster on multiprocessor machines because it can be
vectorized, so that each
   <code>
    x
   </code>
   is removed by a different processor.
   <code>
    s///
   </code>
   , however, must always be performed sequentially.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_get_the_length_of_a_variable">
    How do I get the length of a variable?
   </a>
  </h1>
  <p>
   Use
  </p>
  <pre>
   length('$variable');
  </pre>
  <p>
   to find out how long a variable is.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_write_oo_programs_in_perl">
    How do I write OO programs in Perl?
   </a>
  </h1>
  <p>
   Put
   <code>
    -00
   </code>
   on your
   <code>
    #!
   </code>
   line, like this:
  </p>
  <pre>
   #!/usr/bin/perl -00 -w
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_differentiate_my_object_oriented_perl_scripts_from_other_perl_scripts">
    How do I differentiate my Object Oriented Perl scripts from other perl scripts?
   </a>
  </h1>
  <p>
   Just as C programmers use
   <code>
    .cpp
   </code>
   as an extension for their object
oriented C programs, many perl programmers use
   <code>
    .ppp
   </code>
   for their
object oriented Perl programs.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_get_my_program_to_pause_for_five_seconds">
    How do I get my program to pause for five seconds?
   </a>
  </h1>
  <p>
   Use the
   <code>
    sleep
   </code>
   function, like this:
  </p>
  <pre>
   use POSIX ":sys_wait_h";
  { local($SIG{CHLD}=sub{wait};
    my $start = time;
    if (fork) { sleep } else { 1 while (time - $start &lt; 5); exit }
  }
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_sort_a_hash">
    How do I sort a hash?
   </a>
  </h1>
  <pre>
   %sorted = sort %hash;
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_sort_a_hash_numerically">
    How do I sort a hash numerically?
   </a>
  </h1>
  <pre>
   %sorted = sort {$a &lt;=&gt; $b} %hash;
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_sort_a_hash_by_value">
    How do I sort a hash by value?
   </a>
  </h1>
  <p>
   As usual in Perl, there's More Than One Way to Do it.  Use either of:
  </p>
  <pre>
   %sorted = sort values %hash;
      %sorted = sort {$hash{$a} &lt;=&gt; $hash{$b}} %hash;
  </pre>
  <p>
   The first one is more efficient, because it uses Perl's built-in
   <code>
    values
   </code>
   function.  But the second one will work even if you have a
user-defined function named
   <code>
    values
   </code>
   .
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_sort_an_array_in_reverse">
    How do I sort an array in reverse?
   </a>
  </h1>
  <pre>
   @sorted = sort reverse @array;
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_sort_a_2d_array">
    How do I sort a 2-D array?
   </a>
  </h1>
  <p>
   You need to use a data structure that is more suited to your problem.
2-D Arrays, being rectangular, can be difficult to sort.  If you
instead use a triangular data structure, such as a heap, you need only
hold it with the point downward, and the largest elements will
naturally settle in the point.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="is_perl_year2000_compliant">
    Is Perl Year-2000 compliant?
   </a>
  </h1>
  <p>
   Even better!  New with version 5.005, Perl is Year-2013 compliant.
This represents a 13-year improvement over other software that is
merely year-2000 compliant.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="what's_a_regular_expression_to_replace_09:23:53_08oct98_with_thu_oct_8_09:23:53_1998">
    What's a regular expression to replace
    <code>
     09:23:53 08-OCT-98
    </code>
    with
    <code>
     Thu Oct  8 09:23:53 1998
    </code>
    ?
   </a>
  </h1>
  <pre>
   s{.*}{Thu Oct  8 09:23:53 1998}
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="what's_this_s///ee_thing_i_keep_hearing_about">
    What's this
    <code>
     s///ee
    </code>
    thing I keep hearing about?
   </a>
  </h1>
  <p>
   You use
   <code>
    /ee
   </code>
   when you need to operate on a directory with an extra-wide shoe.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_get_tomorrow's_date">
    How do I get tomorrow's date?
   </a>
  </h1>
  <p>
   Use this function:
  </p>
  <pre>
   sub tomorrow_date {
          sleep 86_400; 
          return localtime();
        }
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="what's_the_difference_betwen_fork()_and_split()">
    What's the difference betwen
    <code>
     fork()
    </code>
    and
    <code>
     split()
    </code>
    ?
   </a>
  </h1>
  <p>
   <code>
    fork()
   </code>
   only works on Unix systems, so you should use
   <code>
    split()
   </code>
   for
maximum portability.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="can_i_get_a_yacc_grammar_for_the_perl_language">
    Can I get a YACC grammar for the Perl language?
   </a>
  </h1>
  <p>
   Sorry, but as you must surely be aware by now, the only animals
supported by Perl are ruminants such as camels and llamas.  However,
Yacc support may be forthcoming with version 5.007.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="what_are_all_those_$@%*_signs_for">
    What are all those $@%* signs for?
   </a>
  </h1>
  <p>
   Watch your $@*$!% mouth, buddy!
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="do_i_always_have_to_quote_my_strings">
    Do I always have to quote my strings?
   </a>
  </h1>
  <p>
   Only when they are actual quotations.  For example, in
  </p>
  <pre>
   $quote = "To be, or not to be?  That is the question.";
  </pre>
  <p>
   the quotes are required, but in
  </p>
  <pre>
   $name = "Larry";
  </pre>
  <p>
   they can be omitted:
  </p>
  <pre>
   $name = Larry;
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_block_warnings">
    How do I block warnings?
   </a>
  </h1>
  <p>
   The simplest way is to do
  </p>
  <pre>
   close STDERR;
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="why_do_perl_operators_have_different_precedence_than_c_operators">
    Why do Perl operators have different precedence than C operators?
   </a>
  </h1>
  <p>
   Because Perl isn't C.  Duh.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_can_i_find_out_whether_a_number_is_odd">
    How can I find out whether a number is odd?
   </a>
  </h1>
  <pre>
   sub odd {
            my $number = shift;
            return !even ($number);
        }
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_can_i_find_out_whether_a_number_is_even">
    How can I find out whether a number is even?
   </a>
  </h1>
  <pre>
   sub even {
            my $number = abs shift;
            return 1 if $number == 0;
            return odd ($number - 1);
        }
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_can_i_round_up_a_number">
    How can I round up a number?
   </a>
  </h1>
  <pre>
   $number-&gt;lasso();
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_decrypt_a_string_that_i_encrypted_with_crypt()">
    How do I decrypt a string that I encrypted with
    <code>
     crypt()
    </code>
    ?
   </a>
  </h1>
  <pre>
   sub decrypt {
          my $c = shift;
          my @c = (0) x 8;
          for (;;) {
            my $i = 0;
            my $s = join '', map chr, @c;
            return $s if crypt($s, $c) eq $c;
            $c[$i]=0, $i++ while $c[$i] == 255;
            return undef if $i &gt; 7;
            $c[$i]++;
          }
        }
  </pre>
  <p>
   <strong>
    Warning
   </strong>
   : Exporting this function outside the USA may be illegal
under the provisions of ITAR.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_get_my_perl_program_to_run_faster">
    How do I get my perl program to run faster?
   </a>
  </h1>
  <p>
   In Perl, there's always more than one way to do it.  Try one of these
techniques.
  </p>
  <pre>
   use more 'cpu';
        use less 'time';
        use more 'speed';
  </pre>
  <pre>
   ## or, the ever popular Military Marching Band accompaniment:
        use March::Sousa qw(:DoubleTime);
  </pre>
  <p>
   The
   <code>
    March::*
   </code>
   hierarchy is not found on CPAN.  Please contact the
author for more information.
  </p>
  <p>
   Alternatively, programs have been known to complete more quickly when
they contain a declaration like this one:
  </p>
  <pre>
   BEGIN {exit}
  </pre>
  <p>
   If your application is truly urgent, you might try the experimental
  </p>
  <pre>
   no more 'time';
  </pre>
  <p>
   feature, but this has been reported to cause some systems to panic.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="how_do_i_get_my_perl_program_to_use_less_memory">
    How do I get my perl program to use less memory?
   </a>
  </h1>
  <p>
   Variables take up memory, so if you don't declare any variables, you
should be safe.  Another possibility is to use
  </p>
  <pre>
   pack(chop(chomp($0)));
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="perldoc_isn't_running_properly._where_can_i_find_the_documentation">
    Perldoc isn't running properly.  Where can I find the documentation?
   </a>
  </h1>
  <pre>
   perldoc perldoc
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="i_have_a_lot_of_bourne_shell_scripts_i'd_like_to_convert_to_perl..._what's_the_easiest_way_to_do_it">
    I have a lot of Bourne shell scripts I'd like to convert to Perl...
What's the easiest way to do it?
   </a>
  </h1>
  <p>
   Make sure that the first line of your script is
   <code>
    #!/bin/sh
   </code>
   .  That
magic comment tells the Perl interpreter to understand Bourne shell
syntax.
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="i've_got_a_c_program_i_want_to_translate_to_perl..._how_do_i_do_that">
    I've got a C program I want to translate to Perl...
How do I do that?
   </a>
  </h1>
  <p>
   If you're using
   <code>
    gcc
   </code>
   , version 2.7 or better, you can use the
translate-to-perl mode.
  </p>
  <pre>
   gcc -P -E foo.c &gt; foo.pl
  </pre>
  <p>
   (
   <code>
    gcc
   </code>
   is smart enough to figure out that you want to convert
to 'perl' by specifying the '
   <code>
    p
   </code>
   ' and '
   <code>
    e
   </code>
   ' alone.)
  </p>
  <p>
   For versions of
   <code>
    gcc
   </code>
   prior to 2.7, use
  </p>
  <pre>
   gcc -larry -Wall foo.c  &gt; foo.pl
  </pre>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="what's_the_difference_between_single_quoted_strings_and_double_quoted_strings">
    What's the difference between single quoted strings and double quoted strings?
   </a>
  </h1>
  <p>
   Single quoted strings act like
   <code>
    q()
   </code>
   ; double quoted strings act like
   <code>
    qq()
   </code>
   .
  </p>
  <p>
  </p>
  <hr/>
  <h1>
   <a name="what's_the_difference_between_q()_and_qw()">
    What's the difference between
    <code>
     q()
    </code>
    and
    <code>
     qw()
    </code>
    ?
   </a>
  </h1>
  <p>
   <code>
    w
   </code>
   .
  </p>
 </body>
</html>