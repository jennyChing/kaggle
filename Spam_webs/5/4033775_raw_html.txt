<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <!--  
Particletree Code Preface
Feel free to look. Feel free to dig. Feel free to touch.
Ask us, though, if you're going to take. 
We are generous souls.
-->
  <title>
   Particletree   Loading Content with JSON
  </title>
  <!-- Meta Tags -->
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="index, follow" name="robots"/>
  <meta content="Design, Code, Business, Web 2.0, PHP, JavaScript, CSS, AJAX, XHTML" name="keywords"/>
  <meta content="Particletree is the beginning of something. This place, this collection of knowledge, is a gathering of forces, a sharpening of skills." name="description"/>
  <!-- CSS -->
  <link href="/css/combined.css" media="screen" rel="stylesheet" title="default" type="text/css"/>
 </head>
 <body>
  <div id="container">
   <div id="header">
    <h1>
     Welcome to
     <a href="/">
      Particle
      <strong>
       tree
      </strong>
      !
     </a>
    </h1>
    <ul id="nav">
     <li>
      <a href="/about/">
       About
      </a>
     </li>
     <li>
      <a href="/archives/">
       Archives
      </a>
     </li>
     <li>
      <a href="http://feeds.feedburner.com/particletree">
       Subscribe
      </a>
     </li>
    </ul>
   </div>
   <!--header-->
   <div class="single" id="features">
    <div class="headline">
     <h3>
      <a href="/features/loading-content-with-json/" rel="bookmark" title="Permanent Link: Loading Content withJSON">
       Loading Content withJSON
       <cite>
        By Ryan Campbell  February 13th, 2007
       </cite>
      </a>
     </h3>
    </div>
    <div class="content">
     <h3>
      Introduction
     </h3>
     <p>
      Thanks to the increasing use and education of efficient JavaScript techniques in todays web applications,
      <a href="http://www.json.org/" title="JavaScript Object Notation">
       JSON
      </a>
      has become the data format de jour of the enterprising young web developer. JSON is particularly useful at loading statepassing and loading data that is unique to a particular client. The question weve run into around here, is what is the best way to get data off of our server and into a JSON object so it can be processed by the browser? Turns out, theres a few ways to handle it and they each come with a few caveats. Today were going to examine four different approaches to creating a JSON object on page load (Ajax, innerHTML, Embedded Script Tags and Server Processed JavaScript) and discuss the pros and cons of each method.
     </p>
     <p>
      <strong>
       Note:
      </strong>
      Some of the example code presented below uses the
      <a href="http://www.json.org/json.js" title="json.js">
       JSON Parser
      </a>
      and
      <a href="http://www.prototypejs.org/" title="Prototype.js">
       Prototype Framework
      </a>
      . You may need to grab yourself a copy of each if you want to follow along.
     </p>
     <p>
      <a class="ptad" href="http://wufoo.com/?gad=CO_3o6UDEghyApM_y2FKeRjZ8LH7AyDP_uch&amp;gkw=submit+button" title="HTML Form Builder">
       <img alt="HTML Form Builder" src="/images/ads/wufooad10.gif"/>
      </a>
     </p>
     <h3>
      The Concept
     </h3>
     <p>
      Just to make sure were all on the same page, lets do a quick rundown of why its important to figure out how to load a JSON object on page load. A typical web page may pull data from the server, and arrange all the data in proper XHTML markup form with only server side processing (like PHP). But on JavaScript intensive web sites (like most web applications), JavaScript may be needed or involved in the initial page load before everything is ready to play and interact with. In these cases, the data is pulled from the server, sent to JavaScript (via a JSON friendly format) where the script then places the data into the markup accordingly. Imagine the data was static, the JavaScript may look similar to this:
     </p>
     <pre>
      <code>
       user = {"first":"Ryan", "last":"Campbell"}
drawName(user);function drawName(user) {
    // modify the DOM with the information
}
      </code>
     </pre>
     <p>
      An object is created, and the data from that object is placed into the DOM. Unfortunately, most sites have data coming from a database and arent static. So how is that a
      <code>
       user
      </code>
      object is created? Thats what well look at with the following four approaches. For each approach, we will take a look at the code required to populate the
      <code>
       user
      </code>
      object with the necessary data.
     </p>
     <h3>
      Ajax
     </h3>
     <p>
      Everyones favorite new candy. What better way to load data than with the ever popular Ajax? Well, it isnt exactly the best approach performance-wise in my opinion, but it does have its uses depending on your development preferences. Heres how it usually works:
      <code>
       onload
      </code>
      a script executes an Ajax request that queries the server for a JSON string. The server sends back the string, and the string is then converted into an object.
     </p>
     <pre>
      <code>
       var myAjax = new Ajax.Request(
    'url-to-server',
    {method: 'post', parameters: 'action=lookupUser&amp;id=23, onComplete: function(r) {
            user = JSON.parse(r.responseText);
        }
    }
);
      </code>
     </pre>
     <p>
      Once the server sends back the response,
      <code>
       JSON.parse()
      </code>
      then converts our string into the actual JavaScript object. From there, we can then have JavaScript modify the DOM with the data.
     </p>
     <p>
      While I havent seen this method used much in my experience, there are two definite benefits: it provides consistency and you dont have to depend on a global variable. For an example of consistency, we can look at something like
      <a href="/features/preloading-data-with-ajax-and-json/">
       paging
      </a>
      . When the user clicks on a Next link to receive something like the next 20 results from a search, the Ajax request that fires
      <code>
       onclick
      </code>
      is exactly the same every single time. With the Ajax method, we can also use the very same request to run
      <code>
       onload
      </code>
      , so that you can isolate where your data is coming from ahead of time. The important thing is to analyze the usage of common objects on the server. Also, its nice to know exactly where your user object is being created. As well see in some of the other approaches, the
      <code>
       user
      </code>
      object must be initialized in a global variable.
     </p>
     <p>
      Whats wrong with this method? Well, usually when a page loads up, the server establishes a database connection and initializes common objects. That means calling a simple function, such as
      <code>
       lookupUser(23)
      </code>
      , takes very little additional resources since only one extra query is being made. To call this same function through an Ajax request requires us to create a new HTTP request, a new database connection, and the re-initialization of common objects. The performance hit to me just isnt worth it if the other methods are available.
     </p>
     <h3>
      innerHTML
     </h3>
     <p>
      The
      <code>
       innerHTML
      </code>
      approach relies on populating HTML elements (like a hidden div) with data from the server and them having JavaScript fetch the
      <code>
       innerHTML
      </code>
      of those elements
      <code>
       onload
      </code>
      via the very quick document.getElementById or popular $() function.
     </p>
     <pre>
      <code>
       // The HTML
&lt;div id="jUser" class="hide"&gt;{"first":"Ryan", "last":"Campbell"}&lt;/div&gt;// The JavaScript
user = JSON.parse($('jUser').innerHTML);
      </code>
     </pre>
     <p>
      Using
      <code>
       innerHTML
      </code>
      to send JSON to the client has promise, but the practical usage is limited because of its strike against the
      <a href="/features/4-layers-of-separation/">
       separation of layers
      </a>
      . In our ideal programming environment, CSS, HTML and JavaScript are individual layers. This works out nice so that designers can make changes without having to look at code, and developers can make changes without considering CSS. While you could think of JSON as just content and therefore justify to yourself that it does have its place in the markup, its a bit of a stretch.
     </p>
     <p>
      Lets examine if the JSON object is describing the appearance or layout of the page. The following code tells the JavaScript what type of
      <code>
       user
      </code>
      is being loaded. After the JSON is read by the JavaScript, the JavaScript could then add/remove markup accordingly.
     </p>
     <pre>
      <code>
       {"first":"Ryan",
 "last":"Campbell",
 "rank":"Admin",
 "country":"United States",
 "template":"header"}
      </code>
     </pre>
     <p>
      Given the JSON, the JavaScript could display a different, customized header for each type of
      <code>
       user
      </code>
      . Also, the designer can go in and change the fairly human readable string without having to open a JavaScript file, which will then change the appearance of the page. Another benefit of this method is, like the Ajax approach, it removes dependencies on global variables. They share the same weakness as well in the fact that a JSON parser is needed to read the string.
     </p>
     <p>
      One major hassle with the
      <code>
       innerHTML
      </code>
      approach is escaping in JSON strings. Escaping an actual JSON object in JavaScript is weird enough, but then trying to escape an HTML string that will be parsed into JSON seems to multiply the confusion. Here is an example of escaping a link in JavaScript:
     </p>
     <pre>
      <code>
       obj = {"item":"&lt;a href=\"particletree.com\"&gt;link&lt;/a&gt;"};
      </code>
     </pre>
     <p>
      If we were to place that same code into the HTML, the parser would break. If the tags are replaced with
      <code>
       &lt;
      </code>
      and
      <code>
       &gt;
      </code>
      it will work, but they would have to be converted back to tags on the JavaScript side. Overall, it leads to some serious code ugliness.
     </p>
     <h3>
      Embedded Script Tags
     </h3>
     <p>
      Instead of putting a JSON formatted string into the markup, we can instead place an actual JSON
      <strong>
       object
      </strong>
      with an embedded script tag. Similar to the
      <code>
       innerHTML
      </code>
      approach, the server will load up the content in the flow of the markup. This time, though, it will print out script tags containing the information instead of placing it inside of an element.
     </p>
     <pre>
      <code>
       &lt;script type="text/javascript"&gt;
    &lt;!--
    user = {"first":"Ryan", "last":"Campbell"}
    --&gt;
&lt;/script&gt;
      </code>
     </pre>
     <p>
      With this, any other JavaScript file can reference our global
      <code>
       user
      </code>
      object. Other than the reliance on a global variable, this method is fairly rock solid. Since JSON is native to JavaScript, no outside library or parser is needed. While the speed increases are actually minimal, it is still pretty good practice to trim down code when possible. It also creates a healthy dose of separation. Even though the JSON is still in the HTML file, it is in a separate script section and can still be easily configured. Finally, all character escaping is based off of JavaScript rules rather than a quirky combination of HTML and JavaScript.
     </p>
     <h3>
      Server Processed JavaScript
     </h3>
     <p>
      This approach is identical in concept to embedded script tags, but it takes things a step further. By setting up the server to process JavaScript as PHP (or any desired server language), we can include PHP processed strings right in the JavaScript. If we process js files as PHP (with a little htaccess tweaking), the following code would still produce valid JavaScript:
     </p>
     <pre>
      <code>
       user = &lt;?php lookupUser(23); ?&gt;;
      </code>
     </pre>
     <p>
      The code above will execute with the rest of the server code, and will ultimately output:
     </p>
     <pre>
      <code>
       user = {"first":"Ryan", "last":"Campbell"}
      </code>
     </pre>
     <p>
      Like embedded script tags, a global
      <code>
       user
      </code>
      object is created, but this time, the object is actually created in the JavaScript file, and not on the HTML page. This allows for complete separation. By including the JavaScript file in the HTML page, everything just works regardless of what is on the HTML page. Its also nice to know that all resources needed by the JavaScript file are located within the JavaScript file. This makes everything easier to track, and reduces confusion when youre trying debug.
     </p>
     <p>
      As always, nothing is perfect. While this method is great in plug and play reusability, it makes caching the JavaScript file an impossibility and turns out to be limited in catch all circumstances. For example, we have a global JavaScript file on every page using this technique. However, we dont want the JavaScript to execute on every page. For the three other methods, we can just place code to catch it:
     </p>
     <pre>
      <code>
       if(user) doSomething();
      </code>
     </pre>
     <p>
      By excluding the JSON, you prevent something from happening. In this case, the
      <code>
       user
      </code>
      object will always be created. Now, on the PHP level a check could be made to make the
      <code>
       user
      </code>
      object null in certain circumstances, but that leads to inevitable complications. It is much easier to just not include something in the
      <code>
       innerHTML
      </code>
      div or between our embedded script tags.
     </p>
     <h3>
      Which to Choose
     </h3>
     <p>
      I have used all four of these methods in projects, and they all get the job done. For most smaller scale operations, any of these will work and you wont have to think twice about it. Personally, I find embedded script tags to be superior because they allow for flexibility, dont require custom server configurations, and are native to JavaScript. And I try to stay away from the Ajax version the most mainly because the hits to the server really arent worth it when there are satisfactory alternatives available. The key is to pick one method and stick with it as often as possible for the sake of consistency.
     </p>
     <a class="ptad" href="http://wufoo.com" title="HTML Form Builder">
      <img alt="HTML Form Builder" src="/images/ads/wufooad1.gif"/>
     </a>
    </div>
    <div class="notice">
     <img alt="Ryan Campbell" src="/images/rcampbell.gif"/>
     <h3>
      Loading Content withJSON by Ryan Campbell
     </h3>
     This entry was posted
     <b>
      4 years ago
     </b>
     and was filed under
     <a href="/archives/features/" rel="category tag" title="View all posts in Features">
      Features
     </a>
     .
     <br/>
     Comments are currently closed.
    </div>
    <div class="navigation">
     <div class="lt">
      <a href="/notebook/colorzilla-for-intel-mac/">
        Previous
      </a>
     </div>
     <div class="rt">
      <a href="/notebook/holiday-season-stats-revisited/">
       Next 
      </a>
     </div>
    </div>
   </div>
   <!--features-->
   <h2 id="comments">
    <span>
     
     <strong>
      21
     </strong>
     Comments! 
    </span>
   </h2>
   <ol class="commentlist">
    <li class="red alt" id="comment-17724">
     <cite>
      <a class="url" href="http://aditya-mukherjee.com" rel="external nofollow">
       Aditya Mukherjee
      </a>
      
      <a href="#comment-17724">
       4 years ago
      </a>
     </cite>
     <p>
      You missed out the ever famous dynamic script tag method, where you can append a new [style src=path-to-json type=text/javascript], with a specified callback. I think thats the easiest method to work with JSON, although it does remove the option of passing more than one argument to your function (unless you control your JSON to output the function accordingly)
     </p>
    </li>
    <li class="green " id="comment-17727">
     <cite>
      <a class="url" href="http://aditya-mukherjee.com" rel="external nofollow">
       Aditya Mukherjee
      </a>
      
      <a href="#comment-17727">
       4 years ago
      </a>
     </cite>
     <p>
      I meant [script] in the previous comment! :P Sorry!
     </p>
    </li>
    <li class="yellow alt" id="comment-17733">
     <cite>
      <a class="url" href="http://particletree.com" rel="external nofollow">
       Ryan Campbell
      </a>
      
      <a href="#comment-17733">
       4 years ago
      </a>
     </cite>
     <p>
      Yeah, thats true. Dynamic script tags could have gotten their own category. For the most part, they have all of the same negatives as Ajax. Im not a fan of them myself, but they are a viable option.
     </p>
    </li>
    <li class="red " id="comment-17736">
     <cite>
      brett 
      <a href="#comment-17736">
       4 years ago
      </a>
     </cite>
     <p>
      The JSON library at the url above does not appear to have a JSON.parse method. It looks like the method has been moved to the String object: string.parseJSON(). Either way you could just use javascripts built in eval() method to parse a JSON string, which is exactly what string.parseJSON does.
     </p>
    </li>
    <li class="orange alt" id="comment-17865">
     <cite>
      <a class="url" href="http://homepage.mac.com/nephilim" rel="external nofollow">
       Nephilim
      </a>
      
      <a href="#comment-17865">
       4 years ago
      </a>
     </cite>
     <p>
      Not to be all AJAX-fanboy-ish, but I think youre selling the advantages of AJAX a bit short here.  Its true that AJAX is not appropriate for the cited example, but AJAX shines when (a) you dont know ahead of time what data you want to put on the page, or (b) you want to be able to
      <em>
       replace
      </em>
      data on the page with new, updated information, or (c) you want to display a dynamic subset view of a very large data set.
     </p>
     <p>
      For example, if you were having to browse through a directory of thousands of users, embedding the information statically in the HTML becomes far less practical, because not only are you having to send all the information to be browsed, but the database connection must provide all possible data to be viewed.  Theres a break point where the extra initial database connection with AJAX pays dividends in bandwidth and convenience for the end user, I think.
     </p>
     <p>
      Still, for most of us, we more often encounter cases like the one in your article than ones which are more suited to AJAX.  Often, AJAX is a hammer looking for a nail.  So its good to see some frank analysis on the differences between embedded approaches like this.  Thanks for the interesting read!
     </p>
    </li>
    <li class="green " id="comment-17918">
     <cite>
      <a class="url" href="http://www.franz-binder.de" rel="external nofollow">
       Frank
      </a>
      
      <a href="#comment-17918">
       4 years ago
      </a>
     </cite>
     <p>
      Thanks for that interesting article. Youre pointing out what I discover on several web pages: Many of them use the onLoad event and trigger an (unneeded) Ajax request (using fancy status bars)
      <i>
       only
      </i>
      to show theyre part of the whole web 2.0 community. Id rather save some bandwidth, keep the servers workload as low as possible and actually have the server respond quickly when its really making sense.
     </p>
    </li>
    <li class="yellow alt" id="comment-18019">
     <cite>
      <a class="url" href="http://sonspring.com/" rel="external nofollow">
       Nathan Smith
      </a>
      
      <a href="#comment-18019">
       4 years ago
      </a>
     </cite>
     <p>
      Nice article. I like that you presented all of the common options, and balanced them with pros and cons. I just wanted to point out that according to Douglas Crawford, HTML comments within script tags are no longer necessary, a relic of days gone by in which the script tag may not have been recognized.
     </p>
    </li>
    <li class="red " id="comment-18022">
     <cite>
      <a class="url" href="http://particletree.com" rel="external nofollow">
       Ryan Campbell
      </a>
      
      <a href="#comment-18022">
       4 years ago
      </a>
     </cite>
     <p>
      Thanks Nathan, good to know.
     </p>
     <p>
      Nephilim, I am far from anti Ajax. I use it all over the place. I was strictly trying to keep this article on practices to use during page load. I did mention paging as one example Ajax is good for. Also, which you touched on, is when there is a ton of content. It would not be efficient to write an extremely large JSON string to the page. It would be much easier to write one in chunks, or fetch the data with Ajax.
     </p>
    </li>
    <li class="green alt" id="comment-18909">
     <cite>
      Mr. Nice 
      <a href="#comment-18909">
       4 years ago
      </a>
     </cite>
     <p>
      Wow terrific
     </p>
    </li>
    <li class="yellow " id="comment-20219">
     <cite>
      <a class="url" href="http://blog.nazin.com/" rel="external nofollow">
       Joshua Curtiss
      </a>
      
      <a href="#comment-20219">
       4 years ago
      </a>
     </cite>
     <p>
      Whereas your article was a fun read, I feel like Im missing something. In conjunction with Nephilims comments, the point of AJAX is for all the functionality you get AFTER your initial page load. Isnt all of this overkill if you just want some static data on the initial load? Havent we been doing that with server-side code that writes the content directly into the HTML for years?
     </p>
     <p>
      The server processed external JavaScript file is a fascinating idea, and you could even put URL parameters right in the script tags href to specify the data you want, but even then this feels like overkill if youre just looking for injecting initial data at page load.
     </p>
     <p>
      Im sorry, Im sure Im just missing something here, and gladly welcome the clarification.
     </p>
    </li>
    <li class="red alt" id="comment-20278">
     <cite>
      Dave Kees 
      <a href="#comment-20278">
       4 years ago
      </a>
     </cite>
     <p>
      If youre going to use the Prototype Framework, dont forget that you dont need to parse or evaluate JSON objects on the client-side.  You can create them on the server-side and put them in a x-json header for your response.  The Prototype Framework will automatically try to take information in a x-json header and make it a JSON object.  Read more here:
      <a href="http://prototypejs.org/api/ajax/request" rel="nofollow">
       http://prototypejs.org/api/ajax/request
      </a>
      .  Just scroll to the bottom and look for the header Evaluating JSON headers in the prototype docs.
     </p>
    </li>
    <li class="orange " id="comment-20295">
     <cite>
      <a class="url" href="http://www.incisif.net" rel="external nofollow">
       Frederic Torres
      </a>
      
      <a href="#comment-20295">
       4 years ago
      </a>
     </cite>
     <p>
      On a different note I like to use JSON for test data driven rather than CSV or XML.
I wrote a post about it.
      <a href="http://blog.incisif.net/2006/12/19/csv-xml-or-json-for-data-driven-testing.aspx" rel="nofollow">
       http://blog.incisif.net/2006/12/19/csv-xml-or-json-for-data-driven-testing.aspx
      </a>
     </p>
     <p>
      <a href="http://www.InCisif.net" rel="nofollow">
       http://www.InCisif.net
      </a>
      Web Testing with C# or VB.NET
     </p>
    </li>
    <li class="green alt" id="comment-20297">
     <cite>
      <a class="url" href="http://tobielangel.com" rel="external nofollow">
       Tobie Langel
      </a>
      
      <a href="#comment-20297">
       4 years ago
      </a>
     </cite>
     <p>
      Hi Ryan,
     </p>
     <p>
      I suggest you have a look at
      <a href="http://prototypejs.org/2007/3/9/prototype-1-5-1-rc1" rel="nofollow">
       Prototypes first release candidate for version 1.5.1
      </a>
      which comes with
      <a href="http://prototypejs.org/learn/json" rel="nofollow">
       full JSON support
      </a>
      .
     </p>
     <p>
      Great article - as usual!
     </p>
    </li>
    <li class="yellow " id="comment-20342">
     <cite>
      <a class="url" href="http://particletree.com" rel="external nofollow">
       Ryan Campbell
      </a>
      
      <a href="#comment-20342">
       4 years ago
      </a>
     </cite>
     <p>
      Joshua, I have found that as I write more complex JavaScript, the redundancy of writing something on the server and then modifying it with the JavaScript at a later point is too much. So, if I have a few routines with complicated logic that control the display on the page, it is easier for me to keep all of the logic in one place than it is to break it up. This article is for those cases when the display logic is easier kept in the JavaScript, but you still need a way to pass the data to the display logic.
     </p>
    </li>
    <li class="red alt" id="comment-20509">
     <cite>
      <a class="url" href="http://gohlkusmaximus.com/" rel="external nofollow">
       Jason
      </a>
      
      <a href="#comment-20509">
       4 years ago
      </a>
     </cite>
     <p>
      You should go back to some of your old entries (such as replacing trackback with blog search) and remove all the spam comments its kind of embarrassing!
     </p>
    </li>
    <li class="green " id="comment-20554">
     <cite>
      Josh Fraser 
      <a href="#comment-20554">
       4 years ago
      </a>
     </cite>
     <p>
      Ryan, thanks for a great read.  I whole-heartedly agree with everything you said.  AJAX has all the hype, but Im not convinced it is always the best implementation.  I agree that server processed JavaScript is a good way to keep everything all in one place, keep your code a little shorter, and make thing easier to debug.
     </p>
    </li>
    <li class="yellow alt" id="comment-20677">
     <cite>
      <a class="url" href="http://www.medikamente-preiswert-bestellen.de" rel="external nofollow">
       Adhatoda
      </a>
      
      <a href="#comment-20677">
       4 years ago
      </a>
     </cite>
     <p>
      @ Ryan
This article is for those cases when the display logic is easier kept in the JavaScript, but you still need a way to pass the data to the display logic. Yepp, absolutly!
     </p>
    </li>
    <li class="red " id="comment-20930">
     <cite>
      Murtaza 
      <a href="#comment-20930">
       3 years ago
      </a>
     </cite>
     <p>
      Hey Ryan any chances we might see an article on the wufoos searching on data entering page - the page where its written Display entries that meet any/all of the following conditions 
I really need to do similar thing in one of my project, now not sure how to do advance searching I mean how do I construct php query from an html form submitted by user, there many ways, not sure which one suits best :(
     </p>
    </li>
    <li class="orange alt" id="comment-20932">
     <cite>
      <a class="url" href="http://dd" rel="external nofollow">
       hh
      </a>
      
      <a href="#comment-20932">
       3 years ago
      </a>
     </cite>
     <p>
      Everyone needs a hug.
     </p>
    </li>
    <li class="green " id="comment-21601">
     <cite>
      <a class="url" href="http://www.clirity.com" rel="external nofollow">
       Oren
      </a>
      
      <a href="#comment-21601">
       3 years ago
      </a>
     </cite>
     <p>
      Liked your article and
you should always remmember the Security Breach using JSON with your API inputs, because it can includes user malicious functions.
     </p>
    </li>
    <li class="yellow alt" id="comment-21855">
     <cite>
      <a class="url" href="http://www.leasingandcontracthire.com" rel="external nofollow">
       Martin parry
      </a>
      
      <a href="#comment-21855">
       3 years ago
      </a>
     </cite>
     <p>
      Im using Ajax on my sites - This has been a great read thanks.
     </p>
    </li>
   </ol>
   <div id="footer">
    <ul>
     <li>
      <a class="green" href="http://wordpress.org">
       <b>
        Word
       </b>
       Press
      </a>
     </li>
     <li>
      <a class="red" href="http://aws.amazon.com/cloudfront/">
       Amazon
       <b>
        CloudFront
       </b>
      </a>
     </li>
     <li>
      <a class="yellow" href="http://creativecommons.org/licenses/by/2.5/">
       <b>
        Creative
       </b>
       Commons
      </a>
     </li>
     <li>
      <a class="orange" href="http://ycombinator.com">
       <b>
        Y
       </b>
       Combinator
      </a>
     </li>
    </ul>
   </div>
  </div>
  <!--container-->
 </body>
</html>