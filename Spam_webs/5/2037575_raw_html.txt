<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en-US" xmlns="http://www.w3.org/1999/xhtml">
 <head profile="http://gmpg.org/xfn/11">
  <meta content="IE=EmulateIE7" http-equiv="X-UA-Compatible"/>
  <meta content="_bcsv5C0d_g2I2rptTyqb4DzcmIaZpysMS4DNut_vJ8" name="google-site-verification"/>
  <title>
   Embedded in Academia : Contest: Craziest Compiler Output due to Undefined Behavior
  </title>
  <meta content="text/html; charset=utf-8" http-equiv="content-type"/>
  <link href="http://blog.regehr.org/wp-content/themes/barthelme/style.css" media="screen,projection" rel="stylesheet" title="Barthelme" type="text/css"/>
  <link href="http://blog.regehr.org/wp-content/themes/barthelme/print.css" media="print" rel="stylesheet" type="text/css"/>
  <link href="http://blog.regehr.org/feed" rel="alternate" title="Embedded in Academia RSS feed" type="application/rss+xml"/>
  <link href="http://blog.regehr.org/comments/feed" rel="alternate" title="Embedded in Academia comments RSS feed" type="application/rss+xml"/>
  <link href="http://blog.regehr.org/xmlrpc.php" rel="pingback"/>
  <link href="http://blog.regehr.org/archives/759/feed" rel="alternate" title="Embedded in Academia  Contest: Craziest Compiler Output due to Undefined Behavior Comments Feed" type="application/rss+xml"/>
  <script type="text/javascript">
   window._wpemojiSettings = {"baseUrl":"http:\/\/s.w.org\/images\/core\/emoji\/72x72\/","ext":".png","source":{"concatemoji":"http:\/\/blog.regehr.org\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.2.2"}};
			!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&amp;&amp;c.getContext("2d");return d&amp;&amp;d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length&gt;3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&amp;&amp;c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&amp;&amp;c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&amp;&amp;f.twemoji&amp;&amp;(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
  </script>
  <style type="text/css">
   img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
  </style>
  <link href="http://blog.regehr.org/wp-content/plugins/mtouch-quiz/mtq_core_style.css?ver=3.1.2" id="mtq_CoreStyleSheets-css" media="all" rel="stylesheet" type="text/css"/>
  <link href="http://blog.regehr.org/wp-content/plugins/mtouch-quiz/mtq_theme_style.css?ver=3.1.2" id="mtq_ThemeStyleSheets-css" media="all" rel="stylesheet" type="text/css"/>
  <script src="http://blog.regehr.org/wp-includes/js/jquery/jquery.js?ver=1.11.2" type="text/javascript">
  </script>
  <script src="http://blog.regehr.org/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1" type="text/javascript">
  </script>
  <script src="http://blog.regehr.org/wp-content/plugins/mtouch-quiz/script.js?ver=3.1.2" type="text/javascript">
  </script>
  <script src="http://blog.regehr.org/wp-content/plugins/fd-footnotes/fdfootnotes.js?ver=1.3" type="text/javascript">
  </script>
  <link href="http://blog.regehr.org/xmlrpc.php?rsd" rel="EditURI" title="RSD" type="application/rsd+xml"/>
  <link href="http://blog.regehr.org/wp-includes/wlwmanifest.xml" rel="wlwmanifest" type="application/wlwmanifest+xml"/>
  <link href="http://blog.regehr.org/archives/749" rel="prev" title="Parallelizing Delta Debugging"/>
  <link href="http://blog.regehr.org/archives/762" rel="next" title="Anniversary Hike"/>
  <link href="http://blog.regehr.org/archives/759" rel="canonical"/>
  <link href="http://wp.me/pOk4P-cf" rel="shortlink"/>
  <!-- &lt;meta name="NextGEN" version="2.1.0" /&gt; -->
  <style media="screen,projection" type="text/css">
   /*&lt;![CDATA[*/
/* CSS inserted by Barthelme theme options */
	body{font-family:arial,helvetica,sans-serif;font-size:90%;}
	div#content h2,div#content h3,div#content h4,div#content h5,div#content h6,body.archive div.archive-meta,body.attachment div.entry-content div.attachment-content p.attachment-name,body.home div#content div.entry-meta span,body.archive div#content div.entry-meta span,body.search div#content div.entry-meta span,body.single div.entry-date,body.single div.entry-meta,div#content blockquote,div.comments ol.commentlist li div.comment-meta,div.entry-content div.page-link,div.entry-content span.tag-links,body.page div.archive-meta,div.formcontainer form#commentform div.form-input input,div.formcontainer form#commentform div.form-textarea textarea#comment,input#s,div.entry-content div.entry-caption{font-family:georgia,times,serif;}
	body div#content div.hentry{text-align:left;}
	body div#wrapper{width:auto;}
	div#header,div#header h1#blog-title a,div#header h1#blog-title a:link,div#header h1#blog-title a:visited{color:#fefefe;outline:none;text-decoration:none;}
	body div#header{background:#bbc8d9 url("http://blog.regehr.org/wp-content/themes/barthelme/images/header-img.php?upper=8999b0&amp;lower=bbc8d9") repeat-x left top;}
/*]]&gt;*/
  </style>
  <style id="syntaxhighlighteranchor" type="text/css">
  </style>
 </head>
 <body class="wordpress y2015 m07 d14 h02 single s-y2012 s-m07 s-d12 s-h02 s-category-cs s-category-software-correctness s-author-admin_dfs9gd0fg94h4">
  <div id="wrapper">
   <div id="header" onclick="location.href='http://blog.regehr.org/';">
    <h1 id="blog-title">
     <a href="http://blog.regehr.org/" title="Embedded in Academia">
      Embedded in Academia
     </a>
    </h1>
    <div id="blog-description">
    </div>
   </div>
   <!-- #header -->
   <div class="access">
    <span class="content-access">
     <a href="#content" title="Skip to content">
      Skip to content
     </a>
    </span>
   </div>
   <div id="globalnav">
    <ul id="menu">
     <li class="page_item_home home-link">
      <a href="http://blog.regehr.org/" rel="home" title="Embedded in Academia">
       Home
      </a>
     </li>
    </ul>
   </div>
   <div id="container">
    <div class="hfeed" id="content">
     <div class="hentry p1 post publish author-admin_dfs9gd0fg94h4 category-cs category-software-correctness y2012 m07 d12 h02" id="post-759">
      <div class="entry-date">
       <span class="meta-sep">
        {
       </span>
       <abbr class="published" title="2012-07-12T08:03:08-0600">
        2012 07 12
       </abbr>
       <span class="meta-sep">
        }
       </span>
      </div>
      <h2 class="entry-title">
       Contest: Craziest Compiler Output due to Undefined Behavior
      </h2>
      <div class="entry-content">
       <p>
        [
        <em>
         <strong>
          UPDATE
         </strong>
         :
         <a href="http://blog.regehr.org/archives/767">
          Winners are here
         </a>
         .
        </em>
        ]
       </p>
       <p>
        The C and C++ standards fail to assign a meaning to a program that overflows a signed integer or performs any of the 190+ other kinds of undefined behavior. In principle, a conforming compiler can turn such a program into a binary that posts lewd messages to Twitter and then formats your disk. In practice, of course, we dont expect such baroque consequences. Rather, the compiler is just going to do its job, which is to generate efficient code for all executions that dont have undefined behavior. Disregarding Easter eggs such as the old version of GCC that would exec nethack, the compiler isnt going to go out of its way to make undefined executions behave badly. It just doesnt care about them.The problem is that asoptimizershave gotten more clever, the consequences of undefined behavior have become a bit more strange.For example:
       </p>
       <ul>
        <li>
         Using uninitialized data as an extra source of randomness caused a compiler to delete an entire seed computation.
         <a href="http://kqueue.org/blog/2012/06/25/more-randomness-or-less/">
          link
         </a>
        </li>
        <li>
         A compiler can evaluate
         <tt>
          (x+1)&gt;x
         </tt>
         to both 0 and 1 in the same program, compiled at the same optimization level, for the same value of
         <tt>
          x
         </tt>
         .
         <a href="http://www.cs.utah.edu/~regehr/papers/overflow12.pdf">
          link
         </a>
        </li>
        <li>
         An infinite loop such as a counterexample search (where no counterexample exists) can be terminated by the compiler, permitting, for example, Fermats Last Theorem to be disproved.
         <a href="http://blog.regehr.org/archives/161">
          link
         </a>
        </li>
        <li>
         An undefined shift operation caused a compiler to delete an important safety check in Googles Native Client.
         <a href="http://code.google.com/p/nativeclient/issues/detail?id=245">
          link
         </a>
        </li>
        <li>
         A reference to a possibly-null pointer in the Linux kernel caused the compiler to remove a subsequent null check, creating an exploitable vulnerability.
         <a href="https://isc.sans.edu/diary.html?storyid=6820">
          link
         </a>
        </li>
        <li>
         A division instruction (that potentially crashes the process) can be moved in front of code that has externally visible side effects.
         <a href="http://blog.regehr.org/archives/232">
          link
         </a>
        </li>
        <li>
         A compiler can run the code inside
         <tt>
          if (p) { ... }
         </tt>
         and also inside
         <tt>
          if (!p) { ... }
         </tt>
         when
         <tt>
          p
         </tt>
         is not initialized.
         <a href="http://markshroyer.com/2012/06/c-both-true-and-false/">
          link
         </a>
        </li>
       </ul>
       <p>
        I will send a small but nice prize to the person who posts a comment describing the most interesting, surprising, or just plain crazy object code emitted by a compiler as a consequence of undefined behavior. Preference will be given to entries that:
       </p>
       <ul>
        <li>
         Are posted before or on July 18 2012.
        </li>
        <li>
         Describe interesting object code as opposed to describing a secondary consequence of that object code. A secondary consequence would be something like an ROP attack, launching a missile, or whatever.
        </li>
        <li>
         Describe object code legitimately generated by a production-quality C or C++ compiler. In other words, Im not interested in compiler bugs or in your own hand-crafted C compiler that emails Santa Claus when someone divides by zero.
        </li>
        <li>
         Can be reproducedso please, if possible, include compiler version, compiler options, a pointer to the code, etc.
        </li>
       </ul>
       <p>
        If you readers can come to aconsensusabout the winner, I will go along with it. Otherwise, Ill choose the winner. An example of an entry that would probably win (assuming that it could be reproduced) is At -O2, LLVM 2.6 turns the attached C++ code into object code THAT ACTUALLY MAKES DEMONS FLY OUT OF MY NOSE.
       </p>
       <p>
        Heres a
        <a href="http://stackoverflow.com/questions/908872/whats-the-worst-example-of-undefined-behaviour-actually-possible">
         similar discussion
        </a>
        on Stack Overflow. However, people there are mostly talking about secondary consequences rather than interesting object code.
       </p>
       <p>
        <strong>
         UPDATE:
        </strong>
        WordPresss comment system likes to mangle C code, beware. I dont know of an easy fix.
       </p>
      </div>
      <div class="entry-meta">
       <span class="entry-published">
        Posted by
        <span class="entry-author author vcard">
         <span class="fn n">
          regehr
         </span>
        </span>
        on
        <abbr class="published" title="2012-07-12T08:03:08-0600">
         Thursday, July 12, 2012, at 8:03 am
        </abbr>
        .
       </span>
       <span class="cat-links">
        Filed under
        <a href="http://blog.regehr.org/archives/category/cs" rel="category tag">
         Computer Science
        </a>
        ,
        <a href="http://blog.regehr.org/archives/category/software-correctness" rel="category tag">
         Software Correctness
        </a>
        .
       </span>
       <span class="entry-rsslink">
        Follow any responses to this post with its
        <a href="http://blog.regehr.org/archives/759/feed" rel="alternate" title="Comments RSS to Contest: Craziest Compiler Output due to Undefined Behavior" type="application/rss+xml">
         comments RSS
        </a>
        feed.
       </span>
       <span class="entry-interact">
        Both comments and trackbacks are currently closed.
       </span>
      </div>
     </div>
     <!-- .post -->
     <div class="comments">
      <h3 class="comment-header" id="numcomments">
       <span class="comment-count">
        <span class="meta-sep">
         {
        </span>
        35
        <span class="meta-sep">
         }
        </span>
       </span>
       Comments
      </h3>
      <ol class="commentlist" id="comments">
       <li class="comment c-y2012 c-m07 c-d12 c-h02 alt c1" id="comment-4638">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           bcs
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 12, 2012 at 8:48 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4638" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Trivial but illustrative, this program:
        </p>
        <p>
         int main() { short i; for(i=0; i &gt;= 0; i++); return 0; }
        </p>
        <p>
         runs faster (i.e. terminates at all) without optimizations then with.
        </p>
       </li>
       <li class="comment byuser commentauthor-admin_dfs9gd0fg94h4 bypostauthor c-y2012 c-m07 c-d12 c-h03 c2" id="comment-4640">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://www.cs.utah.edu/~regehr/" rel="external nofollow">
            regehr
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 12, 2012 at 9:15 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4640" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         bcs, your function is actually an extremely tricky one.
        </p>
        <p>
         First there is this issue:
        </p>
        <p>
         <a href="http://blog.regehr.org/archives/482" rel="nofollow">
          http://blog.regehr.org/archives/482
         </a>
        </p>
        <p>
         The short version of the story is that there is not exactly total agreement among compiler implementors about whether i++ is undefined when i is SHRT_MAX. My reading of the standard is that it is not undefined behavior.
        </p>
        <p>
         Second, compilers tend to terminate infinite loops that are free of side effects.
        </p>
        <p>
         So its very hard to know exactly what is going on when we compile this
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d12 c-h03 alt c3" id="comment-4641">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           Octoploid
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 12, 2012 at 9:49 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4641" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Here is a simple one I came across yesterday:
        </p>
        <p>
         % cat te.c
         <br/>
         int main ()
         <br/>
         {
         <br/>
         int x = 1;
         <br/>
         while (x)
         <br/>
         x &lt;&lt;= 1;
         <br/>
         return x;
         <br/>
         }
        </p>
        <p>
         % gcc -O2 te.c save-temps
        </p>
        <p>
         % cat te.s
         <br/>
         .file   "te.c"
         <br/>
         .section        .text.startup,"ax",@progbits
         <br/>
         .p2align 4,,15
         <br/>
         .globl  main
         <br/>
         .type   main, @function
         <br/>
         main:
         <br/>
         .LFB0:
         <br/>
         .cfi_startproc
         <br/>
         .p2align 4,,10
         <br/>
         .p2align 3
         <br/>
         .L2:
         <br/>
         jmp     .L2
         <br/>
         .cfi_endproc
         <br/>
         .LFE0:
         <br/>
         .size   main, .-main
         <br/>
         .ident  "GCC: (GNU) 4.8.0 20120709 (experimental)"
         <br/>
         .section        .note.GNU-stack,"",@progbits
        </p>
        <p>
         gcc-4.8 is the only compiler that produces an endless loop. All others (icc, clang, gcc&lt;=4.7) exit normally with 0.
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d12 c-h04 c4" id="comment-4642">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           amonakov
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 12, 2012 at 10:35 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4642" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         GCC-4.8 at -O2 compiles the following implementation of prefix sum computation into endless loop, turning code that accesses one element beyond array boundary into code that is virtually guaranteed to crash (which may considered to be a good effect of surprising [ab]use of undefined behaviour rules!). Loop exit test is eliminated since presence of a[i] access before exit test implies that i &lt; N' must be true.
        </p>
        <p>
         enum {N=32};
         <br/>
         int a[N], pfx[N];
         <br/>
         void prefix_sum()
         <br/>
         {
         <br/>
         int i, accum;
         <br/>
         for (i=0, accum=a[0]; i &lt; N; i++, accum+=a[i])
         <br/>
         pfx[i] = accum;
         <br/>
         }
        </p>
       </li>
       <li class="comment byuser commentauthor-admin_dfs9gd0fg94h4 bypostauthor c-y2012 c-m07 c-d12 c-h04 alt c5" id="comment-4643">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://www.cs.utah.edu/~regehr/" rel="external nofollow">
            regehr
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 12, 2012 at 10:55 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4643" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Octoploid, that is a nice one. This may be the first example Ive seen of a compiler aggressively exploiting the rule against left-shifting a 1 into or past the sign bit.
        </p>
       </li>
       <li class="comment byuser commentauthor-admin_dfs9gd0fg94h4 bypostauthor c-y2012 c-m07 c-d12 c-h05 c6" id="comment-4644">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://www.cs.utah.edu/~regehr/" rel="external nofollow">
            regehr
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 12, 2012 at 11:03 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4644" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         amonakov, nice! Its impressive that GCC notices this.
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d12 c-h05 alt c7" id="comment-4645">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           amonakov
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 12, 2012 at 11:09 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4645" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Regarding comment #5, there was a very similar incident in 2006 when standard configure check for mktime/time_t stopped working properly, because GCC produced an infinite loop for a loop like: for (int j = 1; j; j *= 2). See
         <a href="http://lists.gnu.org/archive/html/bug-gnulib/2006-12/msg00084.html" rel="nofollow">
          http://lists.gnu.org/archive/html/bug-gnulib/2006-12/msg00084.html
         </a>
         and an interesting response from Ian Lance Taylor:
         <a href="http://lists.gnu.org/archive/html/bug-gnulib/2006-12/msg00151.html" rel="nofollow">
          http://lists.gnu.org/archive/html/bug-gnulib/2006-12/msg00151.html
         </a>
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d12 c-h05 c8" id="comment-4646">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://frama-c.com/" rel="external nofollow">
            Pascal Cuoq
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 12, 2012 at 11:33 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4646" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Here is my entry:
        </p>
        <p>
         <a href="http://lwn.net/Articles/278137/" rel="nofollow">
          http://lwn.net/Articles/278137/
         </a>
        </p>
        <p>
         Short summary: programmers use undefined behavior (pointer overflow). Because of UB, the generated instruction (unsigned comparison) may not do what programmers intended. Programmers fix the problem by keeping the UB and adding another comparison to check if wraparound occurred. Compiler removes the additional comparison.
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d12 c-h11 alt c9" id="comment-4648">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           Nick Lewycky
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 12, 2012 at 5:32 pm
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4648" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Using clang from trunk (r160143):
        </p>
        <p>
         #include
         <br/>
         #include
         <br/>
         int main() {
         <br/>
         int *p = (int*)malloc(sizeof(int));
         <br/>
         int *q = (int*)realloc(p, sizeof(int));
         <br/>
         *p = 1;
         <br/>
         *q = 2;
         <br/>
         if (p == q) {
         <br/>
         printf(%d %d\n, *p, *q);
         <br/>
         }
         <br/>
         }
        </p>
        <p>
         $ clang evil.cc -o evil -O2; ./evil
         <br/>
         1 2
        </p>
        <p>
         Just because the pointers contain the same value does not mean theyre the same pointer; realloc ended the lifetime of the memory pointed to by p and constructed a new pointer and returned that. Thus, the compiler concludes that p and q cant alias each other.
        </p>
       </li>
       <li class="comment byuser commentauthor-admin_dfs9gd0fg94h4 bypostauthor c-y2012 c-m07 c-d12 c-h05 c10" id="comment-4649">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://www.cs.utah.edu/~regehr/" rel="external nofollow">
            regehr
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 12, 2012 at 11:03 pm
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4649" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Pascal and Nick, these are cool. Its going to be hard to choose the best one.
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d12 c-h05 alt c11" id="comment-4650">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           Eitan Adler
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 12, 2012 at 11:03 pm
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4650" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         In early versions of gcc the compiler would execute nethack  or towers of hanoi when it encountered unknown pragmas.
        </p>
        <p>
         (okay, so this is implementation defined and not undefined but can it please still count?)
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d12 c-h05 c12" id="comment-4651">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           Alireza Saberi
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 12, 2012 at 11:32 pm
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4651" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Nick, realloc documentation emphasis that The function MAY move the memory block to a new location, in which case the new location is returned.. But it seems clang -O2 believes realloc always move the memory block to a new location thus q and q cannot alias each other.
        </p>
       </li>
       <li class="comment byuser commentauthor-admin_dfs9gd0fg94h4 bypostauthor c-y2012 c-m07 c-d12 c-h05 alt c13" id="comment-4652">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://www.cs.utah.edu/~regehr/" rel="external nofollow">
            regehr
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 12, 2012 at 11:56 pm
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4652" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Alireza, your observation (that the allocated block might not be moved) is correct. Even so, Clang is operating correctly here. Basically you have to read the fine print in the C standard which says that in effect, the block is released and then reallocated, but maybe at the same spot. Evil indeed.
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d12 c-h11 c14" id="comment-4655">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://frama-c.com/" rel="external nofollow">
            Pascal Cuoq
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 13, 2012 at 5:45 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4655" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Actually, the example in comment 9 reminds me of a blog post I started to write pointing out that while realloc() sometimes is an efficient way to enlarge a block, if you have made many copies of the pointer, the standard gives you no way to know whether the block has moved. The realloc() call makes the old pointer  indeterminate, and illegal to compare to the new pointer. You have to update all copies.
        </p>
        <p>
         realloc()s modelization in Frama-Cs value-analysis-cum-C-interpreter warns about the p==q comparison in that example.
         <br/>
         I thought the comparison was idiomatic, and that that warning was an unfortunate false positive, so thanks Nick for pointing out to me that the warning is justified and not a false positive after all.
        </p>
        <p>
         (I still think it is idiomatic. I expect many codes use it, but it may not be too harmful in practice always to do the treatment intended for the case the block moved).
        </p>
       </li>
       <li class="comment byuser commentauthor-admin_dfs9gd0fg94h4 bypostauthor c-y2012 c-m07 c-d13 c-h02 alt c15" id="comment-4657">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://www.cs.utah.edu/~regehr/" rel="external nofollow">
            regehr
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 13, 2012 at 8:39 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4657" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Hi Eitan, I dont think the GCC thing really counts since its more of a joke and it happens at compile time, so code generation isnt involved.
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d13 c-h04 c16" id="comment-4659">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           Chris
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 13, 2012 at 10:23 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4659" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Nick, I fail to see how how that kind of behavior is unexpected. Every beginning C programmer knows that realloc doesnt necessarily return the same pointer that you gave it, so its unsurprising that assigning a value to a location in memory that is not allocated doesnt assign that value to another location which is allocated.
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d13 c-h05 alt c17" id="comment-4660">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://woboq.com" rel="external nofollow">
            ogoffart
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 13, 2012 at 11:27 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4660" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         The problem was in Qt as QList, QVector and co.  Tried to emulate the C99 flexible array which does not exist in C++ with an array of size 1.
         <br/>
         Then, gcc would assume the variables used to index the array are always 0.
        </p>
        <p>
         <a href="http://gcc.gnu.org/bugzilla/show_bug.cgi?id=43247" rel="nofollow">
          http://gcc.gnu.org/bugzilla/show_bug.cgi?id=43247
         </a>
         <br/>
         <a href="https://bugreports.qt-project.org/browse/QTBUG-19199" rel="nofollow">
          https://bugreports.qt-project.org/browse/QTBUG-19199
         </a>
        </p>
        <p>
         This is a variant of #5
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d13 c-h06 c18" id="comment-4661">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           Anonymous
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 13, 2012 at 12:01 pm
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4661" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Chris, you may want to re-read that code.
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d13 c-h07 alt c19" id="comment-4662">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           Anonymous
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 13, 2012 at 1:39 pm
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4662" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Just because the pointers contain the same value does not mean theyre the same pointer  I am very confused at reading this. How can two pointers containing the same differ?
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d13 c-h09 c20" id="comment-4663">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           Nick Lewycky
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 13, 2012 at 3:49 pm
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4663" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Pascal, given that Im writing in C++ the line if (p == q) is the one statement in that muck which actually has defined behaviour: Two pointers of the same type compare equal if and only if they are both null, both point to the same function, or both represent the same address. C++11 [expr.eq].
        </p>
        <p>
         In C99 the comparison rule is different, but its actually governed by The value of a pointer becomes indeterminate when the object it points to reaches the end of its lifetime. in 6.2.4/2, so the comparison could be true or false!
        </p>
        <p>
         Chris, note that it checks that p == q. Surely p == q implies that *p == *q right? Surprise!
        </p>
        <p>
         Anonymous, thats exactly the lesson. A pointer is more than the memory address you would see if you inspected it in a debugger. See the fine print in your copy of the C standard for details.
        </p>
       </li>
       <li class="comment byuser commentauthor-admin_dfs9gd0fg94h4 bypostauthor c-y2012 c-m07 c-d13 c-h09 alt c21" id="comment-4664">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://www.cs.utah.edu/~regehr/" rel="external nofollow">
            regehr
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 13, 2012 at 3:58 pm
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4664" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         So far Im tempted to think that Nicks entry is winning. Not only has it generated the most discussion, but it also is the only one that I found surprising. Opinions?
        </p>
       </li>
       <li class="comment byuser commentauthor-admin_dfs9gd0fg94h4 bypostauthor c-y2012 c-m07 c-d13 c-h10 c22" id="comment-4665">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://www.cs.utah.edu/~regehr/" rel="external nofollow">
            regehr
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 13, 2012 at 4:01 pm
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4665" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         The ones from comments 3 and 4 are also excellent.
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d13 c-h10 alt c23" id="comment-4666">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           David Harris
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 13, 2012 at 4:25 pm
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4666" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Nicks example seems to be the only one which involves libraries, as opposed to the C language itself. If malloc () and realloc () were user functions, the compiler could never know that p had reached the end of its lifetime.
        </p>
        <p>
         What if the user implements their own malloc and realloc (this is commonly done)  how would this affect undefined behavior?
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d13 c-h10 c24" id="comment-4667">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://hardwarebug.org/" rel="external nofollow">
            Mans
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 13, 2012 at 4:29 pm
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4667" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         I wrote a bit about a particular undefined behaviour a while back:
         <a href="http://hardwarebug.org/2011/10/18/pointer-peril/" rel="nofollow">
          http://hardwarebug.org/2011/10/18/pointer-peril/
         </a>
        </p>
        <p>
         Summary: comparing addresses of distinct objects is undefined, as is indexing outside array bounds, and gcc knows it.
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d13 c-h10 alt c25" id="comment-4668">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://hardwarebug.org/" rel="external nofollow">
            Mans
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 13, 2012 at 4:31 pm
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4668" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         David, malloc() and realloc() are part of the C language.  If you implement them with semantics different from the specified, you get undefined behaviour.
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d13 c-h05 c26" id="comment-4670">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://whereswalden.com/" rel="external nofollow">
            Jeff Walden
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 13, 2012 at 11:34 pm
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4670" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Id vote for Nicks entry as best so far, as well.
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d14 c-h05 alt c27" id="comment-4672">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://frama-c.com/" rel="external nofollow">
            Pascal Cuoq
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 14, 2012 at 11:51 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4672" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Nick, I did not mean to say that == produces an undefined behavior in your program.
        </p>
        <p>
         I said meant that the first undefined behavior was in p==q, which I still think it is (first use of p after it has become indeterminate).
        </p>
        <p>
         indeterminate in the C99 standard does *not* mean that the comparison could be true or false, it means that accessing p for the comparison is *undefined behavior*. The same vocabulary is used for uninitialized locals (that clearly produce,  on access,  undefined behavior and not unspecified results; see
         <a href="http://markshroyer.com/2012/06/c-both-true-and-false/" rel="nofollow">
          http://markshroyer.com/2012/06/c-both-true-and-false/
         </a>
         ).
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d15 c-h01 c28" id="comment-4674">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           Daniel Trebbien
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 15, 2012 at 7:03 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4674" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         I am somewhat confused by the aliasing comments for Nicks example. Didnt Clang just assume that p and q were aliases on account of the fact that the allocation sizes are the same, and so elide the check if (p == q)?
        </p>
        <p>
         Nick Lewycky, can you post the assembly, OS version, and libc version?
        </p>
       </li>
       <li class="comment byuser commentauthor-admin_dfs9gd0fg94h4 bypostauthor c-y2012 c-m07 c-d15 c-h02 alt c29" id="comment-4675">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://www.cs.utah.edu/~regehr/" rel="external nofollow">
            regehr
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 15, 2012 at 8:40 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4675" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Daniel, I can reproduce Nicks result using Clang 160161 (from a day or two ago) on Linux (Ubuntu 12.04) on x86-64.
        </p>
        <p>
         I dont know what libc version but I doubt that it matters the issue here is Clangs model of the C library, not the actual library code.
        </p>
        <p>
         Why would same allocation size permit Clang to elide the aliasing check?
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d15 c-h07 c30" id="comment-4676">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://frama-c.com/" rel="external nofollow">
            Pascal Cuoq
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 16, 2012 at 1:15 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4676" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Daniel, I think you have it backwards.
        </p>
        <p>
         It is not that the compiler assumes that p==q evaluates to 1. No, that condition is compiled to actual code, whereas *p and *q as arguments of printf() are constant-folded into what should be their values if p and q did not alias (which according the compiler they cant do in a defined way).
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d15 c-h11 alt c31" id="comment-4677">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           Daniel Trebbien
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 16, 2012 at 5:42 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4677" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         regehr: The statement same allocation size implies the pointers are aliases is, of course, not true. I was just guessing as to what might be going on.
        </p>
        <p>
         I see the same thing on my Mac (Apple clang version 3.1 (tags/Apple/clang-318.0.61) (based on LLVM 3.1svn)
         <br/>
         Target: x86_64-apple-darwin11.4.0). Trimmed to the important part, the assembly it outputs is:
        </p>
        <p>
         movl	$4, %edi
         <br/>
         callq	_malloc
         <br/>
         movq	%rax, %rbx
         <br/>
         movq	%rbx, %rdi
         <br/>
         movl	$4, %esi
         <br/>
         callq	_realloc
         <br/>
         movl	$1, (%rbx)
         <br/>
         movl	$2, (%rax)
         <br/>
         cmpq	%rax, %rbx
         <br/>
         jne	LBB0_2
         <br/>
         ## BB#1:
         <br/>
         leaq	L_.str(%rip), %rdi
         <br/>
         movl	$1, %esi
         <br/>
         movl	$2, %edx
         <br/>
         xorb	%al, %al
         <br/>
         callq	_printf
         <br/>
         LBB0_2:
        </p>
        <p>
         <a href="http://pastebin.com/SK12sxuT" rel="nofollow">
          http://pastebin.com/SK12sxuT
         </a>
        </p>
        <p>
         Indeed, Pascal, arguments *p and *q were replaced with 1, 2 in the call to printf(). Now I get it! Thank you.
        </p>
        <p>
         My vote is for Pascals example because I think that it is more likely to be encountered in real-world code.
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d17 c-h02 c32" id="comment-4685">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://emergent.unpy.net/" rel="external nofollow">
            Jeff Epler
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 17, 2012 at 8:03 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4685" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         I like Nicks program in comment 6; but the discussion about whether the comparison (p==q) is undefined behavior is interesting too.  It seems like it is, which means that code of the form
        </p>
        <p>
         T *q = p; p = realloc(p, new_sz);
         <br/>
         if(p != q) { remap pointers internal to p; }
        </p>
        <p>
         is likewise invoking undefined behavior; an optimizing compiler might choose to make the if condition always false, and never execute the body of the if statement (or even include it in object code).  No, Im not aware of any compiler that actually does this.
        </p>
       </li>
       <li class="comment byuser commentauthor-admin_dfs9gd0fg94h4 bypostauthor c-y2012 c-m07 c-d17 c-h03 alt c33" id="comment-4686">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://www.cs.utah.edu/~regehr/" rel="external nofollow">
            regehr
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 17, 2012 at 9:49 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4686" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Jeff, good point. It would be really easy to write code like this.
        </p>
        <p>
         There are also some other interesting issues having to do with realloc, such as whether it remembers that the original allocation was aligned or initialized.
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d18 c-h10 c34" id="comment-4698">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="https://github.com/corsis/PortFusion/" rel="external nofollow">
            Cetin Sert
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 18, 2012 at 4:57 pm
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4698" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         Nicks example tested on codepad including stdlib.h prints 1 2 and without including stdlib.h prints 2 2.
        </p>
        <p>
         codepad  with stdlib.h
         <br/>
         <a href="http://codepad.org/X0PLLkvj" rel="nofollow">
          http://codepad.org/X0PLLkvj
         </a>
        </p>
        <p>
         codepad  without stdlib.h
         <br/>
         <a href="http://codepad.org/88pmxnFA" rel="nofollow">
          http://codepad.org/88pmxnFA
         </a>
        </p>
        <p>
         ideone prints 2 2 in both cases. Dont know which compilers they are using though.
        </p>
       </li>
       <li class="comment c-y2012 c-m07 c-d19 c-h10 alt c35" id="comment-4704">
        <div class="comment-meta">
         <span class="comment-author vcard">
          <span class="fn n">
           <a class="url url" href="http://hardwarebug.org/" rel="external nofollow">
            Mans
           </a>
          </span>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-datetime">
          <abbr class="comment-published" title="2012-07-12T08:03:08-0600">
           July 20, 2012 at 4:49 am
          </abbr>
         </span>
         <span class="meta-sep">
          |
         </span>
         <span class="comment-permalink">
          <a href="#comment-4704" title="Permalink to this comment">
           Permalink
          </a>
         </span>
        </div>
        <p>
         codepad uses gcc 4.1.2 or something that disguises itself as such very well.
        </p>
       </li>
      </ol>
      <!-- end #comments .commentlist -->
     </div>
     <!-- .comments -->
     <div class="navigation" id="nav-below">
      <div class="nav-previous">
       
       <a href="http://blog.regehr.org/archives/749" rel="prev">
        Parallelizing Delta Debugging
       </a>
      </div>
      <div class="nav-next">
       <a href="http://blog.regehr.org/archives/762" rel="next">
        Anniversary Hike
       </a>
       
      </div>
     </div>
    </div>
    <!-- #content .hfeed -->
   </div>
   <!-- #container -->
   <div class="sidebar" id="primary">
    <ul>
     <li class="widget widget_text" id="text-3">
      <h3 class="widgettitle">
       About me
      </h3>
      <div class="textwidget">
       John Regehr
       <br/>
       Associate Professor of Computer Science
       <br/>
       University of Utah, USA
       <br/>
       <a href="http://www.cs.utah.edu/~regehr/">
        My web page
       </a>
      </div>
     </li>
     <li class="widget widget_search" id="search">
      <h3 class="widgettitle">
       <label for="s">
        Search
       </label>
      </h3>
      <form action="http://blog.regehr.org" id="searchform" method="get">
       <div>
        <input accesskey="S" class="text-input" id="s" name="s" size="10" tabindex="1" type="text" value=""/>
        <input class="submit-button" id="searchsubmit" name="searchsubmit" tabindex="2" type="submit" value="Search"/>
       </div>
      </form>
     </li>
     <li class="widget widget_categories" id="categories-3">
      <h3 class="widgettitle">
       Categories
      </h3>
      <ul>
       <li class="cat-item cat-item-7">
        <a href="http://blog.regehr.org/archives/category/academia">
         Academia
        </a>
        (111)
       </li>
       <li class="cat-item cat-item-11">
        <a href="http://blog.regehr.org/archives/category/books">
         Books
        </a>
        (19)
       </li>
       <li class="cat-item cat-item-15">
        <a href="http://blog.regehr.org/archives/category/compilers">
         Compilers
        </a>
        (92)
       </li>
       <li class="cat-item cat-item-6">
        <a href="http://blog.regehr.org/archives/category/cs">
         Computer Science
        </a>
        (289)
       </li>
       <li class="cat-item cat-item-12">
        <a href="http://blog.regehr.org/archives/category/education">
         Education
        </a>
        (52)
       </li>
       <li class="cat-item cat-item-5">
        <a href="http://blog.regehr.org/archives/category/embedded">
         Embedded
        </a>
        (28)
       </li>
       <li class="cat-item cat-item-8">
        <a href="http://blog.regehr.org/archives/category/food-and-drink">
         Food and drink
        </a>
        (4)
       </li>
       <li class="cat-item cat-item-10">
        <a href="http://blog.regehr.org/archives/category/futurist">
         Futurist
        </a>
        (20)
       </li>
       <li class="cat-item cat-item-3">
        <a href="http://blog.regehr.org/archives/category/outdoors">
         Outdoors
        </a>
        (55)
       </li>
       <li class="cat-item cat-item-9">
        <a href="http://blog.regehr.org/archives/category/parenthood">
         Parenthood
        </a>
        (4)
       </li>
       <li class="cat-item cat-item-14">
        <a href="http://blog.regehr.org/archives/category/random">
         Random
        </a>
        (37)
       </li>
       <li class="cat-item cat-item-16">
        <a href="http://blog.regehr.org/archives/category/software-correctness">
         Software Correctness
        </a>
        (179)
       </li>
       <li class="cat-item cat-item-4">
        <a href="http://blog.regehr.org/archives/category/utah">
         Utah
        </a>
        (55)
       </li>
      </ul>
     </li>
     <li class="widget widget_recent_entries" id="recent-posts-3">
      <h3 class="widgettitle">
       Recent Posts
      </h3>
      <ul>
       <li>
        <a href="http://blog.regehr.org/archives/1241">
         Defending Against Compiler-Based Backdoors
        </a>
       </li>
       <li>
        <a href="http://blog.regehr.org/archives/1246">
         Generating a Random Program vs. Generating All Programs
        </a>
       </li>
       <li>
        <a href="http://blog.regehr.org/archives/1238">
         What afl-fuzz Is Bad At
        </a>
       </li>
       <li>
        <a href="http://blog.regehr.org/archives/1234">
         UB Canaries
        </a>
       </li>
       <li>
        <a href="http://blog.regehr.org/archives/1225">
         Inexpensive CPU Monster
        </a>
       </li>
      </ul>
     </li>
     <li class="widget widget_links" id="linkcat-2">
      <h3 class="widgettitle">
       Blogroll
      </h3>
      <ul class="xoxo blogroll">
       <li>
        <a href="http://www.daniel-lemire.com/blog/">
         Daniel Lemire
        </a>
       </li>
       <li>
        <a href="http://noplacelikehomes.blogspot.com/">
         Derek Hoff
        </a>
       </li>
       <li>
        <a href="http://emeryblogger.wordpress.com/">
         Emery Berger
        </a>
       </li>
       <li>
        <a href="http://femalecomputerscientist.blogspot.com/">
         Female Computer Scientist
        </a>
       </li>
       <li>
        <a href="http://blog.frama-c.com/">
         Frama-C
        </a>
       </li>
       <li>
        <a href="http://blog.llvm.org/">
         LLVM Blog
        </a>
       </li>
       <li>
        <a href="http://matt.might.net/articles/">
         Matt Might
        </a>
       </li>
       <li>
        <a href="http://matt-welsh.blogspot.com/">
         Matt Welsh
        </a>
       </li>
       <li>
        <a href="http://embeddedgurus.com/stack-overflow/">
         Nigel Jones
        </a>
       </li>
       <li>
        <a href="http://betterembsw.blogspot.com/">
         Philip Koopman
        </a>
       </li>
       <li>
        <a href="http://geomblog.blogspot.com/">
         Suresh Venkatasubramanian
        </a>
       </li>
      </ul>
     </li>
    </ul>
   </div>
   <div id="footer">
    <span id="copyright">
      2015
     <span class="vcard">
      <a class="url fn n" href="http://www.cs.utah.edu/~regehr/">
       <span class="given-name">
        John
       </span>
       <span class="family-name">
        Regehr
       </span>
      </a>
     </span>
    </span>
    <span class="meta-sep">
     |
    </span>
    <span id="generator-link">
     Thanks,
     <a href="http://wordpress.org/" rel="generator" title="WordPress">
      WordPress
     </a>
    </span>
    <span class="meta-sep">
     |
    </span>
    <span id="theme-link">
     <a href="http://www.plaintxt.org/themes/barthelme/" rel="follow designer" title="Barthelme theme for WordPress">
      Barthelme
     </a>
     theme by
     <span class="vcard">
      <a class="url fn n" href="http://scottwallick.com/" rel="follow designer" title="scottwallick.com">
       <span class="given-name">
        Scott
       </span>
       <span class="additional-name">
        Allan
       </span>
       <span class="family-name">
        Wallick
       </span>
      </a>
     </span>
    </span>
    <!-- Theme design credit, that's all -->
    <span class="meta-sep">
     |
    </span>
    <span id="web-standards">
     Standards Compliant
     <a href="http://validator.w3.org/check/referer" title="Valid XHTML">
      XHTML
     </a>
     &amp;
     <a href="http://jigsaw.w3.org/css-validator/validator?profile=css2&amp;warning=2&amp;uri=http://blog.regehr.org/wp-content/themes/barthelme/style.css" title="Valid CSS">
      CSS
     </a>
    </span>
    <span class="meta-sep">
     |
    </span>
    <span id="footer-rss">
     RSS
     <a href="http://blog.regehr.org/feed" rel="alternate" title="Embedded in Academia RSS 2.0 Feed" type="application/rss+xml">
      Posts
     </a>
     &amp;
     <a href="http://blog.regehr.org/comments/feed" rel="alternate" title="Embedded in Academia Comments RSS 2.0 Feed" type="application/rss+xml">
      Comments
     </a>
    </span>
   </div>
   <!-- #footer -->
   <!-- ngg_resource_manager_marker -->
   <!--stats_footer_test-->
   <script src="http://stats.wordpress.com/e-201529.js" type="text/javascript">
   </script>
   <script type="text/javascript">
    st_go({blog:'11993579',v:'ext',post:'759'});
var load_cmc = function(){linktracker_init(11993579,759,2);};
if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
else load_cmc();
   </script>
  </div>
  <!-- #wrapper -->
 </body>
 <!-- end trasmission -->
</html>