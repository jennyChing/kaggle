<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
 <head>
  <title>
   TGLTLSBFSSP:
  </title>
  <link href="hugo.elias@virgin.net" rev="made"/>
 </head>
 <body background="paper.jpg" bgcolor="#d2d2d2" link="#0000ff" text="#000000" vlink="#000099">
  <center>
   <h1>
    Fluid Fire
   </h1>
  </center>
  <p>
  </p>
  <hr/>
  <p>
  </p>
  <table border="0">
   <tr>
    <td>
     <img align="left" alt="Fire Demo" height="245" src="ffire_1.jpg" width="245"/>
    </td>
    <td>
    </td>
    <td>
     Matt Fairclough and I attended a lecture at SIGGRAPH 2001, by a great guy, Jos Stam. He was presenting a paper explaining a technique for rapidly simulating
a fluid. The demonstrations were stunning. He showed very fast, smooth fluids in 2D, and even some 3D fluids, running at a reasonable speed.
But he waited till the end before proudly showing us a fluid simulation running at full speed on his palm top.
     <p>
      Most of the simulations showed Smoke moving around in Air. The smoke tended to be heavier than the air, and would sink to the bottom of the space, swirling beautifully.
The thicker the smoke, the faster it would sink.
     </p>
     <p>
      So we got thinking. Surely this would be a perfect way to simulate fire, because fire is a fluid.
     </p>
    </td>
    <td>
    </td>
   </tr>
  </table>
  <p>
  </p>
  <hr/>
  <p>
  </p>
  <h2>
   How does a fire work?
  </h2>
  Very generally, fire consists of the following things:
  <b>
   FUEL
  </b>
  ,
  <b>
   HEAT
  </b>
  ,
  <b>
   OXYGEN
  </b>
  and
  <b>
   INERT GAS
  </b>
  .
If the fuel is hot enough, and if there is sufficient oxygen, the fuel will react
with the oxygen, using them up, and creating heat:
  <p>
  </p>
  <pre>
   <center>
    <font size="+2">
     <b>
      Fuel + Oxygen --&gt; Heat + Waste
     </b>
    </font>
   </center>
  </pre>
  <h2>
   Three arrays to store Heat, Oxygen and Fuel
  </h2>
  Most fluid smoke simulations simulate the movement of one thing (smoke) through the fluid, and this is what they render. For the fire, we will need to transport the Fuel, Oxygen and Heat through the air. So for those, we need separate arrays, each of which behave a little differently. These arrays would not be rendered, but I'll draw them
to aid explanation.
  <p>
  </p>
  <table>
   <tr>
    <td width="33%">
     <img align="left" height="128" src="fire_h1.jpg" width="128"/>
     <b>
      Heat:
     </b>
     Initially, we can set the heat to zero everywhere. No combustion has taken place, and so it's cold.
    </td>
    <td width="34%">
     <img align="left" height="128" src="fire_o1.jpg" width="128"/>
     <b>
      Oxygen:
     </b>
     Here's blue will be used to show where there is oxygen.
    </td>
    <td width="33%">
     <img align="left" height="128" src="fire_f1.jpg" width="128"/>
     <b>
      Fuel:
     </b>
     To begin with, I'll place a small blob of yellow fuel. For simplicity, we can consider the fuel to be a gas, and so
	  is affected by convection. If we re-render the fuel into the array every frame, we can simulate a solid piece of evaporating fuel.
    </td>
   </tr>
  </table>
  <p>
   <br/>
  </p>
  <p>
  </p>
  <h2>
   Burn Step
  </h2>
  Now, we shall make the three arrays interact. You may remember a little from your chemistry classes (I certain ally remember very little). The rate of a reaction
depends on the concentration of the reactants (oxygen and fuel in this case) and the temperature. It also depends on the barrier energy of the reaction. If the
temperature is too low, then the reaction will not take place. The faster the reaction proceeds, the more heat is created, and the faster the reactants are used
up. So, a stylised reaction algorithm is the following:
  <p>
  </p>
  <table border="1" width="100%">
   <tr>
    <td>
     <pre>
      procedure
      <b>
       burn
      </b>
      for every pixel
      <b>
       i
      </b>
      {
      <b>
       O
      </b>
      =
      <b>
       oxygen
      </b>
      [
      <b>
       i
      </b>
      ];
      <b>
       F
      </b>
      =
      <b>
       fuel
      </b>
      [
      <b>
       i
      </b>
      ];
      <b>
       H
      </b>
      =
      <b>
       heat
      </b>
      [
      <b>
       i
      </b>
      ];
      <b>
       reaction_rate
      </b>
      = (
      <b>
       O
      </b>
      *
      <b>
       F
      </b>
      *
      <b>
       H
      </b>
      -
      <b>
       energy_barrier
      </b>
      ) *
      <b>
       rate_constant
      </b>
      if (
      <b>
       reaction_rate
      </b>
      0)
      <b>
       reaction_rate
      </b>
      =
      <b>
       0
      </b>
      <i>
       Limit the reaction rate so
      </i>
      if (
      <b>
       reaction_rate
      </b>
      &gt;
      <b>
       maxrate
      </b>
      )
      <b>
       reaction_rate
      </b>
      =
      <b>
       maxrate
      </b>
      <i>
       it doesn't blow up (literally)
      </i>
      <b>
       oxygen
      </b>
      [
      <b>
       i
      </b>
      ] -=
      <b>
       reaction_rate
      </b>
      <i>
       Use up the reactants
      </i>
      <b>
       fuel
      </b>
      [
      <b>
       i
      </b>
      ]   -=
      <b>
       reaction_rate
      </b>
      <b>
       temp
      </b>
      [
      <b>
       i
      </b>
      ]   +=
      <b>
       reaction_rate
      </b>
      *
      <b>
       Exothermicness
      </b>
      <i>
       And increase the temperature
      </i>
      if (
      <b>
       oxygen
      </b>
      [
      <b>
       i
      </b>
      ] 0)
      <b>
       oxygen
      </b>
      [
      <b>
       i
      </b>
      ] =
      <b>
       0
      </b>
      if (
      <b>
       fuel
      </b>
      [
      <b>
       i
      </b>
      ]   0)
      <b>
       fuel
      </b>
      [
      <b>
       i
      </b>
      ] =
      <b>
       0
      </b>
      }

    end of procedure
     </pre>
    </td>
   </tr>
  </table>
  <p>
   You can see that there are several constants here,
   <b>
    energy_barrier
   </b>
   ,
   <b>
    rate_constant
   </b>
   ,
   <b>
    maxrate
   </b>
   ,
   <b>
    Exothermicness
   </b>
   ,
which control various aspects of the reaction. Since this is not a real accurate simulation, we can just find the right values for these by trial and error.
  </p>
  <table>
   <tr>
    <td width="33%">
     <img align="left" height="128" src="fire_h2.jpg" width="128"/>
     <b>
      Heat:
     </b>
     A small amount of heat generated in the reaction.
    </td>
    <td width="34%">
     <img align="left" height="128" src="fire_o2.jpg" width="128"/>
     <b>
      Oxygen:
     </b>
     Oxygen around the fuel used up.
    </td>
    <td width="33%">
     <img align="left" height="128" src="fire_f2.jpg" width="128"/>
     <b>
      Fuel:
     </b>
     No fuel left.
    </td>
   </tr>
  </table>
  <p>
  </p>
  <p>
   <br/>
  </p>
  <p>
  </p>
  <h2>
   Convection
  </h2>
  Now that we have some heat, we can use this to cause convection. The relative temperature can be directly translated into
convective forces (we're assuming that ambient temperature is zero, so relative and absolute are the same).
  <table border="1" width="100%">
   <tr>
    <td>
     <pre>
      procedure
      <b>
       setForces
      </b>
      for every pixel
      <b>
       i
      </b>
      {
      <b>
       velocity_vert
      </b>
      [
      <b>
       i
      </b>
      ] +=
      <b>
       temp
      </b>
      [
      <b>
       i
      </b>
      ] *
      <b>
       Convectivness
      </b>
      <i>
       Cause convection (up is positive)
      </i>
      <b>
       velocity_vert
      </b>
      [
      <b>
       i
      </b>
      ]  *=
      <b>
       velocity_damping
      </b>
      <i>
       Add a little damping for stability
      </i>
      <b>
       velocity_horiz
      </b>
      [
      <b>
       i
      </b>
      ] *=
      <b>
       velocity_damping
      </b>
      }

    end of procedure
     </pre>
    </td>
   </tr>
  </table>
  Now, I'm afraid, this is the step I'm going to mostly leave out. This is an article about adapting a fluid simulation to render flames, not one about fluids themselves. I'm going to assume you already have an engine for simulating fluid. If you want to write your own simulation, here are some excellent
  <a href="http://www.dgp.toronto.edu/people/stam/reality/Research/pub.html">
   Papers by Jos Stam
  </a>
  .
  <p>
   <br/>
  </p>
  <p>
  </p>
  <h2>
   Gas Expansion
  </h2>
  You'll remember from physics lessons that when you change the temperature of a gas, then it's pressure will change. So if it's not enclosed in a rigid container, it's
volume will change also.
  <p>
  </p>
  <p>
  </p>
  <pre>
   <center>
    <font size="+2">
     <b>
      pressure  =
      <u>
       temperature
      </u>
      volume
     </b>
    </font>
   </center>
  </pre>
  The sudden heating caused by the combustion of the fuel, will therefore make the gas expand. This is a good thing to include in your simulation, but is
not essential.
  <p>
   <br/>
  </p>
  <p>
  </p>
  <h2>
   Rendering
  </h2>
  The accurate rendering of fire is just as important as simulating it's motion. Why is fire that colour?
  <p>
   <b>
    The Palette
   </b>
   <br/>
   Fire gives off light for two reasons. Firstly the high temperature of the gasses causes them to glow, in the same way that a hot piece of metal glows. The hotter the
gas, the more energy is given off. Slightly hot gas gives off mostly long wavelength (low energy) light (infra red). As the temperature increases, it begins to give off
light of shorter and shorter wavelengths; first red, then red and green (yellow), then blue as well, making it appear white.
  </p>
  <p>
   The other reason fire gives off light, is as part of the chemical reaction. If you look at a candle flame, you can see a little blue light given off at the very base. For the time being, I shall ignore this, as it is hardly seen in larger flames.
  </p>
  <p>
   The power of light of a particular wavelength (
   <b>
    &amp;lambda
   </b>
   ), given off at a particular temperature (
   <b>
    t
   </b>
   ) is given by the Planck Energy Distribution Equation,
also known as the
   <a href="http://www.egglescliffe.org.uk/physics/astronomy/blackbody/bbody.html">
    Black Body Radiation
   </a>
   Equation:
  </p>
  <table border="0">
   <tr>
    <td align="center">
     <pre>
      <font size="+2">
       <b>
        power
       </b>
       =
       <u>
        2hc
        <sup>
         2
        </sup>
       </u>
       &amp;lambda
       <sup>
        5
       </sup>
       (e
       <sup>
        (hc/kt)
       </sup>
       -1)
      </font>
     </pre>
    </td>
    <td>
     <pre>
      h = Planck's Constant: 6.626 x 10
      <sup>
       -34
      </sup>
      Js
    c = Speed Of Light:    2.99  x 10
      <sup>
       8
      </sup>
      m/s
    &amp;lambda = wavelength in metres
    k = Boltzmann Constant: 1.38 x 10
      <sup>
       -23
      </sup>
      J/K
    T = Temperature in Kelvin
     </pre>
    </td>
   </tr>
   <tr>
    <td align="center">
     <a href="lightpwr.gif">
      <img border="0" src="lightpw2.gif"/>
     </a>
    </td>
    <td>
     On the left, you can see a graph showing the distribution of wavelengths of light given off by an object at various temperatures. At a cool 4000C, the light is fairly
dim, and mostly in the red region. By the time you get to 5750C, the light is very bright, and has a slight blue colour.
     <p>
      Therefore, for any temperature, we can calculate exactly the colour and brightness of the flame.
      <br/>
      All we need to know is the wavelength of red, green and blue light:
     </p>
     <pre>
      <b>
       Red
      </b>
      = 700 nm
      <b>
       Green
      </b>
      = 560 nm
      <b>
       Blue
      </b>
      = 470 nm
     </pre>
    </td>
   </tr>
  </table>
  <p>
   Since the calculation of the colour of light for a temperature involves that hideous computation, it would be a good idea to pre-calculate a spectrum of colours for
the range of temperatures you'll be using.
  </p>
  <p>
  </p>
  <table border="1">
   <tr>
    <td>
     <pre>
      constants
      <b>
       h
      </b>
      =
      <b>
       6.626
      </b>
      x
      <b>
       10
       <sup>
        -34
       </sup>
      </b>
      <b>
       c
      </b>
      =
      <b>
       3.000
      </b>
      x
      <b>
       10
       <sup>
        8
       </sup>
      </b>
      <b>
       k
      </b>
      =
      <b>
       1.380
      </b>
      x
      <b>
       10
       <sup>
        -23
       </sup>
      </b>
      <b>
       red_wave
      </b>
      =
      <b>
       0.70
      </b>
      x
      <b>
       10
       <sup>
        -6
       </sup>
      </b>
      <i>
       wavelengths of red, green and blue light
      </i>
      <b>
       grn_wave
      </b>
      =
      <b>
       0.56
      </b>
      x
      <b>
       10
       <sup>
        -6
       </sup>
      </b>
      <b>
       blu_wave
      </b>
      =
      <b>
       0.47
      </b>
      x
      <b>
       10
       <sup>
        -6
       </sup>
      </b>
      <b>
       exposure_level
      </b>
      =
      <b>
       50.0
      </b>
      <i>
       Camera exposure level (see
       <a href="../graphics/x_posure.htm">
        exposure function
       </a>
       )
      </i>
      procedure
      <b>
       lightpower
      </b>
      (
      <b>
       wavelength
      </b>
      ,
      <b>
       temperature
      </b>
      )
      <b>
       L
      </b>
      =
      <b>
       wavelength
      </b>
      <b>
       T
      </b>
      =
      <b>
       temperature
      </b>
      <b>
       power
      </b>
      =
      <b>
       L
       <sup>
        5
       </sup>
      </b>
      *
      <b>
       e
      </b>
      <sup>
       ((
       <b>
        h
       </b>
       *
       <b>
        c
       </b>
       )/(
       <b>
        k
       </b>
       *
       <b>
        T
       </b>
       *
       <b>
        L
       </b>
       ))
      </sup>
      -
      <b>
       1
      </b>
      )
      <b>
       power
      </b>
      =
      <b>
       10
       <sup>
        -28
       </sup>
      </b>
      /
      <b>
       power
      </b>
      <i>
       I haven't bothered with the correct numerator,
		                             I just chose something to give values roughly 
        return
       <b>
        e
       </b>
       end of procedure



    procedure
       <b>
        InitColours
       </b>
       loop
       <b>
        i
       </b>
       from
       <b>
        0
       </b>
       to
       <b>
        NumColours
       </b>
       -
       <b>
        1
       </b>
       <b>
        T
       </b>
       = remap
       <b>
        i
       </b>
       from the range (
       <b>
        0
       </b>
       ..
       <b>
        NumColours
       </b>
       ) to (
       <b>
        MinTemp
       </b>
       ..
       <b>
        MaxTemp
       </b>
       )
       <b>
        RED
       </b>
       [
       <b>
        i
       </b>
       ] =
       <b>
        expose
       </b>
       (
       <b>
        lightpower
       </b>
       (
       <b>
        red_wave
       </b>
       ,
       <b>
        T
       </b>
       ),
       <b>
        exposure_level
       </b>
       )
       <b>
        GRN
       </b>
       [
       <b>
        i
       </b>
       ] =
       <b>
        expose
       </b>
       (
       <b>
        lightpower
       </b>
       (
       <b>
        grn_wave
       </b>
       ,
       <b>
        T
       </b>
       ),
       <b>
        exposure_level
       </b>
       )
       <b>
        BLU
       </b>
       [
       <b>
        i
       </b>
       ] =
       <b>
        expose
       </b>
       (
       <b>
        lightpower
       </b>
       (
       <b>
        blu_wave
       </b>
       ,
       <b>
        T
       </b>
       ),
       <b>
        exposure_level
       </b>
       )

            GRN[i] = expose(lightpower(grn_wave, T), exposure_level)
            BLU[i] = expose(lightpower(blu_wave, T), exposure_level)
       <b>
        powerloss[
        <b>
         t] =
         <b>
          pow(
          <b>
           t/
           <b>
            MaxTemp,
            <b>
             4.0)*
             <b>
              10;

        end of loop

    end of procedure
             </b>
            </b>
           </b>
          </b>
         </b>
        </b>
       </b>
      </i>
     </pre>
    </td>
   </tr>
  </table>
  Notice the use of the
  <b>
   exposure
  </b>
  function. The range of a large range of brightnesses will be emitted by the flames, and so you will need to use the exposure
function to bring them within range of your monitor. If you don't, you'll end up with a washed out image, lacking the detail in the darkest and brightest areas.
  <p>
   Find out more information about the
   <a href="../graphics/x_posure.htm">
    exposure function
   </a>
   .
  </p>
  <p>
   And after all that, your spectrum should look something like this:
   <br/>
  </p>
  <p>
   <img src="Spectrum.jpg"/>
  </p>
  <p>
   <b>
    Smoke
   </b>
   <br/>
   If there is insufficient oxygen, and if you assume your fuel is carbon-based, then any unburned fuel should become smoke.
  </p>
  <p>
   <br/>
  </p>
  <p>
  </p>
  <h2>
   Cooling
  </h2>
  Aside from the colour of the flame, Planck's formula also tells us exactly how much energy is being given off in the form of radiation. And so we know the rate of
cooling of every part of the flame. The rate of cooling by radiation is proportional to the fourth power of the temperature.
  <pre>
   <font size="+2">
    <b>
     Rate Of Cooling
    </b>
    =
    <b>
     R
    </b>
    *
    <b>
     T
     <sup>
      4
     </sup>
    </b>
   </font>
  </pre>
  Where
  <b>
   R
  </b>
  is some constant which can be fiddled with. The important thing is that the cooling follows the fourth power law.
  <p>
   <br/>
  </p>
  <p>
  </p>
  <h2>
   Altogether Now
  </h2>
  <p>
  </p>
  <table border="1" width="100%">
   <tr>
    <td>
     <pre>
      procedure
      <b>
       initialise
      </b>
      initialise colours
        initialise fluid dynamics
        initialise fuel array
        initialise oxygen array
        initialise heat array
    end procedure

    procedure
      <b>
       Main Loop
      </b>
      burn reactants
        calculate convection forces
        calculate fluid dynamics
        replenish fuel and oxygen
        cool
        render
    end procedure
     </pre>
    </td>
   </tr>
  </table>
  <p>
   <br/>
  </p>
  <p>
  </p>
  <h2>
   Demo
  </h2>
  Now, I'm still playing around with this, but I thought I'd put it up anyway. I wrote this simulation based on the code published by Gustav Taxn, and added
the above algorithms. It seems to work OK; you can imagine you're looking at a large bonfire, and it's mildly convincing. Though not quite the small flame I
had been hoping for. In fact, to be honest, it's pretty lame, and need a much better fluid simulation.
  <p>
   There are a lot of controls to play with:
  </p>
  <p>
  </p>
  <table border="0">
   <tr>
    <td>
     <b>
      Oxygen:
     </b>
    </td>
    <td>
     The concentration of Oxygen in the atmosphere.
    </td>
   </tr>
   <tr>
    <td>
     <b>
      Fuel:
     </b>
    </td>
    <td>
     The concentration of Fuel in the pile below.
    </td>
   </tr>
   <tr>
    <td>
     <b>
      Combustability:
     </b>
    </td>
    <td>
     The reaction rate multiplier. Greater values mean the fuel burns quicker.
    </td>
   </tr>
   <tr>
    <td>
     <b>
      max burn rate:
     </b>
    </td>
    <td>
     An upper limit on the burn rate seems to stop things going out of control.
    </td>
   </tr>
   <tr>
    <td>
     <b>
      Energy Hill:
     </b>
    </td>
    <td>
     The amount of energy needed before a reaction will start.
    </td>
   </tr>
   <tr>
    <td>
     <b>
      Temp2Light_Mul:
     </b>
    </td>
    <td>
     (for rendering) Adjusts the conversion from heat to light.
    </td>
   </tr>
   <tr>
    <td>
     <b>
      Temp2Light_Add:
     </b>
    </td>
    <td>
    </td>
   </tr>
   <tr>
    <td>
     <b>
      Exothermicness:
     </b>
    </td>
    <td>
     The amount of heat generated in the reaction.
    </td>
   </tr>
   <tr>
    <td>
     <b>
      Velocity Damping:
     </b>
    </td>
    <td>
     Kinetic energy removed from the movement of the air helps to keep it stable.
    </td>
   </tr>
   <tr>
    <td>
     <b>
      Initial Fuel Warming:
     </b>
    </td>
    <td>
     The energy provided to ignite the reaction. This stays on after ignition. Lower the value, and see it smolder.
    </td>
   </tr>
   <tr>
    <td>
     <b>
      Up Draught:
     </b>
    </td>
    <td>
     Gently blowing from below to fan the flames.
    </td>
   </tr>
   <tr>
    <td>
     <b>
      dt:
     </b>
    </td>
    <td>
     Simulation time step.
    </td>
   </tr>
   <tr>
    <td>
     <b>
      powerloss_adj:
     </b>
    </td>
    <td>
     Rate at which the flame looses energy through radiation.
    </td>
   </tr>
   <tr>
    <td>
     <b>
      Convectiveness:
     </b>
    </td>
    <td>
     The buoyancy of the hot gas.
    </td>
   </tr>
   <tr>
    <td>
     <b>
      Fuel Width:
     </b>
    </td>
    <td>
     Lets you adjust the spacing of the fuel blocks.
    </td>
   </tr>
   <tr>
    <td>
     <b>
      Fuel Height:
     </b>
    </td>
    <td>
    </td>
   </tr>
  </table>
  <br/>
  When you run the demo, drag the control window out of the way, then press "Ignite".
  <br/>
  <a href="http://freespace.virgin.net/derek.elias/fire.zip">
   <img border="0" src="firedemo.gif"/>
  </a>
  <br/>
  Download
  <a href="http://freespace.virgin.net/derek.elias/fire.zip">
   fluid_fire.zip
  </a>
  : 482kb. Windows
  <br/>
  <p>
  </p>
  <hr/>
  <p>
   <font size="+2">
    References
   </font>
  </p>
  <p>
   <b>
    <a href="http://www.dgp.toronto.edu/people/stam/reality/Research/pub.html">
     Papers by Jos Stam:
    </a>
    http://www.dgp.toronto.edu/people/stam/reality/Research/pub.html
   </b>
   <br/>
   Links to some great papers such as: A Simple Fluid Solver based on the FFT, and Stable Fluids.
  </p>
  <p>
   <b>
    <a href="http://www.nada.kth.se/~gustavt/fluids/">
     Wispy smoke using a FFT fluid dynamics solver, Gustav Taxn:
    </a>
    http://www.nada.kth.se/~gustavt/fluids/
   </b>
   <br/>
   I used Gustav's public domain source code which he bravely wrote using Jos Stam's example code. I tried this myself, but gave up, frustrated
by the FFT. Many thanks to Gustav for making his code public.
  </p>
  <p>
   <b>
    <a href="http://panoramix.ift.uni.wroc.pl/~maq/">
     Computer Simulations In Physics:
    </a>
    http://panoramix.ift.uni.wroc.pl/~maq/
   </b>
   <br/>
   A brilliant site, with lots of physics simulation examples, including Computational Fluid Dynamics.
  </p>
  <p>
   <b>
    <a href="http://graphics.stanford.edu/~fedkiw/">
     Ron Fedkiw's Homepage:
    </a>
    http://graphics.stanford.edu/~fedkiw/
   </b>
   <br/>
   Ron Fedkiw is another of the inspiring speakers I saw at SIGGRAPH. He has written many papers on fluids, and other simulations. But the
real attractions here are the most beautiful animations of liquids, flames and cloths.
  </p>
  <p>
  </p>
  <hr/>
  <p>
  </p>
  <table border="0" width="100%">
   <tr>
    <td>
     <table>
      <tr>
       <td width="95">
        <a href="http://freespace.virgin.net/hugo.elias">
         <img alt="" border="0" height="50" src="../flagsmal.gif" width="95"/>
        </a>
       </td>
       <td>
        <a href="http://freespace.virgin.net/hugo.elias">
         Return to the Good Looking
         <br/>
         Textured Light Sourced
         <br/>
         Bouncy Fun Smart and Stretchy Page.
        </a>
       </td>
      </tr>
     </table>
    </td>
    <td>
     <!--
	    &lt;a href="http://validator.w3.org/check/referer"&gt;&lt;img border="0"
        src="http://www.w3.org/Icons/valid-html401"
        alt="Valid HTML 4.01!" height="31" width="88"&gt;&lt;/a&gt;
		-->
    </td>
    <td align="right">
     <table border="0">
      <tr>
       <td>
        <img align="left" alt="" height="91" src="../copyrite.gif" width="135"/>
       </td>
       <td>
        <font face="tahoma, verdana" size="+0">
         <b>
           2003
         </b>
         <p>
          <br/>
          Hugo Elias
         </p>
        </font>
       </td>
      </tr>
     </table>
    </td>
   </tr>
  </table>
 </body>
</html>