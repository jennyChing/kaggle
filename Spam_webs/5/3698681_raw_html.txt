<!DOCTYPE html>
<html lang="en">
 <head>
  <meta charset="utf-8"/>
  <title>
   The Codist: You're Doing It Wrong!
  </title>
  <meta content="The Codist - programming blog" name="description"/>
  <meta content="Andrew Wulf" name="author"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <link href="http://thecodist.com/rss.php" rel="alternate" title="RSS" type="application/rss+xml"/>
  <link href="/stylesheets/style.css" rel="stylesheet"/>
  <link href="/fav/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
  <link href="/fav/apple-icon-60x60.png" rel="apple-touch-icon" sizes="60x60"/>
  <link href="/fav/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
  <link href="/fav/apple-icon-76x76.png" rel="apple-touch-icon" sizes="76x76"/>
  <link href="/fav/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
  <link href="/fav/apple-icon-120x120.png" rel="apple-touch-icon" sizes="120x120"/>
  <link href="/fav/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
  <link href="/fav/apple-icon-152x152.png" rel="apple-touch-icon" sizes="152x152"/>
  <link href="/fav/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
  <link href="/fav/android-icon-192x192.png" rel="icon" sizes="192x192" type="image/png"/>
  <link href="/fav/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"/>
  <link href="/fav/favicon-96x96.png" rel="icon" sizes="96x96" type="image/png"/>
  <link href="/fav/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"/>
  <link href="/fav/manifest.json" rel="manifest"/>
  <meta content="#ffffff" name="msapplication-TileColor"/>
  <meta content="/fav/ms-icon-144x144.png" name="msapplication-TileImage"/>
  <meta content="#ffffff" name="theme-color"/>
  <script type="text/javascript">
   var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-489872-6']);
        _gaq.push(['_trackPageview']);

        (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        })();
  </script>
  <!--[if lt IE 9]&gt;
    &lt;script src="/javascripts/html5shiv.min.js"&gt;&lt;/script&gt;
    &lt;![endif]-->
 </head>
 <body>
  <header id="top" role="banner">
   <img alt="The Codist Logo" src="/images/titlebarshort.png"/>
  </header>
  <main class="group" id="content" role="main">
   <div id="menulink">
    <a href="#navigation">
     Menu
    </a>
   </div>
   <div id="left">
    <article>
     <header>
      <h3 class="headline">
       You're Doing It Wrong!
      </h3>
      <span>
       Nov 24, 2013
      </span>
     </header>
     <p>
      If you are building a bridge you can't ignore gravity, the design has to hold up the load. If you are making a Souffle, you need to follow the instructions precisely to make it come out right. If you are writing software however there isn't a single way to get it right (assuming you can even define what right is).
     </p>
     <p>
      This doesn't stop people from insisting that their way is the only way and that if you don't agree You're Doing It Wrong!
     </p>
     <p>
      One advantage of having been a working programmer for 3 decades is you get a long term view of how ideas in programming have grown over the years. Because communication is so easy these days ideas gain traction and people try them out much quicker than when I started. The flip side is that people are much quicker to insist that they hold the One True Way and that you clearly are stupid if you disagree.
     </p>
     <p>
      Before the internet unleashed the ability of instant communication you learned about new stuff from far fewer sources and often the lead times were measured in months or even years. I always read magazines and a few journals, went to computer shows or just talked with other programmers around me, and generally learned about changes in the industry at a really glacial pace. Unlike today we often had to figure stuff out for ourselves because there wasn't anywhere to ask a question.
     </p>
     <p>
      I remember reading the famous issue of Byte magazine which discussed Smalltalk and basically introduced OO concepts to a whole generation of programmers. Yes, a paper magazine with a lead time of 3 months. I had no access to Smalltalk and there was no C++ as yet (which first appeared as a C preprocessor). When I started working on Deltagraph in late 1988 I decided to try some OO programming so I made a really bizarre extension to C which gave me inheritance and polymorphism but oddly enough no objects. Today it seems laughable but it did allow me to create multiple graphics export types from a single driver (basically subclasses of an abstract class). Of course I had no clue how a real OO language would operate since I didn't have one.
     </p>
     <p>
      Today I read about new ideas every day. Especially in the open source world (which of course also didn't exist back then outside of the academic world) not a day goes by without a new programming language, framework or other idea. Trying to simply remember the names is impossible, much less being able to distinguish useful improvements from inventive noise. There are also so many different kinds of programming today so what is pointless for some might be a real breakthrough for others.
     </p>
     <p>
      When I started in my first job we had two platforms, mainframe and supermini, plus the actual hardware on the F-16. Today the web is fragmented, the mobile world is fragmented, the desktop world is fragmented, and the stupid mainframes are still around. Programming when I started that first year was either batch or (barely) interactive. Today it's hard to find any two programmers who do the same thing on the same type of application with the same tools. Yet it's all still programming.
     </p>
     <p>
      So today there is no barrier to telling the world how to do something. The problem is perspective; taking your single or few data points and assuming it works for everyone in every situation. The world of programming is both incredible wide and deep and thinking that what you know is applicable to a broad audience is pretty common today. Back when I started you might have the same attitude (at my first job we had all sorts of experts come and tell us stuff, all of which sank like a stone) but it was hard to spread it very far.
     </p>
     <p>
      The truth you learn over time is that there are a very few good ideas applicable to everyone, a fair number of ideas applicable to specific areas, and a whole lot of noise. I think today interpreting whether ideas are useful and applicable to your situation is a lot harder than it was when I started due to the enormous quantity.
     </p>
     <p>
      My current position and the previous two have almost nothing in common. First I was a Java architect involved in building high performance batch systems; then I worked at an MMO/FPS game company optimizing a cross-platform client in C/C++; currently I write iOS apps in Objective-C for a travel company. Three radically different worlds yet all are programming (the first was mostly doing R&amp;D). Each company was also organized differently and had extremely different business models and expectations. Being successful at each job required very different skills for me and the other programmers.
     </p>
     <p>
      Could I have done each job in such a way to make everyone with an idea of how to write software happy? I am sure, no. I bet the same is true of everyone who reads this. If you exposed how you and your team or company write software there would be a whole host of critics who would condemn everything you do as stupid and some who might agree with you. That's the thing about programming, there is no one single way and everyone's a critic. In the end what matters is, does it work for us? If you read about something new, is it worth doing? Will it make us better, or just different? Or will it screw us up entirely?
     </p>
     <p>
      You can't get too excited about new ideas, most of them are probably not worth doing or only help a narrow few. But you can't just ignore new ideas either or you will wind up hopelessly obsolete. Over the years I've changed repeatedly, sometimes temporarily in the wrong direction, or too early. Yet I've also learned to be careful not to jump on a bandwagon with both feet either. That's the truly hard part of being a modern programmer, knowing when to change and when to run away. The speed at which you often have to make decisions these days is what is so much harder today. I could learn about OO programming and barely use it for 5 years before it started to matter. Today you might need to learn something new today and use it immediately.
     </p>
     <p>
      There are no absolutes in programming even today; you have to figure out if it applies or works for you or even is worth considering, and try to ignore all the folks screaming at you to do it their way. You aren't doing it wrong if it works for you, but you will be doing it wrong if you blindly follow advice without thinking.
     </p>
    </article>
   </div>
   <nav id="right">
    <a id="navigation">
    </a>
    <h3>
     Site
    </h3>
    <ul>
     <li>
      <a href="/">
       Home
      </a>
     </li>
     <li>
      <a href="/all">
       All Posts
      </a>
     </li>
     <li>
      RSS
      <a href="/rss.php">
       <img alt="the codist-programmerthink-rss" src="/images/feed-icon-14x14.png"/>
       Feed
      </a>
     </li>
     <li class="twitbutton">
      <a class="twitter-follow-button" data-show-count="false" href="http://twitter.com/imthecodist">
       Follow @imthecodist
      </a>
      <script src="http://platform.twitter.com/widgets.js" type="text/javascript">
      </script>
     </li>
    </ul>
    <h3>
     Latest
    </h3>
    <ul>
     <li>
      <a href="/article/after-3-decades-in-programming-looking-at-the-next-3-decades">
       After 3 Decades In Programming, Looking At the Next 3 Decades
      </a>
     </li>
     <li>
      <a href="/article/before-you-fix-the-bug-make-sure-you-understand-it-exactly">
       Before You Fix The Bug Make Sure You Understand It Exactly
      </a>
     </li>
     <li>
      <a href="/article/down-with-downvoting">
       Down With Downvoting
      </a>
     </li>
     <li>
      <a href="/article/swift-is-not-easy-to-learn">
       Swift Is Not Easy To Learn
      </a>
     </li>
     <li>
      <a href="/article/how-i-ve-avoided-burnout-during-more-than-3-decades-as-a-programmer">
       How Ive Avoided Burnout During More Than 3 Decades As A Programmer
      </a>
     </li>
    </ul>
    <h3>
     Popular
    </h3>
    <ul>
     <li>
      <a href="/article/yes_i_still_want_to_be_doing_this_at_56">
       Yes I Still Want To Be Doing This at 56
      </a>
     </li>
     <li>
      <a href="/article/why_i_don_39_t_do_unpaid_overtime_and_neither_should_you">
       Why I Don't Do Unpaid Overtime and Neither Should You
      </a>
     </li>
     <li>
      <a href="/article/all-i-need-to-know-to-be-a-better-programmer-i-learned-in-kindergarten">
       All I Need To Know To Be A Better Programmer I Learned In Kindergarten
      </a>
     </li>
     <li>
      <a href="/article/your_progress_as_a_programmer_is_all_up_to_you">
       Your Progress As A Programmer Is All Up To You
      </a>
     </li>
     <li>
      <a href="/article/programming_is_a_dead_end_job">
       Programming Is a Dead End Job
      </a>
     </li>
     <li>
      <a href="/article/lessons_from_a_lifetime_of_being_a_programmer">
       Lessons From A Lifetime Of Being A Programmer
      </a>
     </li>
     <li>
      <a href="/article/what_writing_and_selling_software_was_like_in_the_80_39_s">
       What Writing - And Selling - Software Was Like In The 80's
      </a>
     </li>
     <li>
      <a href="/article/the-absolute-need-to-understand">
       The Absolute Need To Understand
      </a>
     </li>
     <li>
      <a href="/article/how_hotel_reservations_work">
       How Hotel Reservations Work
      </a>
     </li>
     <li>
      <a href="/article/interviews_can_be_a_terrible_way_to_identify_good_programmers">
       Interviews Can Be a Terrible Way to Identify Good Programmers
      </a>
     </li>
    </ul>
    <div id="google_translate_element">
    </div>
    <script type="text/javascript">
     function googleTranslateElementInit() {
        new google.translate.TranslateElement({pageLanguage: 'en', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
    }
    </script>
    <script src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit" type="text/javascript">
    </script>
    <div id="googlesearch">
     <!-- Use of this code assumes agreement with the Google Custom Search Terms of Service. -->
     <!-- The terms of service are available at http://www.google.com//cse/docs/tos.html -->
     <form action="https://www.google.com/cse" id="searchbox_demo" name="cse">
      <input name="cref" type="hidden" value=""/>
      <input name="ie" type="hidden" value="utf-8"/>
      <input name="hl" type="hidden" value=""/>
      <input name="q" size="30" type="text"/>
      <input name="sa" type="submit" value="Search"/>
     </form>
     <script src="https%3A%2F%2Fcse.google.com%2Fcse/tools/onthefly?form=searchbox_demo&amp;lang=" type="text/javascript">
     </script>
    </div>
   </nav>
  </main>
  <footer id="bottom" role="contentinfo">
   <span>
    Copyright  2006-2015 Andrew Wulf
   </span>
   <span>
    <script type="text/javascript">
     var at = "@";
        var mt = "mailto:";
        document.write("&lt;a href='"+mt+"im.the.codist"+at+"gmail.com"+"'&gt;Mail&lt;\/a&gt;");
    </script>
    <noscript>
     im. the. codist @t gmail. com
    </noscript>
   </span>
  </footer>
 </body>
</html>