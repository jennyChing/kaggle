<!DOCTYPE HTML>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <link href="http://fonts.googleapis.com/css?family=Raleway:400|Handlee" rel="stylesheet" type="text/css"/>
  <link href="/JQ/jquery-ui-1.10.3/themes/base/jquery-ui.css" rel="stylesheet"/>
  <link href="/CSS/main.css" rel="stylesheet" type="text/css"/>
  <link href="/CSS/player.css" rel="stylesheet" type="text/css"/>
  <link href="/CSS/jquery.jscrollpane.css" rel="stylesheet" type="text/css"/>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js">
  </script>
  <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js">
  </script>
  <script src="/JQ/jquery.jscrollpane.min.js">
  </script>
  <script src="/JQ/jquery.mousewheel.js">
  </script>
  <script src="/JQ/mousetrap.min.js">
  </script>
  <script id="sourcecode" type="text/javascript">
   $(function()
	{
		$('.scroll-pane').jScrollPane({mouseWheelSpeed: 19});
	});
  </script>
  <!-- Powertip -->
  <script src="/JQ/Powertip/core.js" type="text/javascript">
  </script>
  <script src="/JQ/Powertip/csscoordinates.js" type="text/javascript">
  </script>
  <script src="/JQ/Powertip/displaycontroller.js" type="text/javascript">
  </script>
  <script src="/JQ/Powertip/placementcalculator.js" type="text/javascript">
  </script>
  <script src="/JQ/Powertip/tooltipcontroller.js" type="text/javascript">
  </script>
  <script src="/JQ/Powertip/utility.js" type="text/javascript">
  </script>
  <link href="/CSS/jquery.powertip.css" rel="stylesheet" type="text/css"/>
  <!-- end-Powertip -->
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="app-id=813099896" name="apple-itunes-app"/>
  <meta content="Dr. Ir. Stphane Pigeon" name="author"/>
  <link href="/apple-touch-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
  <link href="/apple-touch-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
  <link href="/apple-touch-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
  <link href="/apple-touch-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
  <link href="/apple-touch-icon-60x60.png" rel="apple-touch-icon" sizes="60x60"/>
  <link href="/apple-touch-icon-120x120.png" rel="apple-touch-icon" sizes="120x120"/>
  <link href="/apple-touch-icon-76x76.png" rel="apple-touch-icon" sizes="76x76"/>
  <link href="/apple-touch-icon-152x152.png" rel="apple-touch-icon" sizes="152x152"/>
  <link href="/favicon-196x196.png" rel="icon" sizes="196x196" type="image/png"/>
  <link href="/favicon-160x160.png" rel="icon" sizes="160x160" type="image/png"/>
  <link href="/favicon-96x96.png" rel="icon" sizes="96x96" type="image/png"/>
  <link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"/>
  <link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"/>
  <meta content="#da532c" name="msapplication-TileColor"/>
  <meta content="/mstile-144x144.png" name="msapplication-TileImage"/>
  <meta content="width=800" name="viewport"/>
  <link href="http://mynoise.net/Data/WINDWOOD/fb.jpg" rel="image_src"/>
  <meta content="summary_large_image" name="twitter:card"/>
  <meta content="@audiosampling" name="twitter:site"/>
  <meta content="Your Virtual Bamboo Chime Noise Machine | Free &amp; Online" name="twitter:title"/>
  <meta content="Bamboo's natural hollow form makes it an obvious choice for many instruments, particularly wind chimes. Bamboo wind chimes offer gentle, smoothing tones which will transport you straight to the the topical islands for a relaxing break!" name="twitter:description"/>
  <meta content="http://mynoise.net/Data/WINDWOOD/fb.jpg" name="twitter:image:src"/>
  <title>
   Your Virtual Bamboo Chime Noise Machine | Free &amp; Online
  </title>
  <meta content="noise, noise machine, sleeping machine, sleeping aid, sleeping device, noise device, baby, tinnitus, sound healing, noise masking, noise therapy, sound therapy, hearing thresholds" name="keywords"/>
  <meta content="Bamboo's natural hollow form makes it an obvious choice for many instruments, particularly wind chimes. Bamboo wind chimes offer gentle, smoothing tones which will transport you straight to the the topical islands for a relaxing break!" name="description"/>
  <script>
   // Cleverly designed, badly programmed by Stephane Pigeon 
// (c) Stephane Pigeon - myNoise.net 2013-14 - stephane at mynoise.net
// Last update 2015-03-29

var iNUMBERBANDS=10;
var bCALIBRATE=0;
var bMUTE=0;
var bMUTEsaved=0;
var bANIMATE=0;
var bNOWMOVING=0;
var bNOWMOVINGUP=1;
var bFINISHEDLOADING=0;
var bWEBAUDIO=0;
var bSUPPORTOGG=0;
var bSUPPORTMP3=0;
var bZEN=0;
var bIOS=0;
var bMUTEFORCED=0;
var sSYNCHRO="0123456789";
var iINITIALANIMATIONSPEED=32;

var iTimer=-1;
var fLevelMultiplier=1.1;
var iAnimationFactor=1;
var iCurrentAnimationSpeed=iINITIALANIMATIONSPEED;
var timerTimeout, modulationTimeout, fadeTimeOut;
var randomCounter=0;
var currentLevel = new Array();
var savedCurrentLevel = new Array();
var savedLevel = new Array();
var randomLevel = new Array();
var fMotionStates = new Array();
var cloneURL;
var iNowMovingTo=0;
var iFadeState=0;

// html5 audio
var  sourceFileA = new Array();
var  sourceFileB = new Array();
var  sourceA = new Array();
var  sourceB = new Array();
var  timeOut1 = new Array();
var  timeOut2 = new Array();
var  l = new Array();
var  movedSlider;


// Improving the Javascript Timer (using performance.now when available)

var precisionTimer = (function()
{
     var wp = window.performance;
     var now = wp &amp;&amp; (wp.now || wp.webkitNow || wp.msNow || wp.mozNow || wp.oNow);

     return now &amp;&amp; now.bind(wp) || function() {
         return new Date().getTime();
     }
})();

// WEBAUDIO LOADER
var  gainNodeA = new Array();
var  gainNodeB = new Array();
var  bufferList;

var context;
var bufferLoader;
function BufferLoader(context, urlList, callback) {
    this.context = context;
    this.urlList = urlList;
    this.onload = callback;
    this.bufferList = new Array();
    this.loadCount = 0;
}

BufferLoader.prototype.loadBuffer = function(url, index) {
    // Load buffer asynchronously
    var request = new XMLHttpRequest();
    request.open("GET", url, true);
    request.responseType = "arraybuffer";

    var loader = this;

    request.onload = function() {
        // Asynchronously decode the audio file data in request.response
        loader.context.decodeAudioData(
            request.response,
            function(buffer) {
                if (!buffer) {
                    alert('error decoding file data: ' + url);
                    return;
                }
                loader.bufferList[index] = buffer;
                document.getElementById('msg').innerHTML = "... now loading " + Math.round((loader.loadCount+1)/iNUMBERBANDS/2*100) + "% ...";
                if (++loader.loadCount == loader.urlList.length)
                    loader.onload(loader.bufferList);
            }    
        );
    }

    request.onerror = function() {
		console.log('XMLHttpRequest ERROR : '+request.responseText);
        alert('BufferLoader: XHR error - see console log');        
    }

    request.send();
}

BufferLoader.prototype.load = function() {
    for (var i = 0; i &lt; this.urlList.length; ++i)
        this.loadBuffer(this.urlList[i], i);
}

function getUrlVars() {
    var vars = {};
    var parts = window.location.href.replace(/[?&amp;]+([^=&amp;]+)=([^&amp;]*)/gi, function(m,key,value) {
        vars[key] = value;
    });
    return vars;
}

// SOUNDS

function assignSources(){

	var fileExt=".mp3"; if (bSUPPORTOGG==1) {fileExt=".ogg";}
	sourceFileA[0]='http://cdn.mynoise.net/Data/WINDWOOD/0a'+fileExt;
	sourceFileB[0]='http://cdn.mynoise.net/Data/WINDWOOD/0b'+fileExt;
		sourceFileA[1]='http://cdn.mynoise.net/Data/WINDWOOD/1a'+fileExt;
	sourceFileB[1]='http://cdn.mynoise.net/Data/WINDWOOD/1b'+fileExt;
		sourceFileA[2]='http://cdn.mynoise.net/Data/WINDWOOD/2b'+fileExt;
	sourceFileB[2]='http://cdn.mynoise.net/Data/WINDWOOD/2a'+fileExt;
		sourceFileA[3]='http://cdn.mynoise.net/Data/WINDWOOD/3b'+fileExt;
	sourceFileB[3]='http://cdn.mynoise.net/Data/WINDWOOD/3a'+fileExt;
		sourceFileA[4]='http://cdn.mynoise.net/Data/WINDWOOD/4b'+fileExt;
	sourceFileB[4]='http://cdn.mynoise.net/Data/WINDWOOD/4a'+fileExt;
			sourceFileA[5]='http://cdn.mynoise.net/Data/WINDWOOD/5b'+fileExt;
	sourceFileB[5]='http://cdn.mynoise.net/Data/WINDWOOD/5a'+fileExt;
		sourceFileA[6]='http://cdn.mynoise.net/Data/WINDWOOD/6a'+fileExt;
	sourceFileB[6]='http://cdn.mynoise.net/Data/WINDWOOD/6b'+fileExt;
		sourceFileA[7]='http://cdn.mynoise.net/Data/WINDWOOD/7b'+fileExt;
	sourceFileB[7]='http://cdn.mynoise.net/Data/WINDWOOD/7a'+fileExt;
		sourceFileA[8]='http://cdn.mynoise.net/Data/WINDWOOD/8b'+fileExt;
	sourceFileB[8]='http://cdn.mynoise.net/Data/WINDWOOD/8a'+fileExt;
		sourceFileA[9]='http://cdn.mynoise.net/Data/WINDWOOD/9b'+fileExt;
	sourceFileB[9]='http://cdn.mynoise.net/Data/WINDWOOD/9a'+fileExt;
	}

  
function loadSound(i){

	sourceA[i] = new Audio(sourceFileA[i]);
	sourceB[i] = new Audio(sourceFileB[i]);

	sourceA[i].preload = 'auto';
	sourceA[i].loop=0;
	sourceB[i].preload = 'auto';
	sourceB[i].loop=0;
	
	sourceA[i].addEventListener("canplaythrough", function(){countIn()});
	sourceB[i].addEventListener("canplaythrough", function(){countIn()});
	
	sourceA[i].addEventListener('playing',function(){willPlayB(i);}, false);
	sourceB[i].addEventListener('playing',function(){willPlayA(i);}, false);
}

function loadAllSounds(){
//------------------------------------------------------------------
	if (bWEBAUDIO==1) {

	  if (typeof AudioContext !== 'undefined') {context = new AudioContext();}
	  else {context = new webkitAudioContext();}

	  bufferLoader = new BufferLoader(
		context,
		[
		  sourceFileA[0],
		  sourceFileA[1],
		  sourceFileA[2],
		  sourceFileA[3],
		  sourceFileA[4],
		  sourceFileA[5],
		  sourceFileA[6],
		  sourceFileA[7],
		  sourceFileA[8],
		  sourceFileA[9],
		  sourceFileB[0],
		  sourceFileB[1],
		  sourceFileB[2],
		  sourceFileB[3],
		  sourceFileB[4],
		  sourceFileB[5],
		  sourceFileB[6],
		  sourceFileB[7],
		  sourceFileB[8],
		  sourceFileB[9]
		],
		finishedLoading
		);
	bufferLoader.load();
	}
//------------------------------------------------------------------
	else{
		for (var i = 0; i &lt; iNUMBERBANDS; ++i) loadSound(i);
	}
}

function playAllSounds(){
//------------------------------------------------------------------
	if (bWEBAUDIO==1) {
	  var launchTime = context.currentTime;
	  for (var i = 0; i &lt; iNUMBERBANDS; ++i) {
		  sourceA[i].start(0,context.currentTime-launchTime);
		  webAudioWillPlayB(i);
		}
	}
//------------------------------------------------------------------
	else {
		for (var i = 0; i &lt; iNUMBERBANDS; ++i) sourceA[i].play();
	}
}

function getDelayValue(duration) {
	var delay;
	if (bWEBAUDIO==1) delay=duration*500; // in msec
	else delay=duration*525; // set to 525 to solve weird IE10 bug, running in HTML5 mode - use 500 when bug fixed
	delay=delay*2.5;	if( bZEN==0) return delay;
	else return delay*(1+Math.random()*3);
}

function willPlayA(item){
	clearTimeout(timeOut1[item]);
	timeOut1[item] = setTimeout(function(){rewindAndPlayA(item);},getDelayValue(sourceB[item].duration));
}

function willPlayB(item){
	clearTimeout(timeOut2[item]);	
	timeOut2[item] = setTimeout(function(){rewindAndPlayB(item);},getDelayValue(sourceA[item].duration));
}

function rewindAndPlayA(item){
	if (item==sSYNCHRO.indexOf(sSYNCHRO.charAt(item))) { // this is the first occurrence of the Sync group. Launch this sound and all others from the group.
		var launchTime=precisionTimer();
		for (var i = sSYNCHRO.indexOf(sSYNCHRO.charAt(item)); i &lt; iNUMBERBANDS; ++i) {
			if (sSYNCHRO.charAt(item)==sSYNCHRO.charAt(i)) { // belongs to the same group
				if(!sourceA[i].paused) {sourceA[i].pause();}
				sourceA[i].currentTime=0;
				sourceA[i].play();
				sourceA[i].currentTime=(precisionTimer()-launchTime)/1000;
			}
		}
	}
}

function rewindAndPlayB(item){
	if (item==sSYNCHRO.indexOf(sSYNCHRO.charAt(item))) { // this is the first occurrence of the Sync group. Launch this sound and all others from the group.
	var launchTime=precisionTimer();
		for (var i = sSYNCHRO.indexOf(sSYNCHRO.charAt(item)); i &lt; iNUMBERBANDS; ++i) {
			if (sSYNCHRO.charAt(item)==sSYNCHRO.charAt(i)) { // belongs to the same group
				if(!sourceB[i].paused) {sourceB[i].pause();}
				sourceB[i].currentTime=0;
				sourceB[i].play();
				sourceB[i].currentTime=(precisionTimer()-launchTime)/1000;
			}
		}
	}
}

function webAudioWillPlayA(item){
	clearTimeout(timeOut1[item]);	
	timeOut1[item] = setTimeout(function(){webAudioPlayA(item);},getDelayValue(sourceB[item].buffer.duration));
}

function webAudioWillPlayB(item){
	clearTimeout(timeOut2[item]);	
	timeOut2[item] = setTimeout(function(){webAudioPlayB(item);},getDelayValue(sourceA[item].buffer.duration));
}

function webAudioPlayA(item){
	if (item==sSYNCHRO.indexOf(sSYNCHRO.charAt(item))) { // this is the first occurrence of the Sync group. Launch this sound and all others from the group.
		var launchTime = context.currentTime;
		for (var i = sSYNCHRO.indexOf(sSYNCHRO.charAt(item)); i &lt; iNUMBERBANDS; ++i) {
			if (sSYNCHRO.charAt(item)==sSYNCHRO.charAt(i)) { // belongs to the same group
				  sourceA[i].disconnect(0); // canary crashed with sourceB[i].noteOff(0);
				  sourceA[i] = context.createBufferSource();
				  sourceA[i].buffer = bufferList[i];
				  gainNodeA[i] = context.createGain();
				  gainNodeA[i].gain.value = Math.pow(currentLevel[i],3)*(1-bMUTE);
				  if ((bCALIBRATE==1)&amp;&amp;(i!=movedSlider)&amp;&amp;(movedSlider&gt;-1)) gainNodeA[i].gain.value=0;
				  sourceA[i].connect(gainNodeA[i]);
				  gainNodeA[i].connect(context.destination);
				  sourceA[i].start(0,context.currentTime-launchTime); 
				  webAudioWillPlayB(i);
			}
		}
	}
}

function webAudioPlayB(item){
	if (item==sSYNCHRO.indexOf(sSYNCHRO.charAt(item))) { // this is the first occurrence of the Sync group. Launch this sound and all others from the group.
		var launchTime = context.currentTime;
		for (var i = sSYNCHRO.indexOf(sSYNCHRO.charAt(item)); i &lt; iNUMBERBANDS; ++i) {
			if (sSYNCHRO.charAt(item)==sSYNCHRO.charAt(i)) { // belongs to the same group
				  sourceB[i].disconnect(0); // canary crashed with sourceB[i].noteOff(0);
				  sourceB[i] = context.createBufferSource();
				  sourceB[i].buffer = bufferList[i+iNUMBERBANDS];
				  gainNodeB[i] = context.createGain();
				  gainNodeB[i].gain.value = Math.pow(currentLevel[i],3)*(1-bMUTE);
				  if ((bCALIBRATE==1)&amp;&amp;(i!=movedSlider)&amp;&amp;(movedSlider&gt;-1)) gainNodeB[i].gain.value=0;
				  sourceB[i].connect(gainNodeB[i]);
				  gainNodeB[i].connect(context.destination);
				  sourceB[i].start(0,context.currentTime-launchTime);
				  webAudioWillPlayA(i);
			}
		}
	}
}

// INIT

var launchCounter=0;

function countIn(){
	if (++launchCounter==iNUMBERBANDS*2) {finishedLoading();};
	if (launchCounter&lt;iNUMBERBANDS*2) {document.getElementById('msg').innerHTML = "... now loading " + Math.round(launchCounter/iNUMBERBANDS/2*100) + "% ...";}
}

function init() {

if (!navigator.cookieEnabled) {window.location.href = "http://mynoise.net/showMessage.php?msgID=4";}

var a = document.createElement('audio');
// bSUPPORTOGG=(typeof a.canPlayType === "function" &amp;&amp; a.canPlayType("audio/ogg") !== "");
// bSUPPORTMP3=(typeof a.canPlayType === "function" &amp;&amp; a.canPlayType("audio/mpeg") !== "");
if (!!(a.canPlayType &amp;&amp; a.canPlayType('audio/ogg; codecs="vorbis"').replace(/no/, ''))){bSUPPORTOGG=1;};

if(typeof webkitAudioContext !== "undefined") bWEBAUDIO=1;
if(typeof AudioContext !== "undefined") bWEBAUDIO=1;

bIOS = ( navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? 1 : 0 );

   $("#calib").button( "option", "disabled", true );
   $("#reset").button( "option", "disabled", true );
   $("#anim").button( "option", "disabled", true );
   $("#mute").button( "option", "disabled", true );
   $("#volUp").button( "option", "disabled", true );
   $("#volDown").button( "option", "disabled", true );
   $("#timer").button( "option", "disabled", true );
   
	disableSliders();
	initStates();

	document.getElementById('msg').innerHTML = "... now loading ...";
	assignSources();
	loadAllSounds();
		
}

function finishedLoading(bf) { // bf given by loader.onload(loader.bufferList);

	bufferList=bf;

//------------------------------------------------------------------
	if (bWEBAUDIO==1) {

	  for (var i = 0; i &lt; iNUMBERBANDS; ++i) {
		  sourceA[i] = context.createBufferSource();
		  sourceA[i].buffer = bufferList[i];
		  gainNodeA[i] = context.createGain();
		  gainNodeA[i].gain.value = 0;
		  sourceA[i].connect(gainNodeA[i]);
		  gainNodeA[i].connect(context.destination);
		}
	  
	  for (var i = 0; i &lt; iNUMBERBANDS; ++i) {
		  sourceB[i] = context.createBufferSource();
		  sourceB[i].buffer = bufferList[i+iNUMBERBANDS];
		  gainNodeB[i] = context.createGain();
		  gainNodeB[i].gain.value = 0;
		  sourceB[i].connect(gainNodeB[i]);
		  gainNodeB[i].connect(context.destination);
		}
	}
//------------------------------------------------------------------

  getCurrentLevelsFromSliders();
    
    setPreset(0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3);  enableSliders();  
  setAllLevels();
  updateDocumentLinks();
  playAllSounds();
  
  $("#calib").button( "option", "disabled", false );
  $("#anim").button( "option", "disabled", false );
  $("#mute").button( "option", "disabled", false );
  $("#reset").button( "option", "disabled", false );
  $("#volUp").button( "option", "disabled", false );
  $("#volDown").button( "option", "disabled", false );
  $("#timer").button( "option", "disabled", false );
  
  document.getElementById('calGrid').innerHTML = "&lt;img src='/Pix/calGrid.png' alt='calibration Grid'&gt;"  
	if (bIOS==1) document.getElementById('msg').innerHTML = "iOS users, touch the background image once to force playback.";
  
  // add touchstart listener to force play on iOS
	if (bIOS==1) {
		window.addEventListener('touchstart', function() {

		// create empty buffer
		var buffer = context.createBuffer(1, 1, 22050);
		var source = context.createBufferSource();
		source.buffer = buffer;

		// connect to output (your speakers)
		source.connect(context.destination);

		// play the file
		source.start(0);
		document.getElementById('msg').innerHTML = "Now playing...";
		
		}, false);
	}


  bFINISHEDLOADING=1;
  
    
  if (!bIOS) {
  if (bCALIBRATE==0) {document.getElementById('msg').innerHTML = "Now playing...";}
  else {document.getElementById('msg').innerHTML = "1. Increase your computer's volume until you hear the static noise. Then, 2. move a slider.";}
  }
  
  // Timer Gens
  if (bMUTEFORCED==1) $("#mute").click();
  
}

function pad(num) {
    var s = "000" + num;
    return s.substr(s.length-2);
}

function sliderChange(movedSliderName) {
	if (bFINISHEDLOADING==1) {
		movedSlider=movedSliderName.substring(1,2);
		if (bCALIBRATE==1) {
			for (var i = 0; i &lt; iNUMBERBANDS; ++i){
				if (i!=movedSlider) {
				
					if (bWEBAUDIO==1) {
						gainNodeA[i].gain.value=0;
						gainNodeB[i].gain.value=0;
					}
					else {
						sourceA[i].volume=0; 
						sourceB[i].volume=0; 
						}
					}
			}
			document.getElementById('msg').innerHTML = "2. Move each slider so that its associated sound becomes just audible to you.";
		}
		else {if (bANIMATE==0) document.getElementById('msg').innerHTML = "";}
		currentLevel[movedSlider]=$( "#s"+movedSlider ).slider( "value" );
		if (bWEBAUDIO==1) {
			gainNodeA[movedSlider].gain.value=Math.pow(currentLevel[movedSlider],3);
			gainNodeB[movedSlider].gain.value=Math.pow(currentLevel[movedSlider],3);
				}
		else {
			sourceA[movedSlider].volume=Math.pow(currentLevel[movedSlider],3); 
			sourceB[movedSlider].volume=Math.pow(currentLevel[movedSlider],3); 
			}
	}
	updateDocumentLinks();
}

function updateDocumentLinks(){
	URLsettings='l='+packCurrentLevels();
	strippedDocumentURL='/NoiseMachines/bambooChimesGenerator.php';
	ANIMATEsettings='';
	if (bANIMATE==1) ANIMATEsettings='&amp;a='+iAnimationFactor;
	cloneURL=strippedDocumentURL+'?c=3&amp;'+URLsettings+ANIMATEsettings;
	$( "#customURL0" ).attr("href", strippedDocumentURL+'?c=0&amp;'+URLsettings+ANIMATEsettings);
	$( "#customURL1" ).attr("href", strippedDocumentURL+'?c=4&amp;'+URLsettings+ANIMATEsettings);
	$( "#customURL2" ).attr("href", strippedDocumentURL+'?c=2&amp;'+URLsettings);
	var strLevels=currentLevel[0]+' '+currentLevel[1]+' '+currentLevel[2]+' '+currentLevel[3]+' '+currentLevel[4]+' '+currentLevel[5]+' '+currentLevel[6]+' '+currentLevel[7]+' '+currentLevel[8]+' '+currentLevel[9];
	$( "#currentLevels" ).attr("title", strLevels);
}

function getLink(){
	return cloneURL.slice(15);
}

function print(){
	console.log(currentLevel[0]+','+currentLevel[1]+','+currentLevel[2]+','+currentLevel[3]+','+currentLevel[4]+','+currentLevel[5]+','+currentLevel[6]+','+currentLevel[7]+','+currentLevel[8]+','+currentLevel[9]);
}

function getCurrentLevelsFromSliders(){
	for (var i = 0; i &lt; iNUMBERBANDS; ++i)  currentLevel[i]=$( "#s"+i ).slider( "value" );
}

function setCurrentLevelsToSliders(){
	for (var i = 0; i &lt; iNUMBERBANDS; ++i) $( "#s"+i ).slider("value", currentLevel[i]);
}

function setSlidersToZero(){
	for (var i = 0; i &lt; iNUMBERBANDS; ++i) $( "#s"+i ).slider("value", 0);
}

function setAllLevels(){
//------------------------------------------------------------------
	if (bWEBAUDIO==1) {

	  for (var i = 0; i &lt; iNUMBERBANDS; ++i) {
		  gainNodeA[i].gain.value = Math.pow(currentLevel[i],3);
		  gainNodeB[i].gain.value = Math.pow(currentLevel[i],3);
		}
		
	}
//------------------------------------------------------------------
	else {
	
		for (var i = 0; i &lt; iNUMBERBANDS; ++i) {
			sourceA[i].volume=Math.pow(currentLevel[i],3);
			sourceB[i].volume=Math.pow(currentLevel[i],3);
		}
	
	}
}

function fadeOut(out,steps){
	// disable animation before fadeout
	if ((bANIMATE==1)&amp;&amp;(out==1)&amp;&amp;(iFadeState==0)) clearTimeout(modulationTimeout);	
	iFadeState+=1;
	for (var i = 0; i &lt; iNUMBERBANDS; ++i) {
		var fadeLvl;
		if (out==1) fadeLvl=Math.max(0,Math.pow(currentLevel[i]-Math.pow(iFadeState,2)*currentLevel[i]/Math.pow(steps,2),3));
		else fadeLvl=Math.min(0.99,Math.pow(Math.pow(iFadeState,0.2)*currentLevel[i]/Math.pow(steps,0.2),3));
			if (bWEBAUDIO==1) {
				gainNodeA[i].gain.value=fadeLvl;
				gainNodeB[i].gain.value=fadeLvl;
			}
			else {
				sourceA[i].volume=fadeLvl;
				sourceB[i].volume=fadeLvl;
			}
	}
	clearTimeout(fadeTimeOut);	
	if (iFadeState&lt;=steps) fadeTimeOut = setTimeout(function(){fadeOut(out,steps);},steps)
	else {
	iFadeState=0;
	// enable animation after fade in
	if ((bANIMATE==1)&amp;&amp;(out==0)) modulationRandom();
	}
}

function volUp(){
	if (bANIMATE){
		iAnimationFactor=Math.min(4,iAnimationFactor*2);
		animateSpeedMessage();
	}
	else {	
		for (var i = 0; i &lt; iNUMBERBANDS; ++i) {
			currentLevel[i]=Math.min(100,currentLevel[i]*fLevelMultiplier);
			$( "#s"+i ).slider("value", currentLevel[i]);
			}
	}
}

function volDown(){
	if (bANIMATE){
		iAnimationFactor=Math.max(0.25,iAnimationFactor/2);
		animateSpeedMessage();
	}
	else {	
		for (var i = 0; i &lt; iNUMBERBANDS; ++i) {
			currentLevel[i]=Math.max(0,currentLevel[i]/fLevelMultiplier);
			$( "#s"+i ).slider("value", currentLevel[i]);
			}
	}
}

function animateSpeedMessage(){
	if (iAnimationFactor==1) document.getElementById('msg').innerHTML = "Animation speed now set to Default Speed";
	if (iAnimationFactor&lt;1) document.getElementById('msg').innerHTML = "Animation speed is "+1/iAnimationFactor+"x slower than Normal";
	if (iAnimationFactor&gt;1) document.getElementById('msg').innerHTML = "Animation speed is "+iAnimationFactor+"x faster than Normal";
	$("#volUp").button( "option", "disabled", false );
	$("#volDown").button( "option", "disabled", false );
	if (iAnimationFactor==4) $("#volUp").button( "option", "disabled", true );
	if (iAnimationFactor==.25) $("#volDown").button( "option", "disabled", true );
	updateDocumentLinks();
}

function setPreset(l0,l1,l2,l3,l4,l5,l6,l7,l8,l9,text){
		if (bMUTE==1) $("#mute").click();
		currentLevel[0] = l0;
		currentLevel[1] = l1;
		currentLevel[2] = l2;
		currentLevel[3] = l3;
		currentLevel[4] = l4;
		currentLevel[5] = l5;
		currentLevel[6] = l6;
		currentLevel[7] = l7;
		currentLevel[8] = l8;
		currentLevel[9] = l9;
		if (bANIMATE==1) saveRandomExchange();
	    else {
		  setCurrentLevelsToSliders();
		  if(typeof(text)==='undefined') document.getElementById('msg').innerHTML = "";
		  else document.getElementById('msg').innerHTML = text;
		}
		customLinkAssign('emphasis','actionlink','Apply Calibration',emphasis);
}

function reset(){
setPreset(0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,"Back to Default");}

function randomSettings(){
		var excursion=0.5;
		for (var i = 0; i &lt; iNUMBERBANDS; ++i) currentLevel[i] = Math.random()*excursion;
		if (bANIMATE==1) saveRandomExchange();
		else {
			setCurrentLevelsToSliders();
			document.getElementById('msg').innerHTML = "Random";
		}
}

function packCurrentLevels(){
return pad(Math.round(currentLevel[0]*100))+pad(Math.round(currentLevel[1]*100))+pad(Math.round(currentLevel[2]*100))+pad(Math.round(currentLevel[3]*100))+pad(Math.round(currentLevel[4]*100))+pad(Math.round(currentLevel[5]*100))+pad(Math.round(currentLevel[6]*100))+pad(Math.round(currentLevel[7]*100))+pad(Math.round(currentLevel[8]*100))+pad(Math.round(currentLevel[9]*100));
}

function unpackAndSetCurrentLevels(strLevels){
	for (var i = 0; i &lt; iNUMBERBANDS; ++i) {currentLevel[i] = strLevels.substring(2*i,2*i+2)/100;}
}

function saveCurrentLevelsToCookie(tag){
	// omit tag for personal curve
	if (tag === undefined) tag="CAL";
	// load Cookie
	var userData={};
	var cookieName='uSET_';
	if (cookieName=='uSET_') cookieName='uSET_unlogged';
	var tmp=readCookie(cookieName);
	if (tmp!=null) userData=JSON.parse(tmp);
	// Save Associative Array
	userData[tag]=packCurrentLevels();
	// Save Assicative Array
	var days=36500;
	createCookie(cookieName,JSON.stringify(userData),days);
	if (tag!="CAL") document.getElementById('msg').innerHTML = "Current settings have been saved as a browser cookie...";
}

function loadCurrentLevelsFromCookieAndSetSliders(tag){
	if (tag === undefined) tag="CAL";
	var userData={};
	var cookieName='uSET_';
	if (cookieName=='uSET_') cookieName='uSET_unlogged';
	var tmp=readCookie(cookieName);
	if (tmp!=null) userData=JSON.parse(tmp);
	if (userData[tag]!=null) {
		unpackAndSetCurrentLevels(userData[tag]);
		if (bANIMATE==1) saveRandomExchange(); 
		 else {
			setCurrentLevelsToSliders();
			if (tag=="CAL") document.getElementById('msg').innerHTML = "Your Personal Curve";
			else document.getElementById('msg').innerHTML = "Your Custom Set for this noise";
			}
	}
	else {
			if (tag=="CAL") document.getElementById('msg').innerHTML = "ERROR: no data found. Please  &lt;a href='/calibration.php'&gt;calibrate&lt;/a&gt; (donor, log in first).";
			else document.getElementById('msg').innerHTML = "ERROR: no user setting found, save one first.";
	}
}

// Apply Calibration to current sliders

function emphasis(){
	var tag="CAL";
	var calLevel;
	var userData={};
	var cookieName='uSET_';
	if (cookieName=='uSET_') cookieName='uSET_unlogged';
	var tmp=readCookie(cookieName);
	if (tmp!=null) userData=JSON.parse(tmp);
	if (userData[tag]!=null) {
	
		for (var i = 0; i &lt; iNUMBERBANDS; ++i) {
			calLevel= userData[tag].substring(2*i,2*i+2)/100;
			currentLevel[i]=currentLevel[i]*(calLevel/0.3);
		}
		setCurrentLevelsToSliders();
		document.getElementById('msg').innerHTML = "Calibrated!";
		}
		
	else {
	document.getElementById('msg').innerHTML = "ERROR: no calibration found. Please &lt;a href='/calibration.php'&gt;calibrate&lt;/a&gt; first.";
	}
	customLinkAssign('emphasis','','Now Calibrated','');
}

function customLinkAssign(id,classname,innerhtml,onclickfuntion) {
if (document.getElementById(id)) {
	document.getElementById(id).className = classname;
	document.getElementById(id).innerHTML = innerhtml;
	document.getElementById(id).onclick = onclickfuntion;
	}
}

function loadCurrentLevelsFromURLAndSetSliders(){
	var args=getUrlVars();
	if (args['l']!== undefined) {
		var code=args['l'];
		for (var i = 0; i &lt; iNUMBERBANDS; ++i) {currentLevel[i] = code.substring(2*i,2*i+2)/100;}
		setCurrentLevelsToSliders();
	}
}

function disableSliders(){
	for (var i = 0; i &lt; iNUMBERBANDS; ++i) $( "#s"+i ).slider( "option", "disabled", true );
}

function enableSliders(){
	for (var i = 0; i &lt; iNUMBERBANDS; ++i) $( "#s"+i ).slider( "option", "disabled", false );
}

function disableSlider(i){
	$( "#s"+i ).slider( "option", "disabled", true );
}

function enableSlider(i){
	$( "#s"+i ).slider( "option", "disabled", false );
}

function toggleCalibration() {
	bCALIBRATE=!bCALIBRATE;
	if (bCALIBRATE==1) {
		enableSliders();
		movedSlider=-99;
		$("#calib").button( "option", "label", "3. Save Your Personal Curve" );
		}
	else {
		saveCurrentLevelsToCookie();
		setAllLevels();
		disableSliders();
		$("#calib").button( "option", "label", "Done! (Click to recalibrate)" );
	}
}

function toggleModulation(param) {
	bANIMATE=!bANIMATE;
	if (bANIMATE==1) {
		savedLevel = currentLevel.slice(0); // copy values, not ref!
		savedCurrentLevel = currentLevel.slice(0); // copy values, not ref!
		disableSliders();
		updateButtons();
		modulationRandom();
		document.getElementById('volDownTxt').innerHTML = "Speed-";
		document.getElementById('volUpTxt').innerHTML = "Speed+";
		}
	else {
		// currentLevel=savedLevel.slice(0); // copy values, not ref!
		clearTimeout(modulationTimeout);
		enableSliders();
		updateButtons();
		setCurrentLevelsToSliders();
		randomCounter=0;
		document.getElementById('volDownTxt').innerHTML = "Vol-";
		document.getElementById('volUpTxt').innerHTML = "Vol+";
		nowMovingReset();
	}
	
	if (bANIMATE==1) animateSpeedMessage();
	else document.getElementById('msg').innerHTML = "";
}

function stopModulation() {
	if (bANIMATE==1) {
	$("#anim").click();
	randomCounter=0;
	}
}

function modulationRandom(){

		iCurrentAnimationSpeed=iINITIALANIMATIONSPEED/iAnimationFactor;

		var nCycle=25; // number of steps between snapshots

		if (randomCounter==0) {   // time to generate a new random state from the saved curve
			savedCurrentLevel = currentLevel.slice(0);  // save where we come from
			if (bNOWMOVING==0) {  // the former random method
				for (var i = 0; i &lt; iNUMBERBANDS; ++i) {
					randomLevel[i] = Math.random()*savedLevel[i]*1.5;
					if (randomLevel[i]&gt;0.99) randomLevel[i]=0.99;
				}
			}
			else {  // the new Now Moving method
					if ((bNOWMOVINGUP==1)&amp;&amp;(++iNowMovingTo==3)) {iNowMovingTo=0;}
					if ((bNOWMOVINGUP==0)&amp;&amp;(--iNowMovingTo==-1)) {iNowMovingTo=2;}
					for (var i = 0; i &lt; iNUMBERBANDS; ++i) {
						randomLevel[i] = fMotionStates[iNowMovingTo][i];
					}
					displayMovingState();
			}
		}
		
		for (var i = 0; i &lt; iNUMBERBANDS; ++i) currentLevel[i] = savedCurrentLevel[i]+randomCounter*(randomLevel[i]-savedCurrentLevel[i])/nCycle;

		if ((randomCounter%5)==0) setCurrentLevelsToSliders();
		else setAllLevels();	// update the levels without updating the sliders (saving javascript CPU)

		if (++randomCounter==nCycle) randomCounter=0;
		
		if (randomCounter&gt;(16/(iCurrentAnimationSpeed/8))) document.getElementById('msg').innerHTML = "";
		clearTimeout(modulationTimeout);	
		modulationTimeout = setTimeout(function(){modulationRandom();},iCurrentAnimationSpeed*1000/nCycle);
}

function nowMoving(){
	bNOWMOVING=1;
	nowMovingReset();
	customLinkAssign('nowMoving','playOff','Start','');
	$("#anim").click();
}

function nowMovingReset(){
	bNOWMOVINGUP=1;
	iNowMovingTo=-1;
	customLinkAssign('01','playOff','&rarr;','');
	customLinkAssign('12','playOff','&rarr;','');
	customLinkAssign('23','playOff','&rarr;','');
	customLinkAssign('32','playOff','&larr;','');
	customLinkAssign('21','playOff','&larr;','');
	customLinkAssign('nowMoving','actionlink','Start',nowMoving);
}

function initStates(){
	fMotionStates[0]=[0.5,0.46,0.42,0.38,0.34,0.3,0.27,0.24,0.21,0.18];
	fMotionStates[1]=[0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3];
	fMotionStates[2]=[0.18,0.21,0.24,0.27,0.3,0.34,0.38,0.42,0.46,0.5];
}

function assignState(s){
	var state=["A","B","C"];
	for (var i = 0; i &lt; iNUMBERBANDS; ++i)  fMotionStates[s][i]=$( "#s"+i ).slider( "value" );
	document.getElementById('msg').innerHTML = "...now assigned to Motion Snapshot "+state[s];
}

function displayMovingState(){

	customLinkAssign('01','playOff','&rarr;','');
	customLinkAssign('12','playOff','&rarr;','');
	customLinkAssign('23','playOff','&rarr;','');
	customLinkAssign('13','playOff','&larr;','');
	customLinkAssign('32','playOff','&larr;','');
	customLinkAssign('21','playOff','&larr;','');

if (bNOWMOVINGUP){
		if (iNowMovingTo==0) {customLinkAssign('01','playOn','&rarr;','');}
		if (iNowMovingTo==1) {customLinkAssign('12','playOn','&rarr;','');}
		if (iNowMovingTo==2) {customLinkAssign('23','playOn','&rarr;','');}
	}
	else{
		if (iNowMovingTo==2) {customLinkAssign('13','playOn','&larr;','');}
		if (iNowMovingTo==1) {customLinkAssign('32','playOn','&larr;','');}
		if (iNowMovingTo==0) {customLinkAssign('21','playOn','&larr;','');}
	}
	// change the direction with P[1/4]
	if (Math.floor(Math.random()*4)==0) bNOWMOVINGUP=!bNOWMOVINGUP;
}

function toggleZen() {
	bZEN=!bZEN;
	if (bZEN==1) {
		document.getElementById('msg').innerHTML = "Welcome to the Meditation Room... Wait and listen...";
		customLinkAssign('zenON','actionlink','Leave the Meditation Room',toggleZen)
	}
	else {
		document.getElementById('msg').innerHTML = "Now slowly switching back to default 'Noise Blocking' mode... ";
		customLinkAssign('zenON','actionlink','Enter the Meditation Room',toggleZen)
	}
}

function saveRandomExchange(){                                   
    savedLevel = currentLevel.slice(0);
    randomLevel = currentLevel.slice(0);
    document.getElementById('msg').innerHTML = "Animation data has been updated using preset settings.";
    randomCounter=0;
}

function toggleMute() {
    var fadeSteps=37;
    if (iTimer==0) fadeSteps=173;
    iFadeState=0;
	bMUTE=!bMUTE;
	if (bMUTE==1) {
		fadeOut(1,fadeSteps);
		updateButtons();
		if (iTimer==0) document.getElementById('msg').innerHTML = "Fading out... slowly...";
		else  document.getElementById('msg').innerHTML = "Keeping quiet...";
	}
	else {
		fadeOut(0,fadeSteps);
		updateButtons();
		if (iTimer==0) document.getElementById('msg').innerHTML = "Fading in... slowly...";
		else document.getElementById('msg').innerHTML = "";
	}
	if (iTimer==0) iTimer=-1;
}

function forceMute(bTurnOn) {
	if (bTurnOn) {
		bMUTEsaved=bMUTE;
		if (!bMUTE) $("#mute").click();
		}
	else {
		if (!bMUTEsaved &amp;&amp; bMUTE) $("#mute").click();
	}
	bMUTEFORCED=bTurnOn;
}

function updateButtons() {
	if (bMUTE==1) { 
		$("#anim").button( "option", "disabled", true );
		$("#reset").button( "option", "disabled", true );
		$("#volUp").button( "option", "disabled", true );
		$("#volDown").button( "option", "disabled", true );
		$("#mute").button( "option", "disabled", false );
		disableSliders();
	}
	else{
		if (bANIMATE==1) {
			$("#reset").button( "option", "disabled", true );
			$("#anim").button( "option", "disabled", false );
			$("#timer").button( "option", "disabled", false );
			$("#volUp").button( "option", "disabled", false );
			$("#volDown").button( "option", "disabled", false );
		}
		else {
			$("#reset").button( "option", "disabled", false );
			$("#anim").button( "option", "disabled", false );
			$("#volUp").button( "option", "disabled", false );
			$("#volDown").button( "option", "disabled", false );
			$("#mute").button( "option", "disabled", false );
			enableSliders();		}
		}
}

function setTimer(time) {

	if(typeof time === "undefined") {
		if (iTimer&lt;1) {iTimer=1;document.getElementById('msg').innerHTML = "Timer set to 1 minute.";}
			else if (iTimer&lt;5) {iTimer=5;document.getElementById('msg').innerHTML = "Timer set to 5 minutes.";}
			else if (iTimer&lt;10) {iTimer=10;document.getElementById('msg').innerHTML = "Timer set to 10 minutes.";}
			else if (iTimer&lt;15) {iTimer=15;document.getElementById('msg').innerHTML = "Timer set to 15 minutes.";}
			else if (iTimer&lt;20) {iTimer=20;document.getElementById('msg').innerHTML = "Timer set to 20 minutes.";}
			else if (iTimer&lt;25) {iTimer=25;document.getElementById('msg').innerHTML = "Timer set to 25 minutes (Pomodoro Time)";}
			else if (iTimer&lt;30) {iTimer=30;document.getElementById('msg').innerHTML = "Timer set to 30 minutes.";}
			else if (iTimer&lt;45) {iTimer=45;document.getElementById('msg').innerHTML = "Timer set to 45 minutes.";}
			else if (iTimer&lt;60) {iTimer=60;document.getElementById('msg').innerHTML = "Timer set to 60 minutes.";}
			else if (iTimer&lt;90) {iTimer=90;document.getElementById('msg').innerHTML = "Timer set to 90 minutes.";}
			else if (iTimer&lt;120) {iTimer=120;document.getElementById('msg').innerHTML = "Timer set to 120 minutes.";}
			else {iTimer=-1;document.getElementById('msg').innerHTML = "Timer is disabled.";};
			}
		else {
			if (time==0) {iTimer=1;updateTimer();}
			else {
			iTimer=time;
			document.getElementById('msg').innerHTML = "Timer set to "+time+" min";
			}
		}

	if(document.getElementById('timerTxt') !== null) {
		if (iTimer&gt;0) document.getElementById('timerTxt').innerHTML = iTimer + " min";
		else document.getElementById('timerTxt').innerHTML = "Timer";
	}
	
	clearTimeout(timerTimeout);	
	timerTimeout = setTimeout(function(){updateTimer();},60000);

}

function updateTimer() {

	iTimer=iTimer-1;
	if (iTimer==0) {
		// disable all interface
		   $("#mute").click();
		   if(document.getElementById('xx') !== null) document.getElementById('timerTxt').innerHTML = "Timer";
		}
		
	if (iTimer&gt;0) {
		if(document.getElementById('xx') !== null) document.getElementById('timerTxt').innerHTML = iTimer + " min";
		clearTimeout(timerTimeout);	
		timerTimeout = setTimeout(function(){updateTimer();},60000);
	}
}

function cloneIt() {
	window.open("http://myNoise.net/clone.php?url="+encodeURIComponent(cloneURL),"_blank","toolbar=yes,scrollbars=yes,width=500,height=379");
	document.location.href = "http://myNoise.net/noiseMachines.php";
}

// Keypresses

Mousetrap.bind('m', function() { $("#mute").click(); });
Mousetrap.bind('a', function() { $("#anim").click(); });
Mousetrap.bind('r', function() { $("#reset").click(); });
Mousetrap.bind('k', function() { $("#volUp").click(); });
Mousetrap.bind('j', function() { $("#volDown").click(); });
Mousetrap.bind('+', function() { $("#volUp").click(); });
Mousetrap.bind('-', function() { $("#volDown").click(); });
Mousetrap.bind('t', function() { $("#timer").click(); });
Mousetrap.bind('w', function() { setPreset(0.18,0.21,0.24,0.27,0.3,0.34,0.38,0.42,0.46,0.5,"White"); });
Mousetrap.bind('p', function() { setPreset(0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,"Pink"); });
Mousetrap.bind('b', function() { setPreset(0.5,0.46,0.42,0.38,0.34,0.3,0.27,0.24,0.21,0.18,"Brown"); });
Mousetrap.bind('0', function() { setPreset(0.4,0,0,0,0,0,0,0,0,0,"Brown"); });
Mousetrap.bind('1', function() { setPreset(0,0.4,0,0,0,0,0,0,0,0,"Red"); });
Mousetrap.bind('2', function() { setPreset(0,0,0.4,0,0,0,0,0,0,0,"Orange"); });
Mousetrap.bind('3', function() { setPreset(0,0,0,0.4,0,0,0,0,0,0,"Khaki"); });
Mousetrap.bind('4', function() { setPreset(0,0,0,0,0.4,0,0,0,0,0,"Green"); });
Mousetrap.bind('5', function() { setPreset(0,0,0,0,0,0.4,0,0,0,0,"Turquoise"); });
Mousetrap.bind('6', function() { setPreset(0,0,0,0,0,0,0.4,0,0,0,"Steel Blue"); });
Mousetrap.bind('7', function() { setPreset(0,0,0,0,0,0,0,0.4,0,0,"Royal Blue"); });
Mousetrap.bind('8', function() { setPreset(0,0,0,0,0,0,0,0,0.4,0,"Navy Blue"); });
Mousetrap.bind('9', function() { setPreset(0,0,0,0,0,0,0,0,0,0.4,"Violet"); });

	&lt;/script&gt;&lt;script&gt;
  $(function() {
    $( "#s0, #s1, #s2, #s3, #s4, #s5, #s6, #s7, #s8, #s9" ).slider({
      orientation: "vertical",
      range: "min",
	  min: 0,
      max: 0.99,
      value: 0.3,
      step:0.01,
      animate: "slow",
      slide: function( event, ui ) {sliderChange(event.target.id)},
      change: function( event, ui ) {sliderChange(event.target.id)}
    });
    $( "#anim" )
    	.button()
    	.click(function() {toggleModulation();});
    $( "#reset" )
      .button()
	  .click(function() {reset();});
	$( "#mute" )
      .button()
	  .click(function() {toggleMute();});
	$( "#volUp" )
      .button()
	  .click(function() {volUp();});
	$( "#volDown" )
      .button()
	  .click(function() {volDown();});
	$( "#timer" )
    	.button()
    	.click(function() {setTimer();});
//	$( "[title]" ).tooltip({ position: { my: "center top+10", at: "center bottom" } });
  });
  </script>
  <script>
   (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-39869439-1', 'mynoise.net');
  ga('send', 'pageview');
  </script>
 </head>
 <script type="text/javascript">
  $(function() {
			$('.actionlink,.blue,.powertip').powerTip({placement: 'nw'});
			$('#reset,#animLabel,#volDown,#volUp,#muteLabel,#timer').powerTip({placement: 'sw'});
			$('#s0,#s1,#s2,#s3,#s4,#s5,#s6,#s7,#s8,#s9').powerTip({placement: 'n'});
			$('.powertipS').powerTip({placement: 'se'});
		});
 </script>
 <script>
  function createCookie(name,value,days) {
	if (days) {
		var date = new Date();
		date.setTime(date.getTime()+(days*24*60*60*1000));
		var expires = "; expires="+date.toGMTString();
	}
	else var expires = "";
	document.cookie = name+"="+value+expires+"; path=/";
}

function readCookie(name) {
	var nameEQ = name + "=";
	var ca = document.cookie.split(';');
	for(var i=0;i &lt; ca.length;i++) {
		var c = ca[i];
		while (c.charAt(0)==' ') c = c.substring(1,c.length);
		if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
	}
	return null;
}

function eraseCookie(name) {
	createCookie(name,"",-1);
}
 </script>
 <body onload="init()">
  <!-- begin #container -->
  <div id="container">
   <div class="noiseTitle">
    <div class="bigTitle">
     Wooden Chimes
    </div>
    <div class="subTitle">
     Frequency-Shaped Bamboo Chimes Generator
    </div>
   </div>
   <!-- &lt;div class="apppromo"&gt;&lt;a href="https://itunes.apple.com/us/app/mynoise/id813099896?ls=1&amp;mt=8"&gt;&lt;img src="/Pix/apppromo.png"&gt;&lt;/a&gt;&lt;/div&gt;-->
   <div class="Lslide one">
    <div class="LslideImg">
     <a href="/donate.php">
      <img alt="piggy" src="/Pix/icon_pig_new.png"/>
     </a>
    </div>
    <div class="LslideText">
     Support myNoise with a donation.
     <a href="/donate.php">
      Help me help You!
     </a>
    </div>
   </div>
   <div class="Lslide two">
    <div class="LslideImg">
     <a href="/login.php">
      <img alt="Login" src="/Pix/icon_login.png"/>
     </a>
    </div>
    <div class="LslideText">
     Patrons,
     <a href="/login.php">
      log in here
     </a>
     to access the bonus features.
    </div>
   </div>
   <div class="Lslide three">
    <div class="LslideImg">
     <a href="/albums.php">
      <img alt="CD" src="/Pix/icon_cd.png"/>
     </a>
    </div>
    <div class="LslideText">
     Selected noises are now available as
     <a href="/albums.php">
      Album Downloads
     </a>
    </div>
   </div>
   <div class="Lslide four">
    <div class="LslideImg">
     <a href="/microphones.php">
      <img alt="mic" src="/Pix/icon_mic.png"/>
     </a>
    </div>
    <div class="LslideText">
     Discover the
     <a href="/microphones.php">
      myNoise Microphones
     </a>
     and the story behind them.
    </div>
   </div>
   <div class="Lslide five">
    <div class="LslideImg" id="blogImg">
    </div>
    <div class="LslideText">
     Read
     <a href="/blog.php">
      'Behind-The-Noise'
     </a>
     stories on my developer's blog.
    </div>
   </div>
   <div class="Lslide long" id="lsidelong">
    <div class="LslideImg" id="bubbleImg">
    </div>
    <div class="LslideText">
     <span class="lowlight">
      July 14th  &vert;
     </span>
     <a href="http://pluviophile.net">
      Pluviophile.net
     </a>
     launched
     <br/>
     <br/>
     <span class="lowlight">
      July 13th  &vert;
     </span>
     <a href="http://mynoise.net/NoiseMachines/windSeaRainNoiseGenerator.php">
      Irish Coast
     </a>
     added
     <br/>
     <br/>
     <span class="lowlight">
      July 2nd  &vert;
     </span>
     <a href="http://mynoise.net/NoiseMachines/solfeggioTonesGenerator.php">
      Solfeggio Tones
     </a>
     added
     <br/>
     <br/>
     <span class="lowlight">
      June 23rd  &vert;
     </span>
     <a href="http://mynoise.net/NoiseMachines/60HzFishTankNoiseGenerator.php">
      Fish Tank
     </a>
     added
     <br/>
     <br/>
     <span class="lowlight">
      June 15th  &vert;
     </span>
     <a href="http://mynoise.net/NoiseMachines/howlingParaglideSoundscapeGenerator.php">
      Skywalker
     </a>
     added
     <br/>
     <br/>
     <span class="lowlight">
      June 12th &vert;
     </span>
     <a href="https://itunes.apple.com/us/app/mynoise/id813099896?ls=1&amp;mt=8">
      myNoise iOS v2
     </a>
     is out!
     <br/>
     <br/>
     <span class="lowlight">
      June 9th  &vert;
     </span>
     <a href="http://mynoise.net/NoiseMachines/farmSoundscapeGenerator.php">
      What The F...
     </a>
     added
    </div>
   </div>
   <script>
    $.get("http://mynoise.net/getBubbleSize.php", function(contents) {
			var s=readCookie("bubble");
			if (!s || !(s==contents)) {$('#bubbleImg').html("&lt;img src='/Pix/icon_bubble_new.png' alt='bubble'&gt;");}
			else {$('#bubbleImg').html("&lt;img src='/Pix/icon_bubble.png' alt='bubble'&gt;");}
			$('#lsidelong').hover(function(){createCookie("bubble",contents,365);});
		});
		$.get("http://mynoise.net/getBlogSize.php", function(contents) {
			var s=readCookie("blog");
			if (!s || !(s==contents)) {$('#blogImg').html("&lt;a href='/blog.php'&gt;&lt;img src='/Pix/icon_blog_new.png' alt='bubble'&gt;&lt;/a&gt;");}
			else {$('#blogImg').html("&lt;a href='/blog.php'&gt;&lt;img src='/Pix/icon_blog.png' alt='bubble'&gt;&lt;/a&gt;");}
		});
   </script>
   <div class="menu shift" id="menu">
    <ul>
     <li class="powertipS" title="Why myNoise sounds different from other noise machines.">
      <a href="http://myNoise.net">
       Home
      </a>
     </li>
     <li class="powertipS" title="What noise can all do for you.">
      <a href="/howToUseSoundMachines.php">
       Use
      </a>
     </li>
     <li class="powertipS" id="active" title="Our main page, listing all the sounds available to you, online and for free.">
      <a href="/noiseMachines.php">
       Online Noises
      </a>
     </li>
     <!--		&lt;li  class="powertipS" title="Calibrate our Noise Generators to your Hearing"&gt;&lt;a href="/calibration.php"&gt;Calib&lt;/a&gt;&lt;/li&gt; -->
     <li class="powertipS" title="Frequently Asked Questions">
      <a href="/about.php">
       FAQ
      </a>
     </li>
     <li class="powertipS" title="Our free myNoise iOS App. Android is on its way!">
      <a href="/theApp.php">
       <img src="/Pix/mobile.png"/>
       Free App
      </a>
     </li>
    </ul>
   </div>
   <!-- &lt;div class="apppromo"&gt;&lt;a href="https://itunes.apple.com/us/app/mynoise/id813099896?ls=1&amp;mt=8"&gt;&lt;img src="/Pix/apppromo.png"&gt;&lt;/a&gt;&lt;/div&gt;-->
   <div class="Lslide one">
    <div class="LslideImg">
     <a href="/donate.php">
      <img alt="piggy" src="/Pix/icon_pig_new.png"/>
     </a>
    </div>
    <div class="LslideText">
     Support myNoise with a donation.
     <a href="/donate.php">
      Help me help You!
     </a>
    </div>
   </div>
   <div class="Lslide two">
    <div class="LslideImg">
     <a href="/login.php">
      <img alt="Login" src="/Pix/icon_login.png"/>
     </a>
    </div>
    <div class="LslideText">
     Patrons,
     <a href="/login.php">
      log in here
     </a>
     to access the bonus features.
    </div>
   </div>
   <div class="Lslide three">
    <div class="LslideImg">
     <a href="/albums.php">
      <img alt="CD" src="/Pix/icon_cd.png"/>
     </a>
    </div>
    <div class="LslideText">
     Selected noises are now available as
     <a href="/albums.php">
      Album Downloads
     </a>
    </div>
   </div>
   <div class="Lslide four">
    <div class="LslideImg">
     <a href="/microphones.php">
      <img alt="mic" src="/Pix/icon_mic.png"/>
     </a>
    </div>
    <div class="LslideText">
     Discover the
     <a href="/microphones.php">
      myNoise Microphones
     </a>
     and the story behind them.
    </div>
   </div>
   <div class="Lslide five">
    <div class="LslideImg" id="blogImg">
    </div>
    <div class="LslideText">
     Read
     <a href="/blog.php">
      'Behind-The-Noise'
     </a>
     stories on my developer's blog.
    </div>
   </div>
   <div class="Lslide long" id="lsidelong">
    <div class="LslideImg" id="bubbleImg">
    </div>
    <div class="LslideText">
     <span class="lowlight">
      July 14th  &vert;
     </span>
     <a href="http://pluviophile.net">
      Pluviophile.net
     </a>
     launched
     <br/>
     <br/>
     <span class="lowlight">
      July 13th  &vert;
     </span>
     <a href="http://mynoise.net/NoiseMachines/windSeaRainNoiseGenerator.php">
      Irish Coast
     </a>
     added
     <br/>
     <br/>
     <span class="lowlight">
      July 2nd  &vert;
     </span>
     <a href="http://mynoise.net/NoiseMachines/solfeggioTonesGenerator.php">
      Solfeggio Tones
     </a>
     added
     <br/>
     <br/>
     <span class="lowlight">
      June 23rd  &vert;
     </span>
     <a href="http://mynoise.net/NoiseMachines/60HzFishTankNoiseGenerator.php">
      Fish Tank
     </a>
     added
     <br/>
     <br/>
     <span class="lowlight">
      June 15th  &vert;
     </span>
     <a href="http://mynoise.net/NoiseMachines/howlingParaglideSoundscapeGenerator.php">
      Skywalker
     </a>
     added
     <br/>
     <br/>
     <span class="lowlight">
      June 12th &vert;
     </span>
     <a href="https://itunes.apple.com/us/app/mynoise/id813099896?ls=1&amp;mt=8">
      myNoise iOS v2
     </a>
     is out!
     <br/>
     <br/>
     <span class="lowlight">
      June 9th  &vert;
     </span>
     <a href="http://mynoise.net/NoiseMachines/farmSoundscapeGenerator.php">
      What The F...
     </a>
     added
    </div>
   </div>
   <script>
    $.get("http://mynoise.net/getBubbleSize.php", function(contents) {
			var s=readCookie("bubble");
			if (!s || !(s==contents)) {$('#bubbleImg').html("&lt;img src='/Pix/icon_bubble_new.png' alt='bubble'&gt;");}
			else {$('#bubbleImg').html("&lt;img src='/Pix/icon_bubble.png' alt='bubble'&gt;");}
			$('#lsidelong').hover(function(){createCookie("bubble",contents,365);});
		});
		$.get("http://mynoise.net/getBlogSize.php", function(contents) {
			var s=readCookie("blog");
			if (!s || !(s==contents)) {$('#blogImg').html("&lt;a href='/blog.php'&gt;&lt;img src='/Pix/icon_blog_new.png' alt='bubble'&gt;&lt;/a&gt;");}
			else {$('#blogImg').html("&lt;a href='/blog.php'&gt;&lt;img src='/Pix/icon_blog.png' alt='bubble'&gt;&lt;/a&gt;");}
		});
   </script>
   <div class="bgcontainer">
    <div id="bgimage">
    </div>
   </div>
   <script>
    $('#bgimage').css("background-image", "url(/Data/WINDWOOD/bg.jpg)");
	var bgFadeInStep=0.01;
	var bgFadeInTime=30;
	var op1=0;
	var op2=1;
	bgFadeInTimer = setTimeout(function(){bgFadeIn();},bgFadeInTime);
	function bgFadeIn(){
		op1+=bgFadeInStep;
		$('#bgimage').css({'opacity':  op1*op2});
		if (op1&lt;1) bgFadeInTimer = setTimeout(function(){bgFadeIn();},bgFadeInTime);
	}
	window.onscroll=function(){
		var st = document.documentElement.scrollTop || document.body.scrollTop;
		op2=Math.min(1,Math.max(0.2,1-(st-100)/600));
		$('#menu').addClass('menufixed');
		if (st&gt;380) {$('#menu').addClass('menufixed');}
			else {$('#menu').removeClass('menufixed');}
		$('.bgcontainer').css({'margin-top':  st/2});
		$('#bgimage').css({'opacity':  op1*op2});
		};
   </script>
   <div class="player">
    <div class="calGrid" id="calGrid">
    </div>
    <div class="mixer">
     <div id="s0" title="Sub-bass">
     </div>
     <div id="s1" title=" Low Bass">
     </div>
     <div id="s2" title=" Bass">
     </div>
     <div id="s3" title="High Bass">
     </div>
     <div id="s4" title="Low Mids">
     </div>
     <div id="s5" title="Mids">
     </div>
     <div id="s6" title="High Mids">
     </div>
     <div id="s7" title="Low Treble">
     </div>
     <div id="s8" title="Treble">
     </div>
     <div id="s9" title="High Treble">
     </div>
    </div>
    <div class="controlers">
     <button id="reset" title="Set sliders back to their defaults. [R]">
      Reset
     </button>
     <input id="anim" type="checkbox"/>
     <label for="anim" id="animLabel" title="Animate the sliders. [A]">
      Animate!
     </label>
     <button id="volDown" title="Decrease levels. Slow down animation. [J]">
      <span id="volDownTxt">
       Vol-
      </span>
     </button>
     <button id="volUp" title="Increase levels. Speed up animation. [K]">
      <span id="volUpTxt">
       Vol+
      </span>
     </button>
     <input id="mute" type="checkbox"/>
     <label for="mute" id="muteLabel" title="Mute the sound output. [M]">
      Mute
     </label>
     <button id="timer" title="Set the timer. [T]">
      <span id="timerTxt">
       Timer
      </span>
     </button>
    </div>
    <div class="msg" id="msg">
    </div>
   </div>
   <!-- begin FULL INTERFACE -->
   <div class="allContent">
    <div class="col1">
     <div class="content">
      <h1>
       The Chimes without the Wind
      </h1>
      <p>
       Bamboo's natural hollow form makes it an obvious choice for many instruments, particularly wind chimes. Bamboo wind chimes have a gentler, more smoothing tone than
       <a href="./windchimesGenerator.php">
        metal chimes
       </a>
       , making them ideal for tranquil spaces. Their earthy, mellow, and enchanting sounds will transport you straight to the topical islands for a relaxing break!
      </p>
     </div>
     <div class="content">
      <h1>
       Testimonials
       <span class="titlesmall">
        - write yours
        <a href="http://mynoise.net" id="customURL1" target="_blank">
         here
        </a>
       </span>
      </h1>
      <p>
       Click the blue hearts to load their associated settings
      </p>
      <div class="scroll-pane">
       <p>
        <span class="actionlink" onclick="setPreset(0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50);">
         
        </span>
        <span class="hand">
         This, coupled with the Rain Noise generator is among the most relaxing sounds I've ever enjoyed. I listen to them both on the most stressful days and it all just melts away into a stormy night out on a porch in the country.
        </span>
        <br/>
        <br/>
        <span class="actionlink" onclick="setPreset(0.32,0.50,0.32,0.13,0.32,0.27,0.32,0.13,0.32,0.31);">
         
        </span>
        <span class="hand">
         I love using this app! I use this sound to read and its peaceful
         <br/>
         <br/>
         <span class="actionlink" onclick="setPreset(0.28,0.50,0.23,0.30,0.18,0.18,0.33,0.20,0.18,0.29);">
          
         </span>
         <span class="hand">
          The noise of the bamboo chimes reminds me of a warm, slightly windy summer's afternoon. The kind that is lazy and comfortable and full of no responsibilities, so it lulls me into a comforting relaxed state.
         </span>
         <br/>
         <br/>
         <span class="actionlink" onclick="setPreset(0.50,0.46,0.31,0.37,0.28,0.24,0.38,0.16,0.23,0.23);">
          
         </span>
         <span class="hand">
          We used to have wooden wind chimes at our last house, where we hung it above our fountain. Hearing this combined with water sounds reminds me of it.
         </span>
         <br/>
         <br/>
         <span class="actionlink" onclick="setPreset(0.00,0.00,0.28,0.21,0.00,0.00,0.31,0.50,0.20,0.21);">
          
         </span>
         <span class="hand">
          Grandma's home - works as memory trigger for myself. My grandmother had a wooden chimes which sounded similar to this when there was a slight breeze. I feel many would enjoy this sound even if it does not induce any lost childhood memories.
         </span>
         <br/>
         <br/>
         <span class="actionlink" onclick="setPreset(0.00,0.00,0.21,0.37,0.49,0.50,0.49,0.45,0.32,0.21);">
          
         </span>
         <span class="hand">
          I loved wind chimes but where I later moved the wind barely even blew, so now I listen to this!
         </span>
         <br/>
         <br/>
         <span class="actionlink" onclick="setPreset(0.41,0.44,0.34,0.50,0.39,0.27,0.40,0.50,0.28,0.22);">
          
         </span>
         <span class="hand">
           Not too much high, but just enough that it sounds like my wind-chimes outside.
         </span>
         <br/>
         <br/>
         <span class="actionlink" onclick="setPreset(0.27,0.25,0.30,0.42,0.50,0.41,0.28,0.34,0.36,0.40);">
          
         </span>
         <span class="hand">
          This is the perfect soundscape to listen to when I need to concentrate on my writing! I love the gentle tinkling sounds, they block out unwanted noise and don't distract.
         </span>
         <br/>
         <br/>
        </span>
       </p>
      </div>
     </div>
    </div>
    <div class="col2">
     <div class="contentText">
      <h1>
       Current Slider Settings
      </h1>
      <p>
       <a class="blue" href="http://mynoise.net" id="customURL0" title="Embed the current slider settings into the URL, for easy bookmarking and sharing... or creating SuperGenerators.">
        Save in URL
       </a>
       <br/>
       <a class="blue" href="http://mynoise.net" id="customURL2" title="Request a mp3 file that sounds just like what you are currently hearing, using your own slider settings.">
        Order as an Audio file
       </a>
       <span id="currentLevels" onclick="print();" title="Current levels">
       </span>
       <br/>
       <span class="actionlink" onclick="saveCurrentLevelsToCookie('WINDWOOD');" title="Save current slider settings as a browser cookie.">
        Save as Cookie
       </span>
       <span class="actionlink" onclick="loadCurrentLevelsFromCookieAndSetSliders('WINDWOOD');" title="Load slider settings previously saved as a browser cookie.">
        &gt; Load
       </span>
       <br/>
       <span class="actionlink" onclick="cloneIt()" title="Replicate this sound generator in a new, minified window, head to the index page, and select a new sound to add on top!">
        Clone as Minified Player
       </span>
       <br/>
      </p>
      <h1>
       Presets
      </h1>
      <p>
       <span class="actionlink" onclick='setPreset(0,0,0,0,0,0.14,0.22,0.31,0.39,0.39,"Bamboo Stream");' title="Load new slider settings.">
        Bamboo Stream
       </span>
       
       <span class="actionlink" onclick='setPreset(0,0,0.13,0.26,0.32,0.33,0.32,0.3,0.22,0.13,"Bamboo Rain");' title="Load new slider settings.">
        Bamboo Rain
       </span>
       
       <span class="actionlink" onclick='setPreset(0,0,0,0,0.5,0.5,0,0,0,0,"Wooden Marbles");' title="Load new slider settings.">
        Wooden Marbles
       </span>
       
       <span class="actionlink" onclick='setPreset(0,0.5,0.5,0,0,0,0,0,0,0,"Log Drums");' title="Load new slider settings.">
        Log Drums
       </span>
       
       <span class="actionlink" onclick='setPreset(0.4,0,0.4,0,0.4,0,0.4,0,0.4,0,"Pattern 1");' title="Load new slider settings.">
        Pattern 1
       </span>
       
       <span class="actionlink" onclick='setPreset(0,0.4,0,0.4,0,0.4,0,0.4,0,0.4,"Pattern 2");' title="Load new slider settings.">
        Pattern 2
       </span>
       
       <span class="actionlink" onclick='setPreset(0,0,0.25,0,0.3,0.5,0.3,0,0.25,0,"Pattern 3");' title="Load new slider settings.">
        Pattern 3
       </span>
      </p>
      <p>
       <span class="actionlink" onclick="setPreset(0.5,0.46,0.42,0.38,0.34,0.3,0.27,0.24,0.21,0.18,this.innerHTML);" title="Load new slider settings.">
        Brown
       </span>
       
       <span class="actionlink" onclick="setPreset(0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,this.innerHTML);" title="Load new slider settings.">
        Pink
       </span>
       
       <span class="actionlink" onclick="setPreset(0.18,0.21,0.24,0.27,0.3,0.34,0.38,0.42,0.46,0.5,this.innerHTML);" title="Load new slider settings.">
        White
       </span>
       
       <span class="actionlink" onclick="setPreset(0.5,0.3,0.25,0.2,0.2,0.2,0.18,0.16,0.2,0.35,this.innerHTML);" title="Load new slider settings.">
        Grey
       </span>
       <br/>
       <span class="actionlink" onclick="setPreset(0.35,0.5,0.35,0,0,0,0,0,0,0,this.innerHTML);" title="Load new slider settings.">
        60
       </span>
       
       <span class="actionlink" onclick="setPreset(0,0.4,0.5,0.4,0,0,0,0,0,0,this.innerHTML);" title="Load new slider settings.">
        125
       </span>
       
       <span class="actionlink" onclick="setPreset(0,0,0.35,0.45,0.35,0,0,0,0,0,this.innerHTML);" title="Load new slider settings.">
        250
       </span>
       
       <span class="actionlink" onclick="setPreset(0,0,0,0.3,0.4,0.3,0,0,0,0,this.innerHTML);" title="Load new slider settings.">
        500
       </span>
       
       <span class="actionlink" onclick="setPreset(0,0,0,0,0.3,0.4,0.3,0,0,0,this.innerHTML);" title="Load new slider settings.">
        1k
       </span>
       
       <span class="actionlink" onclick="setPreset(0,0,0,0,0,0.3,0.4,0.3,0,0,this.innerHTML);" title="Load new slider settings.">
        2k
       </span>
       
       <span class="actionlink" onclick="setPreset(0,0,0,0,0,0,0.3,0.4,0.3,0,this.innerHTML);" title="Load new slider settings.">
        4k
       </span>
       
       <span class="actionlink" onclick="setPreset(0,0,0,0,0,0,0,0.35,0.45,0.35,this.innerHTML);" title="Load new slider settings.">
        8k Hz
       </span>
      </p>
      <span class="actionlink" id="emphasis" onclick="emphasis();" title="Apply your calibration curve to a newly loaded Preset.">
       Apply Calibration
      </span>
      <span class="logout">
       load a preset first
      </span>
      <h1>
       Random
      </h1>
      <p>
       <a class="powertip" href="/donate.php" title="Any donation will unlock this feature for a lifetime!">
        
       </a>
       <span class="actionlink" onclick="window.location='http://mynoise.net/login.php'" title="Randomize the slider positions.">
        I'm Feeling Lucky
       </span>
       <br/>
       <a class="powertip" href="/donate.php" title="Any donation will unlock this feature for a lifetime!">
        
       </a>
       <span class="actionlink" id="zenON" onclick="window.location='http://mynoise.net/login.php'" title="Meditation Room plays individual streams one after the other, randomly. This feature is perfect for long mediation sessions. Like the Animate! feature, your sound will change over time, but in a different way.">
        Enter the Meditation Room
       </span>
      </p>
      <h1>
       Animation Control
      </h1>
      <p>
       <a class="powertip" href="/donate.php" title="Any donation will unlock this feature for a lifetime!">
        
       </a>
       <span class="actionlink" id="nowMoving" onclick="window.location='http://mynoise.net/login.php'" title="Start animation">
        Start
       </span>
       <span class="playOff" id="01">
        
       </span>
       <span class="actionlink" id="state1" onclick="window.location='http://mynoise.net/login.php'" title="Assign current slider settings to snapshot A">
        A
       </span>
       <span class="playOff" id="21">
        
       </span>
       <span class="playOff" id="12">
        
       </span>
       <span class="actionlink" id="state2" onclick="window.location='http://mynoise.net/login.php'" title="Assign current slider settings to snapshot B">
        B
       </span>
       <span class="playOff" id="32">
        
       </span>
       <span class="playOff" id="23">
        
       </span>
       <span class="actionlink" id="state3" onclick="window.location='http://mynoise.net/login.php'" title="Assign current slider settings to snapshot C">
        C
       </span>
       <span class="playOff" id="13">
        
       </span>
      </p>
      <h1>
       Personal
      </h1>
      <p>
       <a href="/calibration.php">
        Calibrate First
       </a>
       <span class="actionlink" onclick="loadCurrentLevelsFromCookieAndSetSliders();" title="Load your calibration curve.">
        &gt; Your Hearing Curve
       </span>
      </p>
     </div>
     <div class="content">
      <h1>
       Usage
      </h1>
      <p>
       Each slider controls a particular frequency band, from the lowest to the highest frequency. Adjust sliders to taste.
      </p>
      <p>
       To mask undesirable noises, focus on bands sharing the same tone as the noise you want to cover. Doing so achieves a higher efficiency, and quieter masking noise levels.
      </p>
     </div>
    </div>
   </div>
   <!-- end FULL INTERFACE -->
   <br class="clearfloat"/>
   <div id="footer">
    <p>
     Copyright  2013-2015
     <a href="http://stephanepigeon.com">
      Dr. Ir. Stphane Pigeon
     </a>
     -  Website hosted by
     <a href="http://one.me/enaoginz" rel="nofollow" target="_blank">
      One
     </a>
    </p>
   </div>
  </div>
  <!-- end #container -->
 </body>
</html>