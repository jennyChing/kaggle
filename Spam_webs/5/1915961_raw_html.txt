<!DOCTYPE html>
<!--[if IE 7]&gt;
&lt;html class="ie ie7" lang="en-US" prefix="og: http://ogp.me/ns#"&gt;
&lt;![endif]-->
<!--[if IE 8]&gt;
&lt;html class="ie ie8" lang="en-US" prefix="og: http://ogp.me/ns#"&gt;
&lt;![endif]-->
<!--[if !(IE 7) | !(IE 8) ]&gt;&lt;!-->
<html lang="en-US" prefix="og: http://ogp.me/ns#">
 <!--&lt;![endif]-->
 <head>
  <link href="https://www.sinch.com/wp-content/cache/minify/000000/VcpRDkBADEXRDaHY0cwoKqXS1w92LyER_m5ObkuQrcxUAMpmgfC0V-1H73plAe3OETKeb_x3Vi7RVx2huKnW4TJN7DzU2Q4GJYADzxunMppVtgs.css" media="all" rel="stylesheet" type="text/css"/>
  <script src="//cdn.optimizely.com/js/2224522542.js">
  </script>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <meta content="yes" name="apple-mobile-web-app-capable"/>
  <meta content="black-translucent" name="apple-mobile-web-app-status-bar-style"/>
  <meta content="yes" name="mobile-web-app-capable"/>
  <title>
   iOS Messaging App Tutorial with Parse | iOS App Tutorial | Sinch
  </title>
  <!--[if lt IE 9]&gt;
	&lt;script src="https://www.sinch.com/wp-content/themes/sinch/js/html5shiv-3.7.0.min.js"&gt;&lt;/script&gt;
	&lt;script src="https://www.sinch.com/wp-content/themes/sinch/js/respond-1.4.2.min.js"&gt;&lt;/script&gt;
	&lt;![endif]-->
  <!-- This site is optimized with the Yoast WordPress SEO plugin v1.5.5.3 - https://yoast.com/wordpress/plugins/seo/ -->
  <meta content="Build an iOS messaging app using Sinch and Parse. Takes about 1 hour, builds a full user list and iOS VoIP calling. Build something fantastic!" name="description"/>
  <link href="https://www.sinch.com/tutorials/minichat-ios-messaging-app/" rel="canonical"/>
  <link href="https://plus.google.com/u/0/b/108258826259711005166/+SinchDev/" rel="publisher"/>
  <meta content="en_US" property="og:locale"/>
  <meta content="article" property="og:type"/>
  <meta content="iOS Messaging App Tutorial with Parse | iOS App Tutorial | Sinch" property="og:title"/>
  <meta content="Build an iOS messaging app using Sinch and Parse. Takes about 1 hour, builds a full user list and iOS VoIP calling. Build something fantastic!" property="og:description"/>
  <meta content="https://www.sinch.com/tutorials/minichat-ios-messaging-app/" property="og:url"/>
  <meta content="Sinch" property="og:site_name"/>
  <meta content="summary" name="twitter:card"/>
  <meta content="@SinchDev" name="twitter:site"/>
  <meta content="Sinch" name="twitter:domain"/>
  <meta content="@cjsinch" name="twitter:creator"/>
  <!-- / Yoast WordPress SEO plugin. -->
  <link href="https://www.sinch.com/feed/" rel="alternate" title="Sinch  Feed" type="application/rss+xml"/>
  <link href="https://www.sinch.com/comments/feed/" rel="alternate" title="Sinch  Comments Feed" type="application/rss+xml"/>
  <!-- This site uses the Google Analytics by Yoast plugin v5.3 - Universal disabled - https://yoast.com/wordpress/plugins/google-analytics/ -->
  <script type="text/javascript">
   var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-50667467-1']);
	_gaq.push(['_gat._forceSSL']);
	_gaq.push(['_trackPageview']);

	(function () {
		var ga = document.createElement('script');
		ga.type = 'text/javascript';
		ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0];
		s.parentNode.insertBefore(ga, s);
	})();
  </script>
  <!-- / Google Analytics by Yoast -->
  <script src="https://www.sinch.com/wp-content/cache/minify/000000/M9bPKixNLarUMYYydHMz04sSS1L1cjPzAA.js" type="text/javascript">
  </script>
  <link href="https://www.sinch.com/xmlrpc.php?rsd" rel="EditURI" title="RSD" type="application/rsd+xml"/>
  <link href="https://www.sinch.com/wp-includes/wlwmanifest.xml" rel="wlwmanifest" type="application/wlwmanifest+xml"/>
  <meta content="WordPress 3.9" name="generator"/>
  <link href="https://www.sinch.com/?p=3556" rel="shortlink"/>
 </head>
 <body class="single single-sinch-tutorial postid-3556 siteorigin-panels" data-site-url="https://www.sinch.com" data-spy="scroll" data-target="#sinch-template-menu-tertiary .categories" onload="prettyPrint()">
  <div id="sinch-mobile">
  </div>
  <div id="sinch-bar">
   <div id="sinch-menu-trigger">
    <span data-active-src="https://www.sinch.com/wp-content/themes/sinch/img/cross.svg" data-active-src-purple="https://www.sinch.com/wp-content/themes/sinch/img/cross-purple.svg" data-icon-name="hamburgerCross" data-src="https://www.sinch.com/wp-content/themes/sinch/img/hamburger.svg" data-src-purple="https://www.sinch.com/wp-content/themes/sinch/img/hamburger-purple.svg">
    </span>
   </div>
   <div class="sinch-inner">
    <div id="logo">
     <a href="https://www.sinch.com">
      <img alt="Sinch" data-src-purple="https://www.sinch.com/wp-content/themes/sinch/img/sinch-logo-purple.svg" data-src-white="https://www.sinch.com/wp-content/themes/sinch/img/sinch-logo-white.svg" src="https://www.sinch.com/wp-content/themes/sinch/img/sinch-logo-white.svg"/>
     </a>
    </div>
    <div class="pull-right sinch-button sinch-not-logged-in" id="sinch-startpage-signup-up">
     <a href="#signup">
      Get Started for Free
     </a>
    </div>
    <div class="pull-right">
     <div class="menu-top-menu-container">
      <ul class="menu" id="menu-top-menu">
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4829" id="menu-item-4829">
        <a href="https://www.sinch.com/solutions/">
         Showcase
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-7881" id="menu-item-7881">
        <a href="https://www.sinch.com/products/voice-api/">
         Products
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3381" id="menu-item-3381">
        <a href="https://www.sinch.com/pricing/overview/">
         Pricing
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-7469" id="menu-item-7469">
        <a href="https://www.sinch.com/docs/">
         Docs
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6596" id="menu-item-6596">
        <a href="https://www.sinch.com/tutorials/">
         Tutorials
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page current_page_parent menu-item-6624" id="menu-item-6624">
        <a href="https://www.sinch.com/blog/">
         Blog
        </a>
       </li>
       <li class="sinch-not-logged-in menu-item menu-item-type-custom menu-item-object-custom menu-item-204" id="menu-item-204">
        <a href="#login">
         Login
        </a>
       </li>
       <li class="sinch-logged-in menu-item menu-item-type-post_type menu-item-object-page menu-item-919" id="menu-item-919">
        <a href="https://www.sinch.com/dashboard/">
         Dashboard
        </a>
       </li>
      </ul>
     </div>
    </div>
   </div>
   <div class="slidedown" id="sinch-menu">
    <div class="visible-xs">
     <div class="menu-mobile-hamburger-container">
      <ul class="menu" id="menu-mobile-hamburger">
       <li class="sinch-not-logged-in menu-item menu-item-type-custom menu-item-object-custom menu-item-920" id="menu-item-920">
        <a href="#login">
         Login
        </a>
       </li>
       <li class="sinch-logged-in menu-item menu-item-type-post_type menu-item-object-page menu-item-921" id="menu-item-921">
        <a href="https://www.sinch.com/dashboard/">
         Dashboard
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-479" id="menu-item-479">
        <a href="https://www.sinch.com/products/">
         Products
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-7470" id="menu-item-7470">
        <a href="https://www.sinch.com/docs/">
         Docs
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-480" id="menu-item-480">
        <a href="https://www.sinch.com/pricing/">
         Pricing
        </a>
       </li>
       <li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-4308" id="menu-item-4308">
        <a href="https://www.sinch.com/category/use-cases/">
         Use Cases
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page current_page_parent menu-item-461" id="menu-item-461">
        <a href="https://www.sinch.com/blog/">
         Blog
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2534" id="menu-item-2534">
        <a href="https://www.sinch.com/tutorials/">
         Tutorials
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-7380" id="menu-item-7380">
        <a href="https://www.sinch.com/downloads/">
         Downloads
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-7712" id="menu-item-7712">
        <a href="https://www.sinch.com/about-us/company/">
         About Us
        </a>
       </li>
      </ul>
     </div>
    </div>
    <div class="hidden-xs">
     <div class="menu-main-menu-container">
      <ul class="menu" id="menu-main-menu">
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-7880" id="menu-item-7880">
        <a href="https://www.sinch.com/products/voice-api/">
         Products
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3377" id="menu-item-3377">
        <a href="https://www.sinch.com/pricing/overview/">
         Pricing
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-7722" id="menu-item-7722">
        <a href="https://www.sinch.com/docs/overview/">
         Docs
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-7379" id="menu-item-7379">
        <a href="https://www.sinch.com/downloads/">
         Downloads
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2273" id="menu-item-2273">
        <a href="https://www.sinch.com/tutorials/">
         Tutorials
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-7713" id="menu-item-7713">
        <a href="https://www.sinch.com/about-us/company/">
         About Us
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2531" id="menu-item-2531">
        <a href="https://www.sinch.com/about-us/jobs/">
         Jobs
        </a>
       </li>
       <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-573" id="menu-item-573">
        <a href="https://www.sinch.com/help/">
         Help
        </a>
       </li>
      </ul>
     </div>
    </div>
   </div>
   <div class="slidedown" id="sinch-login">
    <div class="inner">
     <form action="/dashboard/#/login" method="post">
      <div class="inner">
       <div class="sinch-header">
        Log in
       </div>
       <input name="e-mail" placeholder="E-mail" required="" type="email" value=""/>
       <input name="password" placeholder="Password" required="" type="password" value=""/>
       <div class="sinch-form-footer">
        <button class="sinch-button sinch-submit" type="submit">
         Go
        </button>
        <div class="sinch-text">
         <a href="#signup">
          Create account
         </a>
         <br/>
         <a href="/dashboard/#/newPassword">
          Forgot password
         </a>
        </div>
       </div>
      </div>
     </form>
    </div>
   </div>
   <div class="slidedown" id="sinch-signup">
    <div class="inner">
     <form action="/dashboard/#/signup" method="post">
      <div class="inner">
       <div class="sinch-header">
        Start enriching your app
       </div>
       <input name="e-mail" placeholder="E-mail" required="" type="email" value=""/>
       <input name="password" placeholder="Password" required="" type="password" value=""/>
       <input name="confirm-password" placeholder="Confirm password" required="" type="password" value=""/>
       <label>
        <input name="terms" type="checkbox" value="1"/>
        <span class="sinch-checkbox">
        </span>
        I agree to
        <a href="https://www.sinch.com/legal/terms-of-service/" target="_blank">
         the terms and conditions
        </a>
       </label>
       <div class="sinch-form-footer">
        <button class="sinch-button sinch-submit" disabled="" type="submit">
         Go
        </button>
        <div class="sinch-text">
         <a href="#login">
          Log in
         </a>
         <br/>
         <a href="/dashboard/#/newPassword">
          Forgot password
         </a>
        </div>
       </div>
      </div>
     </form>
    </div>
   </div>
  </div>
  <div id="sinch-container">
   <div id="sinch-template-header">
    <h2 id="sinch-template-title">
     Tutorials
    </h2>
   </div>
   <div id="sinch-template-container">
    <div class="row">
     <div class="col-sm-2" id="sinch-template-menu-container">
      <a href="https://www.sinch.com/tutorials/">
        Back to tutorials
      </a>
      <img class="sinch-gravatar" src="https://secure.gravatar.com/avatar/366919ecc91050c1a9d6d778a64f9945?s=100"/>
      <br/>
      <a href="https://www.sinch.com/author/christian/">
       Christian Jensen
      </a>
      <br/>
      January 18, 2015
      <br/>
      <br/>
      <div data-offset-top="414" data-spy="affix" id="sinch-template-menu-tertiary">
       <li class="categories">
        <ul class="nav">
         <li class="cat-item active">
          <a href="#preparation">
           Preparation
          </a>
         </li>
         <li class="cat-item active">
          <a href="#project setup">
           Project Setup
          </a>
         </li>
         <li class="cat-item active">
          <a href="#implementing the login scene">
           Implementing The Login Scene
          </a>
         </li>
         <li class="cat-item active">
          <a href="#implementing the chat mate list scene">
           Implementing the Chat Mate List Scene
          </a>
         </li>
         <li class="cat-item active">
          <a href="#setting up the dialog scene - part 1">
           Setting up the Dialog Scene - Part 1
          </a>
         </li>
         <li class="cat-item active">
          <a href="#implementing the ui">
           Implementing the UI
          </a>
         </li>
         <li class="cat-item active">
          <a href="#sending your first message">
           Sending your first message
          </a>
         </li>
         <li class="cat-item active">
          <a href="#making the textfield bigger">
           Making the textfield bigger
          </a>
         </li>
         <li class="cat-item active">
          <a href="#addressing the virtual keyboard issue">
           Addressing The Virtual Keyboard Issue
          </a>
         </li>
         <li class="cat-item active">
          <a href="#finish">
           Finish
          </a>
         </li>
        </ul>
       </li>
      </div>
     </div>
     <a href="https://www.sinch.com/tutorials/" id="sinch-mobile-back">
       Back to tutorials
      <br/>
      <br/>
     </a>
     <div class="col-sm-10" id="sinch-template-content">
      <div class="no-thumbnail" id="sinch-news-featured">
       <div class="sinch-date">
        By
        <a href="https://www.sinch.com/author/christian/" rel="author" title="Posts by Christian Jensen">
         Christian Jensen
        </a>
        - January 18, 2015
       </div>
       <div class="excerpt">
        <div id="sinch-imported-content">
         <h1>
          <a aria-hidden="true" class="anchor" href="#ios-messaging-app-tutorial" id="user-content-ios-messaging-app-tutorial">
           <span class="octicon octicon-link">
           </span>
          </a>
          iOS Messaging App Tutorial
         </h1>
         <p>
          In this tutorial, you will learn how to use the
          <a href="https://www.sinch.com/">
           Sinch
          </a>
          iOS SDK to an build instant messaging app. The estimated time to finish this tutorial is about 1 - 2 hours.
         </p>
         <h4>
          <a aria-hidden="true" class="anchor" href="#prerequisites" id="user-content-prerequisites">
           <span class="octicon octicon-link">
           </span>
          </a>
          Prerequisites
         </h4>
         <ul class="task-list">
          <li>
           Solid understanding of basic concepts in Objective-C language and object-oriented programing.
          </li>
          <li>
           Entry level knowledge and experience of developing iOS apps. Familiarity with delegation, storyboard, IBOutlets and IBActions, view controllers and segues, function callback blocks, etc.
          </li>
          <li>
           Access to a Mac Computer with Xcode 6.x installed.
          </li>
          <li>
           Access to one or more iOS 8.x devices is recommended but not required.
          </li>
         </ul>
         <h4>
          <a aria-hidden="true" class="anchor" href="#outcome" id="user-content-outcome">
           <span class="octicon octicon-link">
           </span>
          </a>
          Outcome
         </h4>
         <p>
          By the end of this tutorial, you will have built an instant messaging app that looks like the following.
          <img alt="App User Interface" src="/wp-content/uploads/2015/01/AppUserInterface.png" style="max-width:100%;"/>
         </p>
         <h2 id="preparation">
          <a aria-hidden="true" class="anchor" href="#preparation" id="user-content-preparation">
           <span class="octicon octicon-link">
           </span>
          </a>
          Preparation
         </h2>
         <p>
          In addition to the Sinch SDK, we will also use another third party SDK called
          <a href="https://parse.com">
           Parse
          </a>
          , as a zero-configuration cloud database, to store all the signed-up users and all the historical messages between each pair of users.
         </p>
         <p>
          <strong>
           Optional:
          </strong>
          as a handy reference, create a new favorite folder named
          <strong>
           ios-messaging-tutorial
          </strong>
          or
          <strong>
           Sinch
          </strong>
          in your browser and add the following pages:
         </p>
         <ul class="task-list">
          <li>
           <a href="https://github.com/sinch/ios-messaging-tutorial">
            iOS messaging tutorial
           </a>
          </li>
          <li>
           <a href="https://www.sinch.com/docs/ios/user-guide/">
            Sinch SDK user guide
           </a>
          </li>
          <li>
           <a href="https://download.sinch.com/docs/iOS/latest/reference/html/index.html">
            Sinch SDK reference
           </a>
          </li>
          <li>
           <a href="https://www.parse.com/apps/quickstart#social/mobile/ios/native/new">
            Parse SDK quick start guide
           </a>
          </li>
          <li>
           <a href="https://www.parse.com/docs/ios_guide#top/iOS">
            Parse SDK guide
           </a>
          </li>
         </ul>
         <p>
          The whole tutorial app source code can be downloaded at
          <a href="https://github.com/sinch/ios-messaging-tutorial">
           https://github.com/sinch/ios-messaging-tutorial
          </a>
          . To get you start quickly and focus on how to use the SDKs, a project template
          <strong>
           BoilerPlate
          </strong>
          is provided for you along with the finished project
          <strong>
           iOS-Messaging-tutorial
          </strong>
          as the final reference. For this tutorial, we will mainly work with
          <strong>
           BoilerPlate
          </strong>
          .
         </p>
         <p>
          To run the both of these projects, make sure you run
          <code>
           pod install
          </code>
          in your project directory.
         </p>
         <h2 id="project setup">
          <a aria-hidden="true" class="anchor" href="#project-setup" id="user-content-project-setup">
           <span class="octicon octicon-link">
           </span>
          </a>
          Project Setup
         </h2>
         <h3>
          <a aria-hidden="true" class="anchor" href="#template-overview" id="user-content-template-overview">
           <span class="octicon octicon-link">
           </span>
          </a>
          Template overview
         </h3>
         <p>
          Download/clone the project from
          <a href="https://github.com/sinch/ios-messaging-tutorial">
           https://github.com/sinch/ios-messaging-tutorial
          </a>
          . You can try the completed MiniChat app first. Under Building Settings pane of the project and all the targets, make sure the value of the
          <strong>
           Architectures
          </strong>
          key is set to "armv7, armv7s" and
          <strong>
           Provisioning Profile
          </strong>
          is set to 'Automatic'. Make sure these two keys are correctly set in both the
          <strong>
           MiniChat
          </strong>
          and the
          <strong>
           MiniChatTemplate
          </strong>
          projects.
         </p>
         <p>
          Open the project file
          <em>
           boilerplate/ios-sinch-messaging-tutorial.xcodeproj
          </em>
          . Your Xcode 6.x should be launched now.
         </p>
         <p>
          Verify that the
          <em>
           iOS Deployment Target
          </em>
          under the
          <strong>
           Info
          </strong>
          pane in the ios-messaging-tutorial project and the
          <em>
           Deployment Target
          </em>
          under
          <strong>
           General
          </strong>
          pane in MiniChat target are both '8.0'.
         </p>
         <p>
          <img alt="Deployment Target" src="/wp-content/uploads/2015/01/IMG1.png" style="max-width:100%;"/>
         </p>
         <p>
          <img alt="Deployment Target 2" src="/wp-content/uploads/2015/01/IMG2.png" style="max-width:100%;" title="IMG2"/>
         </p>
         <p>
          Open
          <em>
           Main.storyboard
          </em>
          , you should see 4 view controllers. The navigation controller is the initial view controller and it contains the other 3 view controllers we will use: the Login View Controller, the Chat Mate List View Controller, and finally the Dialog View Controller, each with a pair of corresponding Objective-C class files as shown in the project navigator on the left. Notice how the 3 view controllers are linked and ordered by two Show Segues (Push Segues).
         </p>
         <p>
          <img alt="Project Overview" src="/wp-content/uploads/2015/01/ProjectOverview.png" style="max-width:100%;"/>
         </p>
         <p>
          As you can see in the project navigator, there are 5 classes - AppDelegate, MNCChatMessageCell, MNCLoginViewController, MNCChatMateListViewController, and MNCDialogViewController. They are almost empty except those IBOutlets (UI element connections).
         </p>
         <h3>
          <a aria-hidden="true" class="anchor" href="#sdk-setup" id="user-content-sdk-setup">
           <span class="octicon octicon-link">
           </span>
          </a>
          SDK setup
         </h3>
         <p>
          Let's start with setting up the two SDKs - Sinch and Parse.
         </p>
         <h4>
          <a aria-hidden="true" class="anchor" href="#setting-up-sinch" id="user-content-setting-up-sinch">
           <span class="octicon octicon-link">
           </span>
          </a>
          Setting up Sinch
         </h4>
         <p>
          Signup and login to your
          <a href="https://www.sinch.com/">
           Sinch
          </a>
          account. In your Dashboard, open the
          <strong>
           APPS
          </strong>
          pane on the left. Create an app with 'MiniChat' as the name and select sandbox as the environment. Click the keyshape button next to the newly created app. You should see the credentials for your app, which includes the Hostname, the Key and the Secret. Save these 3 strings for later use.
         </p>
         <p>
          Follow the
          <a href="https://www.sinch.com/docs/ios/user-guide/#firsttimesetup">
           First Time Setup section
          </a>
          of Sinch iOS SDK user guide.
         </p>
         <p>
          Sinch is also available as a
          <a href="http://www.cocoapods.org/">
           CocoaPods
          </a>
          . So if you are using CocoaPod, which is recommended, simply add the following line to your Podfile:
         </p>
         <p>
          <code>
           pod 'SinchRTC'
          </code>
         </p>
         <p>
          Alternatively, if you don't use CocoaPod, you can manually add the SDK to your project by:
         </p>
         <ul class="task-list">
          <li>
           Adding Sinch.framework to the
           <strong>
            Frameworks
           </strong>
           group in the project navigator.
          </li>
          <li>
           Adding Sinch.framework, AudioToolbox.framework, AVFoundation.framework and Security.framework to the
           <strong>
            Link Binary With Libraries
           </strong>
           list under
           <strong>
            Build Phases
           </strong>
           pane in the ios-sinch-messaging-tutorial target of your Xcode project.
          </li>
          <li>
           Adding '-ObjC -Xlinker -lstdc++' to
           <strong>
            Other Linker Flags
           </strong>
           under the
           <strong>
            Build Settings
           </strong>
           pane in the ios-sinch-messaging-tutorial target.
          </li>
         </ul>
         <h4>
          <a aria-hidden="true" class="anchor" href="#setting-up-parse" id="user-content-setting-up-parse">
           <span class="octicon octicon-link">
           </span>
          </a>
          Setting up Parse
         </h4>
         <p>
          Signup and login to your
          <a href="https://www.parse.com/">
           Parse
          </a>
          account. In your account panel, click the
          <strong>
           Select an App
          </strong>
          button on the top left corner and then
          <strong>
           + Create App
          </strong>
          . Create an app with 'iOS-Messaging-Tutorial' as the name. You should see the app keys. Write down the
          <strong>
           Application ID
          </strong>
          and the
          <strong>
           Client Key
          </strong>
          for later use.
         </p>
         <p>
          Download the
          <a href="https://www.parse.com/downloads/ios/parse-starter-project/latest">
           Parse SDK
          </a>
          . Drag Parse.framework and Bolts.framework into the
          <strong>
           Frameworks
          </strong>
          group of your project and make sure they are linked by the application target.
         </p>
         <h4>
          <a aria-hidden="true" class="anchor" href="#your-first-few-lines-of-code" id="user-content-your-first-few-lines-of-code">
           <span class="octicon octicon-link">
           </span>
          </a>
          Your first few lines of code
         </h4>
         <p>
          In Xcode, create a new header file named 'Config.h' and put it in the iOS-Messaging-Tutorial/iOS-Messaging-Tutorial group. We will use this file to keep track of all those weird keys and secrets of the two APIs. Delete all the code lines in Config.h and add the following preprocessor constants (don't forget to replace the example strings with
          <strong>
           YOUR OWN
          </strong>
          credential strings, later you will login with your own Sinch and Parse dashboards to check your app):
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-c">
            //  Config.h
           </span>
           #
           <span class="pl-k">
            define
           </span>
           <span class="pl-en">
            SINCH_APPLICATION_KEY
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            your-app-key
            <span class="pl-pds">
             "
            </span>
           </span>
           #
           <span class="pl-k">
            define
           </span>
           <span class="pl-en">
            SINCH_APPLICATION_SECRET
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            your-app-secret
            <span class="pl-pds">
             "
            </span>
           </span>
           #
           <span class="pl-k">
            define
           </span>
           <span class="pl-en">
            SINCH_ENVIRONMENT_HOST
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            sandbox.sinch.com
            <span class="pl-pds">
             "
            </span>
           </span>
           #
           <span class="pl-k">
            define
           </span>
           <span class="pl-en">
            PARSE_APPLICATION_ID
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            your-app-id
            <span class="pl-pds">
             "
            </span>
           </span>
           #
           <span class="pl-k">
            define
           </span>
           <span class="pl-en">
            PARSE_CLIENT_KEY
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            your-client-key
            <span class="pl-pds">
             "
            </span>
           </span>
          </pre>
         </div>
         <p>
          To use the Parse SDK, we need to initialize it every time when the application starts. So add the line
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           #
           <span class="pl-k">
            import
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             &lt;
            </span>
            Parse/Parse.h
            <span class="pl-pds">
             &gt;
            </span>
           </span>
           #
           <span class="pl-k">
            import
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             "
            </span>
            Config.h
            <span class="pl-pds">
             "
            </span>
           </span>
          </pre>
         </div>
         <p>
          near the top of
          <strong>
           AppDelegate.h
          </strong>
          . And add the line
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           [Parse
           <span class="pl-c1">
            setApplicationId:
           </span>
           PARSE_APPLICATION_ID
           <span class="pl-c1">
            clientKey:
           </span>
           PARSE_CLIENT_KEY];
          </pre>
         </div>
         <p>
          into the
          <strong>
           application:didFinishLaunchingWithOptions:
          </strong>
          function of
          <strong>
           AppDelegate.m
          </strong>
          , so that it should look like:
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            AppDelegate
           </span>
           - (
           <span class="pl-k">
            BOOL
           </span>
           )
           <span class="pl-en">
            application
           </span>
           <span class="pl-en">
            :
           </span>
           (UIApplication *)
           <span class="pl-smi">
            application
           </span>
           <span class="pl-en">
            didFinishLaunchingWithOptions
           </span>
           <span class="pl-en">
            :
           </span>
           (
           <span class="pl-c1">
            NSDictionary
           </span>
           *)
           <span class="pl-smi">
            launchOptions
           </span>
           {
           <span class="pl-c">
            // Override point for customization after application launch.
           </span>
           [Parse
           <span class="pl-c1">
            setApplicationId:
           </span>
           PARSE_APPLICATION_ID
           <span class="pl-c1">
            clientKey:
           </span>
           PARSE_CLIENT_KEY];
           <span class="pl-c">
            /* add this line */
           </span>
           <span class="pl-k">
            return
           </span>
           <span class="pl-c1">
            YES
           </span>
           ;
}
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <h2 id="implementing the login scene">
          <a aria-hidden="true" class="anchor" href="#implementing-the-login-scene" id="user-content-implementing-the-login-scene">
           <span class="octicon octicon-link">
           </span>
          </a>
          Implementing The Login Scene
         </h2>
         <p>
          The Login Scene is the first scene of the app and it is for a user to sign up for a new account or login with an existing account.
         </p>
         <p>
          When the Login Scene initializes, we need to set the title of the scene as 'ios-sinch-messaging-tutorial' and hide the prompt label since no error message needs to be shown yet. Add the following
          <strong>
           viewDidLoad
          </strong>
          method to implementation of
          <strong>
           MNCLoginViewController.m
          </strong>
          (use
          <strong>
           <a href="http://stackoverflow.com/questions/6853821/what-is-the-significance-of-pragma-marks-why-do-we-need-pragma-marks">
            #pragma mark
           </a>
          </strong>
          directive to group methods):
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            MNCLoginViewController
           </span>
           #
           <span class="pl-k">
            pragma mark
           </span>
           Boilerplate methods

- (
           <span class="pl-k">
            void
           </span>
           )
           <span class="pl-en">
            viewDidLoad
           </span>
           {
    [
           <span class="pl-v">
            super
           </span>
           <span class="pl-c1">
            viewDidLoad
           </span>
           ];
           <span class="pl-c">
            // Do any additional setup after loading the view, typically from a nib.
           </span>
           self.
           <span class="pl-smi">
            navigationItem
           </span>
           .
           <span class="pl-smi">
            title
           </span>
           =
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            ios-sinch-messaging-tutorial
            <span class="pl-pds">
             "
            </span>
           </span>
           ;
    self.
           <span class="pl-smi">
            promptLabel
           </span>
           .
           <span class="pl-smi">
            hidden
           </span>
           =
           <span class="pl-c1">
            YES
           </span>
           ;
}
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <p>
          When a user inputs text into the username field or password field, the virtual keyboard may overlap any textfield or button. We need to hide the virtual keyboard when the user taps the main view (or any non-UIControl elements). So add the following method in the
          <strong>
           MNCLoginViewController.m
          </strong>
          implementation:
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            MNCLoginViewController
           </span>
           #
           <span class="pl-k">
            pragma mark
           </span>
           User interface behavioral methods
           <span class="pl-c">
            // Tab the view to dismiss keyboard
           </span>
           - (
           <span class="pl-k">
            void
           </span>
           )
           <span class="pl-en">
            didTapOnView
           </span>
           {
    [
           <span class="pl-v">
            self
           </span>
           .usernameField
           <span class="pl-c1">
            resignFirstResponder
           </span>
           ];
    [
           <span class="pl-v">
            self
           </span>
           .passwordField
           <span class="pl-c1">
            resignFirstResponder
           </span>
           ];
}
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <p>
          And add the following two lines before the end of the
          <strong>
           viewDidLoad
          </strong>
          method:
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           - (
           <span class="pl-k">
            void
           </span>
           )viewDidLoad {
           <span class="pl-c">
            // Tab the view to dismiss keyboard
           </span>
           UITapGestureRecognizer *tapViewGR = [[UITapGestureRecognizer
           <span class="pl-c1">
            alloc
           </span>
           ]
           <span class="pl-c1">
            initWithTarget:
           </span>
           <span class="pl-v">
            self
           </span>
           <span class="pl-c1">
            action:
           </span>
           <span class="pl-k">
            @selector
           </span>
           (
           <span class="pl-c1">
            didTapOnView
           </span>
           )];
    [
           <span class="pl-v">
            self
           </span>
           .view
           <span class="pl-c1">
            addGestureRecognizer:
           </span>
           tapViewGR];
}
          </pre>
         </div>
         <h3>
          <a aria-hidden="true" class="anchor" href="#implementing-signup" id="user-content-implementing-signup">
           <span class="octicon octicon-link">
           </span>
          </a>
          Implementing Signup
         </h3>
         <p>
          A new user should be able to sign up by pressing the signup button. For simplicity, a user in this app would only consist of a username and a password. User management in Parse is through the
          <strong>
           PFUser
          </strong>
          class. And signup can be done with its
          <strong>
           signUpInBackgroundWithBlock:
          </strong>
          instance method. The prompt label can be used to notify the user if a signup succeeds or display the error message if it fails. Whenever a new user is signed-up, a new user record of your app is automatically created in the Parse server.
         </p>
         <p>
          Add
          <code>
           #import &lt;Parse/Parse.h&gt;
          </code>
          to
          <strong>
           MNCLoginViewController.h
          </strong>
          . In the
          <strong>
           MNCLoginViewController.m
          </strong>
          implementation, create an Touch-Up-Inside IBAction with the Signup button (in the storyboard) and name it
          <strong>
           signup
          </strong>
          . Put the following code inside this function (remember to use
          <strong>
           weak reference
          </strong>
          to self inside a call back block to avoid potential strong reference cycle):
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            MNCLoginViewController
           </span>
           #
           <span class="pl-k">
            pragma mark
           </span>
           Functional methods

- (
           <span class="pl-k">
            IBAction
           </span>
           )
           <span class="pl-en">
            signup
           </span>
           <span class="pl-en">
            :
           </span>
           (
           <span class="pl-k">
            id
           </span>
           )
           <span class="pl-smi">
            sender
           </span>
           {
    PFUser *pfUser = [PFUser
           <span class="pl-c1">
            user
           </span>
           ];
    pfUser.
           <span class="pl-smi">
            username
           </span>
           = self.
           <span class="pl-smi">
            usernameField
           </span>
           .
           <span class="pl-smi">
            text
           </span>
           ;
    pfUser.
           <span class="pl-smi">
            password
           </span>
           = self.
           <span class="pl-smi">
            passwordField
           </span>
           .
           <span class="pl-smi">
            text
           </span>
           ;

    __weak
           <span class="pl-smi">
            typeof
           </span>
           (self) weakSelf = self;
    [pfUser
           <span class="pl-c1">
            signUpInBackgroundWithBlock:
           </span>
           ^(
           <span class="pl-k">
            BOOL
           </span>
           succeeded,
           <span class="pl-c1">
            NSError
           </span>
           *error) {
           <span class="pl-k">
            if
           </span>
           (!error) {
            weakSelf.
           <span class="pl-smi">
            promptLabel
           </span>
           .
           <span class="pl-smi">
            textColor
           </span>
           = [UIColor
           <span class="pl-c1">
            greenColor
           </span>
           ];
            weakSelf.
           <span class="pl-smi">
            promptLabel
           </span>
           .
           <span class="pl-smi">
            text
           </span>
           =
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            Signup successful!
            <span class="pl-pds">
             "
            </span>
           </span>
           ;
            weakSelf.
           <span class="pl-smi">
            promptLabel
           </span>
           .
           <span class="pl-smi">
            hidden
           </span>
           =
           <span class="pl-c1">
            NO
           </span>
           ;
        }
           <span class="pl-k">
            else
           </span>
           {
            weakSelf.
           <span class="pl-smi">
            promptLabel
           </span>
           .
           <span class="pl-smi">
            textColor
           </span>
           = [UIColor
           <span class="pl-c1">
            redColor
           </span>
           ];
            weakSelf.
           <span class="pl-smi">
            promptLabel
           </span>
           .
           <span class="pl-smi">
            text
           </span>
           = [error
           <span class="pl-c1">
            userInfo
           </span>
           ][
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            error
            <span class="pl-pds">
             "
            </span>
           </span>
           ];
            weakSelf.
           <span class="pl-smi">
            promptLabel
           </span>
           .
           <span class="pl-smi">
            hidden
           </span>
           =
           <span class="pl-c1">
            NO
           </span>
           ;
        }
    }];
}
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <h3>
          <a aria-hidden="true" class="anchor" href="#implementing-login" id="user-content-implementing-login">
           <span class="octicon octicon-link">
           </span>
          </a>
          Implementing Login
         </h3>
         <p>
          Login can be done with the
          <strong>
           logInWithUsernameInBackground:password:block:
          </strong>
          class method of
          <strong>
           PFUser
          </strong>
          . If login fails, show the error message with the prompt label; if login succeeds, proceed to next scene - the Chat Mate List Scene managed by the MNCChatMateListViewController. Notice that the transition from MNCLoginViewController to MNCChatMateListViewController is done by a storyboard segue with the identifier 'LoginSegue'. In order to invoke execute this transition, we need to call the
          <strong>
           performSegueWithIdentifier:sender
          </strong>
          from the source view controller.
         </p>
         <p>
          In the
          <strong>
           MNCLoginViewController.m
          </strong>
          implementation, under
          <code>
           #pragma mark Functional methods
          </code>
          , create an Touch-Up-Inside IBAction with the Login button and name it
          <strong>
           login
          </strong>
          . Add the following code:
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            MNCLoginViewController
           </span>
           #
           <span class="pl-k">
            pragma mark
           </span>
           Functional methods

- (
           <span class="pl-k">
            IBAction
           </span>
           )
           <span class="pl-en">
            login
           </span>
           <span class="pl-en">
            :
           </span>
           (
           <span class="pl-k">
            id
           </span>
           )
           <span class="pl-smi">
            sender
           </span>
           {
    __weak
           <span class="pl-smi">
            typeof
           </span>
           (self) weakSelf = self;
    [PFUser
           <span class="pl-c1">
            logInWithUsernameInBackground:
           </span>
           <span class="pl-v">
            self
           </span>
           .usernameField.text
           <span class="pl-c1">
            password:
           </span>
           <span class="pl-v">
            self
           </span>
           .passwordField.text
           <span class="pl-c1">
            block:
           </span>
           ^(PFUser *pfUser,
           <span class="pl-c1">
            NSError
           </span>
           *error)
    {
           <span class="pl-k">
            if
           </span>
           (pfUser &amp;&amp; !error) {
           <span class="pl-c">
            // Proceed to next screen after successful login.
           </span>
           weakSelf.
           <span class="pl-smi">
            promptLabel
           </span>
           .
           <span class="pl-smi">
            hidden
           </span>
           =
           <span class="pl-c1">
            YES
           </span>
           ;
            [weakSelf
           <span class="pl-c1">
            performSegueWithIdentifier:
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            LoginSegue
            <span class="pl-pds">
             "
            </span>
           </span>
           <span class="pl-c1">
            sender:
           </span>
           <span class="pl-v">
            self
           </span>
           ];
        }
           <span class="pl-k">
            else
           </span>
           {
           <span class="pl-c">
            // The login failed. Show error.
           </span>
           weakSelf.
           <span class="pl-smi">
            promptLabel
           </span>
           .
           <span class="pl-smi">
            textColor
           </span>
           = [UIColor
           <span class="pl-c1">
            redColor
           </span>
           ];
            weakSelf.
           <span class="pl-smi">
            promptLabel
           </span>
           .
           <span class="pl-smi">
            text
           </span>
           = [error
           <span class="pl-c1">
            userInfo
           </span>
           ][
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            error
            <span class="pl-pds">
             "
            </span>
           </span>
           ];
            weakSelf.
           <span class="pl-smi">
            promptLabel
           </span>
           .
           <span class="pl-smi">
            hidden
           </span>
           =
           <span class="pl-c1">
            NO
           </span>
           ;
        }
    }];
}
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <p>
          Now, if you run and test the app, you should be able to signup with the Signup button and to login with the Login button. If the login succeeded without error, you should have gone to the almost empty Chat Mate List Scene.
         </p>
         <p>
          Next we will begin to work on our Chat Mate List Scene. I hope you are feeling good or excited by following this tutorial to build the app.
         </p>
         <h2 id="implementing the chat mate list scene">
          <a aria-hidden="true" class="anchor" href="#implementing-the-chat-mate-list-scene" id="user-content-implementing-the-chat-mate-list-scene">
           <span class="octicon octicon-link">
           </span>
          </a>
          Implementing the Chat Mate List Scene
         </h2>
         <p>
          As an instant messaging app, we want to be able to message to other users - who are referred to as
          <strong>
           chat mates
          </strong>
          in this app. Most of the time, we want to be able to choose a particular chat mate to chat with at certain moment. And that's what the Chat Mate List Scene does - to show you a list of available chat mates for you to choose. For this app, we will simply just display all the signed-up users in the list.
         </p>
         <p>
          Clearly, it wouldn't make sense to display the user himself/herself in his/her chat mate list. And the app should be able to identify and keep track of the currently logged-in user. We can reach this by creating a property called
          <strong>
           myUserId
          </strong>
          and pass the username string value to it when the user logins. So myUserId would be an NSString and it should be public/exposed. In the
          <strong>
           MNCChatMateListViewController.h
          </strong>
          , add the following line:
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @interface
           </span>
           <span class="pl-en">
            MNCChatMateListViewController
           </span>
           :
           <span class="pl-e">
            UITableViewController
           </span>
           <span class="pl-k">
            @property
           </span>
           (
           <span class="pl-k">
            strong
           </span>
           ,
           <span class="pl-k">
            nonatomic
           </span>
           )
           <span class="pl-c1">
            NSString
           </span>
           *myUserId;
           <span class="pl-c">
            /* add this line */
           </span>
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <p>
          In order to pass data through the LoginSegue, we need to implement the
          <strong>
           prepareForSegue
          </strong>
          method in the source view controller - MNCLoginViewController. This method would be called right before any segue is executed. It is common practice to distinguish each segue by checking the segue identifier. Go back to the
          <strong>
           MNCLoginViewController.m
          </strong>
          , under
          <code>
           #pragma mark Boilerplate methods
          </code>
          , add the following code: (Don't forget to add
          <code>
           #import "MNCChatMateListViewController.h"
          </code>
          to
          <strong>
           MNCLoginViewController.h
          </strong>
          first):
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            MNCLoginViewController
           </span>
           #
           <span class="pl-k">
            pragma mark
           </span>
           Boilerplate methods

- (
           <span class="pl-k">
            void
           </span>
           )
           <span class="pl-en">
            prepareForSegue
           </span>
           <span class="pl-en">
            :
           </span>
           (UIStoryboardSegue *)
           <span class="pl-smi">
            segue
           </span>
           <span class="pl-en">
            sender
           </span>
           <span class="pl-en">
            :
           </span>
           (
           <span class="pl-k">
            id
           </span>
           )
           <span class="pl-smi">
            sender
           </span>
           {
           <span class="pl-k">
            if
           </span>
           ([segue.identifier
           <span class="pl-c1">
            isEqualToString:
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            LoginSegue
            <span class="pl-pds">
             "
            </span>
           </span>
           ]) {
        MNCChatMateListViewController *destViewController = segue.
           <span class="pl-smi">
            destinationViewController
           </span>
           ;
        destViewController.
           <span class="pl-smi">
            myUserId
           </span>
           = self.
           <span class="pl-smi">
            usernameField
           </span>
           .
           <span class="pl-smi">
            text
           </span>
           ;
    }
}
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <p>
          Now when the LoginSegue is performed and the MNCChatMateListViewController is loaded into memory, the myUserId property will be properly initialized. We can set the title of the Chat Mate List Scene as myUserId. Add the following code to the
          <strong>
           MNCChatMateListViewController.m
          </strong>
          implementation:
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            MNCChatMateListViewController
           </span>
           #
           <span class="pl-k">
            pragma mark
           </span>
           Boilerplate methods

- (
           <span class="pl-k">
            void
           </span>
           )
           <span class="pl-en">
            viewDidLoad
           </span>
           {
    [
           <span class="pl-v">
            super
           </span>
           <span class="pl-c1">
            viewDidLoad
           </span>
           ];

    self.
           <span class="pl-smi">
            navigationItem
           </span>
           .
           <span class="pl-smi">
            title
           </span>
           = self.
           <span class="pl-smi">
            myUserId
           </span>
           ;
}
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <p>
          When the users logs out, before MNCChatMateListViewController will be removed, you need to log out the current Parse user account by calling
          <code>
           [PFUser logOut];
          </code>
          . So add
          <code>
           #import &lt;Parse/Parse.h&gt;
          </code>
          to
          <strong>
           MNCChatMateListViewController.h
          </strong>
          , then add the
          <strong>
           dealloc
          </strong>
          method under
          <code>
           #pragma mark Boilerplate methods
          </code>
          in
          <strong>
           MNCChatMateListViewController.m
          </strong>
          implementation:
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            MNCChatMateListViewController
           </span>
           #
           <span class="pl-k">
            pragma mark
           </span>
           Boilerplate methods

- (
           <span class="pl-k">
            void
           </span>
           )
           <span class="pl-en">
            dealloc
           </span>
           {
           <span class="pl-c">
            //Logout current user
           </span>
           [PFUser
           <span class="pl-c1">
            logOut
           </span>
           ];
}
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <h3>
          <a aria-hidden="true" class="anchor" href="#displaying-the-list-of-chat-mates" id="user-content-displaying-the-list-of-chat-mates">
           <span class="octicon octicon-link">
           </span>
          </a>
          Displaying the list of chat mates
         </h3>
         <p>
          Notice that MNCChatMateListViewController is a subclass of UITableViewController. We could just use its main view - a UITableView, to display the chat mate list. In order to do that, two things are needed:
         </p>
         <ol class="task-list">
          <li>
           <p>
            An NSMutableArray needs to be defined in MNCChatMateListViewController to store an array of chat mates. (Recall the Model-View-Controller design pattern. In this case the array is the model; the UITableView is the view; and MNCChatMateListViewController is the controller.)
           </p>
          </li>
          <li>
           <p>
            MNCChatMateListViewController needs to adopt &lt;UITableViewDataSource&gt; protocol in order to 'provide' the data source to the its UITableView.
           </p>
          </li>
         </ol>
         <p>
          The NSMutableArray will store the username (userid) of each user. It doesn't need to be public/exposed at this point. So we can just put it in the class extension in
          <strong>
           MNCChatMateListViewController.m
          </strong>
          :
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @interface
           </span>
           <span class="pl-en">
            MNCChatMateListViewController
           </span>
           ()
           <span class="pl-k">
            @property
           </span>
           (
           <span class="pl-k">
            strong
           </span>
           ,
           <span class="pl-k">
            nonatomic
           </span>
           )
           <span class="pl-c1">
            NSMutableArray
           </span>
           *chatMatesArray;
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <p>
          Whenever you declare an NSMutableArray (or any other Cocoa collection objects), don't forget to initialize it before manipulating its elements. If you forget this, it may cost you a long time to debug. So add the following line before the end of the
          <strong>
           viewDidLoad
          </strong>
          method:
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           - (
           <span class="pl-k">
            void
           </span>
           )viewDidLoad {
    ...

    self.
           <span class="pl-smi">
            chatMatesArray
           </span>
           = [[
           <span class="pl-c1">
            NSMutableArray
           </span>
           <span class="pl-c1">
            alloc
           </span>
           ]
           <span class="pl-c1">
            init
           </span>
           ];
}
          </pre>
         </div>
         <p>
          Next, add &lt;UITableViewDataSource&gt; protocol to
          <strong>
           MNCChatMateListViewController.h
          </strong>
          to the end of the
          <strong>
           @interface
          </strong>
          line, as follows:
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @interface
           </span>
           <span class="pl-en">
            MNCChatMateListViewController
           </span>
           :
           <span class="pl-e">
            UITableViewController
           </span>
           &lt;UITableViewDataSource&gt;
          </pre>
         </div>
         <p>
          And add the following three methods in the
          <strong>
           MNCChatMateListViewController.m
          </strong>
          implementation (notice that the prototype cell in the table view of MNCChatMateListViewController is an instance of UITableViewCell and it has the identifier 'ChatMateListPrototypeCell'):
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            MNCChatMateListViewController
           </span>
           #
           <span class="pl-k">
            pragma mark
           </span>
           UITableViewDataSource protocol methods

- (
           <span class="pl-k">
            NSInteger
           </span>
           )
           <span class="pl-en">
            numberOfSectionsInTableView
           </span>
           <span class="pl-en">
            :
           </span>
           (UITableView *)
           <span class="pl-smi">
            tableView
           </span>
           {
           <span class="pl-c">
            // Return the number of sections.
           </span>
           <span class="pl-k">
            return
           </span>
           <span class="pl-c1">
            1
           </span>
           ;
}

- (
           <span class="pl-k">
            NSInteger
           </span>
           )
           <span class="pl-en">
            tableView
           </span>
           <span class="pl-en">
            :
           </span>
           (UITableView *)
           <span class="pl-smi">
            tableView
           </span>
           <span class="pl-en">
            numberOfRowsInSection
           </span>
           <span class="pl-en">
            :
           </span>
           (
           <span class="pl-k">
            NSInteger
           </span>
           )
           <span class="pl-smi">
            section
           </span>
           {
           <span class="pl-c">
            // Return the number of rows in the section.
           </span>
           <span class="pl-k">
            return
           </span>
           [
           <span class="pl-v">
            self
           </span>
           .chatMatesArray
           <span class="pl-c1">
            count
           </span>
           ];
}

- (UITableViewCell *)
           <span class="pl-en">
            tableView
           </span>
           <span class="pl-en">
            :
           </span>
           (UITableView *)
           <span class="pl-smi">
            tableView
           </span>
           <span class="pl-en">
            cellForRowAtIndexPath
           </span>
           <span class="pl-en">
            :
           </span>
           (
           <span class="pl-c1">
            NSIndexPath
           </span>
           *)
           <span class="pl-smi">
            indexPath
           </span>
           {
    UITableViewCell *cell = [tableView
           <span class="pl-c1">
            dequeueReusableCellWithIdentifier:
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            ChatMateListPrototypeCell
            <span class="pl-pds">
             "
            </span>
           </span>
           <span class="pl-c1">
            forIndexPath:
           </span>
           indexPath];
           <span class="pl-c1">
            NSString
           </span>
           *chatMateId = [
           <span class="pl-v">
            self
           </span>
           .chatMatesArray
           <span class="pl-c1">
            objectAtIndex:
           </span>
           indexPath.row];
    cell.
           <span class="pl-smi">
            textLabel
           </span>
           .
           <span class="pl-smi">
            text
           </span>
           = chatMateId;
           <span class="pl-k">
            return
           </span>
           cell;
}
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <p>
          Every time the MNCChatMateListController shows up, we want it to retrieve all the usernames (except myUserId) from the Parse server, store them to
          <code>
           chatMatesArray
          </code>
          and finally display them to its table view. Data is stored in the Parse server as 'objects' and it is retrieved through PFQuery. Users are a special type of Parse object (instance of PFUser) and hence they have a special type of query. Add the following code in MNCChatMateListViewController.m implementation (notice how myUserId is filtered out):
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            MNCChatMateListViewController
           </span>
           #
           <span class="pl-k">
            pragma mark
           </span>
           Functional methods
           <span class="pl-c">
            // Retrieve the full list of chat mates from Parse server
           </span>
           - (
           <span class="pl-k">
            void
           </span>
           )
           <span class="pl-en">
            retrieveChatMatesFromParse
           </span>
           {
    [
           <span class="pl-v">
            self
           </span>
           .chatMatesArray
           <span class="pl-c1">
            removeAllObjects
           </span>
           ];

    PFQuery *query = [PFUser
           <span class="pl-c1">
            query
           </span>
           ];
    [query
           <span class="pl-c1">
            orderByAscending:
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            username
            <span class="pl-pds">
             "
            </span>
           </span>
           ];
    [query
           <span class="pl-c1">
            whereKey:
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            username
            <span class="pl-pds">
             "
            </span>
           </span>
           <span class="pl-c1">
            notEqualTo:
           </span>
           <span class="pl-v">
            self
           </span>
           .myUserId];

    __weak
           <span class="pl-smi">
            typeof
           </span>
           (self) weakSelf = self;
    [query
           <span class="pl-c1">
            findObjectsInBackgroundWithBlock:
           </span>
           ^(
           <span class="pl-c1">
            NSArray
           </span>
           *chatMateArray,
           <span class="pl-c1">
            NSError
           </span>
           *error) {
           <span class="pl-k">
            if
           </span>
           (!error) {
           <span class="pl-k">
            for
           </span>
           (
           <span class="pl-k">
            int
           </span>
           i =
           <span class="pl-c1">
            0
           </span>
           ; i &lt; [chatMateArray
           <span class="pl-c1">
            count
           </span>
           ]; i++) {
                [weakSelf.chatMatesArray
           <span class="pl-c1">
            addObject:
           </span>
           chatMateArray[i][
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            username
            <span class="pl-pds">
             "
            </span>
           </span>
           ]];
            }
            [weakSelf.tableView
           <span class="pl-c1">
            reloadData
           </span>
           ];
        }
           <span class="pl-k">
            else
           </span>
           {
           <span class="pl-c1">
            NSLog
           </span>
           (
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            Error:
            <span class="pl-c1">
             %@
            </span>
            <span class="pl-pds">
             "
            </span>
           </span>
           , error.
           <span class="pl-smi">
            description
           </span>
           );
        }
    }];   
}
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <p>
          Next, add the following
          <strong>
           viewWillAppear:
          </strong>
          function under
          <code>
           #pragma mark Boilerplate methods
          </code>
          in MNCChatMateListViewController.m implementation:
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            MNCChatMateListViewController
           </span>
           #
           <span class="pl-k">
            pragma mark
           </span>
           Boilerplate methods

- (
           <span class="pl-k">
            void
           </span>
           )
           <span class="pl-en">
            viewWillAppear
           </span>
           <span class="pl-en">
            :
           </span>
           (
           <span class="pl-k">
            BOOL
           </span>
           )
           <span class="pl-smi">
            animated
           </span>
           {
    [
           <span class="pl-v">
            super
           </span>
           <span class="pl-c1">
            viewWillAppear:
           </span>
           animated];

    [
           <span class="pl-v">
            self
           </span>
           <span class="pl-c1">
            retrieveChatMatesFromParse
           </span>
           ];
}
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <p>
          The reason why
          <code>
           [self retrieveChatMatesFromParse];
          </code>
          is added into
          <strong>
           viewWillAppear:
          </strong>
          instead of
          <strong>
           viewDidLoad
          </strong>
          is that we want to refresh the chat mate list whenever the chat mate list scene appears. It could be when the user logs in, or when the user returns from the Dialog Scene. Being in
          <strong>
           viewWillAppear:
          </strong>
          ,
          <strong>
           retrieveChatMatesFromParse
          </strong>
          will get called more often and the app will try to 'discover' newly signed-up chat mates more often. Now if you test the app, after you logged-in you will see a scrollable list of all other users.
         </p>
         <h3>
          <a aria-hidden="true" class="anchor" href="#opening-a-dialog" id="user-content-opening-a-dialog">
           <span class="octicon octicon-link">
           </span>
          </a>
          Opening a dialog
         </h3>
         <p>
          Notice that the segue that connects from MNCChatMateListViewController to MNCDialogViewController has an identifier as 'OpenDialogSegue' and it is triggered by the ChatMateListPrototypeCell, which means that whenever a ChatMateListPrototypeCell is tapped, the OpenDialogSegue is triggered and performed, and the Dialog Scene will be loaded.
         </p>
         <p>
          So next we will begin to work with the Dialog Scene as well as the unfinished Chat Mate List Scene. You may notice that we haven't really used the Sinch API yet. Be patient! We will reach that soon.
         </p>
         <h2 id="setting up the dialog scene - part 1">
          <a aria-hidden="true" class="anchor" href="#setting-up-the-dialog-scene---part-1" id="user-content-setting-up-the-dialog-scene---part-1">
           <span class="octicon octicon-link">
           </span>
          </a>
          Setting up the Dialog Scene - Part 1
         </h2>
         <p>
          The Dialog Scene, managed by MNCDialogViewController, is where the user edits and sends messages to a particular chat mate, and reads all the historical messages between them.
          <strong>
           messageEditField
          </strong>
          is where the user edits the message to be sent.
          <strong>
           historicalMessagesTableView
          </strong>
          is where historical messages are displayed.
         </p>
         <p>
          First thing we want the Dialog Scene to do is to display the chat mate ID as its title. To do this, we can simply declare an NSString type public property
          <strong>
           chatMateId
          </strong>
          in MNCDialogViewController and initialize its values through the OpenDialogSegue. Notice here we also declare a private property called
          <strong>
           activeDialogViewController
          </strong>
          and changes its value accordingly. It is used to keep track of to whom the user is currently engaged in a dialog with. You will see how useful it is later. Then we set the scene title as chatMateId in the
          <strong>
           viewDidLoad
          </strong>
          method.
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-c">
            // MNCDialogViewController.h
           </span>
           <span class="pl-k">
            @interface
           </span>
           <span class="pl-en">
            MNCDialogViewController
           </span>
           :
           <span class="pl-e">
            UIViewController
           </span>
           <span class="pl-k">
            @property
           </span>
           (
           <span class="pl-k">
            strong
           </span>
           ,
           <span class="pl-k">
            nonatomic
           </span>
           )
           <span class="pl-c1">
            NSString
           </span>
           *chatMateId;
           <span class="pl-c">
            /* add this line */
           </span>
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <p>
          Add
          <code>
           #import "MNCDialogViewController.h"
          </code>
          to
          <strong>
           MNCChatMateListViewController.h
          </strong>
          . Then add the following to
          <strong>
           MNCChatMateListViewController.m
          </strong>
          :
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-c">
            // MNCChatMateListViewController.m
           </span>
           <span class="pl-k">
            @interface
           </span>
           <span class="pl-en">
            MNCChatMateListViewController
           </span>
           ()
           <span class="pl-k">
            @property
           </span>
           (
           <span class="pl-k">
            strong
           </span>
           ,
           <span class="pl-k">
            nonatomic
           </span>
           ) MNCDialogViewController *activeDialogViewController;
           <span class="pl-c">
            /* add this line */
           </span>
           <span class="pl-k">
            @end
           </span>
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            MNCChatMateListViewController
           </span>
           #
           <span class="pl-k">
            pragma mark
           </span>
           Boilerplate methods

- (
           <span class="pl-k">
            void
           </span>
           )
           <span class="pl-en">
            viewWillAppear
           </span>
           <span class="pl-en">
            :
           </span>
           (
           <span class="pl-k">
            BOOL
           </span>
           )
           <span class="pl-smi">
            animated
           </span>
           {
    [
           <span class="pl-v">
            super
           </span>
           <span class="pl-c1">
            viewWillAppear:
           </span>
           animated];

    self.
           <span class="pl-smi">
            activeDialogViewController
           </span>
           =
           <span class="pl-c1">
            nil
           </span>
           ;
           <span class="pl-c">
            /* add this line */
           </span>
           [
           <span class="pl-v">
            self
           </span>
           <span class="pl-c1">
            retrieveChatMatesFromParse
           </span>
           ];
}

- (
           <span class="pl-k">
            void
           </span>
           )
           <span class="pl-en">
            prepareForSegue
           </span>
           <span class="pl-en">
            :
           </span>
           (UIStoryboardSegue *)
           <span class="pl-smi">
            segue
           </span>
           <span class="pl-en">
            sender
           </span>
           <span class="pl-en">
            :
           </span>
           (
           <span class="pl-k">
            id
           </span>
           )
           <span class="pl-smi">
            sender
           </span>
           {
           <span class="pl-c">
            // Segue to open a dialog
           </span>
           <span class="pl-k">
            if
           </span>
           ([segue.identifier
           <span class="pl-c1">
            isEqualToString:
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            OpenDialogSegue
            <span class="pl-pds">
             "
            </span>
           </span>
           ]) {
        self.
           <span class="pl-smi">
            activeDialogViewController
           </span>
           = segue.
           <span class="pl-smi">
            destinationViewController
           </span>
           ;
           <span class="pl-k">
            NSInteger
           </span>
           chatMateIndex = [[
           <span class="pl-v">
            self
           </span>
           .tableView
           <span class="pl-c1">
            indexPathForCell:
           </span>
           (UITableViewCell *)sender]
           <span class="pl-c1">
            row
           </span>
           ];
        self.
           <span class="pl-smi">
            activeDialogViewController
           </span>
           .
           <span class="pl-smi">
            chatMateId
           </span>
           = self.
           <span class="pl-smi">
            chatMatesArray
           </span>
           [chatMateIndex];
           <span class="pl-k">
            return
           </span>
           ;
    }
}
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-c">
            // MNCDialogViewCtonroller.m
           </span>
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            MNCDialogViewController
           </span>
           #
           <span class="pl-k">
            pragma mark
           </span>
           Boilerplate methods

- (
           <span class="pl-k">
            void
           </span>
           )
           <span class="pl-en">
            viewDidLoad
           </span>
           {
    [
           <span class="pl-v">
            super
           </span>
           <span class="pl-c1">
            viewDidLoad
           </span>
           ];

    self.
           <span class="pl-smi">
            navigationItem
           </span>
           .
           <span class="pl-smi">
            title
           </span>
           = self.
           <span class="pl-smi">
            chatMateId
           </span>
           ;
}
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <h3>
          <a aria-hidden="true" class="anchor" href="#using-sinclient" id="user-content-using-sinclient">
           <span class="octicon octicon-link">
           </span>
          </a>
          Using &lt;SINClient&gt;
         </h3>
         <p>
          Recall that messaging is the responsibility of the Sinch API. To send a message, we need a 'SINMessageClient', an object that adopts the &lt;SINMessageClient&gt; protocol. The good news is that we can get a 'SINMessageClient' from a 'SINClient', an object that adopts &lt;SINClient&gt; protocol, because &lt;SINClient&gt; protocol has a method called
          <strong>
           messageClient
          </strong>
          that returns a id&lt;SINMessageClient&gt;. So we need a id&lt;SINClient&gt; object, which is initialized through the
          <strong>
           clientWithApplicationKey:applicationSecret:environmentHost:userId:
          </strong>
          class method of the
          <strong>
           Sinch
          </strong>
          class. Notice from the method signature that in order for an id&lt;SINClient&gt; to be initialized, you not only need the Application Key, the Application Secret and the Environment Host, all the three things you had written down. But you also need to provide a user ID. One way of doing this is is to declare a property called
          <strong>
           id&lt;SINClient&gt; sinchClient
          </strong>
          in
          <strong>
           AppDelegate.h
          </strong>
          and initialize sinchClient in the loginMethod Method
         </p>
         <p>
          First thing first, add
          <code>
           #import &lt;Sinch/Sinch.h&gt;
          </code>
          to
          <strong>
           AppDelegate.h
          </strong>
          .
         </p>
         <p>
          Then, add the
          <strong>
           id&lt;SINClient&gt; sinchClient
          </strong>
          property:
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           @property (strong, nonatomic)
           <span class="pl-k">
            id
           </span>
           &lt;SINClient&gt; sinchClient;
@end
          </pre>
         </div>
         <h4>
          <a aria-hidden="true" class="anchor" href="#initializing-sinch" id="user-content-initializing-sinch">
           <span class="octicon octicon-link">
           </span>
          </a>
          Initializing Sinch
         </h4>
         <p>
          Next, to initialize sinchClient, add
          <code>
           #import "Config.h"
          </code>
          to
          <strong>
           AppDelegate.h
          </strong>
          . Then add the following
          <strong>
           initSinchClient
          </strong>
          method into the
          <strong>
           AppDelegate.m
          </strong>
          implementation:
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            AppDelegate
           </span>
           #
           <span class="pl-k">
            pragma mark
           </span>
           Functional methods
           <span class="pl-c">
            // Initialize the Sinch client
           </span>
           - (
           <span class="pl-k">
            void
           </span>
           )
           <span class="pl-en">
            initSinchClient
           </span>
           <span class="pl-en">
            :
           </span>
           (
           <span class="pl-c1">
            NSString
           </span>
           *)
           <span class="pl-smi">
            userId
           </span>
           {
    self.
           <span class="pl-smi">
            sinchClient
           </span>
           = [Sinch
           <span class="pl-c1">
            clientWithApplicationKey:
           </span>
           SINCH_APPLICATION_KEY
           <span class="pl-c1">
            applicationSecret:
           </span>
           SINCH_APPLICATION_SECRET
           <span class="pl-c1">
            environmentHost:
           </span>
           SINCH_ENVIRONMENT_HOST
           <span class="pl-c1">
            userId:
           </span>
           userId];
           <span class="pl-c1">
            NSLog
           </span>
           (
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            Sinch version:
            <span class="pl-c1">
             %@
            </span>
            , userId:
            <span class="pl-c1">
             %@
            </span>
            <span class="pl-pds">
             "
            </span>
           </span>
           , [Sinch
           <span class="pl-c1">
            version
           </span>
           ], [
           <span class="pl-v">
            self
           </span>
           .sinchClient
           <span class="pl-c1">
            userId
           </span>
           ]);

    [
           <span class="pl-v">
            self
           </span>
           .sinchClient
           <span class="pl-c1">
            setSupportMessaging:
           </span>
           <span class="pl-c1">
            YES
           </span>
           ];
    [
           <span class="pl-v">
            self
           </span>
           .sinchClient
           <span class="pl-c1">
            start
           </span>
           ];
    [
           <span class="pl-v">
            self
           </span>
           .sinchClient
           <span class="pl-c1">
            startListeningOnActiveConnection
           </span>
           ];
}
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <p>
          And call the above method before the end of the
          <strong>
           login:
          </strong>
          method of MNCLoginViewController.
         </p>
         <p>
          Add import toMNCLogonViewController.m
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           #
           <span class="pl-k">
            import
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             "
            </span>
            AppDelegate.h
            <span class="pl-pds">
             "
            </span>
           </span>
          </pre>
         </div>
         <p>
          Change the
          <strong>
           login:
          </strong>
          method to look like this:
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           - (
           <span class="pl-k">
            IBAction
           </span>
           )login:(
           <span class="pl-k">
            id
           </span>
           )sender {
    __weak
           <span class="pl-smi">
            typeof
           </span>
           (self) weakSelf = self;
    [PFUser
           <span class="pl-c1">
            logInWithUsernameInBackground:
           </span>
           <span class="pl-v">
            self
           </span>
           .usernameField.text
           <span class="pl-c1">
            password:
           </span>
           <span class="pl-v">
            self
           </span>
           .passwordField.text
           <span class="pl-c1">
            block:
           </span>
           ^(PFUser *pfUser,
           <span class="pl-c1">
            NSError
           </span>
           *error)
     {
           <span class="pl-k">
            if
           </span>
           (pfUser &amp;&amp; !error) {
           <span class="pl-c">
            // Proceed to next screen after successful login.
           </span>
           weakSelf.
           <span class="pl-smi">
            promptLabel
           </span>
           .
           <span class="pl-smi">
            hidden
           </span>
           =
           <span class="pl-c1">
            YES
           </span>
           ;
           <span class="pl-c">
            //add this
           </span>
           AppDelegate *appDelegate = (AppDelegate *)[[UIApplication
           <span class="pl-c1">
            sharedApplication
           </span>
           ]
           <span class="pl-c1">
            delegate
           </span>
           ];
             [appDelegate
           <span class="pl-c1">
            initSinchClient:
           </span>
           <span class="pl-v">
            self
           </span>
           .usernameField.text];
           <span class="pl-c">
            //
           </span>
           [weakSelf
           <span class="pl-c1">
            performSegueWithIdentifier:
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            LoginSegue
            <span class="pl-pds">
             "
            </span>
           </span>
           <span class="pl-c1">
            sender:
           </span>
           <span class="pl-v">
            self
           </span>
           ];


         }
           <span class="pl-k">
            else
           </span>
           {
           <span class="pl-c">
            // The login failed. Show error.
           </span>
           weakSelf.
           <span class="pl-smi">
            promptLabel
           </span>
           .
           <span class="pl-smi">
            textColor
           </span>
           = [UIColor
           <span class="pl-c1">
            redColor
           </span>
           ];
             weakSelf.
           <span class="pl-smi">
            promptLabel
           </span>
           .
           <span class="pl-smi">
            text
           </span>
           = [error
           <span class="pl-c1">
            userInfo
           </span>
           ][
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            error
            <span class="pl-pds">
             "
            </span>
           </span>
           ];
             weakSelf.
           <span class="pl-smi">
            promptLabel
           </span>
           .
           <span class="pl-smi">
            hidden
           </span>
           =
           <span class="pl-c1">
            NO
           </span>
           ;
         }
     }];
}
          </pre>
         </div>
         <h4>
          <a aria-hidden="true" class="anchor" href="#listening-sinchclient-events" id="user-content-listening-sinchclient-events">
           <span class="octicon octicon-link">
           </span>
          </a>
          Listening SinchClient events
         </h4>
         <p>
          In order to be notified of some important state change events of
          <strong>
           sinchClient
          </strong>
          , perhaps for debugging purposes, it is a good idea to make the MNCChatMateListViewController adopt the &lt;SINClientDelegate&gt; protocol. So add the protocol to
          <strong>
           AppDelegate.h
          </strong>
          ; when sinchClient is initialized, set the MNCChatMateListViewController instance as its delegate; and add two methods into
          <strong>
           AppDelegate.m
          </strong>
          :
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-c">
            // AppDelegate.h
           </span>
           <span class="pl-k">
            @interface
           </span>
           <span class="pl-en">
            AppDelegate
           </span>
           : 
    UIResponder &lt;UIApplicationDelegate, SINClientDelegate&gt;
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <p>
          In initSinchClient add after the initialization
         </p>
         <pre class="prettyprint linenums">
          <code>
           self.sinchClient.delegate = self;   /* add this line */
          </code>
         </pre>
         <p>
          Add the protocol implementation for
          <strong>
           SINCLientDelegate
          </strong>
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-c">
            // AppDelegate.m
           </span>
           #
           <span class="pl-k">
            pragma mark
           </span>
           SINClientDelegate methods

- (
           <span class="pl-k">
            void
           </span>
           )clientDidStart:(
           <span class="pl-k">
            id
           </span>
           &lt;SINClient&gt;)client {
           <span class="pl-c1">
            NSLog
           </span>
           (
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            Start SINClient successful!
            <span class="pl-pds">
             "
            </span>
           </span>
           );
}

- (
           <span class="pl-k">
            void
           </span>
           )clientDidFail:(
           <span class="pl-k">
            id
           </span>
           &lt;SINClient&gt;)client error:(
           <span class="pl-c1">
            NSError
           </span>
           *)error {
           <span class="pl-c1">
            NSLog
           </span>
           (
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            Start SINClient failed. Description:
            <span class="pl-c1">
             %@
            </span>
            . Reason:
            <span class="pl-c1">
             %@
            </span>
            .
            <span class="pl-pds">
             "
            </span>
           </span>
           , error.
           <span class="pl-smi">
            localizedDescription
           </span>
           , error.
           <span class="pl-smi">
            localizedFailureReason
           </span>
           );
}

@end
          </pre>
         </div>
         <h3>
          <a aria-hidden="true" class="anchor" href="#using-sinmessageclient" id="user-content-using-sinmessageclient">
           <span class="octicon octicon-link">
           </span>
          </a>
          Using &lt;SINMessageClient&gt;
         </h3>
         <p>
          The id&lt;SINMessageClient&gt; object and its delegate together are responsible for doing the most important thing - sending a message, receiving a message, being notified that a message is sent, being notified that a message is delivered, being notified a message sending failure, etc. Essentially, we now already have an id&lt;SINMessageClient&gt; in MNCChatMateListViewController by having a sinchClient which can call its
          <strong>
           messageClient
          </strong>
          method to return an id&lt;SINMessageClient&gt;. But it definitely worth some consideration about where to place these two object to perform those actions or listen to those events.
         </p>
         <p>
          In a real world app scenario you would probably have a separate like service class that uses NotificationCenter to broadcast events. In this tutorial we are going to put most of that code in AppDelegate.
         </p>
         <p>
          Let's start implementing message events.
         </p>
         <p>
          In Config.h add the following, later we are going to use those as names for broadcasting events. The reason for using Notification center is that we want to be able to handle and notify different view controllers about messages being sent and received.
         </p>
         <pre class="prettyprint linenums">
          <code>
           #define SINCH_MESSAGE_RECIEVED @"SINCH_MESSAGE_RECIEVED"
#define SINCH_MESSAGE_SENT @"SINCH_MESSAGE_SENT"
#define SINCH_MESSAGE_DELIVERED @"SINCH_MESSAGE_DELIVERED"
#define SINCH_MESSAGE_FAILED @"SINCH_MESSAGE_DELIVERED"
          </code>
         </pre>
         <p>
          In AppDelegate.h add SINMessageClientDelegate protocol:
         </p>
         <pre class="prettyprint linenums">
          <code>
           @interface AppDelegate : UIResponder &lt;UIApplicationDelegate, SINClientDelegate, SINMessageClientDelegate&gt;
          </code>
         </pre>
         <p>
          Add a property for the message client (don't forget to @syntezise):
         </p>
         <pre class="prettyprint linenums">
          <code>
           @property (strong, nonatomic) id&lt;SINMessageClient&gt; sinchMessageClient;
          </code>
         </pre>
         <p>
          Open up AppDelegate.m in clientDidStart and add the code below to assign the property and delegate
         </p>
         <pre class="prettyprint linenums">
          <code>
           - (void)clientDidStart:(id&lt;SINClient&gt;)client {
    NSLog(@"Start SINClient successful!");
    self.sinchMessageClient = [self.sinchClient messageClient];
    self.sinchMessageClient.delegate =  self;
}
          </code>
         </pre>
         <p>
          In AppDelegate.m add protocol methods for listening on SINMessageClient and broad cast them in notification center.
         </p>
         <pre class="prettyprint linenums">
          <code>
           #pragma mark SINMessageClientDelegate methods
// Receiving an incoming message.
- (void)messageClient:(id&lt;SINMessageClient&gt;)messageClient didReceiveIncomingMessage:(id&lt;SINMessage&gt;)message {
   [[NSNotificationCenter defaultCenter] postNotificationName:SINCH_MESSAGE_RECIEVED object:self userInfo:@{@"message" : message}];   
}

// Finish sending a message
- (void)messageSent:(id&lt;SINMessage&gt;)message recipientId:(NSString *)recipientId {
    [[NSNotificationCenter defaultCenter] postNotificationName:SINCH_MESSAGE_SENT object:self userInfo:@{@"message" : message}];

}

// Failed to send a message
- (void)messageFailed:(id&lt;SINMessage&gt;)message info:(id&lt;SINMessageFailureInfo&gt;)messageFailureInfo {
    [[NSNotificationCenter defaultCenter] postNotificationName:SINCH_MESSAGE_FAILED object:self userInfo:@{@"message" : message}];
    NSLog(@"MessageBoard: message to %@ failed. Description: %@. Reason: %@.", messageFailureInfo.recipientId, messageFailureInfo.error.localizedDescription, messageFailureInfo.error.localizedFailureReason);
}

-(void)messageDelivered:(id&lt;SINMessageDeliveryInfo&gt;)info
{
    [[NSNotificationCenter defaultCenter] postNotificationName:SINCH_MESSAGE_FAILED object:info];
}
          </code>
         </pre>
         <h3>
          <a aria-hidden="true" class="anchor" href="#sending-messages" id="user-content-sending-messages">
           <span class="octicon octicon-link">
           </span>
          </a>
          Sending messages
         </h3>
         <p>
          First, define a sendTextMessage:toRecipient: public instance method in AppDelegate.h. This method would invoke the sendMessage: API method of the sinchClient.messageClient object.
         </p>
         <pre class="prettyprint linenums">
          <code>
           - (void)sendTextMessage:(NSString *)messageText toRecipient:(NSString *)recipientID;
          </code>
         </pre>
         <p>
          AppDelegate.m
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           #
           <span class="pl-k">
            pragma mark
           </span>
           Functional methods
           <span class="pl-c">
            // Send a text message
           </span>
           - (
           <span class="pl-k">
            void
           </span>
           )sendTextMessage:(
           <span class="pl-c1">
            NSString
           </span>
           *)messageText toRecipient:(
           <span class="pl-c1">
            NSString
           </span>
           *)recipientId {
    SINOutgoingMessage *outgoingMessage = [SINOutgoingMessage
           <span class="pl-c1">
            messageWithRecipient:
           </span>
           recipientId
           <span class="pl-c1">
            text:
           </span>
           messageText];
    [
           <span class="pl-v">
            self
           </span>
           .sinchClient.messageClient
           <span class="pl-c1">
            sendMessage:
           </span>
           outgoingMessage];
}

@end
          </pre>
         </div>
         <p>
          Before we start building the UI, let's implement saving and retrieving messages from Parse. Sinch will save messages for delivery by default for 30 days, but don't provide a storage to query and sync at will. If a user adds a new device or reinstalls the client, messages will be delivered again. So if you want to support full history as we do you need to either use your own backend or Parse.
         </p>
         <p>
          In AppDelegate, add an instance method called
          <strong>
           saveMessagesOnParse
          </strong>
          ,
         </p>
         <div class="highlight highlight-objectivec">
          <pre class="prettyprint linenums">
           - (
           <span class="pl-k">
            void
           </span>
           )saveMessagesOnParse:(
           <span class="pl-k">
            id
           </span>
           &lt;SINMessage&gt;)message {
    PFQuery *query = [PFQuery
           <span class="pl-c1">
            queryWithClassName:
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            SinchMessage
            <span class="pl-pds">
             "
            </span>
           </span>
           ];
    [query
           <span class="pl-c1">
            whereKey:
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            messageId
            <span class="pl-pds">
             "
            </span>
           </span>
           <span class="pl-c1">
            equalTo:
           </span>
           [message
           <span class="pl-c1">
            messageId
           </span>
           ]];

    [query
           <span class="pl-c1">
            findObjectsInBackgroundWithBlock:
           </span>
           ^(
           <span class="pl-c1">
            NSArray
           </span>
           *messageArray,
           <span class="pl-c1">
            NSError
           </span>
           *error) {
           <span class="pl-k">
            if
           </span>
           (!error) {
           <span class="pl-c">
            // If the SinchMessage is not already saved on Parse (an empty array is returned), save it.
           </span>
           <span class="pl-k">
            if
           </span>
           ([messageArray
           <span class="pl-c1">
            count
           </span>
           ] &lt;=
           <span class="pl-c1">
            0
           </span>
           ) {
                PFObject *messageObject = [PFObject
           <span class="pl-c1">
            objectWithClassName:
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            SinchMessage
            <span class="pl-pds">
             "
            </span>
           </span>
           ];

                messageObject[
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            messageId
            <span class="pl-pds">
             "
            </span>
           </span>
           ] = [message
           <span class="pl-c1">
            messageId
           </span>
           ];
                messageObject[
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            senderId
            <span class="pl-pds">
             "
            </span>
           </span>
           ] = [message
           <span class="pl-c1">
            senderId
           </span>
           ];
                messageObject[
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            recipientId
            <span class="pl-pds">
             "
            </span>
           </span>
           ] = [message
           <span class="pl-c1">
            recipientIds
           </span>
           ][
           <span class="pl-c1">
            0
           </span>
           ];
                messageObject[
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            text
            <span class="pl-pds">
             "
            </span>
           </span>
           ] = [message
           <span class="pl-c1">
            text
           </span>
           ];
                messageObject[
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            timestamp
            <span class="pl-pds">
             "
            </span>
           </span>
           ] = [message
           <span class="pl-c1">
            timestamp
           </span>
           ];

                [messageObject
           <span class="pl-c1">
            saveInBackground
           </span>
           ];
            }
        }
           <span class="pl-k">
            else
           </span>
           {
           <span class="pl-c1">
            NSLog
           </span>
           (
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            Error:
            <span class="pl-c1">
             %@
            </span>
            <span class="pl-pds">
             "
            </span>
           </span>
           , error.
           <span class="pl-smi">
            description
           </span>
           );
        }
    }];
}
          </pre>
         </div>
         <p>
          In messageSent: and didReceiveIncomingMessage, add a call to the saveMessageOnParse, they should look like this when you are done:
         </p>
         <div class="highlight highlight-objectivec">
          <pre class="prettyprint linenums">
           <span class="pl-c">
            // Receiving an incoming message.
           </span>
           - (
           <span class="pl-k">
            void
           </span>
           )messageClient:(
           <span class="pl-k">
            id
           </span>
           &lt;SINMessageClient&gt;)messageClient didReceiveIncomingMessage:(
           <span class="pl-k">
            id
           </span>
           &lt;SINMessage&gt;)message {
    [
           <span class="pl-v">
            self
           </span>
           <span class="pl-c1">
            saveMessagesOnParse:
           </span>
           message];
    [[
           <span class="pl-c1">
            NSNotificationCenter
           </span>
           <span class="pl-c1">
            defaultCenter
           </span>
           ]
           <span class="pl-c1">
            postNotificationName:
           </span>
           SINCH_MESSAGE_RECIEVED
           <span class="pl-c1">
            object:
           </span>
           message];
}
           <span class="pl-c">
            // Finish sending a message
           </span>
           - (
           <span class="pl-k">
            void
           </span>
           )messageSent:(
           <span class="pl-k">
            id
           </span>
           &lt;SINMessage&gt;)message recipientId:(
           <span class="pl-c1">
            NSString
           </span>
           *)recipientId {
        [
           <span class="pl-v">
            self
           </span>
           <span class="pl-c1">
            saveMessagesOnParse:
           </span>
           message];
    [[
           <span class="pl-c1">
            NSNotificationCenter
           </span>
           <span class="pl-c1">
            defaultCenter
           </span>
           ]
           <span class="pl-c1">
            postNotificationName:
           </span>
           SINCH_MESSAGE_SENT
           <span class="pl-c1">
            object:
           </span>
           message];

}
          </pre>
         </div>
         <p>
          Now all the sent or received messages should be saved in Parse without a problem. Run your app and send some messages. In the browser, go to your Parse dashboard, open your app, click the Core pane button on the top and then the Data tab button on the left. You should be able to see every saved message object.
          <img alt="Examine Saved Messages" src="/wp-content/uploads/2015/01/ExamineSavedMessages.png" style="max-width:100%;"/>
         </p>
         <h2 id="implementing the ui">
          <a aria-hidden="true" class="anchor" href="#implementing-the-ui" id="user-content-implementing-the-ui">
           <span class="octicon octicon-link">
           </span>
          </a>
          Implementing the UI
         </h2>
         <p>
          Open up
          <strong>
           MNCDialogViewController.h
          </strong>
          , and add a property called messageArray and init in viewDidLoad. It should now look like this:
         </p>
         <div class="highlight highlight-objectivec">
          <pre class="prettyprint linenums">
           - (
           <span class="pl-k">
            void
           </span>
           )viewDidLoad {
    [
           <span class="pl-v">
            super
           </span>
           <span class="pl-c1">
            viewDidLoad
           </span>
           ];
    self.
           <span class="pl-smi">
            navigationItem
           </span>
           .
           <span class="pl-smi">
            title
           </span>
           = self.
           <span class="pl-smi">
            chatMateId
           </span>
           ;
    self.
           <span class="pl-smi">
            messageArray
           </span>
           = [[
           <span class="pl-c1">
            NSMutableArray
           </span>
           <span class="pl-c1">
            alloc
           </span>
           ]
           <span class="pl-c1">
            init
           </span>
           ];
}
          </pre>
         </div>
         <p>
          Any historical messages between the user and the current specific chat mate that are retrieved will be added to self.messageArray. How do we differentiate which ones are sent by the chat mate and which ones are sent by the user? We can imitate most other messaging apps. We can show chat mate sent messages on the left and user sent messages on the right, and we use different colors for them. If you look at the storyboard, a custom prototype cell in the table view has been created for that purpose, and its custom class - MNCChatMessageCell is given.
         </p>
         <p>
          MNCChatMessageCell has two more properties compared to its superclass, the UITableViewCell - chatMateMessageLabel and myMessageLabel. So your app just needs to determine which label to put a message object into at run time.
         </p>
         <p>
          Every time the MNCDialogViewController load its view, it should retrieve the historical messages from Parse. While messages are retrieved by PFQuery that returns PFObject instances, we would like to add id into messageArray.
         </p>
         <p>
          Since properties declared in  protocol are all read-only, which stops us from setting each property according to the PFObject, we can create a class that adopts  protocol.
         </p>
         <p>
          Create an Objective-C class (Cocoa class) named MNCChatMessage that subclasses NSObject and adopts  protocol. The .h and .m file should look as follows:
         </p>
         <div class="highlight highlight-objectivec">
          <pre class="prettyprint linenums">
           <span class="pl-c">
            // MNCChatMessage.h
           </span>
           #
           <span class="pl-k">
            import
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             &lt;
            </span>
            Foundation/Foundation.h
            <span class="pl-pds">
             &gt;
            </span>
           </span>
           #
           <span class="pl-k">
            import
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             &lt;
            </span>
            Sinch/Sinch.h
            <span class="pl-pds">
             &gt;
            </span>
           </span>
           <span class="pl-k">
            @interface
           </span>
           <span class="pl-en">
            MNCChatMessage
           </span>
           :
           <span class="pl-e">
            NSObject
           </span>
           &lt;SINMessage&gt;
           <span class="pl-k">
            @property
           </span>
           (
           <span class="pl-k">
            nonatomic
           </span>
           ,
           <span class="pl-k">
            strong
           </span>
           )
           <span class="pl-c1">
            NSString
           </span>
           * messageId;
           <span class="pl-k">
            @property
           </span>
           (
           <span class="pl-k">
            nonatomic
           </span>
           ,
           <span class="pl-k">
            strong
           </span>
           )
           <span class="pl-c1">
            NSArray
           </span>
           * recipientIds;
           <span class="pl-k">
            @property
           </span>
           (
           <span class="pl-k">
            nonatomic
           </span>
           ,
           <span class="pl-k">
            strong
           </span>
           )
           <span class="pl-c1">
            NSString
           </span>
           * senderId;
           <span class="pl-k">
            @property
           </span>
           (
           <span class="pl-k">
            nonatomic
           </span>
           ,
           <span class="pl-k">
            strong
           </span>
           )
           <span class="pl-c1">
            NSString
           </span>
           * text;
           <span class="pl-k">
            @property
           </span>
           (
           <span class="pl-k">
            nonatomic
           </span>
           ,
           <span class="pl-k">
            strong
           </span>
           )
           <span class="pl-c1">
            NSDictionary
           </span>
           * headers;
           <span class="pl-k">
            @property
           </span>
           (
           <span class="pl-k">
            nonatomic
           </span>
           ,
           <span class="pl-k">
            strong
           </span>
           )
           <span class="pl-c1">
            NSDate
           </span>
           * timestamp;
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <div class="highlight highlight-objectivec">
          <pre class="prettyprint linenums">
           <span class="pl-c">
            // MNCChatMessage.m
           </span>
           #
           <span class="pl-k">
            import
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             "
            </span>
            MNCChatMessage.h
            <span class="pl-pds">
             "
            </span>
           </span>
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            MNCChatMessage
           </span>
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <p>
          Now, add
          <code>
           #import "MNCChatMessage.h"
          </code>
          to
          <strong>
           MNCDialogViewController.h
          </strong>
          . Then, add the following
          <strong>
           retrieveMessagesFromParseWithChatMateID
          </strong>
          method and call it in
          <code>
           viewDidLoad:
          </code>
         </p>
         <div class="highlight highlight-objectivec">
          <pre class="prettyprint linenums">
           [
           <span class="pl-v">
            self
           </span>
           <span class="pl-c1">
            retrieveMessagesFromParseWithChatMateID:
           </span>
           <span class="pl-v">
            self
           </span>
           .chatMateId];
          </pre>
         </div>
         <p>
          Next add
          <strong>
           retrieveMessagesFromParseWithChatMateID
          </strong>
          as below:
         </p>
         <div class="highlight highlight-objectivec">
          <pre class="prettyprint linenums">
           - (
           <span class="pl-k">
            void
           </span>
           )retrieveMessagesFromParseWithChatMateID:(
           <span class="pl-c1">
            NSString
           </span>
           *)chatMateId {
           <span class="pl-c1">
            NSArray
           </span>
           *userNames = @[
           <span class="pl-v">
            self
           </span>
           .myUserId, chatMateId];

    PFQuery *query = [PFQuery
           <span class="pl-c1">
            queryWithClassName:
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            SinchMessage
            <span class="pl-pds">
             "
            </span>
           </span>
           ];
    [query
           <span class="pl-c1">
            whereKey:
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            senderId
            <span class="pl-pds">
             "
            </span>
           </span>
           <span class="pl-c1">
            containedIn:
           </span>
           userNames];
    [query
           <span class="pl-c1">
            whereKey:
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            recipientId
            <span class="pl-pds">
             "
            </span>
           </span>
           <span class="pl-c1">
            containedIn:
           </span>
           userNames];
    [query
           <span class="pl-c1">
            orderByAscending:
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            timestamp
            <span class="pl-pds">
             "
            </span>
           </span>
           ];

    __weak
           <span class="pl-smi">
            typeof
           </span>
           (self) weakSelf = self;
    [query
           <span class="pl-c1">
            findObjectsInBackgroundWithBlock:
           </span>
           ^(
           <span class="pl-c1">
            NSArray
           </span>
           *chatMessageArray,
           <span class="pl-c1">
            NSError
           </span>
           *error) {
           <span class="pl-k">
            if
           </span>
           (!error) {
           <span class="pl-c">
            // Store all retrieve messages into messageArray
           </span>
           <span class="pl-k">
            for
           </span>
           (
           <span class="pl-k">
            int
           </span>
           i =
           <span class="pl-c1">
            0
           </span>
           ; i &lt; [chatMessageArray
           <span class="pl-c1">
            count
           </span>
           ]; i++) {
                MNCChatMessage *chatMessage = [[MNCChatMessage
           <span class="pl-c1">
            alloc
           </span>
           ]
           <span class="pl-c1">
            init
           </span>
           ];

                [chatMessage
           <span class="pl-c1">
            setMessageId:
           </span>
           chatMessageArray[i][
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            messageId
            <span class="pl-pds">
             "
            </span>
           </span>
           ]];
                [chatMessage
           <span class="pl-c1">
            setSenderId:
           </span>
           chatMessageArray[i][
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            senderId
            <span class="pl-pds">
             "
            </span>
           </span>
           ]];
                [chatMessage
           <span class="pl-c1">
            setRecipientIds:
           </span>
           [
           <span class="pl-c1">
            NSArray
           </span>
           <span class="pl-c1">
            arrayWithObject:
           </span>
           chatMessageArray[i][
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            recipientId
            <span class="pl-pds">
             "
            </span>
           </span>
           ]]];
                [chatMessage
           <span class="pl-c1">
            setText:
           </span>
           chatMessageArray[i][
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            text
            <span class="pl-pds">
             "
            </span>
           </span>
           ]];
                [chatMessage
           <span class="pl-c1">
            setTimestamp:
           </span>
           chatMessageArray[i][
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            timestamp
            <span class="pl-pds">
             "
            </span>
           </span>
           ]];

                [weakSelf.messageArray
           <span class="pl-c1">
            addObject:
           </span>
           chatMessage];
            }
            [weakSelf.historicalMessagesTableView
           <span class="pl-c1">
            reloadData
           </span>
           ];
           <span class="pl-c">
            // Refresh the table view
           </span>
           [weakSelf
           <span class="pl-c1">
            scrollTableToBottom
           </span>
           ];
           <span class="pl-c">
            // Scroll to the bottom of the table view
           </span>
           }
           <span class="pl-k">
            else
           </span>
           {
           <span class="pl-c1">
            NSLog
           </span>
           (
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            Error:
            <span class="pl-c1">
             %@
            </span>
            <span class="pl-pds">
             "
            </span>
           </span>
           , error.
           <span class="pl-smi">
            description
           </span>
           );
        }
    }];
}
          </pre>
         </div>
         <p>
          Notice we need to use the property myUserId when retrieving historical messages and we haven't declared it yet. Let's declare it and pass value to it in the OpenDialogSegue:
         </p>
         <div class="highlight highlight-objectivec">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @interface
           </span>
           <span class="pl-en">
            MNCDialogViewController
           </span>
           :
           <span class="pl-e">
            UIViewController
           </span>
           <span class="pl-k">
            @property
           </span>
           (
           <span class="pl-k">
            strong
           </span>
           ,
           <span class="pl-k">
            nonatomic
           </span>
           )
           <span class="pl-c1">
            NSString
           </span>
           *myUserId;
           <span class="pl-c">
            /* add this line */
           </span>
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <p>
          And in MNCChatMatesController:
         </p>
         <pre class="prettyprint linenums">
          <code>
           - (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Segue to open a dialog
    if ([segue.identifier isEqualToString:@"OpenDialogSegue"]) {
        self.activeDialogViewController = segue.destinationViewController;
        NSInteger chatMateIndex = [[self.tableView indexPathForCell:(UITableViewCell *)sender] row];
        self.activeDialogViewController.chatMateId = self.chatMatesArray[chatMateIndex];
        self.activeDialogViewController.myUserId = self.myUserId;   /* add this line */
        return;
    }
}
          </code>
         </pre>
         <p>
          Next we need to configure historicalMessagesTableView to display all the messages and define the
          <strong>
           scrollTableToBottom
          </strong>
          method. Specifically, MNCDialogViewController should adopt &lt;UITableViewDataSource&gt; protocol. Add the following code:
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-c">
            //  MNCDialogViewController.h
           </span>
           #
           <span class="pl-k">
            import
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             "
            </span>
            MNCChatMessageCell.h
            <span class="pl-pds">
             "
            </span>
           </span>
           <span class="pl-c">
            /* add this line */
           </span>
           <span class="pl-k">
            @interface
           </span>
           <span class="pl-en">
            MNCDialogViewController
           </span>
           :
           <span class="pl-e">
            UIViewController
           </span>
           &lt;UITableViewDataSource&gt;
           <span class="pl-c">
            /* add this protocol */
           </span>
          </pre>
         </div>
         <p>
          Now in
          <strong>
           MNCDialogViewController.m
          </strong>
          , add TableViewDelegate methods:
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-c">
            // MNCDialogViewController.m
           </span>
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            MNCDialogViewController
           </span>
           #
           <span class="pl-k">
            pragma mark
           </span>
           User interface behavioral methods

- (
           <span class="pl-k">
            NSInteger
           </span>
           )
           <span class="pl-en">
            numberOfSectionsInTableView
           </span>
           <span class="pl-en">
            :
           </span>
           (UITableView *)
           <span class="pl-smi">
            tableView
           </span>
           {
           <span class="pl-c">
            // Return the number of sections.
           </span>
           <span class="pl-k">
            return
           </span>
           <span class="pl-c1">
            1
           </span>
           ;
}

- (
           <span class="pl-k">
            NSInteger
           </span>
           )
           <span class="pl-en">
            tableView
           </span>
           <span class="pl-en">
            :
           </span>
           (UITableView *)
           <span class="pl-smi">
            tableView
           </span>
           <span class="pl-en">
            numberOfRowsInSection
           </span>
           <span class="pl-en">
            :
           </span>
           (
           <span class="pl-k">
            NSInteger
           </span>
           )
           <span class="pl-smi">
            section
           </span>
           {
           <span class="pl-c">
            // Return the number of rows in the section.
           </span>
           <span class="pl-k">
            return
           </span>
           [
           <span class="pl-v">
            self
           </span>
           .messageArray
           <span class="pl-c1">
            count
           </span>
           ];
}


- (UITableViewCell *)
           <span class="pl-en">
            tableView
           </span>
           <span class="pl-en">
            :
           </span>
           (UITableView *)
           <span class="pl-smi">
            tableView
           </span>
           <span class="pl-en">
            cellForRowAtIndexPath
           </span>
           <span class="pl-en">
            :
           </span>
           (
           <span class="pl-c1">
            NSIndexPath
           </span>
           *)
           <span class="pl-smi">
            indexPath
           </span>
           {
    MNCChatMessageCell *messageCell = [tableView
           <span class="pl-c1">
            dequeueReusableCellWithIdentifier:
           </span>
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            MessageListPrototypeCell
            <span class="pl-pds">
             "
            </span>
           </span>
           <span class="pl-c1">
            forIndexPath:
           </span>
           indexPath];
    [
           <span class="pl-v">
            self
           </span>
           <span class="pl-c1">
            configureCell:
           </span>
           messageCell
           <span class="pl-c1">
            forIndexPath:
           </span>
           indexPath];
           <span class="pl-k">
            return
           </span>
           messageCell;
}



#
           <span class="pl-k">
            pragma mark
           </span>
           Method to configure the appearance of a message list prototype cell

- (
           <span class="pl-k">
            void
           </span>
           )
           <span class="pl-en">
            configureCell
           </span>
           <span class="pl-en">
            :
           </span>
           (MNCChatMessageCell *)
           <span class="pl-smi">
            messageCell
           </span>
           <span class="pl-en">
            forIndexPath
           </span>
           <span class="pl-en">
            :
           </span>
           (
           <span class="pl-c1">
            NSIndexPath
           </span>
           *)
           <span class="pl-smi">
            indexPath
           </span>
           {

    MNCChatMessage *chatMessage = self.
           <span class="pl-smi">
            messageArray
           </span>
           [indexPath.row];
           <span class="pl-k">
            if
           </span>
           ([[chatMessage
           <span class="pl-c1">
            senderId
           </span>
           ]
           <span class="pl-c1">
            isEqualToString:
           </span>
           <span class="pl-v">
            self
           </span>
           .myUserId]) {
           <span class="pl-c">
            // If the message was sent by myself
           </span>
           messageCell.
           <span class="pl-smi">
            chatMateMessageLabel
           </span>
           .
           <span class="pl-smi">
            text
           </span>
           =
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            <span class="pl-pds">
             "
            </span>
           </span>
           ;
        messageCell.
           <span class="pl-smi">
            myMessageLabel
           </span>
           .
           <span class="pl-smi">
            text
           </span>
           = chatMessage.
           <span class="pl-smi">
            text
           </span>
           ;
    }
           <span class="pl-k">
            else
           </span>
           {
           <span class="pl-c">
            // If the message was sent by the chat mate
           </span>
           messageCell.
           <span class="pl-smi">
            myMessageLabel
           </span>
           .
           <span class="pl-smi">
            text
           </span>
           =
           <span class="pl-s">
            <span class="pl-pds">
             @"
            </span>
            <span class="pl-pds">
             "
            </span>
           </span>
           ;
        messageCell.
           <span class="pl-smi">
            chatMateMessageLabel
           </span>
           .
           <span class="pl-smi">
            text
           </span>
           = chatMessage.
           <span class="pl-smi">
            text
           </span>
           ;
    }
}
          </pre>
         </div>
         <h2 id="sending your first message">
          <a aria-hidden="true" class="anchor" href="#sending-your-first-message" id="user-content-sending-your-first-message">
           <span class="octicon octicon-link">
           </span>
          </a>
          Sending your first message
         </h2>
         <p>
          Open up Main.storyboard and add an Action for the SendButton of the DialogViewController view:
         </p>
         <p>
          <code>
           - (IBAction)sendMessage:(id)sender;
          </code>
         </p>
         <p>
          In DialogViewController.m, add
          <code>
           #import "AppDelegate.h"
          </code>
          . Then, add implementation for the
          <strong>
           sendMessage
          </strong>
          action:
         </p>
         <div class="highlight highlight-objectivec">
          <pre class="prettyprint linenums">
           -(
           <span class="pl-k">
            void
           </span>
           )sendMessage:(
           <span class="pl-k">
            id
           </span>
           )sender
{
      AppDelegate *appDelegate = (AppDelegate *)[[UIApplication
           <span class="pl-c1">
            sharedApplication
           </span>
           ]
           <span class="pl-c1">
            delegate
           </span>
           ];
    [appDelegate
           <span class="pl-c1">
            sendTextMessage:
           </span>
           <span class="pl-v">
            self
           </span>
           .messageEditField.text
           <span class="pl-c1">
            toRecipient:
           </span>
           <span class="pl-v">
            self
           </span>
           .chatMateId];
}
          </pre>
         </div>
         <p>
          That's it. Now you should be able to send messages.
         </p>
         <p>
          Now, when MNCDialogViewContoller loads its view, it should retrieve and display all the historical messages stored at the Parse server. Next we will implement NSNotfications for all the message events we raise in
          <strong>
           AppDelegate
          </strong>
         </p>
         <p>
          In viewWillApear add the following:
         </p>
         <div class="highlight highlight-objectivec">
          <pre class="prettyprint linenums">
           -(
           <span class="pl-k">
            void
           </span>
           )viewWillAppear:(
           <span class="pl-k">
            BOOL
           </span>
           )animated
{
    [[
           <span class="pl-c1">
            NSNotificationCenter
           </span>
           <span class="pl-c1">
            defaultCenter
           </span>
           ]
           <span class="pl-c1">
            addObserver:
           </span>
           <span class="pl-v">
            self
           </span>
           <span class="pl-c1">
            selector:
           </span>
           <span class="pl-k">
            @selector
           </span>
           (
           <span class="pl-c1">
            messageDelivered:
           </span>
           )
           <span class="pl-c1">
            name:
           </span>
           SINCH_MESSAGE_RECIEVED
           <span class="pl-c1">
            object:
           </span>
           <span class="pl-c1">
            nil
           </span>
           ];
    [[
           <span class="pl-c1">
            NSNotificationCenter
           </span>
           <span class="pl-c1">
            defaultCenter
           </span>
           ]
           <span class="pl-c1">
            addObserver:
           </span>
           <span class="pl-v">
            self
           </span>
           <span class="pl-c1">
            selector:
           </span>
           <span class="pl-k">
            @selector
           </span>
           (
           <span class="pl-c1">
            messageDelivered:
           </span>
           )
           <span class="pl-c1">
            name:
           </span>
           SINCH_MESSAGE_SENT
           <span class="pl-c1">
            object:
           </span>
           <span class="pl-c1">
            nil
           </span>
           ];
}
          </pre>
         </div>
         <p>
          The reason for putting it in viewVillApear is as soon as the view goes out of view, we don't want to receive notifications about this. Instead we would probably add a listener to the ChatmateController to indicate new messages.
         </p>
         <p>
          Make sure to deregister for the notifications when the view will disappear:
         </p>
         <div class="highlight highlight-objectivec">
          <pre class="prettyprint linenums">
           -(
           <span class="pl-k">
            void
           </span>
           )viewWillDisappear:(
           <span class="pl-k">
            BOOL
           </span>
           )animated
{
    [[
           <span class="pl-c1">
            NSNotificationCenter
           </span>
           <span class="pl-c1">
            defaultCenter
           </span>
           ]
           <span class="pl-c1">
            removeObserver:
           </span>
           <span class="pl-v">
            self
           </span>
           ];
}
          </pre>
         </div>
         <p>
          Add messageDelivered: Method:
         </p>
         <pre class="prettyprint linenums">
          <code>
           - (void)messageDelivered:(NSNotification *)notification
{
    MNCChatMessage *chatMessage = [[notification userInfo] objectForKey:@"message"];
    [self.messageArray addObject:chatMessage];
    [self.historicalMessagesTableView reloadData];
    [self scrollTableToBottom];
}
          </code>
         </pre>
         <h2 id="making the textfield bigger">
          <a aria-hidden="true" class="anchor" href="#making-the-textfield-bigger" id="user-content-making-the-textfield-bigger">
           <span class="octicon octicon-link">
           </span>
          </a>
          Making the textfield bigger
         </h2>
         <p>
          If you test the app now, you will notice if you send or receive very long messages, the height of the message cell would still be single line. Add the following line of code in
          <strong>
           viewDidLoad
          </strong>
          to allow for auto-height-adjustment, a feature introduced in iOS 8.
         </p>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           - (
           <span class="pl-k">
            void
           </span>
           )viewDidLoad {
    [
           <span class="pl-v">
            super
           </span>
           <span class="pl-c1">
            viewDidLoad
           </span>
           ];

    self.
           <span class="pl-smi">
            navigationItem
           </span>
           .
           <span class="pl-smi">
            title
           </span>
           = self.
           <span class="pl-smi">
            chatMateId
           </span>
           ;
    self.
           <span class="pl-smi">
            messageArray
           </span>
           = [[
           <span class="pl-c1">
            NSMutableArray
           </span>
           <span class="pl-c1">
            alloc
           </span>
           ]
           <span class="pl-c1">
            init
           </span>
           ];
           <span class="pl-c">
            // Automatically determine the height of each self-sizing tabel view cells - an iOS 8 feature
           </span>
           self.
           <span class="pl-smi">
            historicalMessagesTableView
           </span>
           .
           <span class="pl-smi">
            rowHeight
           </span>
           = UITableViewAutomaticDimension;
           <span class="pl-c">
            /* add this line */
           </span>
           [
           <span class="pl-v">
            self
           </span>
           <span class="pl-c1">
            retrieveMessagesFromParseWithChatMateID:
           </span>
           <span class="pl-v">
            self
           </span>
           .chatMateId];
}
          </pre>
         </div>
         <h2 id="addressing the virtual keyboard issue">
          <a aria-hidden="true" class="anchor" href="#addressing-the-virtual-keyboard-issue" id="user-content-addressing-the-virtual-keyboard-issue">
           <span class="octicon octicon-link">
           </span>
          </a>
          Addressing The Virtual Keyboard Issue
         </h2>
         <p>
          At this point the functionality of MiniChat as a tutorial app is pretty much done. There is a user experience problem - when the user is editing the text and the virtual keyboard pops up, the messageEditField (message edit text field), the send button, or the bottom part of the historicalMessagesTableView may potentially be blocked by the keyboard. To solve this problem we need to do two things:
         </p>
         <ol class="task-list">
          <li>
           Dismiss the keyboard when the user taps outside of the messageEditField. This is simple using a gesture recognizer.
          </li>
          <li>
           When the keyboard is showing, scroll the whole view up above the keyboard. That is why all the MNCDialogViewController UI elements are placed inside a UIScrollView object, which is connected an IBOutlet property called
           <strong>
            scrollView
           </strong>
           , if you look at the storyboard. And
           <a href="https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/KeyboardManagement/KeyboardManagement.html#//apple_ref/doc/uid/TP40009542-CH5-SW1#Moving%20Content%20That%20Is%20Located%20Under%20the%20Keyboard">
            Apple has provided the discussion and code for implementing this behavior
           </a>
           . Just copy-and-paste the following code into
           <strong>
            MNCDialogViewController.h
           </strong>
           and
           <strong>
            MNCDialogViewController.m
           </strong>
           . Specifically, MNCDialogViewController needs to adopt the &lt;UITextFieldDelegate&gt; protocol:
          </li>
         </ol>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-c">
            //  MNCDialogViewController.h
           </span>
           <span class="pl-k">
            @interface
           </span>
           <span class="pl-en">
            MNCDialogViewController
           </span>
           :
           <span class="pl-e">
            UIViewController
           </span>
           &lt;UITableViewDataSource, UITextFieldDelegate&gt;
          </pre>
         </div>
         <div class="highlight highlight-objective-c">
          <pre class="prettyprint linenums">
           <span class="pl-c">
            //  MNCDialogViewController.m
           </span>
           <span class="pl-k">
            @interface
           </span>
           <span class="pl-en">
            MNCDialogViewController
           </span>
           ()
           <span class="pl-c">
            /* add this property to keep track of the active text field */
           </span>
           <span class="pl-k">
            @property
           </span>
           (
           <span class="pl-k">
            strong
           </span>
           ,
           <span class="pl-k">
            nonatomic
           </span>
           ) UITextField *activeTextField;
           <span class="pl-k">
            @end
           </span>
          </pre>
         </div>
         <p>
          Make your viewDidLoad look like this:
         </p>
         <div class="highlight highlight-objectivec">
          <pre class="prettyprint linenums">
           <span class="pl-k">
            @implementation
           </span>
           <span class="pl-en">
            MNCDialogViewController
           </span>
           - (
           <span class="pl-k">
            void
           </span>
           )
           <span class="pl-en">
            viewDidLoad
           </span>
           {

    UITapGestureRecognizer *tapTableGR = [[UITapGestureRecognizer
           <span class="pl-c1">
            alloc
           </span>
           ]
           <span class="pl-c1">
            initWithTarget:
           </span>
           <span class="pl-v">
            self
           </span>
           <span class="pl-c1">
            action:
           </span>
           <span class="pl-k">
            @selector
           </span>
           (
           <span class="pl-c1">
            didTapOnTableView
           </span>
           )];
    [
           <span class="pl-v">
            self
           </span>
           .historicalMessagesTableView
           <span class="pl-c1">
            addGestureRecognizer:
           </span>
           tapTableGR];
    [
           <span class="pl-v">
            self
           </span>
           <span class="pl-c1">
            registerForKeyboardNotifications
           </span>
           ];
}
          </pre>
         </div>
         <p>
          As you see you are missing some methods, lets add those in to the
          <strong>
           MNCDialogViewController
          </strong>
         </p>
         <div class="highlight highlight-objectivec">
          <pre class="prettyprint linenums">
           <span class="pl-c">
            // Setting up keyboard notifications.
           </span>
           - (
           <span class="pl-k">
            void
           </span>
           )registerForKeyboardNotifications
{
    [[
           <span class="pl-c1">
            NSNotificationCenter
           </span>
           <span class="pl-c1">
            defaultCenter
           </span>
           ]
           <span class="pl-c1">
            addObserver:
           </span>
           <span class="pl-v">
            self
           </span>
           <span class="pl-c1">
            selector:
           </span>
           <span class="pl-k">
            @selector
           </span>
           (
           <span class="pl-c1">
            keyboardWasShown:
           </span>
           )
           <span class="pl-c1">
            name:
           </span>
           UIKeyboardWillShowNotification
           <span class="pl-c1">
            object:
           </span>
           <span class="pl-c1">
            nil
           </span>
           ];
    [[
           <span class="pl-c1">
            NSNotificationCenter
           </span>
           <span class="pl-c1">
            defaultCenter
           </span>
           ]
           <span class="pl-c1">
            addObserver:
           </span>
           <span class="pl-v">
            self
           </span>
           <span class="pl-c1">
            selector:
           </span>
           <span class="pl-k">
            @selector
           </span>
           (
           <span class="pl-c1">
            keyboardWillBeHidden:
           </span>
           )
           <span class="pl-c1">
            name:
           </span>
           UIKeyboardWillHideNotification
           <span class="pl-c1">
            object:
           </span>
           <span class="pl-c1">
            nil
           </span>
           ];
}
           <span class="pl-c">
            // Called when the UIKeyboardDidShowNotification is sent.
           </span>
           - (
           <span class="pl-k">
            void
           </span>
           )keyboardWasShown:(
           <span class="pl-c1">
            NSNotification
           </span>
           *)aNotification
{
           <span class="pl-c1">
            NSDictionary
           </span>
           * info = [aNotification
           <span class="pl-c1">
            userInfo
           </span>
           ];
           <span class="pl-c1">
            CGSize
           </span>
           kbSize = [[info
           <span class="pl-c1">
            objectForKey:
           </span>
           UIKeyboardFrameEndUserInfoKey]
           <span class="pl-c1">
            CGRectValue
           </span>
           ].
           <span class="pl-smi">
            size
           </span>
           ;
    UIEdgeInsets contentInsets =
           <span class="pl-c1">
            UIEdgeInsetsMake
           </span>
           (kbSize.
           <span class="pl-smi">
            height
           </span>
           ,
           <span class="pl-c1">
            0.0
           </span>
           , kbSize.
           <span class="pl-smi">
            height
           </span>
           ,
           <span class="pl-c1">
            0.0
           </span>
           );
    self.
           <span class="pl-smi">
            scrollView
           </span>
           .
           <span class="pl-smi">
            contentInset
           </span>
           = contentInsets;
    self.
           <span class="pl-smi">
            scrollView
           </span>
           .
           <span class="pl-smi">
            scrollIndicatorInsets
           </span>
           = contentInsets;
           <span class="pl-c">
            // If active text field is hidden by keyboard, scroll it so it's visible
           </span>
           <span class="pl-c">
            // Your app might not need or want this behavior.
           </span>
           <span class="pl-c1">
            CGRect
           </span>
           aRect = self.
           <span class="pl-smi">
            view
           </span>
           .
           <span class="pl-smi">
            frame
           </span>
           ;
    aRect.
           <span class="pl-smi">
            size
           </span>
           .
           <span class="pl-smi">
            height
           </span>
           -= kbSize.
           <span class="pl-smi">
            height
           </span>
           ;
           <span class="pl-k">
            if
           </span>
           (!
           <span class="pl-c1">
            CGRectContainsPoint
           </span>
           (aRect, self.
           <span class="pl-smi">
            activeTextField
           </span>
           .
           <span class="pl-smi">
            frame
           </span>
           .
           <span class="pl-smi">
            origin
           </span>
           ) ) {
        [
           <span class="pl-v">
            self
           </span>
           .scrollView
           <span class="pl-c1">
            scrollRectToVisible:
           </span>
           <span class="pl-v">
            self
           </span>
           .activeTextField.frame
           <span class="pl-c1">
            animated:
           </span>
           <span class="pl-c1">
            NO
           </span>
           ];
    }
}
           <span class="pl-c">
            // Called when the UIKeyboardWillHideNotification is sent
           </span>
           - (
           <span class="pl-k">
            void
           </span>
           )keyboardWillBeHidden:(
           <span class="pl-c1">
            NSNotification
           </span>
           *)aNotification
{
    UIEdgeInsets contentInsets = UIEdgeInsetsZero;
    self.
           <span class="pl-smi">
            scrollView
           </span>
           .
           <span class="pl-smi">
            contentInset
           </span>
           = contentInsets;
    self.
           <span class="pl-smi">
            scrollView
           </span>
           .
           <span class="pl-smi">
            scrollIndicatorInsets
           </span>
           = contentInsets;
}

#
           <span class="pl-k">
            pragma mark
           </span>
           UITextFieldDelegate methods

- (
           <span class="pl-k">
            void
           </span>
           )textFieldDidBeginEditing:(UITextField *)textField
{
    self.
           <span class="pl-smi">
            activeTextField
           </span>
           = textField;
}

- (
           <span class="pl-k">
            void
           </span>
           )textFieldDidEndEditing:(UITextField *)textField
{
    self.
           <span class="pl-smi">
            activeTextField
           </span>
           =
           <span class="pl-c1">
            nil
           </span>
           ;
}
          </pre>
         </div>
         <h2 id="finish">
          <a aria-hidden="true" class="anchor" href="#finish" id="user-content-finish">
           <span class="octicon octicon-link">
           </span>
          </a>
          Finish
         </h2>
         <p>
          Finally, you have reached the end of this tutorial. You've built an instant messaging app!
         </p>
         <p>
          You may test the app, trying to identify problems if any would exist. Of course, as a tutorial app, it is far from a practical instant messaging app in many aspects. You can modify or expand MiniChat to design your own instant messaging app with some cool new features.
         </p>
         <p>
          You may consider other interesting Sinch APIs such as
          <a href="https://www.sinch.com/docs/ios/user-guide/#calling">
           voice calling
          </a>
          in the future.
         </p>
         <p>
          Thanks to Gaunting Liu for his help writing this tutorial.
         </p>
        </div>
       </div>
       <hr/>
       <div id="sinch-news-share">
        <script src="https://ws.sharethis.com/button/buttons.js" type="text/javascript">
        </script>
        <script type="text/javascript">
         stLight.options({publisher: "ed40a44a-25a8-4aed-9f17-14ddfdc3dd7f", doNotHash: true, doNotCopy: true, hashAddressBar: false,  servicePopup:true});
        </script>
        <h4>
         Share
        </h4>
        <div>
         <span class="st_facebook_large" displaytext="Facebook">
         </span>
         <span class="st_twitter_large" displaytext="Tweet">
         </span>
         <span class="st_googleplus_large" displaytext="Google +">
         </span>
         <span class="st_linkedin_large" displaytext="LinkedIn">
         </span>
         <span class="st_reddit_large" displaytext="Reddit">
         </span>
        </div>
       </div>
       <hr/>
       <div id="sinch-news-comments">
        <h4>
         48 Comments
        </h4>
        <hr/>
        <div id="disqus_thread">
         <div id="dsq-content">
          <ul id="dsq-comments">
           <li class="comment even thread-even depth-1" id="dsq-comment-252">
            <div class="dsq-comment-header" id="dsq-comment-header-252">
             <cite id="dsq-cite-252">
              <span id="dsq-author-user-252">
               HeshamAmiri
              </span>
             </cite>
            </div>
            <div class="dsq-comment-body" id="dsq-comment-body-252">
             <div class="dsq-comment-message" id="dsq-comment-message-252">
              <p>
               Great Tutorial. From the exposed API, its doesnt seem that creating chat groups is something that can be done without using Parse to sore group members. Right?
              </p>
             </div>
            </div>
            <ul class="children">
             <li class="comment odd alt depth-2" id="dsq-comment-257">
              <div class="dsq-comment-header" id="dsq-comment-header-257">
               <cite id="dsq-cite-257">
                <span id="dsq-author-user-257">
                 Christian Jensen
                </span>
               </cite>
              </div>
              <div class="dsq-comment-body" id="dsq-comment-body-257">
               <div class="dsq-comment-message" id="dsq-comment-message-257">
                <p>
                 Hi,
                </p>
                <p>
                 Thats right, we focus on the realtime channel not user handling. Parse is a good choice to have a your backend I like them.
                </p>
               </div>
              </div>
             </li>
             <!-- #comment-## -->
            </ul>
            <!-- .children -->
           </li>
           <!-- #comment-## -->
           <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-254">
            <div class="dsq-comment-header" id="dsq-comment-header-254">
             <cite id="dsq-cite-254">
              <span id="dsq-author-user-254">
               ohdowload
              </span>
             </cite>
            </div>
            <div class="dsq-comment-body" id="dsq-comment-body-254">
             <div class="dsq-comment-message" id="dsq-comment-message-254">
              <p>
               Hey there, thanks for this awesome tutorial, but i had a problem which is I got this error when i want to send a message MessageBoard: message to elizabeth failed. Description: UserNotFound (15859763). Reason: (null). and my app is 100% working fine  and there is no errors or warning at all. Can someone please help me? thanks in advance.
              </p>
             </div>
            </div>
            <ul class="children">
             <li class="comment odd alt depth-2" id="dsq-comment-256">
              <div class="dsq-comment-header" id="dsq-comment-header-256">
               <cite id="dsq-cite-256">
                <span id="dsq-author-user-256">
                 Christian Jensen
                </span>
               </cite>
              </div>
              <div class="dsq-comment-body" id="dsq-comment-body-256">
               <div class="dsq-comment-message" id="dsq-comment-message-256">
                <p>
                 Hi,
                </p>
                <p>
                 It sounds like you have not created/launced an app where a user named Elizabeth is used to start the sinch SDK.
                </p>
                <p>
                 Christian
                </p>
               </div>
              </div>
             </li>
             <!-- #comment-## -->
            </ul>
            <!-- .children -->
           </li>
           <!-- #comment-## -->
           <li class="comment even thread-even depth-1" id="dsq-comment-582">
            <div class="dsq-comment-header" id="dsq-comment-header-582">
             <cite id="dsq-cite-582">
              <span id="dsq-author-user-582">
               Yazeed
              </span>
             </cite>
            </div>
            <div class="dsq-comment-body" id="dsq-comment-body-582">
             <div class="dsq-comment-message" id="dsq-comment-message-582">
              <p>
               Thank you for this greatly explained project, appreciate the information. I ran into a problem if you can help, but the program would not run, even the completed one, when i try to run the pod in the terminal using pod install, it states [!] Unable to find a target named `Parse-Sinch` .. I hate to have asked this question since this is a well explained project, but i had to. Thank you
              </p>
             </div>
            </div>
            <ul class="children">
             <li class="comment odd alt depth-2" id="dsq-comment-586">
              <div class="dsq-comment-header" id="dsq-comment-header-586">
               <cite id="dsq-cite-586">
                <span id="dsq-author-user-586">
                 Christian Jensen
                </span>
               </cite>
              </div>
              <div class="dsq-comment-body" id="dsq-comment-body-586">
               <div class="dsq-comment-message" id="dsq-comment-message-586">
                <p>
                 I suspect that you have renamed your xcode project file, you can remove the target in the podfile or update it to the correct one.
                </p>
               </div>
              </div>
              <ul class="children">
               <li class="comment even depth-3" id="dsq-comment-602">
                <div class="dsq-comment-header" id="dsq-comment-header-602">
                 <cite id="dsq-cite-602">
                  <span id="dsq-author-user-602">
                   charoen chaweechan
                  </span>
                 </cite>
                </div>
                <div class="dsq-comment-body" id="dsq-comment-body-602">
                 <div class="dsq-comment-message" id="dsq-comment-message-602">
                  <p>
                   i got same problem Unable to find a target named `Parse-Sinch` how to solve this problem
                  </p>
                 </div>
                </div>
                <ul class="children">
                 <li class="comment odd alt depth-4" id="dsq-comment-603">
                  <div class="dsq-comment-header" id="dsq-comment-header-603">
                   <cite id="dsq-cite-603">
                    <span id="dsq-author-user-603">
                     Christian Jensen
                    </span>
                   </cite>
                  </div>
                  <div class="dsq-comment-body" id="dsq-comment-body-603">
                   <div class="dsq-comment-message" id="dsq-comment-message-603">
                    <p>
                     And you have not renamed the project?
                    </p>
                   </div>
                  </div>
                  <ul class="children">
                   <li class="comment even depth-5" id="dsq-comment-604">
                    <div class="dsq-comment-header" id="dsq-comment-header-604">
                     <cite id="dsq-cite-604">
                      <span id="dsq-author-user-604">
                       charoen chaweechan
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-604">
                     <div class="dsq-comment-message" id="dsq-comment-message-604">
                      <p>
                       yes, i dont chance anything
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment odd alt depth-5" id="dsq-comment-605">
                    <div class="dsq-comment-header" id="dsq-comment-header-605">
                     <cite id="dsq-cite-605">
                      <span id="dsq-author-user-605">
                       Christian Jensen
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-605">
                     <div class="dsq-comment-message" id="dsq-comment-message-605">
                      <p>
                       try and Remove the targett in your podfile
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment even depth-5" id="dsq-comment-606">
                    <div class="dsq-comment-header" id="dsq-comment-header-606">
                     <cite id="dsq-cite-606">
                      <span id="dsq-author-user-606">
                       charoen chaweechan
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-606">
                     <div class="dsq-comment-message" id="dsq-comment-message-606">
                      <p>
                       Thank you that it work
                       <img alt=":)" class="wp-smiley" src="https://www.sinch.com/wp-includes/images/smilies/icon_smile.gif"/>
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment odd alt depth-5" id="dsq-comment-705">
                    <div class="dsq-comment-header" id="dsq-comment-header-705">
                     <cite id="dsq-cite-705">
                      <span id="dsq-author-user-705">
                       Christian Jensen
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-705">
                     <div class="dsq-comment-message" id="dsq-comment-message-705">
                      <p>
                       Remove the target
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                  </ul>
                  <!-- .children -->
                 </li>
                 <!-- #comment-## -->
                 <li class="comment even depth-4" id="dsq-comment-704">
                  <div class="dsq-comment-header" id="dsq-comment-header-704">
                   <cite id="dsq-cite-704">
                    <span id="dsq-author-user-704">
                     Christian Jensen
                    </span>
                   </cite>
                  </div>
                  <div class="dsq-comment-body" id="dsq-comment-body-704">
                   <div class="dsq-comment-message" id="dsq-comment-message-704">
                    <p>
                     then you have renamed the project, remove the target in the pod file
                    </p>
                   </div>
                  </div>
                 </li>
                 <!-- #comment-## -->
                </ul>
                <!-- .children -->
               </li>
               <!-- #comment-## -->
              </ul>
              <!-- .children -->
             </li>
             <!-- #comment-## -->
            </ul>
            <!-- .children -->
           </li>
           <!-- #comment-## -->
           <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-592">
            <div class="dsq-comment-header" id="dsq-comment-header-592">
             <cite id="dsq-cite-592">
              <span id="dsq-author-user-592">
               charoen chaweechan
              </span>
             </cite>
            </div>
            <div class="dsq-comment-body" id="dsq-comment-body-592">
             <div class="dsq-comment-message" id="dsq-comment-message-592">
              <p>
               what project i should be focus to study between ios-messaging-tutorial and BoilerPlate
              </p>
             </div>
            </div>
            <ul class="children">
             <li class="comment even depth-2" id="dsq-comment-597">
              <div class="dsq-comment-header" id="dsq-comment-header-597">
               <cite id="dsq-cite-597">
                <span id="dsq-author-user-597">
                 Christian Jensen
                </span>
               </cite>
              </div>
              <div class="dsq-comment-body" id="dsq-comment-body-597">
               <div class="dsq-comment-message" id="dsq-comment-message-597">
                <p>
                 Hi
                </p>
                <p>
                 I like both, if you dont want to be distracted by Parse and stuff I would go with the documentation and boilerplate to focus on Sinch functionality.
                </p>
                <p>
                 If you would like to build something that is closer to a finished product and try with us, do this tutorial.
                </p>
                <p>
                 Do you already have an app and you want to add messaging to I would focus only on the boilerplate and documentation.
                </p>
               </div>
              </div>
             </li>
             <!-- #comment-## -->
            </ul>
            <!-- .children -->
           </li>
           <!-- #comment-## -->
           <li class="comment odd alt thread-even depth-1" id="dsq-comment-607">
            <div class="dsq-comment-header" id="dsq-comment-header-607">
             <cite id="dsq-cite-607">
              <span id="dsq-author-user-607">
               charoen chaweechan
              </span>
             </cite>
            </div>
            <div class="dsq-comment-body" id="dsq-comment-body-607">
             <div class="dsq-comment-message" id="dsq-comment-message-607">
              <p>
               i got new error 
              </p>
              <p>
               The sandbox is not in sync with the Podfile.lock. Run pod install or update your CocoaPods installation. how to fix it
              </p>
             </div>
            </div>
            <ul class="children">
             <li class="comment even depth-2" id="dsq-comment-609">
              <div class="dsq-comment-header" id="dsq-comment-header-609">
               <cite id="dsq-cite-609">
                <span id="dsq-author-user-609">
                 Christian Jensen
                </span>
               </cite>
              </div>
              <div class="dsq-comment-body" id="dsq-comment-body-609">
               <div class="dsq-comment-message" id="dsq-comment-message-609">
                <p>
                 Hi
                </p>
                <p>
                 Check out this article
                 <a href="http://stackoverflow.com/questions/17072396/cocoapods-errors-on-project-build" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'http://stackoverflow.com/questions/17072396/cocoapods-errors-on-project-build', 'http://stackoverflow.com/questions/17072396/cocoapods-errors-on-project-build']);" rel="nofollow">
                  http://stackoverflow.com/questions/17072396/cocoapods-errors-on-project-build
                 </a>
                </p>
               </div>
              </div>
             </li>
             <!-- #comment-## -->
            </ul>
            <!-- .children -->
           </li>
           <!-- #comment-## -->
           <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-689">
            <div class="dsq-comment-header" id="dsq-comment-header-689">
             <cite id="dsq-cite-689">
              <span id="dsq-author-user-689">
               dedo
              </span>
             </cite>
            </div>
            <div class="dsq-comment-body" id="dsq-comment-body-689">
             <div class="dsq-comment-message" id="dsq-comment-message-689">
              <p>
               Hi
               <br/>
               it keeps telling me the following error
               <br/>
               ld: library not found for -lPods-Parse-Sinch-SinchRT
              </p>
              <p>
               how can i solve it ?
              </p>
             </div>
            </div>
            <ul class="children">
             <li class="comment even depth-2" id="dsq-comment-690">
              <div class="dsq-comment-header" id="dsq-comment-header-690">
               <cite id="dsq-cite-690">
                <span id="dsq-author-user-690">
                 dedo
                </span>
               </cite>
              </div>
              <div class="dsq-comment-body" id="dsq-comment-body-690">
               <div class="dsq-comment-message" id="dsq-comment-message-690">
                <p>
                 @disqus_es0p598ORT:disqus any ideal ?
                </p>
               </div>
              </div>
              <ul class="children">
               <li class="comment odd alt depth-3" id="dsq-comment-691">
                <div class="dsq-comment-header" id="dsq-comment-header-691">
                 <cite id="dsq-cite-691">
                  <span id="dsq-author-user-691">
                   dedo
                  </span>
                 </cite>
                </div>
                <div class="dsq-comment-body" id="dsq-comment-body-691">
                 <div class="dsq-comment-message" id="dsq-comment-message-691">
                  <p>
                   @disqus_es0p598ORT:disqus
                   <br/>
                   any idea ?
                  </p>
                 </div>
                </div>
               </li>
               <!-- #comment-## -->
              </ul>
              <!-- .children -->
             </li>
             <!-- #comment-## -->
             <li class="comment even depth-2" id="dsq-comment-692">
              <div class="dsq-comment-header" id="dsq-comment-header-692">
               <cite id="dsq-cite-692">
                <span id="dsq-author-user-692">
                 Christian Jensen
                </span>
               </cite>
              </div>
              <div class="dsq-comment-body" id="dsq-comment-body-692">
               <div class="dsq-comment-message" id="dsq-comment-message-692">
                <p>
                 Hi, are you opening the workspace when you are using pods? You cant use the project. One more thing make sure you clear the other linker flags setting in your target so you inherit the settings.
                </p>
               </div>
              </div>
              <ul class="children">
               <li class="comment odd alt depth-3" id="dsq-comment-693">
                <div class="dsq-comment-header" id="dsq-comment-header-693">
                 <cite id="dsq-cite-693">
                  <span id="dsq-author-user-693">
                   dedo
                  </span>
                 </cite>
                </div>
                <div class="dsq-comment-body" id="dsq-comment-body-693">
                 <div class="dsq-comment-message" id="dsq-comment-message-693">
                  <p>
                   Hi
                   <br/>
                   yes sure im opening workspace not the xcode project and this problem appears in workspace
                  </p>
                 </div>
                </div>
                <ul class="children">
                 <li class="comment even depth-4" id="dsq-comment-694">
                  <div class="dsq-comment-header" id="dsq-comment-header-694">
                   <cite id="dsq-cite-694">
                    <span id="dsq-author-user-694">
                     Christian Jensen
                    </span>
                   </cite>
                  </div>
                  <div class="dsq-comment-body" id="dsq-comment-body-694">
                   <div class="dsq-comment-message" id="dsq-comment-message-694">
                    <p>
                     And you are not overriding any configs? Does the pod install give you any errors/warnings?
                    </p>
                   </div>
                  </div>
                  <ul class="children">
                   <li class="comment odd alt depth-5" id="dsq-comment-706">
                    <div class="dsq-comment-header" id="dsq-comment-header-706">
                     <cite id="dsq-cite-706">
                      <span id="dsq-author-user-706">
                       dedo
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-706">
                     <div class="dsq-comment-message" id="dsq-comment-message-706">
                      <p>
                       no no .. all settings and paths like Other Flag attribute are overridden and pods installed successfully  but after trying to build this error appears .. i do not know why ..
                       <br/>
                       i really surprised because pods installed and config and settings are overridden ..
                       <br/>
                       any idea ?
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment even depth-5" id="dsq-comment-707">
                    <div class="dsq-comment-header" id="dsq-comment-header-707">
                     <cite id="dsq-cite-707">
                      <span id="dsq-author-user-707">
                       Christian Jensen
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-707">
                     <div class="dsq-comment-message" id="dsq-comment-message-707">
                      <p>
                       Can you make available on GitHub and invite me spacedSweden
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment odd alt depth-5" id="dsq-comment-708">
                    <div class="dsq-comment-header" id="dsq-comment-header-708">
                     <cite id="dsq-cite-708">
                      <span id="dsq-author-user-708">
                       dedo
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-708">
                     <div class="dsq-comment-message" id="dsq-comment-message-708">
                      <p>
                       sure i will do that and invite you .. thanks for your amazing support
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment even depth-5" id="dsq-comment-776">
                    <div class="dsq-comment-header" id="dsq-comment-header-776">
                     <cite id="dsq-cite-776">
                      <span id="dsq-author-user-776">
                       Christian Jensen
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-776">
                     <div class="dsq-comment-message" id="dsq-comment-message-776">
                      <p>
                       i never got a invite to your repo dedo
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment odd alt depth-5" id="dsq-comment-797">
                    <div class="dsq-comment-header" id="dsq-comment-header-797">
                     <cite id="dsq-cite-797">
                      https://www.sinch.com/
                      <span id="dsq-author-user-797">
                       Sinch
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-797">
                     <div class="dsq-comment-message" id="dsq-comment-message-797">
                      <p>
                       How likely are you to recommend Sinch to a friend?
                      </p>
                      <p>
                       0  
                       <a href="https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/0/3LKjEk8O" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/0/3LKjEk8O', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/0/3LKjEk8O']);" rel="nofollow">
                        https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/0/3LKjEk8O
                       </a>
                       Not likely 1  
                       <a href="https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/1/1mIv8lX1" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/1/1mIv8lX1', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/1/1mIv8lX1']);" rel="nofollow">
                        https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/1/1mIv8lX1
                       </a>
                       2  
                       <a href="https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/2/0hQfj69F" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/2/0hQfj69F', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/2/0hQfj69F']);" rel="nofollow">
                        https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/2/0hQfj69F
                       </a>
                       3  
                       <a href="https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/3/0NIm4SRF" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/3/0NIm4SRF', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/3/0NIm4SRF']);" rel="nofollow">
                        https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/3/0NIm4SRF
                       </a>
                       4  
                       <a href="https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/4/4GPaQcqs" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/4/4GPaQcqs', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/4/4GPaQcqs']);" rel="nofollow">
                        https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/4/4GPaQcqs
                       </a>
                       5  
                       <a href="https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/5/3oWgLDs8" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/5/3oWgLDs8', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/5/3oWgLDs8']);" rel="nofollow">
                        https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/5/3oWgLDs8
                       </a>
                       6  
                       <a href="https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/6/48e73z61" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/6/48e73z61', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/6/48e73z61']);" rel="nofollow">
                        https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/6/48e73z61
                       </a>
                       7  
                       <a href="https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/7/1WdbF0Ky" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/7/1WdbF0Ky', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/7/1WdbF0Ky']);" rel="nofollow">
                        https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/7/1WdbF0Ky
                       </a>
                       8  
                       <a href="https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/8/35lzhDTn" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/8/35lzhDTn', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/8/35lzhDTn']);" rel="nofollow">
                        https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/8/35lzhDTn
                       </a>
                       9  
                       <a href="https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/9/2RM5p7hJ" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/9/2RM5p7hJ', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/9/2RM5p7hJ']);" rel="nofollow">
                        https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/9/2RM5p7hJ
                       </a>
                       10 
                       <a href="https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/10/0J6q39oE" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/10/0J6q39oE', 'https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/10/0J6q39oE']);" rel="nofollow">
                        https://delighted.com/e/en/c/z5HwfcByErCIhPEc3dNHSiXu/10/0J6q39oE
                       </a>
                       Very likely
                       <br/>
                       
                      </p>
                      <p>
                       Powered by Delighted
                       <a href="https://delighted.com/?t=z5HwfcByErCIhPEc3dNHSiXu.1" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/?t=z5HwfcByErCIhPEc3dNHSiXu.1', 'https://delighted.com/?t=z5HwfcByErCIhPEc3dNHSiXu.1']);" rel="nofollow">
                        https://delighted.com/?t=z5HwfcByErCIhPEc3dNHSiXu.1
                       </a>
                      </p>
                      <p>
                       Unsubscribe
                       <a href="https://delighted.com/e/en/u/z5HwfcByErCIhPEc3dNHSiXu/2DOvxEA5" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/u/z5HwfcByErCIhPEc3dNHSiXu/2DOvxEA5', 'https://delighted.com/e/en/u/z5HwfcByErCIhPEc3dNHSiXu/2DOvxEA5']);" rel="nofollow">
                        https://delighted.com/e/en/u/z5HwfcByErCIhPEc3dNHSiXu/2DOvxEA5
                       </a>
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment even depth-5" id="dsq-comment-762">
                    <div class="dsq-comment-header" id="dsq-comment-header-762">
                     <cite id="dsq-cite-762">
                      <span id="dsq-author-user-762">
                       mwen82@gmail.com
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-762">
                     <div class="dsq-comment-message" id="dsq-comment-message-762">
                      <p>
                       I have the same problem. Very frustrating. Been working with this tutorial all day and still has the
                      </p>
                      <p>
                       ld: library not found for -lPods-Parse-Sinch-SinchRT
                      </p>
                      <p>
                       Any suggestions? Really appreciate any support.
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment odd alt depth-5" id="dsq-comment-766">
                    <div class="dsq-comment-header" id="dsq-comment-header-766">
                     <cite id="dsq-cite-766">
                      <span id="dsq-author-user-766">
                       Christian Jensen
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-766">
                     <div class="dsq-comment-message" id="dsq-comment-message-766">
                      <p>
                       Have you renamed the project? its usualy a pod config error when you get this error. Do you have a github so i can take a look? SpacedSweden is my github name
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment even depth-5" id="dsq-comment-768">
                    <div class="dsq-comment-header" id="dsq-comment-header-768">
                     <cite id="dsq-cite-768">
                      <span id="dsq-author-user-768">
                       mwen82@gmail.com
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-768">
                     <div class="dsq-comment-message" id="dsq-comment-message-768">
                      <p>
                       Thanks! followed you on github
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment odd alt depth-5" id="dsq-comment-769">
                    <div class="dsq-comment-header" id="dsq-comment-header-769">
                     <cite id="dsq-cite-769">
                      <span id="dsq-author-user-769">
                       Christian Jensen
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-769">
                     <div class="dsq-comment-message" id="dsq-comment-message-769">
                      <p>
                       can you invite me to your repo
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment even depth-5" id="dsq-comment-774">
                    <div class="dsq-comment-header" id="dsq-comment-header-774">
                     <cite id="dsq-cite-774">
                      <span id="dsq-author-user-774">
                       mwen82@gmail.com
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-774">
                     <div class="dsq-comment-message" id="dsq-comment-message-774">
                      <p>
                       I invited you, please check. Do appreciate any help you can give.
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment odd alt depth-5" id="dsq-comment-777">
                    <div class="dsq-comment-header" id="dsq-comment-header-777">
                     <cite id="dsq-cite-777">
                      <span id="dsq-author-user-777">
                       Christian Jensen
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-777">
                     <div class="dsq-comment-message" id="dsq-comment-message-777">
                      <p>
                       Wich workspace are you using? there is 2 workspaces in there
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment even depth-5" id="dsq-comment-784">
                    <div class="dsq-comment-header" id="dsq-comment-header-784">
                     <cite id="dsq-cite-784">
                      <span id="dsq-author-user-784">
                       mwen82@gmail.com
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-784">
                     <div class="dsq-comment-message" id="dsq-comment-message-784">
                      <p>
                       ios-sinch-messaging-tutorial.xcworkspace. Okay, I will fix and get back to you.
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment odd alt depth-5" id="dsq-comment-789">
                    <div class="dsq-comment-header" id="dsq-comment-header-789">
                     <cite id="dsq-cite-789">
                      <span id="dsq-author-user-789">
                       Christian Jensen
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-789">
                     <div class="dsq-comment-message" id="dsq-comment-message-789">
                      <p>
                       The main issue is that you have mixed up both adding manually and with cocoa pods, if I where you I would just use cocoa pods for everything in a clean project.
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment even depth-5" id="dsq-comment-799">
                    <div class="dsq-comment-header" id="dsq-comment-header-799">
                     <cite id="dsq-cite-799">
                      https://www.sinch.com/
                      <span id="dsq-author-user-799">
                       Sinch
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-799">
                     <div class="dsq-comment-message" id="dsq-comment-message-799">
                      <p>
                       How likely are you to recommend Sinch to a friend?
                      </p>
                      <p>
                       0  
                       <a href="https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/0/3Ysh7FAA" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/0/3Ysh7FAA', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/0/3Ysh7FAA']);" rel="nofollow">
                        https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/0/3Ysh7FAA
                       </a>
                       Not likely 1  
                       <a href="https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/1/1UsdeDdS" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/1/1UsdeDdS', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/1/1UsdeDdS']);" rel="nofollow">
                        https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/1/1UsdeDdS
                       </a>
                       2  
                       <a href="https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/2/27a23Tzt" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/2/27a23Tzt', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/2/27a23Tzt']);" rel="nofollow">
                        https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/2/27a23Tzt
                       </a>
                       3  
                       <a href="https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/3/2CZqyIre" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/3/2CZqyIre', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/3/2CZqyIre']);" rel="nofollow">
                        https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/3/2CZqyIre
                       </a>
                       4  
                       <a href="https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/4/4LSS70Gr" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/4/4LSS70Gr', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/4/4LSS70Gr']);" rel="nofollow">
                        https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/4/4LSS70Gr
                       </a>
                       5  
                       <a href="https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/5/0iAMQGxE" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/5/0iAMQGxE', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/5/0iAMQGxE']);" rel="nofollow">
                        https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/5/0iAMQGxE
                       </a>
                       6  
                       <a href="https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/6/24Zhwf8Y" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/6/24Zhwf8Y', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/6/24Zhwf8Y']);" rel="nofollow">
                        https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/6/24Zhwf8Y
                       </a>
                       7  
                       <a href="https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/7/4mlT8ykk" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/7/4mlT8ykk', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/7/4mlT8ykk']);" rel="nofollow">
                        https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/7/4mlT8ykk
                       </a>
                       8  
                       <a href="https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/8/2Zdsq8SO" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/8/2Zdsq8SO', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/8/2Zdsq8SO']);" rel="nofollow">
                        https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/8/2Zdsq8SO
                       </a>
                       9  
                       <a href="https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/9/3cMv1Za4" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/9/3cMv1Za4', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/9/3cMv1Za4']);" rel="nofollow">
                        https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/9/3cMv1Za4
                       </a>
                       10 
                       <a href="https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/10/1LFupaPC" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/10/1LFupaPC', 'https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/10/1LFupaPC']);" rel="nofollow">
                        https://delighted.com/e/en/c/uHVPZLSc1RUoG6gQvCD0UO1I/10/1LFupaPC
                       </a>
                       Very likely
                       <br/>
                       
                      </p>
                      <p>
                       Powered by Delighted
                       <a href="https://delighted.com/?t=uHVPZLSc1RUoG6gQvCD0UO1I.1" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/?t=uHVPZLSc1RUoG6gQvCD0UO1I.1', 'https://delighted.com/?t=uHVPZLSc1RUoG6gQvCD0UO1I.1']);" rel="nofollow">
                        https://delighted.com/?t=uHVPZLSc1RUoG6gQvCD0UO1I.1
                       </a>
                      </p>
                      <p>
                       Unsubscribe
                       <a href="https://delighted.com/e/en/u/uHVPZLSc1RUoG6gQvCD0UO1I/1ZJNzklz" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/u/uHVPZLSc1RUoG6gQvCD0UO1I/1ZJNzklz', 'https://delighted.com/e/en/u/uHVPZLSc1RUoG6gQvCD0UO1I/1ZJNzklz']);" rel="nofollow">
                        https://delighted.com/e/en/u/uHVPZLSc1RUoG6gQvCD0UO1I/1ZJNzklz
                       </a>
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment odd alt depth-5" id="dsq-comment-798">
                    <div class="dsq-comment-header" id="dsq-comment-header-798">
                     <cite id="dsq-cite-798">
                      https://www.sinch.com/
                      <span id="dsq-author-user-798">
                       Sinch
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-798">
                     <div class="dsq-comment-message" id="dsq-comment-message-798">
                      <p>
                       How likely are you to recommend Sinch to a friend?
                      </p>
                      <p>
                       0  
                       <a href="https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/0/03f8j50C" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/0/03f8j50C', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/0/03f8j50C']);" rel="nofollow">
                        https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/0/03f8j50C
                       </a>
                       Not likely 1  
                       <a href="https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/1/1xjMMLAw" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/1/1xjMMLAw', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/1/1xjMMLAw']);" rel="nofollow">
                        https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/1/1xjMMLAw
                       </a>
                       2  
                       <a href="https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/2/0ySxgUfk" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/2/0ySxgUfk', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/2/0ySxgUfk']);" rel="nofollow">
                        https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/2/0ySxgUfk
                       </a>
                       3  
                       <a href="https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/3/3fv2NIvY" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/3/3fv2NIvY', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/3/3fv2NIvY']);" rel="nofollow">
                        https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/3/3fv2NIvY
                       </a>
                       4  
                       <a href="https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/4/49EgTv0n" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/4/49EgTv0n', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/4/49EgTv0n']);" rel="nofollow">
                        https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/4/49EgTv0n
                       </a>
                       5  
                       <a href="https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/5/10GGMj3J" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/5/10GGMj3J', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/5/10GGMj3J']);" rel="nofollow">
                        https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/5/10GGMj3J
                       </a>
                       6  
                       <a href="https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/6/1DEqi2CI" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/6/1DEqi2CI', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/6/1DEqi2CI']);" rel="nofollow">
                        https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/6/1DEqi2CI
                       </a>
                       7  
                       <a href="https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/7/3CGOy0dv" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/7/3CGOy0dv', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/7/3CGOy0dv']);" rel="nofollow">
                        https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/7/3CGOy0dv
                       </a>
                       8  
                       <a href="https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/8/3EHoEJHk" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/8/3EHoEJHk', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/8/3EHoEJHk']);" rel="nofollow">
                        https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/8/3EHoEJHk
                       </a>
                       9  
                       <a href="https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/9/2ndf2kG5" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/9/2ndf2kG5', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/9/2ndf2kG5']);" rel="nofollow">
                        https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/9/2ndf2kG5
                       </a>
                       10 
                       <a href="https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/10/0aVL09HT" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/10/0aVL09HT', 'https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/10/0aVL09HT']);" rel="nofollow">
                        https://delighted.com/e/en/c/6S5AD6pVMsXNQlIHtMIbQXJL/10/0aVL09HT
                       </a>
                       Very likely
                       <br/>
                       
                      </p>
                      <p>
                       Powered by Delighted
                       <a href="https://delighted.com/?t=6S5AD6pVMsXNQlIHtMIbQXJL.1" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/?t=6S5AD6pVMsXNQlIHtMIbQXJL.1', 'https://delighted.com/?t=6S5AD6pVMsXNQlIHtMIbQXJL.1']);" rel="nofollow">
                        https://delighted.com/?t=6S5AD6pVMsXNQlIHtMIbQXJL.1
                       </a>
                      </p>
                      <p>
                       Unsubscribe
                       <a href="https://delighted.com/e/en/u/6S5AD6pVMsXNQlIHtMIbQXJL/2rOp2h3g" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/u/6S5AD6pVMsXNQlIHtMIbQXJL/2rOp2h3g', 'https://delighted.com/e/en/u/6S5AD6pVMsXNQlIHtMIbQXJL/2rOp2h3g']);" rel="nofollow">
                        https://delighted.com/e/en/u/6S5AD6pVMsXNQlIHtMIbQXJL/2rOp2h3g
                       </a>
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment even depth-5" id="dsq-comment-795">
                    <div class="dsq-comment-header" id="dsq-comment-header-795">
                     <cite id="dsq-cite-795">
                      https://www.sinch.com/
                      <span id="dsq-author-user-795">
                       Sinch
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-795">
                     <div class="dsq-comment-message" id="dsq-comment-message-795">
                      <p>
                       How likely are you to recommend Sinch to a friend?
                      </p>
                      <p>
                       0  
                       <a href="https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/0/20GlS5j4" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/0/20GlS5j4', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/0/20GlS5j4']);" rel="nofollow">
                        https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/0/20GlS5j4
                       </a>
                       Not likely 1  
                       <a href="https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/1/4Hx30CtP" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/1/4Hx30CtP', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/1/4Hx30CtP']);" rel="nofollow">
                        https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/1/4Hx30CtP
                       </a>
                       2  
                       <a href="https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/2/47qmOdxW" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/2/47qmOdxW', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/2/47qmOdxW']);" rel="nofollow">
                        https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/2/47qmOdxW
                       </a>
                       3  
                       <a href="https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/3/2Sfxk4j7" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/3/2Sfxk4j7', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/3/2Sfxk4j7']);" rel="nofollow">
                        https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/3/2Sfxk4j7
                       </a>
                       4  
                       <a href="https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/4/1V1QZRSc" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/4/1V1QZRSc', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/4/1V1QZRSc']);" rel="nofollow">
                        https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/4/1V1QZRSc
                       </a>
                       5  
                       <a href="https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/5/3hdD3lEM" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/5/3hdD3lEM', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/5/3hdD3lEM']);" rel="nofollow">
                        https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/5/3hdD3lEM
                       </a>
                       6  
                       <a href="https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/6/1oRo1hlO" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/6/1oRo1hlO', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/6/1oRo1hlO']);" rel="nofollow">
                        https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/6/1oRo1hlO
                       </a>
                       7  
                       <a href="https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/7/0md9Q4xV" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/7/0md9Q4xV', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/7/0md9Q4xV']);" rel="nofollow">
                        https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/7/0md9Q4xV
                       </a>
                       8  
                       <a href="https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/8/28hJ5don" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/8/28hJ5don', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/8/28hJ5don']);" rel="nofollow">
                        https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/8/28hJ5don
                       </a>
                       9  
                       <a href="https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/9/2EgUKDIe" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/9/2EgUKDIe', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/9/2EgUKDIe']);" rel="nofollow">
                        https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/9/2EgUKDIe
                       </a>
                       10 
                       <a href="https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/10/3FY0Hp5i" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/10/3FY0Hp5i', 'https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/10/3FY0Hp5i']);" rel="nofollow">
                        https://delighted.com/e/en/c/4LuMAF72cvDoOEngNbmWVVgr/10/3FY0Hp5i
                       </a>
                       Very likely
                       <br/>
                       
                      </p>
                      <p>
                       Powered by Delighted
                       <a href="https://delighted.com/?t=4LuMAF72cvDoOEngNbmWVVgr.1" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/?t=4LuMAF72cvDoOEngNbmWVVgr.1', 'https://delighted.com/?t=4LuMAF72cvDoOEngNbmWVVgr.1']);" rel="nofollow">
                        https://delighted.com/?t=4LuMAF72cvDoOEngNbmWVVgr.1
                       </a>
                      </p>
                      <p>
                       Unsubscribe
                       <a href="https://delighted.com/e/en/u/4LuMAF72cvDoOEngNbmWVVgr/2wPMPcaA" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/u/4LuMAF72cvDoOEngNbmWVVgr/2wPMPcaA', 'https://delighted.com/e/en/u/4LuMAF72cvDoOEngNbmWVVgr/2wPMPcaA']);" rel="nofollow">
                        https://delighted.com/e/en/u/4LuMAF72cvDoOEngNbmWVVgr/2wPMPcaA
                       </a>
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment odd alt depth-5" id="dsq-comment-778">
                    <div class="dsq-comment-header" id="dsq-comment-header-778">
                     <cite id="dsq-cite-778">
                      <span id="dsq-author-user-778">
                       Christian Jensen
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-778">
                     <div class="dsq-comment-message" id="dsq-comment-message-778">
                      <p>
                       It looks like you have a hardcoded path some in your project -F/Users/MW/Downloads/Sinch
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment even depth-5" id="dsq-comment-796">
                    <div class="dsq-comment-header" id="dsq-comment-header-796">
                     <cite id="dsq-cite-796">
                      https://www.sinch.com/
                      <span id="dsq-author-user-796">
                       Sinch
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-796">
                     <div class="dsq-comment-message" id="dsq-comment-message-796">
                      <p>
                       How likely are you to recommend Sinch to a friend?
                      </p>
                      <p>
                       0  
                       <a href="https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/0/2um50JnD" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/0/2um50JnD', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/0/2um50JnD']);" rel="nofollow">
                        https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/0/2um50JnD
                       </a>
                       Not likely 1  
                       <a href="https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/1/4n5Ee4O1" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/1/4n5Ee4O1', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/1/4n5Ee4O1']);" rel="nofollow">
                        https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/1/4n5Ee4O1
                       </a>
                       2  
                       <a href="https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/2/3ff3kUgF" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/2/3ff3kUgF', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/2/3ff3kUgF']);" rel="nofollow">
                        https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/2/3ff3kUgF
                       </a>
                       3  
                       <a href="https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/3/36s8dxeM" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/3/36s8dxeM', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/3/36s8dxeM']);" rel="nofollow">
                        https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/3/36s8dxeM
                       </a>
                       4  
                       <a href="https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/4/2fz2cvCy" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/4/2fz2cvCy', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/4/2fz2cvCy']);" rel="nofollow">
                        https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/4/2fz2cvCy
                       </a>
                       5  
                       <a href="https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/5/3Pl43KA6" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/5/3Pl43KA6', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/5/3Pl43KA6']);" rel="nofollow">
                        https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/5/3Pl43KA6
                       </a>
                       6  
                       <a href="https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/6/4ADhmVb8" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/6/4ADhmVb8', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/6/4ADhmVb8']);" rel="nofollow">
                        https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/6/4ADhmVb8
                       </a>
                       7  
                       <a href="https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/7/1HLFWQqx" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/7/1HLFWQqx', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/7/1HLFWQqx']);" rel="nofollow">
                        https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/7/1HLFWQqx
                       </a>
                       8  
                       <a href="https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/8/0A8ujMu6" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/8/0A8ujMu6', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/8/0A8ujMu6']);" rel="nofollow">
                        https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/8/0A8ujMu6
                       </a>
                       9  
                       <a href="https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/9/3NxL3r2v" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/9/3NxL3r2v', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/9/3NxL3r2v']);" rel="nofollow">
                        https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/9/3NxL3r2v
                       </a>
                       10 
                       <a href="https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/10/3xYKSwqQ" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/10/3xYKSwqQ', 'https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/10/3xYKSwqQ']);" rel="nofollow">
                        https://delighted.com/e/en/c/CdkSPQrr8vb7ToNStar85Na5/10/3xYKSwqQ
                       </a>
                       Very likely
                       <br/>
                       
                      </p>
                      <p>
                       Powered by Delighted
                       <a href="https://delighted.com/?t=CdkSPQrr8vb7ToNStar85Na5.1" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/?t=CdkSPQrr8vb7ToNStar85Na5.1', 'https://delighted.com/?t=CdkSPQrr8vb7ToNStar85Na5.1']);" rel="nofollow">
                        https://delighted.com/?t=CdkSPQrr8vb7ToNStar85Na5.1
                       </a>
                      </p>
                      <p>
                       Unsubscribe
                       <a href="https://delighted.com/e/en/u/CdkSPQrr8vb7ToNStar85Na5/3g1PKdML" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/u/CdkSPQrr8vb7ToNStar85Na5/3g1PKdML', 'https://delighted.com/e/en/u/CdkSPQrr8vb7ToNStar85Na5/3g1PKdML']);" rel="nofollow">
                        https://delighted.com/e/en/u/CdkSPQrr8vb7ToNStar85Na5/3g1PKdML
                       </a>
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment odd alt depth-5" id="dsq-comment-779">
                    <div class="dsq-comment-header" id="dsq-comment-header-779">
                     <cite id="dsq-cite-779">
                      <span id="dsq-author-user-779">
                       Christian Jensen
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-779">
                     <div class="dsq-comment-message" id="dsq-comment-message-779">
                      <p>
                       Ok, so you have a couple of problems, you are using a reference to a framework calles pds-parse-sinch.a that I dont know where you got. You are also referencing the SinchFramwork both as a pod and a Framework.
                      </p>
                      <p>
                       I would just roll back, use pods for both Parse and Sinch and not any frameworks.
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment even depth-5" id="dsq-comment-794">
                    <div class="dsq-comment-header" id="dsq-comment-header-794">
                     <cite id="dsq-cite-794">
                      https://www.sinch.com/
                      <span id="dsq-author-user-794">
                       Sinch
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-794">
                     <div class="dsq-comment-message" id="dsq-comment-message-794">
                      <p>
                       How likely are you to recommend Sinch to a friend?
                      </p>
                      <p>
                       0  
                       <a href="https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/0/1zaLFpoe" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/0/1zaLFpoe', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/0/1zaLFpoe']);" rel="nofollow">
                        https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/0/1zaLFpoe
                       </a>
                       Not likely 1  
                       <a href="https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/1/4d6CNdSd" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/1/4d6CNdSd', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/1/4d6CNdSd']);" rel="nofollow">
                        https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/1/4d6CNdSd
                       </a>
                       2  
                       <a href="https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/2/4uBQKPPb" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/2/4uBQKPPb', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/2/4uBQKPPb']);" rel="nofollow">
                        https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/2/4uBQKPPb
                       </a>
                       3  
                       <a href="https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/3/1hkKMmG4" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/3/1hkKMmG4', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/3/1hkKMmG4']);" rel="nofollow">
                        https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/3/1hkKMmG4
                       </a>
                       4  
                       <a href="https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/4/21ZtXjFr" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/4/21ZtXjFr', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/4/21ZtXjFr']);" rel="nofollow">
                        https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/4/21ZtXjFr
                       </a>
                       5  
                       <a href="https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/5/3KLGBwt8" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/5/3KLGBwt8', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/5/3KLGBwt8']);" rel="nofollow">
                        https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/5/3KLGBwt8
                       </a>
                       6  
                       <a href="https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/6/1fw7yEQL" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/6/1fw7yEQL', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/6/1fw7yEQL']);" rel="nofollow">
                        https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/6/1fw7yEQL
                       </a>
                       7  
                       <a href="https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/7/1gRWUNbg" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/7/1gRWUNbg', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/7/1gRWUNbg']);" rel="nofollow">
                        https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/7/1gRWUNbg
                       </a>
                       8  
                       <a href="https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/8/4jmWoEoB" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/8/4jmWoEoB', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/8/4jmWoEoB']);" rel="nofollow">
                        https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/8/4jmWoEoB
                       </a>
                       9  
                       <a href="https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/9/2du5bTUy" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/9/2du5bTUy', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/9/2du5bTUy']);" rel="nofollow">
                        https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/9/2du5bTUy
                       </a>
                       10 
                       <a href="https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/10/0Pz8NPIj" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/10/0Pz8NPIj', 'https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/10/0Pz8NPIj']);" rel="nofollow">
                        https://delighted.com/e/en/c/mKStrtrSxKgYkCoZ2MV3mvNO/10/0Pz8NPIj
                       </a>
                       Very likely
                       <br/>
                       
                      </p>
                      <p>
                       Powered by Delighted
                       <a href="https://delighted.com/?t=mKStrtrSxKgYkCoZ2MV3mvNO.1" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/?t=mKStrtrSxKgYkCoZ2MV3mvNO.1', 'https://delighted.com/?t=mKStrtrSxKgYkCoZ2MV3mvNO.1']);" rel="nofollow">
                        https://delighted.com/?t=mKStrtrSxKgYkCoZ2MV3mvNO.1
                       </a>
                      </p>
                      <p>
                       Unsubscribe
                       <a href="https://delighted.com/e/en/u/mKStrtrSxKgYkCoZ2MV3mvNO/3KjE5zF1" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'https://delighted.com/e/en/u/mKStrtrSxKgYkCoZ2MV3mvNO/3KjE5zF1', 'https://delighted.com/e/en/u/mKStrtrSxKgYkCoZ2MV3mvNO/3KjE5zF1']);" rel="nofollow">
                        https://delighted.com/e/en/u/mKStrtrSxKgYkCoZ2MV3mvNO/3KjE5zF1
                       </a>
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                   <li class="comment odd alt depth-5" id="dsq-comment-801">
                    <div class="dsq-comment-header" id="dsq-comment-header-801">
                     <cite id="dsq-cite-801">
                      <span id="dsq-author-user-801">
                       Christian Jensen
                      </span>
                     </cite>
                    </div>
                    <div class="dsq-comment-body" id="dsq-comment-body-801">
                     <div class="dsq-comment-message" id="dsq-comment-message-801">
                      <p>
                       Invite me to your repo
                      </p>
                      <p>
                       Sent from my phone
                      </p>
                     </div>
                    </div>
                   </li>
                   <!-- #comment-## -->
                  </ul>
                  <!-- .children -->
                 </li>
                 <!-- #comment-## -->
                 <li class="comment even depth-4" id="dsq-comment-703">
                  <div class="dsq-comment-header" id="dsq-comment-header-703">
                   <cite id="dsq-cite-703">
                    <span id="dsq-author-user-703">
                     Christian Jensen
                    </span>
                   </cite>
                  </div>
                  <div class="dsq-comment-body" id="dsq-comment-body-703">
                   <div class="dsq-comment-message" id="dsq-comment-message-703">
                    <p>
                     How about the build flags? Are they cleared, do you get any errors/warning when you run pod install?
                    </p>
                   </div>
                  </div>
                 </li>
                 <!-- #comment-## -->
                </ul>
                <!-- .children -->
               </li>
               <!-- #comment-## -->
              </ul>
              <!-- .children -->
             </li>
             <!-- #comment-## -->
            </ul>
            <!-- .children -->
           </li>
           <!-- #comment-## -->
           <li class="comment odd alt thread-even depth-1" id="dsq-comment-752">
            <div class="dsq-comment-header" id="dsq-comment-header-752">
             <cite id="dsq-cite-752">
              <span id="dsq-author-user-752">
               Jack Daniel
              </span>
             </cite>
            </div>
            <div class="dsq-comment-body" id="dsq-comment-body-752">
             <div class="dsq-comment-message" id="dsq-comment-message-752">
              <p>
               is there any way to register users via phone number in this app and then I can see only that users, who registered and use this app? Whatsapp/Viber clone in term of user registration
              </p>
             </div>
            </div>
            <ul class="children">
             <li class="comment even depth-2" id="dsq-comment-756">
              <div class="dsq-comment-header" id="dsq-comment-header-756">
               <cite id="dsq-cite-756">
                <span id="dsq-author-user-756">
                 Christian Jensen
                </span>
               </cite>
              </div>
              <div class="dsq-comment-body" id="dsq-comment-body-756">
               <div class="dsq-comment-message" id="dsq-comment-message-756">
                <p>
                 Sure, we have a number verification SDK you can use to verify phonenumbers, and then you just have to extent you backend/client to support that.
                 <a href="https://www.sinch.com/docs/verification/" rel="nofollow">
                  https://www.sinch.com/docs/verification/
                 </a>
                </p>
               </div>
              </div>
             </li>
             <!-- #comment-## -->
            </ul>
            <!-- .children -->
           </li>
           <!-- #comment-## -->
           <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-587">
            <div class="dsq-comment-header" id="dsq-comment-header-587">
             <cite id="dsq-cite-587">
              <span id="dsq-author-user-587">
               Christian Jensen
              </span>
             </cite>
            </div>
            <div class="dsq-comment-body" id="dsq-comment-body-587">
             <div class="dsq-comment-message" id="dsq-comment-message-587">
              <p>
               Can you mail in your error codes to
               <a href="mailto:support@sinch.com" onclick="_gaq.push(['_trackEvent','mailto','support@sinch.com']);">
                support@sinch.com
               </a>
               ?
              </p>
             </div>
            </div>
           </li>
           <!-- #comment-## -->
          </ul>
         </div>
        </div>
        <script type="text/javascript">
         /* &lt;![CDATA[ */
    var disqus_url = 'https://www.sinch.com/tutorials/minichat-ios-messaging-app/';
    var disqus_identifier = '3556 https://www.sinch.com/?post_type=sinch-tutorial&#038;p=3556';
    var disqus_container_id = 'disqus_thread';
    var disqus_domain = 'disqus.com';
    var disqus_shortname = 'sinch';
    var disqus_title = "MiniChat &#8211; An iOS Messaging App";
        var disqus_config = function () {
        var config = this; // Access to the config object
        config.language = '';

        /*
           All currently supported events:
            * preData  fires just before we request for initial data
            * preInit - fires after we get initial data but before we load any dependencies
            * onInit  - fires when all dependencies are resolved but before dtpl template is rendered
            * afterRender - fires when template is rendered but before we show it
            * onReady - everything is done
         */

        config.callbacks.preData.push(function() {
            // clear out the container (its filled for SEO/legacy purposes)
            document.getElementById(disqus_container_id).innerHTML = '';
        });
                config.callbacks.onReady.push(function() {
            // sync comments in the background so we don't block the page
            var script = document.createElement('script');
            script.async = true;
            script.src = '?cf_action=sync_comments&amp;post_id=3556';

            var firstScript = document.getElementsByTagName( "script" )[0];
            firstScript.parentNode.insertBefore(script, firstScript);
        });
                    };
/* ]]&gt; */
        </script>
        <script type="text/javascript">
         /* &lt;![CDATA[ */
    var DsqLocal = {
        'trackbacks': [
        ],
        'trackback_url': "https:\/\/www.sinch.com\/tutorials\/minichat-ios-messaging-app\/trackback\/"    };
/* ]]&gt; */
        </script>
        <script type="text/javascript">
         /* &lt;![CDATA[ */
(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.' + 'disqus.com' + '/embed.js?pname=wordpress&amp;pver=2.74';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
/* ]]&gt; */
&lt;/script&gt;
&lt;/div&gt;


	
			&lt;hr&gt;
	&lt;h4&gt;
		Related tutorials
	&lt;/h4&gt;
	&lt;hr&gt;
	&lt;div id="sinch-recent-news-container"&gt;
		&lt;div class="sinch-column"&gt;
						&lt;div class="sinch-news-item"&gt;
				&lt;div class="inner"&gt;
					&lt;div class="sinch-date"&gt;
						June 22, 2015					&lt;/div&gt;
					&lt;h3&gt;
						&lt;a href="https://www.sinch.com/tutorials/verify-phone-numbers-swift-sdk/"&gt;
							Verify Phone Numbers with the Swift SDK						&lt;/a&gt;
					&lt;/h3&gt;
					&lt;div class="excerpt"&gt;
						&lt;p&gt;How to verify phone numbers with the Sinch Swift SDK for iOS. &lt;/p&gt;
					&lt;/div&gt;
				&lt;/div&gt;
			&lt;/div&gt;
					&lt;div class="sinch-news-item"&gt;
				&lt;div class="inner"&gt;
					&lt;div class="sinch-date"&gt;
						June 16, 2015					&lt;/div&gt;
					&lt;h3&gt;
						&lt;a href="https://www.sinch.com/tutorials/ios-address-book-picker/"&gt;
							Build an iOS Contacts Picker						&lt;/a&gt;
					&lt;/h3&gt;
					&lt;div class="excerpt"&gt;
						&lt;p&gt;How to build an iOS Address Book contacts app for iOS that uses the Sinch SDK to make app-to-phone calls. Full code and tutorial.&lt;/p&gt;
					&lt;/div&gt;
				&lt;/div&gt;
			&lt;/div&gt;
					&lt;div class="sinch-news-item"&gt;
				&lt;div class="inner"&gt;
					&lt;div class="sinch-date"&gt;
						June 9, 2015					&lt;/div&gt;
					&lt;h3&gt;
						&lt;a href="https://www.sinch.com/tutorials/muting-calls-use-devices-speaker-ios/"&gt;
							Muting calls and using the device&#8217;s speaker in iOS						&lt;/a&gt;
					&lt;/h3&gt;
					&lt;div class="excerpt"&gt;
						&lt;p&gt;Learn how to mute calls and the user the loud speaker on an iOS device in this handy iOS tutorial.&lt;/p&gt;
					&lt;/div&gt;
				&lt;/div&gt;
			&lt;/div&gt;
					&lt;div class="sinch-news-item"&gt;
				&lt;div class="inner"&gt;
					&lt;div class="sinch-date"&gt;
						May 15, 2015					&lt;/div&gt;
					&lt;h3&gt;
						&lt;a href="https://www.sinch.com/tutorials/verify-phone-number-ios-app/"&gt;
							Verify a phone number in your iOS app						&lt;/a&gt;
					&lt;/h3&gt;
					&lt;div class="excerpt"&gt;
						&lt;p&gt;In this tutorial, we are going to explore our Verification SDK for iOS.&lt;/p&gt;
					&lt;/div&gt;
				&lt;/div&gt;
			&lt;/div&gt;
			&lt;/div&gt;
	&lt;div class="sinch-column"&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


	&lt;div id="sinch-footer"&gt;
		&lt;div class="sinch-inner"&gt;
			&lt;div class="visible-xs"&gt;
				&lt;div class="menu-mobile-footer-container"&gt;&lt;ul id="menu-mobile-footer" class="menu"&gt;&lt;li id="menu-item-2379" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2379"&gt;&lt;a href="https://www.sinch.com/?page_id=147"&gt;Products&lt;/a&gt;&lt;/li&gt;
&lt;li id="menu-item-3959" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3959"&gt;&lt;a href="https://www.sinch.com/about-us/jobs/"&gt;Jobs&lt;/a&gt;&lt;/li&gt;
&lt;li id="menu-item-2380" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2380"&gt;&lt;a href="https://www.sinch.com/help/faq/popular/"&gt;Help&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;				&lt;/div&gt;
				&lt;div class="hidden-xs"&gt;
					&lt;div class="menu-footer-menu-container"&gt;&lt;ul id="menu-footer-menu" class="menu"&gt;&lt;li id="menu-item-6685" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6685"&gt;&lt;a href="https://www.sinch.com/products/voice-api/"&gt;Voice&lt;/a&gt;&lt;/li&gt;
&lt;li id="menu-item-6686" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6686"&gt;&lt;a href="https://www.sinch.com/products/sms-api/"&gt;SMS&lt;/a&gt;&lt;/li&gt;
&lt;li id="menu-item-7875" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-7875"&gt;&lt;a href="https://www.sinch.com/products/verification/"&gt;Verification&lt;/a&gt;&lt;/li&gt;
&lt;li id="menu-item-6687" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6687"&gt;&lt;a href="https://www.sinch.com/products/instant-messaging/"&gt;Instant Message&lt;/a&gt;&lt;/li&gt;
&lt;li id="menu-item-2378" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2378"&gt;&lt;a href="https://www.sinch.com/help/faq/popular/"&gt;Help&lt;/a&gt;&lt;/li&gt;
&lt;li id="menu-item-2420" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2420"&gt;&lt;a href="https://www.sinch.com/about-us/jobs/"&gt;Jobs&lt;/a&gt;&lt;/li&gt;
&lt;li id="menu-item-3768" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3768"&gt;&lt;a href="https://www.sinch.com/about-us/in-the-press/"&gt;Press&lt;/a&gt;&lt;/li&gt;
&lt;li id="menu-item-7716" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-7716"&gt;&lt;a href="https://www.sinch.com/legal/terms-of-service/"&gt;Legal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;					&lt;/div&gt;
				&lt;/div&gt;
			&lt;/div&gt;
			&lt;/div&gt;
	&lt;!-- Scroll Triggered Boxes v1.4.3 - https://wordpress.org/plugins/scroll-triggered-boxes/--&gt;			&lt;style type="text/css"&gt;
				#stb-5192 {
					background: white;
															max-width: 445px;
				}

									@media only screen and (max-width: 445px) {
						#stb-5192 { display: none !important; }
					}
							&lt;/style&gt;
			&lt;div class="stb-container stb-bottom-left-container"&gt;
				&lt;div class="scroll-triggered-box stb stb-bottom-left" id="stb-5192" style="display: none;"  data-box-id="5192" data-trigger="percentage"
				 data-trigger-percentage="15" data-trigger-element=""
				 data-animation="fade" data-cookie="31" data-test-mode="0"
				 data-auto-hide="1"&gt;
					&lt;div class="stb-content"&gt;&lt;h3 style="text-align: center;"&gt;Got your app key and secret?&lt;/h3&gt;
&lt;p style="text-align: center;"&gt;&lt;span style="color: #636363;"&gt;Don&#8217;t forget, you will need a Sinch account to make the most of this tutorial!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&nbsp;&lt;br /&gt;
&lt;center&gt;
&lt;div class="sinch-button"&gt;&lt;a href="#signup" onclick="_gaq.push(['_trackEvent','tutorial','getKeys']);"&gt;Get your app keys&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;/div&gt;
					&lt;span class="stb-close"&gt;&times;&lt;/span&gt;
				&lt;/div&gt;
			&lt;/div&gt;
			&lt;!-- / Scroll Triggered Box --&gt;&lt;script type="text/javascript" src="https://www.sinch.com/wp-content/cache/minify/000000/dY5rDsIwDIMvRF-chQtAlbWZ2qY06abdniEkEGX8iSx_tmJrGIuPZmYz3zu0TTntnLY6YznZD7wRCUu71hG8Wpp9o5QuNGIue4WXoEZ_CeipsNrPhOEIHXzJ1BnWCJD-zBDqPq5YYeSZMhT5WQcJvJy_rKcYc7WBCE7bWzwA.js"&gt;
        </script>
        <script src="https://www.sinch.com/wp-content/cache/minify/000000/M9QvTi7Kz8nRLSnKTE9PLUpN0U3Kr0gt1k8sLk4tKdbPKgYpyCwo0cvNzAMA.js" type="text/javascript">
        </script>
        <script type="text/javascript">
         $(window).load(function() {

		if ( localStorage.UserService) {
			$('body').addClass('sinch-logged-in');
		} else {
			$('body').addClass('sinch-not-logged-in');
		}
	}(jQuery));


	if (!("ontouchstart" in document.documentElement)) {
		document.documentElement.className += " no-touch";
	}
        </script>
        <script type="text/javascript">
         /* &lt;![CDATA[ */
	var google_conversion_id = 964141587;
	var google_custom_params = window.google_tag_params;
	var google_remarketing_only = true;
	/* ]]&gt; */
        </script>
        <script src="//www.googleadservices.com/pagead/conversion.js" type="text/javascript">
        </script>
        <noscript>
         <div style="display:inline;">
          <img alt="" height="1" src="//googleads.g.doubleclick.net/pagead/viewthroughconversion/964141587/?value=0&amp;guid=ON&amp;script=0" style="border-style:none;" width="1"/>
         </div>
        </noscript>
        <script type="text/javascript">
         setTimeout(function(){var a=document.createElement("script");
	var b=document.getElementsByTagName("script")[0];
	a.src=document.location.protocol+"//script.crazyegg.com/pages/scripts/0028/5043.js?"+Math.floor(new Date().getTime()/3600000);
	a.async=true;a.type="text/javascript";b.parentNode.insertBefore(a,b)}, 1);
        </script>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
 </body>
</html>
<!-- Performance optimized by W3 Total Cache. Learn more: http://www.w3-edge.com/wordpress-plugins/

Minified using disk
Page Caching using disk: enhanced

 Served from: www.sinch.com @ 2015-06-24 19:05:11 by W3 Total Cache -->
