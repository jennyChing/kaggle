<!DOCTYPE html>
<html>
 <head>
  <meta charset="utf-8"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <title>
   Boy Scout Check-ins
  </title>
  <meta content="I missed the Boy Scouts callout when I was kid. Perhaps thats why it took me 20 years to figure out a knot that keeps my shoes tied all day. My recent attem..." name="description"/>
  <meta content="Jeff Moser" name="author"/>
  <link href="/css/main.css" rel="stylesheet"/>
  <link href="http://www.moserware.com/2008/10/boy-scout-check-ins.html" rel="canonical"/>
  <link href="http://feeds.feedburner.com/Moserware" rel="alternate" title="Moserware" type="application/rss+xml"/>
 </head>
 <body>
  <header class="site-header">
   <div class="wrapper">
    <a class="site-title" href="/">
     Moserware
    </a>
    <nav class="site-nav">
     <a class="menu-icon" href="#">
      <svg viewbox="0 0 18 15">
       <path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.031C17.335,0,18,0.665,18,1.484L18,1.484z" fill="#424242">
       </path>
       <path d="M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0c0-0.82,0.665-1.484,1.484-1.484 h15.031C17.335,6.031,18,6.696,18,7.516L18,7.516z" fill="#424242">
       </path>
       <path d="M18,13.516C18,14.335,17.335,15,16.516,15H1.484C0.665,15,0,14.335,0,13.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.031C17.335,12.031,18,12.696,18,13.516L18,13.516z" fill="#424242">
       </path>
      </svg>
     </a>
     <div class="trigger">
      <a class="page-link" href="/about/">
       About
      </a>
     </div>
    </nav>
   </div>
  </header>
  <div class="page-content">
   <div class="wrapper">
    <div class="post">
     <header class="post-header">
      <h1 class="post-title">
       Boy Scout Check-ins
      </h1>
      <p class="post-meta">
       Oct 31, 2008
      </p>
     </header>
     <article class="post-content">
      <p>
       I missed the
       <a href="http://www.scouting.org/">
        Boy Scouts
       </a>
       callout when I was kid. Perhaps thats why it took me 20 years to figure out
       <a href="http://www.fieggen.com/shoelace/secureknot.htm">
        a knot
       </a>
       that keeps my shoes tied all day. My recent attempt at starting a campfire required a
       <a href="http://en.wikipedia.org/wiki/Propane">
        propane
       </a>
       torch. Despite my shortcomings, I felt a connection to the Scouts while reading this:
      </p>
      <blockquote>
       <p>
        <a href="http://www.flickr.com/photos/greenacre8/369218941/">
         <img align="right" alt="boyscouts" border="0" height="156" src="/assets/boy-scout-check-ins/boyscouts_320.jpg" style="border-width: 0px; margin: 0px 0px 0px 10px;" width="244"/>
        </a>
        Its not enough to write the code well. The code has to be
        <em>
         kept clean
        </em>
        over time. Weve all seen code rot and degrade as time passes. So we must take an active role in preventing this degradation.
       </p>
      </blockquote>
      <blockquote>
       <p>
        The
        <a href="http://en.wikipedia.org/wiki/Boy_Scouts_of_America">
         Boy Scouts of America
        </a>
        have a simple rule that we can apply to our profession.
       </p>
      </blockquote>
      <blockquote>
       <p>
        <strong>
         <a href="http://www.scouting.org/cubscouts/aboutcubscouts/history.aspx">
          Leave the campground cleaner than you found it.
         </a>
        </strong>
       </p>
      </blockquote>
      <blockquote>
       <p>
        If we all checked-in our code a little cleaner than when we checked it out, the code simply could not rot. The cleanup doesnt have to be something big. Change one variable name for the better, break up one function thats a little too large, eliminate one small bit of duplication, clean up one composite if statement.
       </p>
      </blockquote>
      <blockquote>
       <p>
        Can you imagine working on a project where the code
        <em>
         simply got better
        </em>
        as time passed? Do you believe that any other option is professional? Indeed, isnt continuous improvement an intrinsic part of professionalism? [
        <a href="http://www.amazon.com/gp/product/0132350882?ie=UTF8&amp;tag=moserware-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0132350882">
         Clean Code
        </a>
        , p14]
       </p>
      </blockquote>
      <p>
       While reading this, I was reminded of another gem:
      </p>
      <blockquote>
       <p>
        Well-designed code
        <em>
         looks
        </em>
        obvious, but it probably took an awful lot of thought (and a lot of refactoring) to make it that simple. [
        <a href="http://www.amazon.com/gp/product/1593271190?ie=UTF8&amp;tag=moserware-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=1593271190">
         Code Craft
        </a>
        , p247]
       </p>
      </blockquote>
      <p>
       Both sound great, but they have a sort of Dont forget to
       <a href="http://en.wikipedia.org/wiki/Dental_floss">
        floss
       </a>
        ring to them.
      </p>
      <p>
       Weve heard for years that
       <a href="http://www.refactoring.com/">
        refactoring
       </a>
       helps improve code, but actually doing it can sometimes feel
       <em>
        too
       </em>
       daunting. Its just a fact that a lot of the code we deal with on a daily basis doesnt have enough test coverage, if there are any tests at all, to have us feel fully confident with many changes that we make to our code.
      </p>
      <p>
       But a Scout wouldnt let the sad state of some parts of the code get him down. A Scout would always have his nose out for
       <a href="http://www.codinghorror.com/blog/archives/000589.html">
        stinky
       </a>
       <a href="http://c2.com/xp/CodeSmell.html">
        code
       </a>
       to clean up so that he could get a teeny bit of satisfaction knowing that he checked-in code that was better than when he checked it out.
      </p>
      <p>
       This
       <a href="http://www.derickbailey.com/2008/03/11/MicroRefactoringLeaveTheCampsiteCleanerThanYouFoundIt.aspx">
        isnt a new idea
       </a>
       ; its just a matter of realizing how easy it is.
      </p>
      <h2 id="examples">
       Examples
      </h2>
      <p>
       Theres a lot of low-hanging fruit in a typical code base. Over months of development, the top of a C# file might look like this:
      </p>
      <div class="highlight">
       <pre>
        <code class="language-c#" data-lang="c#">
         <span class="k">
          using
         </span>
         <span class="nn">
          System.Linq
         </span>
         <span class="p">
          ;
         </span>
         <span class="k">
          using
         </span>
         <span class="nn">
          System
         </span>
         <span class="p">
          ;
         </span>
         <span class="k">
          using
         </span>
         <span class="nn">
          System.Collections.Generic
         </span>
         <span class="p">
          ;
         </span>
         <span class="k">
          using
         </span>
         <span class="nn">
          Moserware.IO
         </span>
         <span class="p">
          ;
         </span>
         <span class="k">
          using
         </span>
         <span class="nn">
          System.Diagnostics
         </span>
         <span class="p">
          ;
         </span>
         <span class="k">
          using
         </span>
         <span class="nn">
          System.Text.RegularExpressions
         </span>
         <span class="p">
          ;
         </span>
         <span class="k">
          using
         </span>
         <span class="nn">
          System.Text
         </span>
         <span class="p">
          ;
         </span>
         <span class="k">
          using
         </span>
         <span class="nn">
          System.Threading
         </span>
         <span class="p">
          ;
         </span>
        </code>
       </pre>
      </div>
      <p>
       This is a messy way to introduce your code. With
       <a href="http://richardbushnell.net/index.php/2008/03/03/remove-and-sort-those-ugly-using-statements/">
        just a simple click
       </a>
       in Visual Studio, you can have it automatically remove clutter and sort things to get something nicer:
      </p>
      <div class="highlight">
       <pre>
        <code class="language-c#" data-lang="c#">
         <span class="k">
          using
         </span>
         <span class="nn">
          System.Text.RegularExpressions
         </span>
         <span class="p">
          ;
         </span>
         <span class="k">
          using
         </span>
         <span class="nn">
          System.Threading
         </span>
         <span class="p">
          ;
         </span>
         <span class="k">
          using
         </span>
         <span class="nn">
          Moserware.IO
         </span>
         <span class="p">
          ;
         </span>
        </code>
       </pre>
      </div>
      <p>
       For a three second time investment, youll leave the file slightly better than you found it. With a
       <a href="http://code.msdn.microsoft.com/PowerCommands">
        free add-in
       </a>
       , you can do this for your
       <em>
        entire project
       </em>
       in about the same amount of time.
      </p>
      <p>
       Different team members can often work in the same class and youll end up with member variable declarations that identify each persons style:
      </p>
      <div class="highlight">
       <pre>
        <code class="language-c#" data-lang="c#">
         <span class="k">
          public
         </span>
         <span class="k">
          class
         </span>
         <span class="nc">
          CircularBuffer
         </span>
         <span class="p">
          &lt;
         </span>
         <span class="n">
          T
         </span>
         <span class="p">
          &gt;
         </span>
         <span class="p">
          {
         </span>
         <span class="n">
          T
         </span>
         <span class="p">
          []
         </span>
         <span class="n">
          m_array
         </span>
         <span class="p">
          ;
         </span>
         <span class="k">
          private
         </span>
         <span class="kt">
          object
         </span>
         <span class="n">
          syncRoot
         </span>
         <span class="p">
          =
         </span>
         <span class="k">
          new
         </span>
         <span class="kt">
          object
         </span>
         <span class="p">
          ();
         </span>
         <span class="k">
          private
         </span>
         <span class="kt">
          int
         </span>
         <span class="n">
          _HeadIndex
         </span>
         <span class="p">
          ;
         </span>
         <span class="k">
          private
         </span>
         <span class="kt">
          int
         </span>
         <span class="n">
          m_TailIndex
         </span>
         <span class="p">
          ;
         </span>
         <span class="p">
          ...
         </span>
        </code>
       </pre>
      </div>
      <p>
       This can easily be
       <a href="http://msdn.microsoft.com/en-us/library/ms379618.aspx#vs05_refac_topic8">
        made consistent in few seconds
       </a>
       :
      </p>
      <div class="highlight">
       <pre>
        <code class="language-c#" data-lang="c#">
         <span class="k">
          public
         </span>
         <span class="k">
          class
         </span>
         <span class="nc">
          CircularBuffer
         </span>
         <span class="p">
          &lt;
         </span>
         <span class="n">
          T
         </span>
         <span class="p">
          &gt;
         </span>
         <span class="p">
          {
         </span>
         <span class="k">
          private
         </span>
         <span class="n">
          T
         </span>
         <span class="p">
          []
         </span>
         <span class="n">
          _Array
         </span>
         <span class="p">
          ;
         </span>
         <span class="k">
          private
         </span>
         <span class="kt">
          int
         </span>
         <span class="n">
          _HeadIndex
         </span>
         <span class="p">
          ;
         </span>
         <span class="k">
          private
         </span>
         <span class="kt">
          int
         </span>
         <span class="n">
          _TailIndex
         </span>
         <span class="p">
          ;
         </span>
         <span class="k">
          private
         </span>
         <span class="kt">
          object
         </span>
         <span class="n">
          _SyncRoot
         </span>
         <span class="p">
          =
         </span>
         <span class="k">
          new
         </span>
         <span class="kt">
          object
         </span>
         <span class="p">
          ();
         </span>
         <span class="p">
          ...
         </span>
        </code>
       </pre>
      </div>
      <p>
       Changing a line like this:
      </p>
      <div class="highlight">
       <pre>
        <code class="language-c#" data-lang="c#">
         <span class="k">
          if
         </span>
         <span class="p">
          ((
         </span>
         <span class="n">
          i
         </span>
         <span class="p">
          &gt;=
         </span>
         <span class="n">
          minAmount
         </span>
         <span class="p">
          )
         </span>
         <span class="p">
          &amp;&amp;
         </span>
         <span class="p">
          (
         </span>
         <span class="n">
          i
         </span>
         <span class="p">
          &lt;=
         </span>
         <span class="n">
          maxAmount
         </span>
         <span class="p">
          ))
         </span>
        </code>
       </pre>
      </div>
      <p>
       to use
       <a href="http://safari.oreilly.com/0735619670/ch19lev1sec1">
        number-line order
       </a>
       :
      </p>
      <div class="highlight">
       <pre>
        <code class="language-c#" data-lang="c#">
         <span class="k">
          if
         </span>
         <span class="p">
          ((
         </span>
         <span class="n">
          minAmount
         </span>
         <span class="p">
          &lt;=
         </span>
         <span class="n">
          i
         </span>
         <span class="p">
          )
         </span>
         <span class="p">
          &amp;&amp;
         </span>
         <span class="p">
          (
         </span>
         <span class="n">
          i
         </span>
         <span class="p">
          &lt;=
         </span>
         <span class="n">
          maxAmount
         </span>
         <span class="p">
          ))
         </span>
        </code>
       </pre>
      </div>
      <p>
       makes the code slightly more visual and easier to read.
      </p>
      <p>
       <a href="http://www.refactoring.com/catalog/introduceExplainingVariable.html">
        Introducing an explaining variable
       </a>
       can turn:
      </p>
      <div class="highlight">
       <pre>
        <code class="language-c#" data-lang="c#">
         <span class="k">
          private
         </span>
         <span class="k">
          static
         </span>
         <span class="n">
          DateTime
         </span>
         <span class="nf">
          GetElectionDay
         </span>
         <span class="p">
          (
         </span>
         <span class="kt">
          int
         </span>
         <span class="n">
          year
         </span>
         <span class="p">
          )
         </span>
         <span class="p">
          {
         </span>
         <span class="n">
          DateTime
         </span>
         <span class="n">
          startDate
         </span>
         <span class="p">
          =
         </span>
         <span class="k">
          new
         </span>
         <span class="n">
          DateTime
         </span>
         <span class="p">
          (
         </span>
         <span class="n">
          year
         </span>
         <span class="p">
          ,
         </span>
         <span class="m">
          11
         </span>
         <span class="p">
          ,
         </span>
         <span class="m">
          1
         </span>
         <span class="p">
          );
         </span>
         <span class="c1">
          // Get the first Tuesday following the first Monday
         </span>
         <span class="k">
          if
         </span>
         <span class="p">
          (
         </span>
         <span class="n">
          startDate
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          DayOfWeek
         </span>
         <span class="p">
          &lt;=
         </span>
         <span class="n">
          DayOfWeek
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          Monday
         </span>
         <span class="p">
          )
         </span>
         <span class="p">
          {
         </span>
         <span class="c1">
          // Current day of the week is before Tuesday
         </span>
         <span class="k">
          return
         </span>
         <span class="n">
          startDate
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          AddDays
         </span>
         <span class="p">
          (
         </span>
         <span class="n">
          DayOfWeek
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          Tuesday
         </span>
         <span class="p">
          -
         </span>
         <span class="n">
          startDate
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          DayOfWeek
         </span>
         <span class="p">
          );
         </span>
         <span class="p">
          }
         </span>
         <span class="k">
          else
         </span>
         <span class="p">
          {
         </span>
         <span class="c1">
          // Current day of the week is Tuesday or after
         </span>
         <span class="k">
          return
         </span>
         <span class="n">
          startDate
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          AddDays
         </span>
         <span class="p">
          (
         </span>
         <span class="m">
          7
         </span>
         <span class="p">
          -
         </span>
         <span class="p">
          (
         </span>
         <span class="n">
          startDate
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          DayOfWeek
         </span>
         <span class="p">
          -
         </span>
         <span class="n">
          DayOfWeek
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          Tuesday
         </span>
         <span class="p">
          ));
         </span>
         <span class="p">
          }
         </span>
         <span class="p">
          }
         </span>
        </code>
       </pre>
      </div>
      <p>
       into a slightly more maintainable version that doesnt need comments:
      </p>
      <div class="highlight">
       <pre>
        <code class="language-c#" data-lang="c#">
         <span class="k">
          private
         </span>
         <span class="k">
          static
         </span>
         <span class="n">
          DateTime
         </span>
         <span class="nf">
          GetElectionDay
         </span>
         <span class="p">
          (
         </span>
         <span class="kt">
          int
         </span>
         <span class="n">
          year
         </span>
         <span class="p">
          )
         </span>
         <span class="p">
          {
         </span>
         <span class="n">
          DateTime
         </span>
         <span class="n">
          nov1
         </span>
         <span class="p">
          =
         </span>
         <span class="k">
          new
         </span>
         <span class="n">
          DateTime
         </span>
         <span class="p">
          (
         </span>
         <span class="n">
          year
         </span>
         <span class="p">
          ,
         </span>
         <span class="m">
          11
         </span>
         <span class="p">
          ,
         </span>
         <span class="m">
          1
         </span>
         <span class="p">
          );
         </span>
         <span class="kt">
          int
         </span>
         <span class="n">
          daysUntilMonday
         </span>
         <span class="p">
          ;
         </span>
         <span class="k">
          if
         </span>
         <span class="p">
          (
         </span>
         <span class="n">
          nov1
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          DayOfWeek
         </span>
         <span class="p">
          &lt;
         </span>
         <span class="n">
          DayOfWeek
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          Tuesday
         </span>
         <span class="p">
          )
         </span>
         <span class="p">
          {
         </span>
         <span class="n">
          daysUntilMonday
         </span>
         <span class="p">
          =
         </span>
         <span class="n">
          DayOfWeek
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          Monday
         </span>
         <span class="p">
          -
         </span>
         <span class="n">
          nov1
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          DayOfWeek
         </span>
         <span class="p">
          ;
         </span>
         <span class="p">
          }
         </span>
         <span class="k">
          else
         </span>
         <span class="p">
          {
         </span>
         <span class="n">
          daysUntilMonday
         </span>
         <span class="p">
          =
         </span>
         <span class="m">
          6
         </span>
         <span class="p">
          -
         </span>
         <span class="p">
          (
         </span>
         <span class="n">
          nov1
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          DayOfWeek
         </span>
         <span class="p">
          -
         </span>
         <span class="n">
          DayOfWeek
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          Tuesday
         </span>
         <span class="p">
          );
         </span>
         <span class="p">
          }
         </span>
         <span class="n">
          DateTime
         </span>
         <span class="n">
          firstMonday
         </span>
         <span class="p">
          =
         </span>
         <span class="n">
          nov1
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          AddDays
         </span>
         <span class="p">
          (
         </span>
         <span class="n">
          daysUntilMonday
         </span>
         <span class="p">
          );
         </span>
         <span class="k">
          return
         </span>
         <span class="n">
          firstMonday
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          AddDays
         </span>
         <span class="p">
          (
         </span>
         <span class="m">
          1
         </span>
         <span class="p">
          );
         </span>
         <span class="p">
          }
         </span>
        </code>
       </pre>
      </div>
      <p>
       Along these lines, I tend to agree with
       <a href="http://steve-yegge.blogspot.com/">
        Steve Yegge
       </a>
       s
       <a href="http://www.oreillynet.com/ruby/blog/2006/03/transformation.html">
        observation
       </a>
       :
      </p>
      <blockquote>
       <p>
        The [
        <a href="http://www.amazon.com/gp/product/0201485672?ie=UTF8&amp;tag=moserware-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0201485672">
         Refactoring
        </a>
        ] book next tells me: dont comment my code. Insanity again! But once again, his explanation makes sense. I resolve to stop writing one-line comments, and to start making more descriptive function and parameter names.
       </p>
      </blockquote>
      <p>
       By themselves, each of these refactorings almost seems
       <em>
        too simple
       </em>
       . But each leaves your code in a slightly better place than you found it thereby qualify as a Boy Scout Check-In.
      </p>
      <h2 id="be-careful">
       Be Careful
      </h2>
      <p>
       Weve probably all heard horror stories of some poor programmer who changed just 
       <a href="http://en.wikipedia.org/wiki/Off-by-one_error">
        one little character
       </a>
        of code and caused rockets to explode or billion dollar security
       <a href="http://www.wired.com/software/coolapps/news/2005/11/69355?currentPage=all">
        bugs
       </a>
       . My advice is to not let that be you. Write more tests and use
       <a href="http://en.wikipedia.org/wiki/Code_review">
        code reviews
       </a>
       if that helps. Just dont let it be an excuse to not do
       <em>
        something
       </em>
       .
      </p>
      <p>
       Boy Scout Check-ins should be short and measured in minutes for how long they take. Get in and out with slightly better code that fixed one small thing. Try hard not to fix a bug or add a feature while doing these small check-ins or you might face the wrath of your coworkers as Raymond Chen
       <a href="http://blogs.msdn.com/oldnewthing/archive/2008/10/30/9023340.aspx">
        points out
       </a>
       :
      </p>
      <blockquote>
       <p>
        Whatever your changes are, go nuts. All I ask is that you restrict them to layout-only check-ins. In other words, if you want to do some source code reformatting
        <em>
         and
        </em>
        change some code, please split it up into two check-ins, one that does the reformatting and the other that changes the code.
        <br/>
        Otherwise, I end up staring at a diff of 1500 changed lines of source code,
        <a href="http://blogs.msdn.com/oldnewthing/archive/2008/03/27/8338530.aspx">
         1498 of which are just reformatting
        </a>
        , and 2 of which actually changed something. Finding those two lines is not fun.
       </p>
      </blockquote>
      <h2 id="avoid-cycles">
       Avoid Cycles
      </h2>
      <p>
       One subtle thing to realize is that you dont want to get lost in an infinite loop with a coworker of mutually exclusive changes. This is easy since good people can disagree. For instance, compare:
      </p>
      <blockquote>
       <p>
        Use final or const when possible By declaring a variable to be
        <em>
         final
        </em>
        in Java or
        <em>
         const
        </em>
        in C++, you can prevent the variable from being assigned a value after its initialized. The
        <em>
         final
        </em>
        and
        <em>
         const
        </em>
        keywords are useful for defining class constants, input-only parameters, and any local variables whose values are intended to remain unchanged after initialization. [
        <a href="http://www.amazon.com/gp/product/0735619670?ie=UTF8&amp;tag=moserware-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0735619670">
         Code Complete 2
        </a>
        , p243]
       </p>
      </blockquote>
      <p>
       and
      </p>
      <blockquote>
       <p>
        I also deleted all the final keywords in arguments and variable declarations. As far as I could tell, they added no real value but did add to the clutter. Eliminating final flies in the face of some conventional wisdom. For example, Robert Simmons strongly recommends us to 
        <a href="http://books.google.com/books?id=awnmD1w4_T8C&amp;pg=PA72&amp;lpg=PA72&amp;dq=robert+simmons+%22spread+final+all+over+your+code%22&amp;source=web&amp;ots=ZuLGos4Q5j&amp;sig=MvXAFM0YMhmct2HEs895umrVy4g&amp;hl=en&amp;sa=X&amp;oi=book_result&amp;resnum=1&amp;ct=result">
         spread final all over your code
        </a>
        . Clearly I disagree. I think there are a few good uses for final, such as the occasional final constant, but otherwise the keyword adds little value and creates a lot of clutter. [
        <a href="http://www.amazon.com/gp/product/0132350882?ie=UTF8&amp;tag=moserware-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0132350882">
         Clean Code
        </a>
        , p276]
       </p>
      </blockquote>
      <p>
       Dont get bogged down with someone else on adding and removing final or readonly. Just be consistent.
      </p>
      <p>
       Im embarrassed to admit that in my earlier days, I might have cleaned code like this:
      </p>
      <div class="highlight">
       <pre>
        <code class="language-c#" data-lang="c#">
         <span class="kt">
          string
         </span>
         <span class="n">
          headerHtml
         </span>
         <span class="p">
          =
         </span>
         <span class="s">
          "&lt;h1&gt;"
         </span>
         <span class="p">
          +
         </span>
         <span class="n">
          headerText
         </span>
         <span class="p">
          +
         </span>
         <span class="s">
          "&lt;/h1&gt;"
         </span>
         <span class="p">
          ;
         </span>
        </code>
       </pre>
      </div>
      <p>
       into
      </p>
      <div class="highlight">
       <pre>
        <code class="language-c#" data-lang="c#">
         <span class="kt">
          string
         </span>
         <span class="n">
          headerHtml
         </span>
         <span class="p">
          =
         </span>
         <span class="n">
          String
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          Concat
         </span>
         <span class="p">
          (
         </span>
         <span class="s">
          "&lt;h1&gt;"
         </span>
         <span class="p">
          ,
         </span>
         <span class="n">
          headerText
         </span>
         <span class="p">
          ,
         </span>
         <span class="s">
          "&lt;/h1&gt;"
         </span>
         <span class="p">
          );
         </span>
        </code>
       </pre>
      </div>
      <p>
       or even worse:
      </p>
      <div class="highlight">
       <pre>
        <code class="language-c#" data-lang="c#">
         <span class="n">
          StringBuilder
         </span>
         <span class="n">
          sb
         </span>
         <span class="p">
          =
         </span>
         <span class="k">
          new
         </span>
         <span class="n">
          StringBuilder
         </span>
         <span class="p">
          ();
         </span>
         <span class="n">
          sb
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          Append
         </span>
         <span class="p">
          (
         </span>
         <span class="s">
          "&lt;h1&gt;"
         </span>
         <span class="p">
          );
         </span>
         <span class="n">
          sb
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          Append
         </span>
         <span class="p">
          (
         </span>
         <span class="n">
          headerText
         </span>
         <span class="p">
          );
         </span>
         <span class="n">
          sb
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          Append
         </span>
         <span class="p">
          (
         </span>
         <span class="s">
          "&lt;/h1&gt;"
         </span>
         <span class="p">
          );
         </span>
         <span class="kt">
          string
         </span>
         <span class="n">
          headerHtml
         </span>
         <span class="p">
          =
         </span>
         <span class="n">
          sb
         </span>
         <span class="p">
          .
         </span>
         <span class="n">
          ToString
         </span>
         <span class="p">
          ();
         </span>
        </code>
       </pre>
      </div>
      <p>
       In this first case, I thought I was brilliant because I knew about the
       <a href="http://msdn.microsoft.com/en-us/library/a6d350wd.aspx">
        Concat
       </a>
       method and thought itd give me faster code. This is not true because the C# compiler special cases string concatenation to automatically do this. The second example is painful because its
       <a href="http://www.yoda.arachsys.com/csharp/stringbuilder.html">
        uglier and slower
       </a>
       and it isnt building a string in a loop where
       <a href="http://msdn.microsoft.com/en-us/library/system.text.stringbuilder.aspx">
        StringBuilder
       </a>
       s make a lot of sense.
      </p>
      <p>
       After many dumb mistakes like this, Ive finally decided that if I ever have a doubt on which option to use, Ill pick the more readable one:
      </p>
      <blockquote>
       <p>
        Write your code to be read. By humans. Easily. The compiler will be able to cope. [
        <a href="http://www.amazon.com/gp/product/1593271190?ie=UTF8&amp;tag=moserware-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=1593271190">
         Code Craft
        </a>
        , p59]
       </p>
      </blockquote>
      <h2 id="coda">
       Coda
      </h2>
      <p>
       <strong>
        <a href="http://en.wikipedia.org/wiki/Image:Smokey3.jpg">
         <img align="left" alt="Smokey3" border="0" height="244" src="/assets/boy-scout-check-ins/Smokey3_320.jpg" style="border-width: 0px; margin: 0px 10px 0px 0px;" width="171"/>
        </a>
       </strong>
       Boy Scout check-ins are
       <a href="http://www.joelonsoftware.com/items/2007/06/07.html">
        small steps
       </a>
       that help fix the
       <a href="http://en.wikipedia.org/wiki/Fixing_Broken_Windows">
        broken windows
       </a>
       that we all have in our code. When you look at your code, try to find at least
       <em>
        one
       </em>
       thing you can do to leave it better. Eventually it becomes a game where everyone benefits. These check-ins can often be a small reward for checking-in a large feature or fixing a nasty bug.
      </p>
      <p>
       If youre pressed for time and cant make the change now or you want to save it for when you can make the change across all your code, make a note to yourself. I create empty change-lists in
       <a href="http://en.wikipedia.org/wiki/Perforce">
        my version control system
       </a>
       for this purpose. This is also helpful if you find a bug and want to later
       <a href="http://www.fastcompany.com/magazine/06/writestuff.html?page=0%2C4">
        complained
       </a>
       that
       <a href="http://www.mayoclinic.com/health/hand-washing/HQ00407">
        hand-washing
       </a>
       took too long and wasted their precious time. We all have our own pressures that might cause us to think that we can neglect basic code hygiene. Over time, this snowballs into a mess that weve all had to deal with.
      </p>
      <p>
       Only you can
       <a href="http://www.cedu.niu.edu/%7Efulmer/starfish.htm">
        make a difference
       </a>
       in
       <em>
        your
       </em>
       code campground.
      </p>
     </article>
     <section class="comments">
      <div id="disqus_thread">
      </div>
     </section>
     <script type="text/javascript">
      var disqus_shortname = 'moserware';
     </script>
     <script async="" src="//moserware.disqus.com/embed.js">
     </script>
     <noscript>
      Please enable JavaScript to view the
      <a href="https://disqus.com/?ref_noscript" rel="nofollow">
       comments powered by Disqus.
      </a>
     </noscript>
    </div>
   </div>
  </div>
  <footer class="site-footer">
   <div class="wrapper">
    <div class="footer-col-wrapper">
     <div class="footer-col footer-col-1">
       2015
     </div>
    </div>
   </div>
  </footer>
  <script async="" src="//www.google-analytics.com/analytics.js" type="text/javascript">
  </script>
  <script>
   var ga=ga||function(){(ga.q=ga.q||[]).push(arguments)};
      ga.l=+new Date;
      ga("create","UA-2987024-1","auto");
      ga("send","pageview");
  </script>
 </body>
</html>