<!DOCTYPE html>
<!--[if lte IE 9]&gt;&lt;html class="no-js IE9 IE" lang="en-US"&gt;&lt;![endif]-->
<!--[if gt IE 9]&gt;&lt;!-->
<html class="no-js" lang="en-US">
 <!--&lt;![endif]-->
 <head>
  <title>
   How I explained Object Oriented Programming to my wife. | Programming the new world
  </title>
  <script type="text/javascript">
   /* &lt;![CDATA[ */
			document.documentElement.className = document.documentElement.className.replace(new RegExp('(^|\\s)no-js(\\s|$)'), '$1js$2');
			/* ]]&gt; */
  </script>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <link href="http://blog.nickbelhomme.com/feed" rel="alternate" title="Programming the new world  Feed" type="application/rss+xml"/>
  <link href="http://blog.nickbelhomme.com/comments/feed" rel="alternate" title="Programming the new world  Comments Feed" type="application/rss+xml"/>
  <link href="http://blog.nickbelhomme.com/php/how-i-explained-object-oriented-programming-to-my-wife_356/feed" rel="alternate" title="Programming the new world  How I explained Object Oriented Programming to my wife. Comments Feed" type="application/rss+xml"/>
  <link href="//fonts.googleapis.com/css?family=Open+Sans%3Aregular%2Citalic%2C700%26subset%3Dlatin%2Clatin&amp;ver=1.5.1" id="ttfmake-google-fonts-css" media="all" rel="stylesheet" type="text/css"/>
  <link href="http://blog.nickbelhomme.com/wp-content/themes/make/css/font-awesome.min.css?ver=4.2.0" id="ttfmake-font-awesome-css" media="all" rel="stylesheet" type="text/css"/>
  <link href="http://blog.nickbelhomme.com/wp-content/themes/make/style.css?ver=1.5.1" id="ttfmake-main-style-css" media="all" rel="stylesheet" type="text/css"/>
  <link href="http://blog.nickbelhomme.com/wp-content/themes/make/css/print.css?ver=1.5.1" id="ttfmake-print-style-css" media="print" rel="stylesheet" type="text/css"/>
  <script src="http://blog.nickbelhomme.com/wp-includes/js/jquery/jquery.js?ver=1.11.1" type="text/javascript">
  </script>
  <script src="http://blog.nickbelhomme.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1" type="text/javascript">
  </script>
  <link href="http://blog.nickbelhomme.com/xmlrpc.php?rsd" rel="EditURI" title="RSD" type="application/rsd+xml"/>
  <link href="http://blog.nickbelhomme.com/wp-includes/wlwmanifest.xml" rel="wlwmanifest" type="application/wlwmanifest+xml"/>
  <link href="http://blog.nickbelhomme.com/php/mastering-namespaces-in-php-at-phpbenelux-conference_336" rel="prev" title="Mastering Namespaces in PHP at PHPBenelux Conference"/>
  <link href="http://blog.nickbelhomme.com/php/quality-assurance-in-php-projects_382" rel="next" title="Quality Assurance in PHP projects"/>
  <meta content="WordPress 4.1.1" name="generator"/>
  <link href="http://blog.nickbelhomme.com/php/how-i-explained-object-oriented-programming-to-my-wife_356" rel="canonical"/>
  <link href="http://blog.nickbelhomme.com/?p=356" rel="shortlink"/>
  <!-- Begin Make Custom CSS -->
  <style id="ttfmake-custom-css" type="text/css">
   .site-header .site-title,.site-header .site-title a{color:#171717;}.header-bar,.header-bar .search-form input,.header-social-links li:first-of-type,.header-social-links li a{border-color:#848484;}.header-bar{background-color:rgba(206, 206, 206, 1);}
  </style>
  <!-- End Make Custom CSS -->
  <link href="http://blog.nickbelhomme.com/xmlrpc.php" rel="pingback"/>
  <link href="http://blog.nickbelhomme.com/wp-content/uploads/favicon-1.ico" rel="icon"/>
 </head>
 <body class="single single-post postid-356 single-format-standard custom-background full-width branding-right">
  <div class="site-wrapper" id="site-wrapper">
   <header class="site-header header-layout-3" id="site-header" role="banner">
    <div class="header-bar">
     <div class="container">
      <a class="skip-link screen-reader-text" href="#site-content">
       Skip to content
      </a>
     </div>
    </div>
    <div class="site-header-main">
     <div class="container">
      <div class="site-branding">
       <h1 class="site-title">
        <a href="http://blog.nickbelhomme.com/" rel="home">
         Programming the new world
        </a>
       </h1>
       <span class="site-description">
        Programming your life and the net, one day at a time
       </span>
      </div>
      <form action="http://blog.nickbelhomme.com/" class="search-form" method="get" role="search">
       <label>
        <span class="screen-reader-text">
         Search for:
        </span>
        <input class="search-field" name="s" placeholder="Search" title="Press Enter to submit your search" type="search" value=""/>
       </label>
       <input class="search-submit" type="submit" value="Search"/>
      </form>
      <nav class="site-navigation" id="site-navigation" role="navigation">
       <span class="menu-toggle">
        Menu
       </span>
       <a class="skip-link screen-reader-text" href="#site-content">
        Skip to content
       </a>
       <div class="menu">
        <ul>
         <li>
          <a href="http://blog.nickbelhomme.com/">
           Home
          </a>
         </li>
         <li class="page_item page-item-2">
          <a href="http://blog.nickbelhomme.com/about">
           About
          </a>
         </li>
        </ul>
       </div>
      </nav>
     </div>
    </div>
   </header>
   <div class="site-content" id="site-content">
    <div class="container">
     <main class="site-main" id="site-main" role="main">
      <article class="post-356 post type-post status-publish format-standard hentry category-php has-author-avatar" id="post-356">
       <header class="entry-header">
        <div class="entry-author">
         <div class="entry-author-avatar">
          <a class="vcard" href="http://blog.nickbelhomme.com/author/admin">
           <img alt="" class="avatar avatar-96 photo" height="96" src="http://0.gravatar.com/avatar/480046278a6611f70d93f760426c5057?s=96&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D96&amp;r=G" width="96"/>
          </a>
         </div>
         <div class="entry-author-byline">
          by
          <a class="vcard fn" href="http://blog.nickbelhomme.com/author/admin">
           Nick Belhomme
          </a>
         </div>
        </div>
        <time class="entry-date published" datetime="2011-04-26T11:57:33+00:00">
         April 26, 2011
        </time>
        <h1 class="entry-title">
         How I explained Object Oriented Programming to my wife.
        </h1>
       </header>
       <div class="entry-content">
        <p>
         The other day I had to interview a lot of PHP developers for my role as team lead in this ultra cool Belgacom Project. I interviewed many and on their resumes they all looked to be very proficient and have a lot of years of experience. One of the things I was looking for were good PHP developers with an excellent grasp of Object Oriented Programming. All of the developers claimed to be proficient in PHP5 and some even put an OOP expert status. Yet during the interview they failed miserably. Linking my questions about Interfaces and Abstract classes to a Java interview
        </p>
        <p>
         When I told my wife about the candidates I send home she asked me why. Here is the excerpt of that conversation.
        </p>
        <style>
         div.conversationOne {background-color: #F7FAF9;}
div.conversationTwo {background-color: #F5F5FF;}
        </style>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         You keep interviewing all those PHP programmers? Arent they any
         <br/>
         good?
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         The problem is a lot of them didnt evolve with the programming language.
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         What do you mean?
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         Well PHP5 is released July 2004. That is almost 7 years ago. If you take a look at the average life cycle of an application that means a looooong time ago. Applications that still run on PHP4 are considered fossils. So how can a developer justify not to learn PHP5 and all it potential and still dare
         <br/>
         to say I am proficient in PHP5?
         <p>
          Because upgrading your server to PHP5.* is not the same as using PHP5.
         </p>
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         If upgrading your server and thus running your software on the latest build isnt PHP5 programming, then what is?
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         In PHP4 it was possible to perform object oriented programming but very limited and certain workarounds needed to be taken. That meant almost nobody used classes, and those that did, most likely did it wrong.
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         what do you mean did it wrong? A class is a class, what is more to it?
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         Well you have to know what kind of logic you have to put in a class and how to implement it nicely so you do not simply wrap procedural code within a class statement. That means keeping
         <br/>
         classes lean and small, only doing things for what they were designed.
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         What do you mean doing things for what they were designed? You decide what their design is!
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         Indeed it is the developers responsibility to think about the class its design before implementing it. This means splitting your logic in several classes which are loosely coupled.
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         What do you mean loosely coupled? I have been writing classes a long time but this is the first time I hear about that.
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         Well that is because you arent really doing oop.
         <br/>
         Where is the reusability and flexibility if everything is strongly coupled? When you try to make classes loosely coupled you try to make the dependency between two classes to a minimum. If class A must be coupled with class B it
         <br/>
         would be much nicer if you indicate the dependency using an interface and not an actual implementation.
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         What has an interface got to do with coupling?
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         An interface defines a contract listing all the public methods a class must implement so that the Client knows which methods will be available when he uses a class that implements the interface. There is a huge difference between giving a class direct knowledge of one class to another, which is based on implementation, rather than based on a contract. When a system is dependent on an actual implementation it is considered strongly coupled. In loosely coupled the client doesnt need to know which class is used as long as it implements the interface which means a new class implementing the interface can be written to replace the current dependency, without the need to change the dependent class. New and old classes can be changed interchanged freely. Strong coupling doesnt allow this.
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         aaah that makes a lot of sense. I heard about interfaces but I thought it was to let the client know which methods were available, and I never thought about the consequences or why it should be used in real life scenarios.
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         Well now you know.
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         But this raises the question about Abstract classes, they are also a kind of interface. Because you have to extend them before you can use it. And if you would use the abstract as the
         <br/>
         contract it would provide the same purpose.
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         Indeed it would, but an abstract class has implementation details which are common between all extending classes.
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         Indeed that way you are also strongly coupling the client to a definite implementation and thus when a certain common method implementation needs to change, you also need to change the client. Now that I Think about it, it would be better to let the abstract class implement the interface and make the dependency towards that.
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         Right, also besides implementing common logic in an abstract, it can also be used to enforce a kind of algorithm, without knowing all the details of the algorithm required.
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         Huh, you lost me?
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         Imagine you want to implement a web service client.
         <br/>
         You could implement everything with the Soapclient class but you could also abstract it. Creating a common interface for all your clients, SOAP, XML-RPC, etc. Then in your abstract web service class you implement
         <br/>
         all the common logic in the abstracted methods. Keep all naming abstract, the interface should be abstract such as doRequest() and not something like doSoapRequest().
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         ok but what about that algorithm?
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         Im getting there. So now that you have defined the requirements you know all the potential service clients will have a specific implementation for the doRequest(). So you make that method abstract enforcing the extending classes to implement it accordingly. Now from a client perspective you instantiate the kind of service client you need:
         <br/>
         SoapClient or Xml-Rpc and when you make the getLatestNews() method, internally the doRequest() method is called. So both classes share the same algorithm in getLatestNews and the only thing that differs is
         <br/>
         the actual implementation doRequest, but this is of no matter because the algorithm doesnt need to know that exact implementation. It only needs to know it has to call it on that exact moment in time.
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         aaaah now it becomes clear. I only knew about the shared use case for abstract classes. But I didnt know about hiding the exact algorithm details use case.
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         That is because people often do not use it correctly. Most people I know use an abstract class to create a collection of static utility functions into a class and then declare it abstract so nobody can instantiate the abstract class directly.
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         Aaaah yes static functions and properties. I like those, it gives me back the power of scripting. I have a bunch of functions I declare static and put them in a class and voila, everything is nicely packaged.
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         Wrong my young padewan. You are going to the dark force. It is a dark but powerful path you follow. But in the end it will lead to your own destruction.
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         explain!
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         Static methods are not created to facilitate your packaging needs. If you want to do packaging try namespaces using the conventional PEAR naming convention, Vendor_Package_Date_* or the real namespace deal introduced in PHP5.3, which is already almost 2 years old Static
         <br/>
         methods are created to assist in creating instances of a specific class. A class with a private constructor can never be instantiated and is thus useless, unless it can be instantiated using a public static method. The
         <br/>
         only purpose of this method is to check whether an instance already exist and if not create it and store it in a static property, otherwise return it immediately. This is called a singleton and will make certain
         <br/>
         only 1 occurrence or instance can exist from a certain class. Static methods are also used to create and configure instances from classes which use a common interface. Thus you do not instantiate a concrete
         <br/>
         class yourself but let a factory do this for you. So your client never knows which class is actually instantiated but it is decided through the means of a configuration detail from inside or outside the factory
         <br/>
         itself. You now see the power of interfaces? It promotes polymorphism.
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         Polymorphism isnt that some kind of alien probing creature??
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         lol, no it isnt. It is the ability to let the client work with various types. An interface can be implemented in several ways but those implementations can be interchanged freely. Even dynamically if you want.
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         Dynamically, but isnt it only possible during instantiation?
         <br/>
         I have created a small powerful game And demonstrates what you call polymorphism.  In this game I am girl who can attack zombies. I have 2 public methods: look and attack. In the beginning when I attack I use my fists. But after taking a powerup I will be able to shoot fireballs.
         <p>
          $player = Nbe_GirlVsZombie_Player_Girl;
          <br/>
          $player-&gt;attack();
          <br/>
          $player = Nbe_GirlVsZombie_Player_GirlWithDragonPunch;
          <br/>
          $player-&gt;attack();
         </p>
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         Yes it demonstrates what I call polymorphism. Both Players have a different implementation and yet can be freely swapped because the interface is your contract. But it is not really dynamic, you still have to really instantiate different types and what if you want your player
         <br/>
         to all of the sudden have night vision? You would have to create another player type. It would grow exponentially and become a nightmare to handle Better to do that dynamically using a strategy, injecting the behavior you need at the fly.
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         oooh that is sooo cool.
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         isnt it? Well I would get me a girl instance using a factory:
         <br/>
         $player = Nbe_GirlVsZombie_Player::factory();
         <br/>
         $player-&gt;setAttack(Nbe_GirlVsZombie_Player::factory(fist));
         <br/>
         $player-&gt;attack();
         <br/>
         $player-&gt;setAttack(Nbe_GirlVsZombie_Attack::factory(dragonPunch));
         <br/>
         $player-&gt;attack();
         <br/>
         $player-&gt;attack();
         <br/>
         $player-&gt;setVision(Nbe_GirlVsZombie_Vision::factory(night));
         <br/>
         $player-&gt;look();
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         In this example you see polymorphism, static methods and interfaces being used. You see how Object oriented programming is so much more than just a class and some code in it. You need to really think and put logic where it is needs to be put. You do not want to put the code of an attack in the player its class because that would be putting the logic in the wrong place. The attack function should
         <br/>
         delegate the attack to attack instance but not through a strongly coupled design decision but through a loosely coupled design by using an Nbe_GirlVsZombie_Attack_Interface which every attack must implement.
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         I hope this is all become a little bit clear.
        </div>
        <div class="conversationOne">
         <strong>
          Chanie:
         </strong>
         ooh yes it has become clear I still have a lot to learn, but thanks to this conversation I have a better understanding and I am eager to put it in practice.
        </div>
        <div class="conversationTwo">
         <strong>
          Nick:
         </strong>
         glad to hear that! Have fun with OOP!
        </div>
        <p>
         Well that was my complete conversation. Of course a potential team member has to have a lot more than good OOP skills, he or she will have to have the right social skills and mentality. OOP you can learn, but
         <br/>
         behavior skills are a little harder to tackle
        </p>
        <p>
         Sunny Greetings,
         <br/>
         Nick Belhomme
        </p>
       </div>
       <footer class="entry-footer">
        <i class="fa fa-file">
        </i>
        <ul class="post-categories">
         <li>
          <a href="http://blog.nickbelhomme.com/category/php" rel="category tag">
           PHP
          </a>
         </li>
        </ul>
       </footer>
      </article>
      <nav class="navigation post-navigation" role="navigation">
       <span class="screen-reader-text">
        Post navigation
       </span>
       <div class="nav-links">
        <div class="nav-previous">
         <a href="http://blog.nickbelhomme.com/php/quality-assurance-in-php-projects_382" rel="next">
          Quality Assurance in PHP projects
         </a>
        </div>
        <div class="nav-next">
         <a href="http://blog.nickbelhomme.com/php/mastering-namespaces-in-php-at-phpbenelux-conference_336" rel="prev">
          Mastering Namespaces in PHP at PHPBenelux Conference
         </a>
        </div>
       </div>
      </nav>
      <div class="comments-area" id="comments">
       <div class="comment-respond" id="respond">
        <h3 class="comment-reply-title" id="reply-title">
         Leave a Reply
         <small>
          <a href="/php/how-i-explained-object-oriented-programming-to-my-wife_356#respond" id="cancel-comment-reply-link" rel="nofollow" style="display:none;">
           Cancel reply
          </a>
         </small>
        </h3>
        <form action="http://blog.nickbelhomme.com/wp-comments-post.php" class="comment-form" id="commentform" method="post" novalidate="">
         <p class="comment-notes">
          <span id="email-notes">
           Your email address will not be published.
          </span>
          Required fields are marked
          <span class="required">
           *
          </span>
         </p>
         <p class="comment-form-author">
          <label for="author">
           Name
           <span class="required">
            *
           </span>
          </label>
          <input aria-required="true" id="author" name="author" size="30" type="text" value=""/>
         </p>
         <p class="comment-form-email">
          <label for="email">
           Email
           <span class="required">
            *
           </span>
          </label>
          <input aria-describedby="email-notes" aria-required="true" id="email" name="email" size="30" type="email" value=""/>
         </p>
         <p class="comment-form-url">
          <label for="url">
           Website
          </label>
          <input id="url" name="url" size="30" type="url" value=""/>
         </p>
         <p class="comment-form-comment">
          <label for="comment">
           Comment
          </label>
          <textarea aria-describedby="form-allowed-tags" aria-required="true" cols="45" id="comment" name="comment" rows="8">
          </textarea>
         </p>
         <p class="form-allowed-tags" id="form-allowed-tags">
          You may use these
          <abbr title="HyperText Markup Language">
           HTML
          </abbr>
          tags and attributes:
          <code>
           &lt;a href="" title=""&gt; &lt;abbr title=""&gt; &lt;acronym title=""&gt; &lt;b&gt; &lt;blockquote cite=""&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=""&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=""&gt; &lt;strike&gt; &lt;strong&gt;
          </code>
         </p>
         <p class="form-submit">
          <input class="submit" id="submit" name="submit" type="submit" value="Post Comment"/>
          <input id="comment_post_ID" name="comment_post_ID" type="hidden" value="356"/>
          <input id="comment_parent" name="comment_parent" type="hidden" value="0"/>
         </p>
         <p style="display: none;">
          <input id="akismet_comment_nonce" name="akismet_comment_nonce" type="hidden" value="15e1e1e0a5"/>
         </p>
         <p style="display: none;">
          <input id="ak_js" name="ak_js" type="hidden" value="228"/>
         </p>
        </form>
       </div>
       <!-- #respond -->
      </div>
     </main>
    </div>
   </div>
   <footer class="site-footer footer-layout-1" id="site-footer" role="contentinfo">
    <div class="container">
     <div class="site-info">
      <span class="theme-name">
       Make: A WordPress template
      </span>
      <span class="theme-by">
       by
      </span>
      <span class="theme-author">
       <a href="https://thethemefoundry.com/" title="The Theme Foundry homepage">
        The Theme Foundry
       </a>
      </span>
     </div>
     <ul class="social-customizer social-links footer-social-links">
      <li class="rss">
       <a href="http://blog.nickbelhomme.com/feed">
        <i class="fa fa-fw fa-rss">
         <span>
          RSS
         </span>
        </i>
       </a>
      </li>
     </ul>
    </div>
   </footer>
  </div>
  <script src="http://blog.nickbelhomme.com/wp-content/plugins/akismet/_inc/form.js?ver=3.1.1" type="text/javascript">
  </script>
  <script src="http://blog.nickbelhomme.com/wp-content/themes/make/js/libs/cycle2/jquery.cycle2.min.js?ver=1.5.1" type="text/javascript">
  </script>
  <script type="text/javascript">
   /* &lt;![CDATA[ */
var ttfmakeFitVids = {"selectors":"iframe[src*='www.viddler.com'],iframe[src*='money.cnn.com'],iframe[src*='www.educreations.com'],iframe[src*='\/\/blip.tv'],iframe[src*='\/\/embed.ted.com'],iframe[src*='\/\/www.hulu.com']"};
/* ]]&gt; */
  </script>
  <script src="http://blog.nickbelhomme.com/wp-content/themes/make/js/libs/fitvids/jquery.fitvids.min.js?ver=1.1" type="text/javascript">
  </script>
  <script src="http://blog.nickbelhomme.com/wp-content/themes/make/js/global.min.js?ver=1.5.1" type="text/javascript">
  </script>
  <script src="http://blog.nickbelhomme.com/wp-content/themes/make/inc/formatting/dynamic-stylesheet/dynamic-stylesheet.js?ver=1.5.1" type="text/javascript">
  </script>
 </body>
</html>