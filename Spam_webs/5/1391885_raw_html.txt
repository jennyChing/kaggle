<!DOCTYPE html>
<html>
 <head>
  <title>
   How much memory does malloc(0) allocate?
  </title>
  <link href="p21.css" rel="stylesheet" type="text/css"/>
  <link href="atom.xml" rel="alternate" title="Atom feed" type="application/atom+xml"/>
 </head>
 <body>
  <div id="top">
   <div id="header">
    <a href="/" id="home">
     programming in the
     <br/>
     twenty-first century
    </a>
    <p id="tag">
     It's not about technology for its own sake. It's about being able to implement your ideas.
    </p>
   </div>
  </div>
  <div id="main">
   <div id="right">
    <p class="stuff">
     <a href="index.html">
      Newest Entry
     </a>
     <br/>
     <a href="archives.html">
      Complete Archives
     </a>
     <br/>
    </p>
    <p class="about">
     I'm James Hague, a
     <a href="56.html">
      recovering programmer
     </a>
     who has been designing video games since the 1980s.
     <a href="132.html">
      This is Why You Spent All that Time Learning to Program
     </a>
     and
     <a href="46.html">
      The Pure Tech Side is the Dark Side
     </a>
     are good places to start.
    </p>
    <p>
     <b>
      james.hague@gmail.com
     </b>
    </p>
    <p>
     <b>
      twitter
      <a href="https://twitter.com/dadgumjames">
       @dadgumjames
      </a>
     </b>
    </p>
    <p>
     Where are
     <a href="57.html">
      the comments
     </a>
     ?
    </p>
    <p>
     <a href="atom.xml">
      atom feed (for news readers)
     </a>
    </p>
   </div>
   <div id="left">
    <h1>
     How much memory does malloc(0) allocate?
    </h1>
    <p>
     On most systems, this little C program will soak up all available memory:
    </p>
    <div class="code">
     while (1) {
   malloc(0);
}
    </div>
    <p>
     so the answer is not the obvious "zero." But before getting into
     <code>
      malloc(0)
     </code>
     , let's look at the simpler case of
     <code>
      malloc(1)
     </code>
     .
    </p>
    <p>
     There's an interesting new C programmer question about
     <code>
      malloc
     </code>
     : "Given a pointer to dynamically allocated memory, how can I determine how many bytes it points to?" The answer, rather frustratingly, is "you can't." But when you call
     <code>
      free
     </code>
     on that same pointer, the memory allocator knows how big the block is, so it's stored
     <i>
      somewhere
     </i>
     . That somewhere is commonly adjacent to the allocated memory, along with any other implementation-specific data needed for the allocator.
    </p>
    <p>
     In the popular
     <code>
      dlmalloc
     </code>
     implementation, between 4 and 16 bytes of this overhead are added to a request, depending on how the library is configured and whether pointers are 32 or 64 bits. 8 bytes is a reasonable guess for a 64-bit system.
    </p>
    <p>
     To complicate matters, there's a minimum block size that can be returned by
     <code>
      malloc
     </code>
     . Alignment is one reason. If there's an integer size secretly prepended to each block, then it doesn't make sense to allocate a block smaller than an integer. But there's another reason: when a block is freed, it gets tracked somehow. Maybe it goes into a linked list, maybe a tree, maybe something fancier. Regardless, the pointers or other data to make that work have to go somewhere, and inside the just-freed block is a natural choice.
    </p>
    <p>
     In
     <code>
      dlmalloc
     </code>
     , the smallest allowed allocation is 32 bytes on a 64-bit system. Going back to the
     <code>
      malloc(1)
     </code>
     question, 8 bytes of overhead are added to our need for a single byte, and the total is smaller than the minimum of 32, so that's our answer:
     <code>
      malloc(1)
     </code>
     allocates 32 bytes.
    </p>
    <p>
     Now we can approach the case of allocating zero bytes. It turns out there's a silly debate about the right thing to do, and it hasn't been resolved, so technically allocating zero bytes is implementation-specific behavior. One side thinks that
     <code>
      malloc(0)
     </code>
     should return a null pointer and be done with it. It works, if you don't mind a null return value serving double duty. It can either mean "out of memory" or "you didn't request any memory."
    </p>
    <p>
     The more common scheme is that
     <code>
      malloc(0)
     </code>
     returns a unique pointer. You shouldn't dereference that pointer because it's conceptually pointing to zero bytes, but we know from our adventures above that at least
     <code>
      dlmalloc
     </code>
     is always going to allocate a 32 byte block on a 64-bit system, so that's the final answer: it takes 32 bytes to fulfill your request for no memory.
    </p>
    <p>
     [EDIT: I modified the last two paragraphs to correct errors pointed out in email and a discussion thread on
     <a href="http://www.reddit.com/r/programming/comments/1iv9nz/how_much_memory_does_malloc0_allocate/">
      reddit
     </a>
     . Thank you for all the feedback!]
    </p>
    <p>
     (If you liked this, you might enjoy
     <a href="141.html">
      Another Programming Idiom You've Never Heard Of
     </a>
     .)
    </p>
    <div id="footer">
     <a href="179.html" id="permalink">
      permalink
     </a>
     July 22, 2013
    </div>
    <div id="prev">
     <h1>
      Previously
     </h1>
     <a href="178.html">
      Getting Past the Cloning Instinct
     </a>
     <br/>
     <a href="177.html">
      Organizational Skills Beat Algorithmic Wizardry
     </a>
     <br/>
     <a href="176.html">
      Tips for Writing Functional Programming Tutorials
     </a>
     <br/>
     <a href="175.html">
      Getting Comfortable with the Softer Side of Development
     </a>
     <br/>
     <a href="174.html">
      Flickr's Redesign is a Series of Evolutionary Changes
     </a>
     <br/>
    </div>
   </div>
  </div>
 </body>
</html>