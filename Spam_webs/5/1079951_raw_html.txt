<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <title>
   PVS-Studio: 25 Suspicious Code Fragments in CoreCLR
  </title>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="The Microsoft corporation has recently published for free access the source code of the CoreCLR engine which is a key component of" name="description"/>
  <meta content="" name="keywords"/>
  <!--    -->
  <link href="/media/css/template.css?212518" media="screen, projection" rel="stylesheet" type="text/css"/>
  <!--[if lt IE 9]&gt;
        &lt;link rel="stylesheet" href="/media/css/ie.css" type="text/css" media="screen, projection" /&gt;
        &lt;![endif]-->
  <link href="/media/images/template/favicon.ico" rel="shortcut icon"/>
  <!-- jQuery-->
  <script src="/media/js/jquery.js" type="text/javascript">
  </script>
  <script src="/media/js/jquery.jcarousel.min.js" type="text/javascript">
  </script>
  <!--   JS- -->
  <script src="/media/js/template.js?212518" type="text/javascript">
  </script>
 </head>
 <body>
  <img id="unicorn-for-publications" src="/media/images/template/unicorn.png" style="display : none;"/>
  <!--[1]#wrapper::BEGIN-->
  <div id="wrapper">
   <!--[2]#header::BEGIN-->
   <div id="header">
    <div class="contacts b-rounded">
     <a class="el-mail" href="mailto:support@viva64.com">
      support@viva64.com
     </a>
     <a class="contact_us" href="/en/about-feedback/">
      Contact Us
     </a>
    </div>
    <div id="languages_switcher">
     <a class="el-ru" href="/ru/b/0310/">
      
     </a>
     <a class="el-en" href="/en/b/0310/">
      English
     </a>
    </div>
    <div id="promo">
     <div id="promo_left">
      <a href="/en/examples/" id="promo_img_en">
      </a>
     </div>
     <div id="promo_right">
      <h3 id="promo_title">
       <a href="/en/pvs-studio/">
        PVS-Studio
       </a>
      </h3>
      <h4 id="promo_subtitle">
       Static Code Analyzer for C/C++
      </h4>
      <!--&lt;h5 id="promo_subtitle-1"&gt;64-bit, STL, OpenMP, WinAPI, buffer overflow&lt;/h4&gt;-->
      <ul class="listreset listhorizontal">
       <li>
        <a href="/en/pvs-studio/">
         Product page
        </a>
       </li>
       <li>
        <a href="/en/d/">
         Documentation
        </a>
       </li>
       <li>
        <a href="/en/d/0304/">
         Troubleshooting FAQ
        </a>
       </li>
      </ul>
      <a class="button_big button_download" href="/en/pvs-studio-download/" title="Download and try">
       <span class="el-download_big">
        Download and try
       </span>
      </a>
      <a class="button_big" href="/en/order/" title="Buy">
       <span class="el-buy_big">
        Buy
       </span>
      </a>
     </div>
    </div>
   </div>
   <!--[2]#header::END-->
   <!--[2]#content_wrap::BEGIN-->
   <div id="content_wrap">
    <div id="sidebar">
     <h3 class="sidebar_title">
      <a href="/en/b">
       Blog:
      </a>
     </h3>
     <ul class="listreset listdotted listblock">
      <li>
       <div class="el-date">
        04.07.2015
       </div>
       <h5 class="itemtitle">
        <a class="itemtitle_link" href="/en/b/0337/">
         HPX and PVS-Studio
        </a>
       </h5>
       <p class="itemtext">
        This article was originally published at STE||AR Group Blog. Republished by the editors' permission..
       </p>
       <a class="el-readmore" href="/en/b/0337/" title="Read more">
        Read more
       </a>
      </li>
      <li>
       <div class="el-date">
        27.06.2015
       </div>
       <h5 class="itemtitle">
        <a class="itemtitle_link" href="/en/b/0336/">
         How Do Programs Run with All Those Bugs At All?
        </a>
       </h5>
       <p class="itemtext">
        Our team analyzes lots of open-source projects to demonstrate the diagnostic capabilities of the PVS-Studio analyzer. After reading our articles, ...
       </p>
       <a class="el-readmore" href="/en/b/0336/" title="Read more">
        Read more
       </a>
      </li>
      <li>
       <div class="el-date">
        26.06.2015
       </div>
       <h5 class="itemtitle">
        <a class="itemtitle_link" href="/en/b/0335/">
         Why Don't Software Developers Use Static Analysis Tools to Find Bugs?
        </a>
       </h5>
       <p class="itemtext">
        Using static analysis tools for automating code inspections can be beneficial for software engineers. Such tools can make finding bugs, ...
       </p>
       <a class="el-readmore" href="/en/b/0335/" title="Read more">
        Read more
       </a>
      </li>
     </ul>
     <h3 class="sidebar_title">
      <a href="/en/a">
       Featured:
      </a>
     </h3>
     <ul class="listreset listdotted listblock">
      <li>
       <div class="el-date">
        02.06.2015
       </div>
       <h5 class="itemtitle">
        <a class="itemtitle_link" href="/en/a/0084/">
         An always up-to-date list of articles describing errors that we find in open source projects with PVS-Studio analyzer
        </a>
       </h5>
       <p class="itemtext">
        It contains articles describing the errors that were discovered by analyzing different open-source projects.
       </p>
       <a class="el-readmore" href="/en/a/0084/" title="Read more">
        Read more
       </a>
      </li>
      <li>
       <div class="el-date">
        05.01.2015
       </div>
       <h5 class="itemtitle">
        <a class="itemtitle_link" href="/en/a/0085/">
         Readers' FAQ on Articles about PVS-Studio, 2015
        </a>
       </h5>
       <p class="itemtext">
        In the comments to our articles, readers would often ask the same questions. We decided to make a FAQ to ...
       </p>
       <a class="el-readmore" href="/en/a/0085/" title="Read more">
        Read more
       </a>
      </li>
      <li>
       <div class="el-date">
        12.03.2014
       </div>
       <h5 class="itemtitle">
        <a class="itemtitle_link" href="/en/a/0086/">
         How we compared code analyzers: CppCat, Cppcheck, PVS-Studio and Visual Studio
        </a>
       </h5>
       <p class="itemtext">
        We have carried out a thorough comparison of four analyzers for C/C++ code: CppCat, Cppcheck, PVS-Studio and Visual Studio's built-in ...
       </p>
       <a class="el-readmore" href="/en/a/0086/" title="Read more">
        Read more
       </a>
      </li>
     </ul>
     <h3 class="sidebar_title">
      <a href="https://twitter.com/Code_Analysis">
       Follow our CTO:
      </a>
     </h3>
     <a class="twitter-timeline" data-chrome="nofooter" data-widget-id="357393989256769536" href="https://twitter.com/Code_Analysis">
      Tweets by @Code_Analysis
     </a>
     <script type="text/javascript">
      var userAgent = navigator.userAgent;
                        if (userAgent &amp;&amp; userAgent.indexOf("MSIE 7.0") === -1) {
                            !function (d, s, id) {
                                var js, fjs = d.getElementsByTagName(s)[0], p = /^http:/.test(d.location) ? 'http' : 'https';
                                if (!d.getElementById(id)) {
                                    js = d.createElement(s);
                                    js.id = id;
                                    js.src = p + '://platform.twitter.com/widgets.js?212518';
                                    fjs.parentNode.insertBefore(js, fjs);
                                }
                            }(document, 'script', 'twitter-wjs');
                        }
     </script>
    </div>
    <!--[3]#container, #content::BEGIN-->
    <div id="container">
     <div id="content">
      <div class="breadcrumbs">
       <div class="b-breadcrumbs">
        <ul class="breadcrumbs listreset">
         <li class="breadcrumbs_item breadcrumbs_home">
          <a class="breadcrumbs_link" href="/en/" title="Home">
           Home
          </a>
         </li>
         <li class="breadcrumbs_item">
          <a class="breadcrumbs_link" href="/en/b/" title="Blog">
           Blog
          </a>
         </li>
         <li class="breadcrumbs_item breadcrumbs_last">
          PVS-Studio: 25 Suspicious Code Fragments in CoreCLR
         </li>
        </ul>
       </div>
      </div>
      <div class="item_title">
       <!--
-->
       <h1>
        PVS-Studio: 25 Suspicious Code Fragments in CoreCLR
       </h1>
      </div>
      <div class="item_info">
       <span class="el-date">
        17.03.2015
       </span>
       <!--
			
				Author
			-->
       <a href="/en/b/a/svyatoslav-razmyslov">
        Svyatoslav Razmyslov
       </a>
      </div>
      <div class="item_text">
       <script src="/media/js/run_prettify.js">
       </script>
       <ul class="content-list-1">
        <li>
         <a href="#ID0E4OAC">
          Introduction
         </a>
        </li>
        <li>
         <a href="#ID0EVXAE">
          Typos
         </a>
        </li>
        <li>
         <a href="#ID0EIXDI">
          Constructor initialization list
         </a>
        </li>
        <li>
         <a href="#ID0ELMBK">
          A false yet useful warning
         </a>
        </li>
        <li>
         <a href="#ID0EMCDK">
          A 64-bit error
         </a>
        </li>
        <li>
         <a href="#ID0EYFFK">
          "Retired" code
         </a>
        </li>
        <li>
         <a href="#ID0E2OAM">
          Undefined behavior
         </a>
        </li>
        <li>
         <a href="#ID0ERXCM">
          Incorrect sizeof(xx)
         </a>
        </li>
        <li>
         <a href="#ID0EGMEM">
          The family of "memFAIL" functions
         </a>
        </li>
        <li>
         <a href="#ID0E5BJM">
          Pointers
         </a>
        </li>
        <li>
         <a href="#ID0ENFLM">
          Excessive checks
         </a>
        </li>
        <li>
         <a href="#ID0EYGBO">
          Conclusion
         </a>
        </li>
       </ul>
       <div class="div-image">
        <img alt="Picture 2" src="/media/images/content/b/0310_CoreCLR/image1.png"/>
       </div>
       <p>
        The Microsoft corporation has recently published for free access the source code of the CoreCLR engine which is a key component of .NET Core. We couldn't but pay attention to this event. The wider a project's audience is, the worse defects found in the code will seem, won't they? Despite Microsoft themselves being the authors of the product, there are still some issues to examine and think over in their code - just like in any other large project.
       </p>
       <h2>
        Introduction
        <a name="ID0E4OAC">
        </a>
       </h2>
       <p>
        <a class="link-outer" href="https://github.com/dotnet/coreclr" target="_blank">
         CoreCLR
        </a>
        is a runtime environment of .NET Core performing such functions as garbage collection or compilation into target machine code. .Net Core is a modular implementation of .Net that can be used as the base stack for a wide variety of scenarios.
       </p>
       <p>
        The source code has recently been uploaded to GitHub and was analyzed by
        <a class="link-inner" href="/en/pvs-studio/">
         PVS-Studio
        </a>
        5.23. Just like me, anyone interested can get the complete analysis log through Microsoft Visual Studio Community Edition, whose release is another recent
        <a class="link-inner" href="/en/n/0102/">
         event
        </a>
        by Microsoft.
       </p>
       <h2>
        Typos
        <a name="ID0EVXAE">
        </a>
       </h2>
       <p>
        The custom has it that I start my reports with the typos section. Errors of this type have to do with duplicated variables, constants, macros or structure/class fields in conditional expressions. Whether or not there is a real error is a subject for debates. Nevertheless, we found a couple of such fragments in the project and they do look strange.
       </p>
       <p>
        <a class="link-inner" href="/en/d/0090/">
         V501
        </a>
        There are identical sub-expressions 'tree-&gt;gtOper == GT_CLS_VAR' to the left and to the right of the '||' operator. ClrJit lsra.cpp 3140
       </p>
       <pre class="clear">
        <code>
         // register variable 
GTNODE(GT_REG_VAR      , "regVar"  ,0,GTK_LEAF|GTK_LOCAL)
// static data member
GTNODE(GT_CLS_VAR      , "clsVar"  ,0,GTK_LEAF)
// static data member address
GTNODE(GT_CLS_VAR_ADDR , "&amp;clsVar" ,0,GTK_LEAF)           
....

void  LinearScan::buildRefPositionsForNode(GenTree *tree, ....)
{
  ....
  if ((tree-&gt;gtOper == GT_CLS_VAR ||
       tree-&gt;gtOper == GT_CLS_VAR) &amp;&amp; i == 1)
  {
      registerType = TYP_PTR;
      currCandidates = allRegs(TYP_PTR);
  }
  ....
}
        </code>
       </pre>
       <p>
        Although the 'GenTree' structure has a field with a similar name "tree-&gt;gtType", this field has a different type than "tree-&gt;gtOper". I guess the mistake was made by copying the constant. That is, there should be another constant besides GT_CLS_VAR in the expression.
       </p>
       <p>
        <a class="link-inner" href="/en/d/0090/">
         V501
        </a>
        There are identical sub-expressions 'DECODE_PSP_SYM' to the left and to the right of the '|' operator. daccess 264
       </p>
       <pre class="clear">
        <code>
         enum GcInfoDecoderFlags
{
    DECODE_SECURITY_OBJECT       = 0x01,
    DECODE_CODE_LENGTH           = 0x02,
    DECODE_VARARG                = 0x04,
    DECODE_INTERRUPTIBILITY      = 0x08,
    DECODE_GC_LIFETIMES          = 0x10,
    DECODE_NO_VALIDATION         = 0x20,
    DECODE_PSP_SYM               = 0x40,
    DECODE_GENERICS_INST_CONTEXT = 0x80,
    DECODE_GS_COOKIE             = 0x100,   
    DECODE_FOR_RANGES_CALLBACK   = 0x200,
    DECODE_PROLOG_LENGTH         = 0x400,
    DECODE_EDIT_AND_CONTINUE     = 0x800,
};

size_t GCDump::DumpGCTable(PTR_CBYTE table, ....)
{
  GcInfoDecoder hdrdecoder(table,
   (GcInfoDecoderFlags)(  DECODE_SECURITY_OBJECT
                        | DECODE_GS_COOKIE
                        | DECODE_CODE_LENGTH
                        | DECODE_PSP_SYM                //&lt;==1
                        | DECODE_VARARG
                        | DECODE_PSP_SYM                //&lt;==1
                        | DECODE_GENERICS_INST_CONTEXT  //&lt;==2
                        | DECODE_GC_LIFETIMES
                        | DECODE_GENERICS_INST_CONTEXT  //&lt;==2
                        | DECODE_PROLOG_LENGTH),
   0);
  ....
}
        </code>
       </pre>
       <p>
        Here we have even two duplicated constants although the "GcInfoDecoderFlags" enumeration includes other constants which are not used in the condition.
       </p>
       <p>
        Other similar fragments:
       </p>
       <ul class=" list-level0 list-bullet">
        <li>
         V501 There are identical sub-expressions 'varLoc1.vlStk2.vls2BaseReg' to the left and to the right of the '==' operator. cee_wks util.cpp 657
        </li>
        <li>
         V501 There are identical sub-expressions 'varLoc1.vlStk2.vls2Offset' to the left and to the right of the '==' operator. cee_wks util.cpp 658
        </li>
        <li>
         V501 There are identical sub-expressions 'varLoc1.vlFPstk.vlfReg' to the left and to the right of the '==' operator. cee_wks util.cpp 661
        </li>
       </ul>
       <p>
        <a class="link-inner" href="/en/d/0339/">
         V700
        </a>
        Consider inspecting the 'T foo = foo = ...' expression. It is odd that variable is initialized through itself. cee_wks zapsig.cpp 172
       </p>
       <pre class="clear">
        <code>
         BOOL ZapSig::GetSignatureForTypeHandle(....)
{
  ....
  CorElementType elemType = elemType =
    TryEncodeUsingShortcut(pMT);
  ....
}
        </code>
       </pre>
       <p>
        Seems just like an excessive assignment, but errors like this are often made when copying code, the programmer forgetting to rename some entity. Anyway, the code doesn't make sense that way.
       </p>
       <p>
        <a class="link-inner" href="/en/d/0112/">
         V523
        </a>
        The 'then' statement is equivalent to the 'else' statement. cee_wks threadsuspend.cpp 2468
       </p>
       <pre class="clear">
        <code>
         enum __MIDL___MIDL_itf_mscoree_0000_0004_0001
{
  OPR_ThreadAbort = 0,
  OPR_ThreadRudeAbortInNonCriticalRegion = .... ,
  OPR_ThreadRudeAbortInCriticalRegion = ....) ,
  OPR_AppDomainUnload = .... ,
  OPR_AppDomainRudeUnload = ( OPR_AppDomainUnload + 1 ) ,
  OPR_ProcessExit = ( OPR_AppDomainRudeUnload + 1 ) ,
  OPR_FinalizerRun = ( OPR_ProcessExit + 1 ) ,
  MaxClrOperation = ( OPR_FinalizerRun + 1 ) 
}  EClrOperation;

void Thread::SetRudeAbortEndTimeFromEEPolicy()
{
  LIMITED_METHOD_CONTRACT;
  DWORD timeout;
  if (HasLockInCurrentDomain())
  {
    timeout = GetEEPolicy()-&gt;
      GetTimeout(OPR_ThreadRudeAbortInCriticalRegion);  //&lt;==
  }
  else
  {
    timeout = GetEEPolicy()-&gt;
      GetTimeout(OPR_ThreadRudeAbortInCriticalRegion);  //&lt;==
  }
  ....
}
        </code>
       </pre>
       <p>
        This diagnostic detects identical blocks in if/else constructs. And here we are also dealing with what seems to be a typo in a constant. In the first case, as suggested by the logic of the code, it is "OPR_ThreadRudeAbortInNonCriticalRegion" that fits here best.
       </p>
       <p>
        Other similar fragments:
       </p>
       <ul class=" list-level0 list-bullet">
        <li>
         V523 The 'then' statement is equivalent to the 'else' statement. ClrJit instr.cpp 3427
        </li>
        <li>
         V523 The 'then' statement is equivalent to the 'else' statement. ClrJit flowgraph.cpp 18815
        </li>
        <li>
         V523 The 'then' statement is equivalent to the 'else' statement. daccess dacdbiimpl.cpp 6374
        </li>
       </ul>
       <h2>
        Constructor initialization list
        <a name="ID0EIXDI">
        </a>
       </h2>
       <p>
        <a class="link-inner" href="/en/d/0300/">
         V670
        </a>
        The uninitialized class member 'gcInfo' is used to initialize the 'regSet' member. Remember that members are initialized in the order of their declarations inside a class. ClrJit codegencommon.cpp 92
       </p>
       <pre class="clear">
        <code>
         CodeGenInterface *getCodeGenerator(Compiler *comp);

class CodeGenInterface
{
    friend class emitter;

public:
    ....
    RegSet  regSet; //&lt;=== line 91
    ....
public:
    GCInfo  gcInfo; //&lt;=== line 322
....
};

// CodeGen constructor
CodeGenInterface::CodeGenInterface(Compiler* theCompiler) :
    compiler(theCompiler),
    gcInfo(theCompiler),
    regSet(theCompiler, gcInfo)
{
}
        </code>
       </pre>
       <p>
        Under the standard, the class members are initialized in the constructor in the same order as they are declared in the class. To fix the error, we should move the declaration of the 'gcInfo' class member above that of 'regSet'.
       </p>
       <h2>
        A false yet useful warning
        <a name="ID0ELMBK">
        </a>
       </h2>
       <p>
        V705 It is possible that 'else' block was forgotten or commented out, thus altering the program's operation logics. daccess daccess.cpp 2979
       </p>
       <pre class="clear">
        <code>
         HRESULT Initialize()
{
  if (hdr.dwSig == sig)
  {
      m_rw = eRO;
      m_MiniMetaDataBuffSizeMax = hdr.dwTotalSize;
      hr = S_OK;
  }
  else
  // when the DAC initializes this for the case where the target is 
  // (a) a live process, or (b) a full dump, buff will point to a
  // zero initialized memory region (allocated w/ VirtualAlloc)
  if (hdr.dwSig == 0 &amp;&amp; hdr.dwTotalSize == 0 &amp;&amp; hdr.dwCntStreams == 0)
  {
      hr = S_OK;
  }
  // otherwise we may have some memory corruption. treat this as
  // a liveprocess/full dump
  else
  {
      hr = S_FALSE;
  }
  ....
}
        </code>
       </pre>
       <p>
        The analyzer has detected a suspicious code fragment. You can see that the code is commented ON and everything works fine. But errors like that are very frequent when the code after 'else' is commented OUT, the operator following it becoming a part of the condition. There is no error in this particular case but it might well appear there when editing this fragment in the future.
       </p>
       <h2>
        A 64-bit error
        <a name="ID0EMCDK">
        </a>
       </h2>
       <p>
        <a class="link-inner" href="/en/d/0306/">
         V673
        </a>
        The '0xefefefef &lt;&lt; 28' expression evaluates to 1080581331517177856. 60 bits are required to store the value, but the expression evaluates to the 'unsigned' type which can only hold '32' bits. cee_dac _dac object.inl 95
       </p>
       <pre class="clear">
        <code>
         inline void Object::EnumMemoryRegions(void)
{
  ....
  SIZE_T size = sizeof(ObjHeader) + sizeof(Object);
  ....
  size |= 0xefefefef &lt;&lt; 28;
  ....
}
        </code>
       </pre>
       <p>
        For the definition of the term "64-bit error", please see this
        <a class="link-inner" href="/en/t/0002/">
         note
        </a>
        . In the example above, after the shift, the "size |= 0xf0000000" operation will be executed in the 32-bit program and "size |= 0x00000000f0000000" in the 64-bit one. The programmer most likely wanted the following calculations to be done in the 64-bit program: "size |= 0x0efefefef0000000". But where have we lost the most significant part of the number?
       </p>
       <p>
        The number "0xefefefef" has the 'unsigned' type as it doesn't fit into the 'int' type. A shift of a 32-bit number occurs, which results in unsigned 0xf0000000. Then this unsigned number is extended to SIZE_T and we get 0x00000000f0000000.
       </p>
       <p>
        To have the code to work right, we need to execute an explicit type conversion first. This is the fixed code:
       </p>
       <pre class="clear">
        <code>
         inline void Object::EnumMemoryRegions(void)
{
  ....
  SIZE_T size = sizeof(ObjHeader) + sizeof(Object);
  ....
  size |= SIZE_T(0xefefefef) &lt;&lt; 28;
  ....
}
        </code>
       </pre>
       <p>
        Another issue of that kind:
       </p>
       <ul class=" list-level0 list-bullet">
        <li>
         V673 The '0xefefefef &lt;&lt; 28' expression evaluates to 1080581331517177856. 60 bits are required to store the value, but the expression evaluates to the 'unsigned' type which can only hold '32' bits. cee_dac dynamicmethod.cpp 807
        </li>
       </ul>
       <h2>
        "Retired" code
        <a name="ID0EYFFK">
        </a>
       </h2>
       <p>
        Sometimes you may find conditions that literally contradict each other.
       </p>
       <p>
        <a class="link-inner" href="/en/d/0255/">
         V637
        </a>
        Two opposite conditions were encountered. The second condition is always false. Check lines: 31825, 31827. cee_wks gc.cpp 31825
       </p>
       <pre class="clear">
        <code>
         void gc_heap::verify_heap (BOOL begin_gc_p)
{
  ....
  if (brick_table [curr_brick] &lt; 0)
  {
    if (brick_table [curr_brick] == 0)
    {
      dprintf(3, ("curr_brick %Ix for object %Ix set to 0",
              curr_brick, (size_t)curr_object));
      FATAL_GC_ERROR();
    }
    ....
  }
  ....
}
        </code>
       </pre>
       <p>
        This code never gets control but it doesn't look that critical as in the following example:
       </p>
       <p>
        <a class="link-inner" href="/en/d/0106/">
         V517
        </a>
        The use of 'if (A) {...} else if (A) {...}' pattern was detected. There is a probability of logical error presence. Check lines: 2353, 2391. utilcode util.cpp 2353
       </p>
       <pre class="clear">
        <code>
         void  PutIA64Imm22(UINT64 * pBundle, UINT32 slot, INT32 imm22)
{
  if (slot == 0)
  {
    const UINT64 mask0 = UI64(0xFFFFFC000603FFFF);
    /* Clear all bits used as part of the imm22 */
    pBundle[0] &amp;= mask0;

    UINT64 temp0;
    
    temp0  = (UINT64) (imm22 &amp; 0x200000) &lt;&lt; 20;     //  1 s
    temp0 |= (UINT64) (imm22 &amp; 0x1F0000) &lt;&lt; 11;     //  5 imm5c
    temp0 |= (UINT64) (imm22 &amp; 0x00FF80) &lt;&lt; 25;     //  9 imm9d
    temp0 |= (UINT64) (imm22 &amp; 0x00007F) &lt;&lt; 18;     //  7 imm7b
    
    /* Or in the new bits used in the imm22 */
    pBundle[0] |= temp0;
  }
  else if (slot == 1)
  {
    ....
  }
  else if (slot == 0)        //&lt;==
  {
    const UINT64 mask1 = UI64(0xF000180FFFFFFFFF);
    /* Clear all bits used as part of the imm22 */
    pBundle[1] &amp;= mask1;

    UINT64 temp1;
    
    temp1  = (UINT64) (imm22 &amp; 0x200000) &lt;&lt; 37;     //  1 s
    temp1 |= (UINT64) (imm22 &amp; 0x1F0000) &lt;&lt; 32;     //  5 imm5c
    temp1 |= (UINT64) (imm22 &amp; 0x00FF80) &lt;&lt; 43;     //  9 imm9d
    temp1 |= (UINT64) (imm22 &amp; 0x00007F) &lt;&lt; 36;     //  7 imm7b
    
    /* Or in the new bits used in the imm22 */
    pBundle[1] |= temp1;
  }
  FlushInstructionCache(GetCurrentProcess(),pBundle,16);
}
        </code>
       </pre>
       <p>
        Perhaps it is a very important piece of code that never gets control because of a bug in the cascade of conditional operators.
       </p>
       <p>
        Other suspicious fragments:
       </p>
       <ul class=" list-level0 list-bullet">
        <li>
         V637 Two opposite conditions were encountered. The second condition is always false. Check lines: 2898, 2900. daccess nidump.cpp 2898
        </li>
        <li>
         V637 Two opposite conditions were encountered. The second condition is always false. Check lines: 337, 339. utilcode prettyprintsig.cpp 337
        </li>
        <li>
         V637 Two opposite conditions were encountered. The second condition is always false. Check lines: 774, 776. utilcode prettyprintsig.cpp 774
        </li>
       </ul>
       <h2>
        Undefined behavior
        <a name="ID0E2OAM">
        </a>
       </h2>
       <p>
        <a class="link-inner" href="/en/d/0225/">
         V610
        </a>
        Undefined behavior. Check the shift operator '&lt;&lt;'. The left operand '-1' is negative. bcltype metamodel.h 532
       </p>
       <pre class="clear">
        <code>
         inline static mdToken decodeToken(....)
{
    //&lt;TODO&gt;@FUTURE: make compile-time calculation&lt;/TODO&gt;
    ULONG32 ix = (ULONG32)(val &amp; ~(-1 &lt;&lt; m_cb[cTokens]));

    if (ix &gt;= cTokens)
        return rTokens[0];
    return TokenFromRid(val &gt;&gt; m_cb[cTokens], rTokens[ix]);
}
        </code>
       </pre>
       <p>
        The analyzer has detected a negative-number shift causing undefined behavior.
       </p>
       <p>
        V610 Undefined behavior. Check the shift operator '&lt;&lt;'. The left operand '(~0)' is negative. cee_dac decodemd.cpp 456
       </p>
       <pre class="clear">
        <code>
         #define bits_generation 2
#define generation_mask (~(~0 &lt;&lt; bits_generation))

#define MASK(len) (~((~0)&lt;&lt;len))
#define MASK64(len) ((~((~((unsigned __int64)0))&lt;&lt;len)))

void Encoder::Add(unsigned value, unsigned length)
{
  ....
  value = (value &amp; MASK(length));
  ....
}
        </code>
       </pre>
       <p>
        Thanks to the V610 message, I discovered a number of incorrect macros. '~0' is cast to a signed negative number of the int type after which a shift is executed. Just like in one of the macros, an explicit conversion to the unsigned type is necessary:
       </p>
       <pre class="clear">
        <code>
         #define bits_generation 2
#define generation_mask (~(~((unsigned int)0) &lt;&lt; bits_generation))

#define MASK(len) (~((~((unsigned int)0))&lt;&lt;len))
#define MASK64(len) ((~((~((unsigned __int64)0))&lt;&lt;len)))
        </code>
       </pre>
       <h2>
        Incorrect sizeof(xx)
        <a name="ID0ERXCM">
        </a>
       </h2>
       <p>
        <a class="link-inner" href="/en/d/0181/">
         V579
        </a>
        The DacReadAll function receives the pointer and its size as arguments. It is possibly a mistake. Inspect the third argument. daccess dacimpl.h 1688
       </p>
       <pre class="clear">
        <code>
         template&lt;class T&gt;
inline bool MisalignedRead(CORDB_ADDRESS addr, T *t)
{
  return SUCCEEDED(DacReadAll(TO_TADDR(addr), t, sizeof(t), false));
}
        </code>
       </pre>
       <p>
        Here's just a small function that always takes the pointer size. The programmer most likely intended to write it like "sizeof(*t)", or maybe "sizeof(T)".
       </p>
       <p>
        Another good example:
       </p>
       <p>
        <a class="link-inner" href="/en/d/0181/">
         V579
        </a>
        The Read function receives the pointer and its size as arguments. It is possibly a mistake. Inspect the third argument. util.cpp 4943
       </p>
       <pre class="clear">
        <code>
         HRESULT GetMTOfObject(TADDR obj, TADDR *mt)
{
  if (!mt)
    return E_POINTER;

  HRESULT hr = rvCache-&gt;Read(obj, mt, sizeof(mt), NULL);
  if (SUCCEEDED(hr))
    *mt &amp;= ~3;

  return hr;
}
        </code>
       </pre>
       <h2>
        The family of "memFAIL" functions
        <a name="ID0EGMEM">
        </a>
       </h2>
       <p>
        When using memXXX-functions, one risks making a variety of mistakes. The analyzer provides a number of diagnostic rules to detect such fragments.
       </p>
       <p>
        <a class="link-inner" href="/en/d/0101/">
         V512
        </a>
        A call of the 'memset' function will lead to underflow of the buffer 'pAddExpression'. sos strike.cpp 11973
       </p>
       <pre class="clear">
        <code>
         DECLARE_API(Watch)
{
  ....
  if(addExpression.data != NULL || aExpression.data != NULL)
  {
    WCHAR pAddExpression[MAX_EXPRESSION];
    memset(pAddExpression, 0, MAX_EXPRESSION);
    swprintf_s(pAddExpression, MAX_EXPRESSION, L"%S", ....);
    Status = g_watchCmd.Add(pAddExpression);
  }
  ....
}
        </code>
       </pre>
       <p>
        A very common bug when programmers forget to allow for the type size:
       </p>
       <pre class="clear">
        <code>
         WCHAR pAddExpression[MAX_EXPRESSION];
memset(pAddExpression, 0, sizeof(WCHAR)*MAX_EXPRESSION);
        </code>
       </pre>
       <p>
        Other similar fragments:
       </p>
       <ul class=" list-level0 list-bullet">
        <li>
         V512 A call of the 'memset' function will lead to underflow of the buffer 'pSaveName'. sos strike.cpp 11997
        </li>
        <li>
         V512 A call of the 'memset' function will lead to underflow of the buffer 'pOldName'. sos strike.cpp 12013
        </li>
        <li>
         V512 A call of the 'memset' function will lead to underflow of the buffer 'pNewName'. sos strike.cpp 12016
        </li>
        <li>
         V512 A call of the 'memset' function will lead to underflow of the buffer 'pExpression'. sos strike.cpp 12024
        </li>
        <li>
         V512 A call of the 'memset' function will lead to underflow of the buffer 'pFilterName'. sos strike.cpp 12039
        </li>
       </ul>
       <p>
        <a class="link-inner" href="/en/d/0209/">
         V598
        </a>
        The 'memcpy' function is used to copy the fields of 'GenTree' class. Virtual table pointer will be damaged by this. ClrJit compiler.hpp 1344
       </p>
       <pre class="clear">
        <code>
         struct GenTree
{
  ....
  #if DEBUGGABLE_GENTREE
    virtual void DummyVirt() {}
  #endif // DEBUGGABLE_GENTREE
  ....
};

void GenTree::CopyFrom(const GenTree* src, Compiler* comp)
{
  ....
  memcpy(this, src, src-&gt;GetNodeSize());
  ....
}
        </code>
       </pre>
       <p>
        When the preprocessor variable 'DEBUGGABLE_GENTREE' is declared, a virtual function is defined. Then the class contains a pointer to the virtual method table and cannot be copied that freely.
       </p>
       <p>
        <a class="link-inner" href="/en/d/0209/">
         V598
        </a>
        The 'memcpy' function is used to copy the fields of 'GCStatistics' class. Virtual table pointer will be damaged by this. cee_wks gc.cpp 287
       </p>
       <pre class="clear">
        <code>
         struct GCStatistics
    : public StatisticsBase
{
  ....
  virtual void Initialize();
  virtual void DisplayAndUpdate();
  ....
};

GCStatistics g_LastGCStatistics;

void GCStatistics::DisplayAndUpdate()
{
  ....
  memcpy(&amp;g_LastGCStatistics, this, sizeof(g_LastGCStatistics));
  ....
}
        </code>
       </pre>
       <p>
        In this fragment, incorrect copying is done in any mode, not only the debugging one.
       </p>
       <p>
        <a class="link-inner" href="/en/d/0337/">
         V698
        </a>
        Expression 'memcmp(....) == -1' is incorrect. This function can return not only the value '-1', but any negative value. Consider using 'memcmp(....) &lt; 0' instead. sos util.cpp 142
       </p>
       <pre class="clear">
        <code>
         bool operator( )(const GUID&amp; _Key1, const GUID&amp; _Key2) const
  { return memcmp(&amp;_Key1, &amp;_Key2, sizeof(GUID)) == -1; }
        </code>
       </pre>
       <p>
        It's incorrect to compare the result of the 'memcmp' function to 1 or -1. Whether or not such constructs will work depends on the libraries, compiler and its settings, the operating system and its bitness, and so on. In cases like this, you should check one of the three states: '&lt; 0', '0', or '&gt; 0'.
       </p>
       <p>
        One more issue of that kind:
       </p>
       <ul class=" list-level0 list-bullet">
        <li>
         V698 Expression 'wcscmp(....) == -1' is incorrect. This function can return not only the value '-1', but any negative value. Consider using 'wcscmp(....) &lt; 0' instead. sos strike.cpp 3855
        </li>
       </ul>
       <h2>
        Pointers
        <a name="ID0E5BJM">
        </a>
       </h2>
       <p>
        <a class="link-inner" href="/en/d/0111/">
         V522
        </a>
        Dereferencing of the null pointer 'hp' might take place. cee_wks gc.cpp 4488
       </p>
       <pre class="clear">
        <code>
         heap_segment* gc_heap::get_segment_for_loh (size_t size
#ifdef MULTIPLE_HEAPS
                                           , gc_heap* hp
#endif //MULTIPLE_HEAPS
                                           )
{
#ifndef MULTIPLE_HEAPS
    gc_heap* hp = 0;
#endif //MULTIPLE_HEAPS
    heap_segment* res = hp-&gt;get_segment (size, TRUE);
  ....
}
        </code>
       </pre>
       <p>
        When 'MULTIPLE_HEAPS' is not defined, it's no good because the pointer will equal zero.
       </p>
       <p>
        <a class="link-inner" href="/en/d/0205/">
         V595
        </a>
        The 'tree' pointer was utilized before it was verified against nullptr. Check lines: 6970, 6976. ClrJit gentree.cpp 6970
       </p>
       <pre class="clear">
        <code>
         void Compiler::gtDispNode(GenTreePtr tree, ....)
{
  ....
  if (tree-&gt;gtOper &gt;= GT_COUNT)
  {
    printf(" **** ILLEGAL NODE ****");
    return;
  }

  if  (tree &amp;&amp; printFlags)
  {
    /* First print the flags associated with the node */
    switch (tree-&gt;gtOper)
    {
      ....
    }
    ....
  }
  ....
}
        </code>
       </pre>
       <p>
        There are pretty many fragments in the project's source code where pointers are checked for being valid - but only after they have been dereferenced.
       </p>
       <p>
        Here's a complete list of all the fragments of that kind:
        <a class="link-inner" href="/external-pictures/txt/CoreCLR_V595.txt">
         CoreCLR_V595.txt
        </a>
        .
       </p>
       <h2>
        Excessive checks
        <a name="ID0ENFLM">
        </a>
       </h2>
       <p>
        Even if excessive code doesn't do harm, its mere presence may distract the programmers' attention from working on more important things.
       </p>
       <p>
        <a class="link-inner" href="/en/d/0092/">
         V503
        </a>
        This is a nonsensical comparison: pointer &gt;= 0. cee_wks gc.cpp 21707
       </p>
       <pre class="clear">
        <code>
         void gc_heap::make_free_list_in_brick (BYTE* tree,
                                       make_free_args* args)
{
  assert ((tree &gt;= 0));
  ....
}
        </code>
       </pre>
       <p>
        A nice pointer check, huh? Two more examples:
       </p>
       <ul class=" list-level0 list-bullet">
        <li>
         V503 This is a nonsensical comparison: pointer &gt;= 0. cee_wks gc.cpp 23204
        </li>
        <li>
         V503 This is a nonsensical comparison: pointer &gt;= 0. cee_wks gc.cpp 27683
        </li>
       </ul>
       <p>
        <a class="link-inner" href="/en/d/0137/">
         V547
        </a>
        Expression 'maxCpuId &gt;= 0' is always true. Unsigned type value is always &gt;= 0. cee_wks codeman.cpp 1219
       </p>
       <pre class="clear">
        <code>
         void EEJitManager::SetCpuInfo()
{
  ....
  unsigned char buffer[16];
  DWORD maxCpuId = getcpuid(0, buffer);
  if (maxCpuId &gt;= 0)
  {
  ....
}
        </code>
       </pre>
       <p>
        A similar example, but with the DWORD type.
       </p>
       <p>
        <a class="link-inner" href="/en/d/0194/">
         V590
        </a>
        Consider inspecting the 'wzPath[0] != L'\0' &amp;&amp; wzPath[0] == L'\\'' expression. The expression is excessive or contains a misprint. cee_wks path.h 62
       </p>
       <pre class="clear">
        <code>
         static inline bool
HasUncPrefix(LPCWSTR wzPath)
{
  _ASSERTE(!clr::str::IsNullOrEmpty(wzPath));
  return wzPath[0] != W('\0') &amp;&amp; wzPath[0] == W('\\')
      &amp;&amp; wzPath[1] != W('\0') &amp;&amp; wzPath[1] == W('\\')
      &amp;&amp; wzPath[2] != W('\0') &amp;&amp; wzPath[2] != W('?');
}
        </code>
       </pre>
       <p>
        This function can be simplified to the following code:
       </p>
       <pre class="clear">
        <code>
         static inline bool
HasUncPrefix(LPCWSTR wzPath)
{
  _ASSERTE(!clr::str::IsNullOrEmpty(wzPath));
  return wzPath[0] == W('\\')
      &amp;&amp; wzPath[1] == W('\\')
      &amp;&amp; wzPath[2] != W('\0')
      &amp;&amp; wzPath[2] != W('?');
}
        </code>
       </pre>
       <p>
        Another fragment:
       </p>
       <ul class=" list-level0 list-bullet">
        <li>
         V590 Consider inspecting this expression. The expression is excessive or contains a misprint. cee_wks path.h 72
        </li>
       </ul>
       <p>
        <a class="link-inner" href="/en/d/0169/">
         V571
        </a>
        Recurring check. The 'if (moduleInfo[MSCORWKS].baseAddr == 0)' condition was already verified in line 749. sos util.cpp 751
       </p>
       <pre class="clear">
        <code>
         struct ModuleInfo
{
    ULONG64 baseAddr;
    ULONG64 size;
    BOOL hasPdb;
};

HRESULT CheckEEDll()
{
  ....
  // Do we have clr.dll
    if (moduleInfo[MSCORWKS].baseAddr == 0)          //&lt;==
    {
        if (moduleInfo[MSCORWKS].baseAddr == 0)      //&lt;==
            g_ExtSymbols-&gt;GetModuleByModuleName (
               MAIN_CLR_MODULE_NAME_A,0,NULL,
               &amp;moduleInfo[MSCORWKS].baseAddr);
        if (moduleInfo[MSCORWKS].baseAddr != 0 &amp;&amp;    //&lt;==
            moduleInfo[MSCORWKS].hasPdb == FALSE)
        {
          ....
        }
        ....
    }
  ....
}
        </code>
       </pre>
       <p>
        There's no need to check 'baseAddr' in the second case.
       </p>
       <p>
        <a class="link-inner" href="/en/d/0343/">
         V704
        </a>
        'this == nullptr' expression should be avoided - this expression is always false on newer compilers, because 'this' pointer can never be NULL. ClrJit gentree.cpp 12731
       </p>
       <pre class="clear">
        <code>
         bool FieldSeqNode::IsFirstElemFieldSeq()
{
    if (this == nullptr)
        return false;
    return m_fieldHnd == FieldSeqStore::FirstElemPseudoField;
}
        </code>
       </pre>
       <p>
        Under the C++ standard, the this pointer can never be null. For details about possible consequences of code like the sample above, see the description of the
        <a class="link-inner" href="/en/d/0343/">
         V704
        </a>
        diagnostic. Such code working correctly after having been compiled by the Visual C++ compiler is mere luck and one can't really rely on that.
       </p>
       <p>
        The complete list of all the other fragments of this kind:
        <a class="link-inner" href="/external-pictures/txt/CoreCLR_V704.txt">
         CoreCLR_V704.txt
        </a>
        .
       </p>
       <p>
        <a class="link-inner" href="/en/d/0293/">
         V668
        </a>
        There is no sense in testing the 'newChunk' pointer against null, as the memory was allocated using the 'new' operator. The exception will be generated in the case of memory allocation error. ClrJit stresslog.h 552
       </p>
       <pre class="clear">
        <code>
         FORCEINLINE BOOL GrowChunkList ()
{
  ....
  StressLogChunk * newChunk = new StressLogChunk (....);
  if (newChunk == NULL)
  {
    return FALSE;
  }
  ....
}
        </code>
       </pre>
       <p>
        If the 'new' operator has failed to allocate memory, then it must throw the std::bad_alloc() exception, as required by the C++ language standard. Therefore, checking the pointer for being null doesn't make any sense here.
       </p>
       <p>
        I advise reviewing all the fragments of this kind. Here's a complete list:
        <a class="link-inner" href="/external-pictures/txt/CoreCLR_V668.txt">
         CoreCLR_V668.txt
        </a>
        .
       </p>
       <h2>
        Conclusion
        <a name="ID0EYGBO">
        </a>
       </h2>
       <p>
        The recently published CoreCLR project is a nice example of what a proprietary software product's code may look like. There are unceasing debates on this subject, so here you are another topic for thinking and arguing.
       </p>
       <p>
        What is important personally for us is that there are always some bugs to be found in any large project and that the best way to use a static analyzer is to use it regularly. Don't be lazy, go
        <a class="link-inner" href="/en/pvs-studio-download/">
         download
        </a>
        PVS-Studio and check your project.
       </p>
       <div>
        <style>
         #social-buttons .share-item {									
			color: #FFF;
			text-decoration : none;
			padding : 6px 14px 7px 14px ;
			margin : 3px 3px 0px 0px;
			height : 40px;
			background-repeat : no-repeat;
			background-position : 13px 7px;
			background-size : 15px;
		}
		
		#social-buttons .share-item-without-count {
			padding : 6px 14px 7px 28px ;
		}
			
		#social-buttons .share-item:hover {
			color: #FFF;
		}
		
		#social-buttons .radius {
			border-radius: 3px;
		}
		#social-buttons .share-img {
		}
		#social-buttons .separator {
			border-left: 1px solid rgba(255,255,255,.4);
			margin : 0px 13px 0px 26px;
		}
		#social-buttons .share-count {
		}
		 
		
		#social-buttons .share_button_facebook {
			background-image: url('data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2232%22%20height%3D%2232%22%20viewBox%3D%220%200%2032%2032%22%3E%3Cpath%20fill%3D%22%23fff%22%20d%3D%22M22.439%2010.95h4v-4.95h-4c-3.311%200-6%202.92-6%206.5v2.5h-4v4.97h4v12.03h5v-12.03h5v-4.97h-5v-2.55c0-.86.532-1.5%201-1.5z%22%2F%3E%3C%2Fsvg%3E');
												
			background-color : #2C5287;
			border: 1px solid #284A7B;
			
			background-position : 10px 5px;
		}
		#social-buttons .share_button_facebook:hover {
			background-color : #284A7B;
		}
		
		#social-buttons .share_button_twitter {
			background-image: url('data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2232%22%20height%3D%2232%22%20viewBox%3D%220%200%2032%2032%22%3E%3Cpath%20fill%3D%22%23fff%22%20d%3D%22M26.67%209.38c-.779.35-1.63.58-2.51.69.9-.54%201.6-1.4%201.92-2.42-.85.5-1.78.87-2.78%201.06-.8-.85-1.94-1.38-3.19-1.38-2.42%200-4.379%201.96-4.379%204.38%200%20.34.04.68.11%201-3.64-.18-6.86-1.93-9.02-4.57-.38.65-.59%201.4-.59%202.2%200%201.52.77%202.86%201.95%203.64-.72-.02-1.39-.22-1.98-.55v.06c0%202.12%201.51%203.89%203.51%204.29-.37.1-.75.149-1.15.149-.28%200-.56-.029-.82-.08.56%201.74%202.17%203%204.09%203.041-1.5%201.17-3.39%201.869-5.44%201.869-.35%200-.7-.02-1.04-.06%201.94%201.239%204.24%201.97%206.71%201.97%208.049%200%2012.45-6.67%2012.45-12.45l-.01-.57c.839-.619%201.579-1.389%202.169-2.269z%22%2F%3E%3C%2Fsvg%3E');
			background-color : #2CA8D2;
			border: 1px solid #2692B6;
		}
		#social-buttons .share_button_twitter:hover {
			background-color : #2692B6;
		}

		#social-buttons .share_button_reddit {
			background-image: url('data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2232%22%20height%3D%2232%22%20viewBox%3D%220%200%2032%2032%22%3E%3Cellipse%20fill%3D%22%23fff%22%20cx%3D%2216%22%20cy%3D%2218.83%22%20rx%3D%2210.12%22%20ry%3D%226.65%22%2F%3E%3Ccircle%20fill%3D%22%23FF4500%22%20cx%3D%2212.65%22%20cy%3D%2217.58%22%20r%3D%221.66%22%2F%3E%3Ccircle%20fill%3D%22%23FF4500%22%20cx%3D%2219.58%22%20cy%3D%2217.58%22%20r%3D%221.66%22%2F%3E%3Cpath%20d%3D%22M27.75%2015.74c0-1.49-1.21-2.7-2.7-2.7-.659%200-1.29.24-1.78.67-1.76-1.12-4.09-1.85-6.67-1.94l1.541-4.37%203.84.92c0%201.22.99%202.2%202.209%202.2%201.221%200%202.211-.99%202.211-2.21s-1-2.21-2.211-2.21c-.92%200-1.719.57-2.039%201.38l-4.551-1.09-1.89%205.37c-2.69.05-5.12.78-6.95%201.94-.49-.43-1.11-.66-1.76-.66-1.49%200-2.7%201.21-2.7%202.7%200%20.92.47%201.77%201.24%202.27-.05.271-.07.54-.07.82%200%203.9%204.73%207.08%2010.54%207.08%205.82%200%2010.54-3.18%2010.54-7.08%200-.27-.021-.53-.069-.8.779-.5%201.269-1.36%201.269-2.29zm-3.57-8.79c.75%200%201.36.61%201.36%201.36s-.61%201.36-1.36%201.36-1.36-.61-1.36-1.36.619-1.36%201.36-1.36zm-19.04%208.79c0-1.021.83-1.85%201.85-1.85.38%200%20.73.11%201.04.32-1.07.83-1.86%201.83-2.26%202.92-.4-.36-.63-.86-.63-1.39zm10.86%209.31c-5.35%200-9.69-2.79-9.69-6.229%200-3.44%204.35-6.22%209.69-6.22%205.35%200%209.689%202.79%209.689%206.23%200%203.429-4.339%206.219-9.689%206.219zm10.24-7.9c-.4-1.101-1.18-2.101-2.25-2.931.31-.22.67-.33%201.06-.33%201.021%200%201.851.83%201.851%201.85-.001.551-.251%201.061-.661%201.411zM15.98%2023.33c-2.71%200-3.79-1.23-3.84-1.28-.15-.18-.13-.44.05-.6.18-.15.44-.13.6.04.02.029.93.99%203.19.99%202.299%200%203.31-.99%203.32-1%20.16-.17.431-.17.601-.011.17.16.17.431.01.601-.052.05-1.241%201.26-3.931%201.26z%22%2F%3E%3C%2Fsvg%3E');
			background-color : #D7D7D7;
			border: 1px solid #C9C9C9;
		}
		#social-buttons .share_button_reddit:hover {
			background-color : #C9C9C9;
		}
		
		#social-buttons .share_button_google_plusone {
			background-image: url('data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2232%22%20height%3D%2232%22%20viewBox%3D%220%200%2032%2032%22%3E%3Cpath%20fill%3D%22%23fff%22%20d%3D%22M20.79%2017.75c-.649-.49-2.08-1.5-2.08-2.18%200-.79.229-1.18%201.42-2.12%201.229-.95%202.091-2.22%202.091-3.78%200-1.7-.701-3.25-2-4h1.85l1.58-1.66h-7.07c-3.591%200-6.581%202.65-6.581%205.56%200%202.97%201.97%205.35%205.34%205.35.23%200%20.46-.01.69-.03-.22.42-.38.89-.38%201.38%200%20.83.46%201.3%201.02%201.85l-1.28.01c-4.11%200-6.99%202.83-6.99%205.55%200%202.67%203.47%204.34%207.58%204.34%204.69%200%207.57-2.66%207.57-5.33-.021-2.14-.48-3.22-2.76-4.94zm-4.09-3.9c-1.9-.06-3.72-1.81-4.05-4.31-.33-2.51.95-4.42%202.86-4.36%201.91.06%203.54%202.11%203.86%204.61.33%202.5-.77%204.11-2.67%204.06zm-.75%2012.99c-2.84%200-4.89-1.8-4.89-3.96%200-2.12%202.4-3.94%205.25-3.91.661.011%201.28.11%201.84.3%201.539%201.07%202.789%201.74%203.1%202.971.061.25.09.5.09.76%200%202.149-1.401%203.839-5.39%203.839z%22%2F%3E%3C%2Fsvg%3E');
			background-color : #0868B9;
			border: 1px solid #065AA0;
		}
		#social-buttons .share_button_google_plusone:hover {
			background-color : #065AA0;
		}
		
		#social-buttons .share_button_stumbleupon {
			background-image: url('data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2232%22%20height%3D%2232%22%20viewBox%3D%220%200%2032%2032%22%3E%3Cpath%20fill%3D%22%23fff%22%20d%3D%22M16.779%2014.23l1.25.58%201.861-.56v-1.3c-.07-2.2-1.861-3.97-4.091-3.97-2.21%200-4.01%201.75-4.09%203.94v5.91c0%20.54-.43.97-.97.97s-.97-.43-.97-.97v-2.5h-3.119v2.54c0%202.26%201.83%204.09%204.09%204.09%202.24%200%204.06-1.8%204.09-4.03v-5.84c0-.54.43-.97.97-.97s.97.43.97.97l.009%201.14zm5.051%202.11v2.62c0%20.54-.439.97-.971.97-.529%200-.969-.43-.969-.97v-2.57l-1.861.56-1.25-.58v2.55c.021%202.24%201.841%204.061%204.091%204.061%202.26%200%204.09-1.83%204.09-4.09v-2.541l-3.13-.01z%22%2F%3E%3C%2Fsvg%3E');
			background-color : #E65229;
			border: 1px solid #D54C26;
		}
		#social-buttons .share_button_stumbleupon:hover {
			background-color : #D54C26;
		}
		
		.share_button_delicious {
			background-image: url('data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2232%22%20height%3D%2232%22%20viewBox%3D%220%200%2032%2032%22%3E%3Cpath%20fill%3D%22%23F4F4F5%22%20d%3D%22M0%200h16v15.88h-16z%22%2F%3E%3Cpath%20fill%3D%22%233676CC%22%20d%3D%22M16%200h16v15.88h-16z%22%2F%3E%3Cpath%20d%3D%22M0%2015.88h16v16.12h-16z%22%2F%3E%3Cpath%20fill%3D%22%23DBDBDB%22%20d%3D%22M16%2015.88h16v16.12h-16z%22%2F%3E%3C%2Fsvg%3E');
			background-color : #DBDBDB;
			border: 1px solid #C9C9C9;
		}
		.share_button_delicious:hover {
			background-color : #C9C9C9;
		}
		
		.share_button_digg {
			background-image: url('data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2232%22%20height%3D%2232%22%20viewBox%3D%220%200%2032%2032%22%3E%3Cpath%20fill%3D%22%23fff%22%20d%3D%22M5.41%2018.3h1.27v-3.46h-1.27v3.46zm-2.77-5.87h4.04v-3.53h2.77v11.83h-6.81v-8.3zm10.85-1.11h-2.77v-2.42h2.77v2.42zm0%209.41h-2.77v-8.3h2.77v8.3zm4.039-2.43h1.271v-3.46h-1.271v3.46zm-2.769%205.95v-2.42h4.04v-1.11h-4.04v-8.3h6.811v11.82h-6.811v.01zm10.849-5.95h1.271v-3.46h-1.271v3.46zm-2.769%205.95v-2.42h4.04v-1.11h-4.04v-8.3h6.811v11.82h-6.811v.01z%22%2F%3E%3C%2Fsvg%3E');
			background-color : #414141;
			border: 1px solid #080808;
		}
		.share_button_digg:hover {
			background-color : #080808;
		}
		
		.share_button_linkedin {
			background-image: url('data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2232%22%20height%3D%2232%22%20viewBox%3D%220%200%2032%2032%22%3E%3Cpath%20fill%3D%22%23fff%22%20d%3D%22M8%2012h4v14h-4zM23.27%2012.8c-1.49-.84-3.689-.91-5.27-.18v-.62h-4v14h4v-8.95l1.65-.79c.399-.19%201.289-.18%201.66.03.29.15.69.81.69%201.21v8.5h4v-8.5c0-1.84-1.15-3.82-2.73-4.7z%22%2F%3E%3Ccircle%20fill%3D%22%23fff%22%20cx%3D%2210%22%20cy%3D%228%22%20r%3D%222.5%22%2F%3E%3C%2Fsvg%3E');
			background-color : #4498C8;
			border: 1px solid #3A83AC;
		}
		.share_button_linkedin:hover {
			background-color : #3A83AC;
		}
        </style>
        <div id="social-buttons">
         <a class="share-item radius share_button_google_plusone " href="https://plus.google.com/share?url=http://www.viva64.com/en/b/0310/" target="_blank">
          <span class="separator">
          </span>
          <span class="share-count">
           16
          </span>
         </a>
         <a class="share-item radius share_button_twitter " href="https://twitter.com/intent/tweet?url=http://www.viva64.com/en/b/0310/" target="_blank">
          <span class="separator">
          </span>
          <span class="share-count">
           46
          </span>
         </a>
         <a class="share-item radius share_button_facebook " href="https://www.facebook.com/sharer/sharer.php?u=http://www.viva64.com/en/b/0310/" target="_blank">
          <span class="separator">
          </span>
          <span class="share-count">
           3
          </span>
         </a>
         <a class="share-item radius share_button_reddit " href="http://reddit.com/submit?url=http://www.viva64.com/en/b/0310/" target="_blank">
          <span class="separator">
          </span>
          <span class="share-count">
           0
          </span>
         </a>
         <a class="share-item radius share_button_stumbleupon " href="http://stumbleupon.com/submit?url=http://www.viva64.com/en/b/0310/" target="_blank">
          <span class="separator">
          </span>
          <span class="share-count">
           52
          </span>
         </a>
        </div>
       </div>
       <script>
        $('body').live('keyup', function (e) {
	var not_meta_key = (!e.altKey &amp;&amp; !e.ctrlKey &amp;&amp; !e.metaKey )
	if ( (e.altKey || e.ctrlKey || e.metaKey) &amp;&amp; e.which == 37) {
			e.preventDefault()
			$(document).trigger('shortcuts.to_prev_page')
		}
		if ( (e.altKey || e.ctrlKey || e.metaKey) &amp;&amp; e.which == 39) {
			e.preventDefault()
			$(document).trigger('shortcuts.to_next_page')
		}
}) 	
$(document).bind('shortcuts.to_prev_page', function(){
	var url = $('#p_page').attr('href')
	if(typeof(url) !== 'undefined'){
		document.location.href = url
	}
})
$(document).bind('shortcuts.to_next_page', function(){
	var url = $('#n_page').attr('href')
	if(typeof(url) !== 'undefined'){
		document.location.href = url
	}
})
       </script>
       <div class="next-prev-navigation">
        <span class="navigation-next">
         <a href="
	
		/en/b/0311/
	" id="n_page">
          Next
         </a>
        </span>
        <span class="navigation-prev">
         <a href="
			
		/en/b/0309/
	" id="p_page">
          Previous
         </a>
        </span>
       </div>
      </div>
     </div>
    </div>
    <!--[3]#container, #content::END-->
   </div>
   <!--[2]#content_wrap::END-->
  </div>
  <!--[1]#wrapper::END-->
  <div style="clear : both;">
  </div>
  <div id="footer">
   <div id="footer_up">
    <div class="wrapper" id="customers">
     <a href="/en/customers" id="customers_title">
      Our Customers
     </a>
     <div class="slider">
      <div class="image_slider">
       <ul class="listreset" id="image_slider">
        <li>
         <a href="/en/customers" title="">
          <img alt="" src="/media/images/customers/epicgames.png"/>
         </a>
        </li>
        <li>
         <a href="/en/customers" title="">
          <img alt="" src="/media/images/customers/ncsoft_1.png"/>
         </a>
        </li>
        <li>
         <a href="/en/customers" title="">
          <img alt="" src="/media/images/customers/hex-rays.png"/>
         </a>
        </li>
        <li>
         <a href="/en/customers" title="">
          <img alt="" src="/media/images/customers/dalet.png"/>
         </a>
        </li>
        <li>
         <a href="/en/customers" title="">
          <img alt="" src="/media/images/customers/nec.png"/>
         </a>
        </li>
        <li>
         <a href="/en/customers" title="">
          <img alt="" src="/media/images/customers/supercell.png"/>
         </a>
        </li>
        <li>
         <a href="/en/customers" title="">
          <img alt="" src="/media/images/customers/simulationrsi_1.png"/>
         </a>
        </li>
        <li>
         <a href="/en/customers" title="">
          <img alt="" src="/media/images/customers/a2ia.png"/>
         </a>
        </li>
        <li>
         <a href="/en/customers" title="">
          <img alt="" src="/media/images/customers/pre-scient_1.png"/>
         </a>
        </li>
        <li>
         <a href="/en/customers" title="">
          <img alt="" src="/media/images/customers/fujitsu.png"/>
         </a>
        </li>
       </ul>
      </div>
     </div>
    </div>
   </div>
   <style>
    .bottom-menu-wrapper {
                    margin-left : 285px;
                    padding : 0px 0px 0px 30px;
                }
                .menu-bottom {
                    border-top : none;
                    margin : auto;
                    /*width : 950px;*/
                    margin : 0px 0px;
                }
                .menu-bottom a {
                    color : #000;
                    font-size : 14px;
                }
                .menu-bottom a:hover {
                    color : #606060;
                }
                .menu-bottom ul li {
                    list-style: none;
                    margin : 0px 0px 12px 0px;
                }
                .menu-bottom td {
                    padding: 0px 12px 0px 0px;
                    /*min-width : 100px;*/
                    width : 20%;
                }
                .menu-bottom td.last {
                    padding: 0px 0px 0px 0px;
                }
                #footer-center-info {
                    float : left;
                    width : 250px;
                    font-size : 14px;
                }

                #footer_center {
                    width : 1000px;
                    margin : auto;
                    padding : 20px 0px 0px 0px;
                }
                #footer-center-info img {
                    width : 90px;
/*                  opacity: 0.5; */
                    float : left;
/*                  margin-left : auto; */
                    margin-right : 15px;
                    margin-bottom : 7px;
/*                  display : block; */
                }
                #footer-center-info .margin-left {

                }
                .menu-header {
                    padding : 0px 0px 25px 0px;
                    font-size : 16px;
                    font-weight : bold;
                }
                .menu-header a {
                    /*text-decoration : none;*/
                }

                #sitemap-wrapper {
                    margin : 7px 0px 0px 0px;
                }
                #sitemap-wrapper a {
                    color : #000;
                    font-size : 14px;
/*                  font-weight : bold; */

                }
                #sitemap-wrapper a:hover {
                    color : #606060;
                }
                #footer_center .contacts{
                    clear : both;
                    margin-top : 25px;
                }
   </style>
   <div class="" id="footer_center">
    <div id="footer-center-info">
     <img src="/media/images/template/bottom_unicorn.png"/>
     We develop the static code analyzer PVS-Studio for C and C++ code. This tool has managed to catch bugs in Chromium, Qt, Clang, etc. Check your code too.
    </div>
    <div class="contacts b-rounded b-right">
     <a class="el-mail" href="mailto:support@viva64.com">
      support@viva64.com
     </a>
     <a class="contact_us" href="/en/about-feedback/">
      Contact Us
     </a>
    </div>
    <div class="bottom-menu-wrapper">
     <table class="menu-bottom">
      <tr>
       <td>
        <div class="menu-header">
         PVS-Studio
        </div>
        <ul>
         <li>
          <a href="/en/pvs-studio-download/">
           Download
          </a>
         </li>
         <li>
          <a href="/en/pvs-studio/">
           Product page
          </a>
         </li>
         <li>
          <a href="/en/d/">
           Documentation
          </a>
         </li>
         <li>
          <a href="/en/d/0368/">
           Messages
          </a>
         </li>
         <li>
          <a href="/en/d/0304">
           Troubleshooting
          </a>
         </li>
        </ul>
       </td>
       <td>
        <div class="menu-header">
         Buy
        </div>
        <ul>
         <li>
          <a href="/en/order/">
           Buy PVS-Studio
          </a>
         </li>
         <li>
          <a href="/en/site-license/">
           Site License
          </a>
         </li>
         <li>
          <a href="/en/d/0253/">
           Licensing FAQ
          </a>
         </li>
        </ul>
       </td>
       <td>
        <div class="menu-header">
         Our Advances
        </div>
        <ul>
         <li>
          <a href="/en/a/0084/">
           Checked projects
          </a>
         </li>
         <li>
          <a href="/en/examples/">
           Detected errors
          </a>
         </li>
         <li>
          <a href="/en/customers/">
           Customers
          </a>
         </li>
        </ul>
       </td>
       <td>
        <div class="menu-header">
         Interesting
        </div>
        <ul>
         <li>
          <a href="/en/b/">
           Blog
          </a>
         </li>
         <li>
          <a href="/en/articles/">
           Articles
          </a>
         </li>
         <li>
          <a href="http://q.viva64.com/">
           C++ quiz
          </a>
         </li>
         <li>
          <a href="/en/l/">
           64-bit lessons
          </a>
         </li>
         <li>
          <a href="/en/k/">
           Knowledge base
          </a>
         </li>
         <li>
          <a href="/en/t/">
           Terminology
          </a>
         </li>
        </ul>
       </td>
       <td class="last">
        <div class="menu-header">
         Company
        </div>
        <ul>
         <li>
          <a href="/en/about/">
           About Us
          </a>
         </li>
         <li>
          <a href="/en/careers/">
           Jobs
          </a>
         </li>
         <li>
          <a href="/en/n/">
           News
          </a>
         </li>
         <li>
          <a href="/en/management-team/">
           Team
          </a>
         </li>
         <li>
          <a href="/en/address/">
           Address
          </a>
         </li>
         <li>
          <a href="/en/about-feedback/">
           Contact Us
          </a>
         </li>
         <li>
          <a href="/en/sitemap/">
           Sitemap
          </a>
         </li>
        </ul>
       </td>
      </tr>
     </table>
    </div>
   </div>
   <div style="clear : both;">
   </div>
   <div class="wrapper" id="footer_bottom">
    <div class="b-40 b-left">
     <div class="b-clear" id="copy">
       2015, OOO "Program Verification Systems"
     </div>
    </div>
    <div class="b-65 b-right">
     <div class="b-clear">
      <div class="b-right" id="search_form">
       <form accept-charset="UTF-8" action="http://google.com/search" class="form-reset" name="f" target="_blank">
        <input name="sitesearch" type="hidden" value="http://www.viva64.com"/>
        <input name="ie" type="hidden" value="UTF-8"/>
        <input id="search_input" name="q" type="text" value=""/>
       </form>
      </div>
      <div class="b-right" id="orphus-wrapper">
       <script src="/media/js/orphus.js" type="text/javascript">
       </script>
       <a href="http://orphus.ru" id="orphus" target="_blank">
        <img alt="Orphus" border="0" height="21" src="/media/images/template/orphus.png" width="121"/>
       </a>
      </div>
     </div>
    </div>
   </div>
   <div style="clear : both;">
   </div>
  </div>
  <!--[1]#footer::END-->
  <script type="text/javascript">
   var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
   var pageTracker = _gat._getTracker("UA-1078156-2");
pageTracker._initData();
pageTracker._trackPageview();
  </script>
  <!--        test1  -->
 </body>
</html>