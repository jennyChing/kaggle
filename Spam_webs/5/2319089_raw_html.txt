<!DOCTYPE html>
<html lang="en-US">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <!-- apple-touch-icon? -->
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <title>
   How to read Haskell like Python :  Inside 206-105
  </title>
  <link charset="utf-8" href="http://blog.ezyang.com/wp-content/themes/Ashley/style.css" media="screen" rel="stylesheet" type="text/css"/>
  <link href="http://fonts.googleapis.com/css?family=Gentium+Book+Basic" rel="stylesheet" type="text/css"/>
  <link href="http://fonts.googleapis.com/css?family=Ubuntu+Mono" rel="stylesheet" type="text/css"/>
  <!--[if lt IE 9]&gt;
  &lt;script src="http://html5shim.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
&lt;![endif]-->
  <link href="http://blog.ezyang.com/feed/" rel="alternate" title="Inside 206-105 RSS Feed" type="application/rss+xml"/>
  <link href="http://blog.ezyang.com/feed/atom/" rel="alternate" title="Inside 206-105 Atom Feed" type="application/atom+xml"/>
  <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?lang=hs">
  </script>
  <script src="http://blog.ezyang.com/wp-content/lang-coq.js">
  </script>
  <link href="http://blog.ezyang.com/xmlrpc.php" rel="pingback"/>
  <link href="http://blog.ezyang.com/2011/11/how-to-read-haskell/feed/" rel="alternate" title="Inside 206-105  How to read Haskell like Python Comments Feed" type="application/rss+xml"/>
  <script type="text/javascript">
   window._wpemojiSettings = {"baseUrl":"http:\/\/s.w.org\/images\/core\/emoji\/72x72\/","ext":".png","source":{"concatemoji":"http:\/\/blog.ezyang.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.2.1"}};
			!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&amp;&amp;c.getContext("2d");return d&amp;&amp;d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length&gt;3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f;c.supports={simple:d("simple"),flag:d("flag")},c.supports.simple&amp;&amp;c.supports.flag||(f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&amp;&amp;f.twemoji&amp;&amp;(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
  </script>
  <style type="text/css">
   img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
  </style>
  <script src="http://blog.ezyang.com/wp-includes/js/jquery/jquery.js?ver=1.11.2" type="text/javascript">
  </script>
  <script src="http://blog.ezyang.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1" type="text/javascript">
  </script>
  <script src="http://blog.ezyang.com/wp-content/plugins/google-analyticator/external-tracking.min.js?ver=6.4.8" type="text/javascript">
  </script>
  <link href="http://blog.ezyang.com/xmlrpc.php?rsd" rel="EditURI" title="RSD" type="application/rsd+xml"/>
  <link href="http://blog.ezyang.com/wp-includes/wlwmanifest.xml" rel="wlwmanifest" type="application/wlwmanifest+xml"/>
  <link href="http://blog.ezyang.com/2011/10/the-new-reflections-on-trusting-trust/" rel="prev" title="The new Reflections on Trusting Trust"/>
  <link href="http://blog.ezyang.com/2011/11/ubuntu-oneiric-thinkpad-xmonad/" rel="next" title="Ubuntu Oneiric upgrade (Thinkpad/Xmonad)"/>
  <meta content="WordPress 4.2.1" name="generator"/>
  <link href="http://blog.ezyang.com/2011/11/how-to-read-haskell/" rel="canonical"/>
  <link href="http://blog.ezyang.com/?p=6048" rel="shortlink"/>
  <style type="text/css">
   /* &lt;![CDATA[ */
img.latex { vertical-align: middle; border: none; }
/* ]]&gt; */
  </style>
  <!-- Google Analytics Tracking by Google Analyticator 6.4.8: http://www.videousermanuals.com/google-analyticator/ -->
  <script type="text/javascript">
   var analyticsFileTypes = [''];
    var analyticsSnippet = 'enabled';
    var analyticsEventTracking = 'enabled';
  </script>
  <script type="text/javascript">
   var _gaq = _gaq || [];
  
	_gaq.push(['_setAccount', 'UA-12247861-1']);
    _gaq.push(['_addDevId', 'i9k95']); // Google Analyticator App ID with Google
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
  </script>
 </head>
 <body class="single single-post postid-6048 single-format-standard">
  <header>
   <h1 class="vcard author">
    <a href="http://blog.ezyang.com/" title="Home">
     Inside 206-105
    </a>
   </h1>
   <p>
    Existential Pontification and Generalized Abstract Digressions
   </p>
   <ul class="pages">
    <li class="page_item page-item-2">
     <a href="http://blog.ezyang.com/about/">
      About
     </a>
    </li>
    <li class="page_item page-item-21">
     <a href="http://blog.ezyang.com/archives/">
      Archives
     </a>
    </li>
    <li>
     <a href="http://blog.ezyang.com/feed/">
      Subscribe
     </a>
    </li>
   </ul>
  </header>
  <div class="content wrap">
   <section class="posts">
    <article class="post">
     <h2>
      How to read Haskell like Python
     </h2>
     <!--&lt;h4 class="vcard author"&gt;by &lt;span class="fn"&gt;Edward Z. Yang&lt;/span&gt;&lt;/h4&gt;-->
     <div class="document">
      <!-- -*- mode: rst -*- -->
      <p>
       <strong>
        tl;dr
       </strong>
        Save this page for future reference.
      </p>
      <p>
       Have you ever been in the situation where you need to quickly understand what a piece of code in some unfamiliar language does? If the language looks a lot like what youre comfortable with, you can usually guess what large amounts of the code does; even if you may not be completely familiar how all the language features work.
      </p>
      <p>
       For Haskell, this is a little more difficult, since Haskell syntax looks very different from traditional languages. But there's no really deep difference here; you just have to squint at it just right. Here is a fast, mostly incorrect, and hopefully useful guide for interpreting Haskell code like a Pythonista. By the end, you should be able to interpret this fragment of Haskell (some code elided with
       <tt class="docutils literal">
        ...
       </tt>
       ):
      </p>
      <pre class="literal-block">
       runCommand env cmd state = ...
retrieveState = ...
saveState state = ...

main :: IO ()
main = do
    args &lt;- getArgs
    let (actions, nonOptions, errors) = getOpt Permute options args
    opts &lt;- foldl (&gt;&gt;=) (return startOptions) actions
    when (null nonOptions) $ printHelp &gt;&gt; throw NotEnoughArguments
    command &lt;- fromError $ parseCommand nonOptions
    currentTerm &lt;- getCurrentTerm
    let env = Environment
            { envCurrentTerm = currentTerm
            , envOpts = opts
            }
    saveState =&lt;&lt; runCommand env command =&lt;&lt; retrieveState
      </pre>
      <hr class="docutils"/>
      <p>
       <em>
        Types.
       </em>
       Ignore everything you see after
       <tt class="docutils literal">
        ::
       </tt>
       (similarly, you can ignore
       <tt class="docutils literal">
        type
       </tt>
       ,
       <tt class="docutils literal">
        class
       </tt>
       ,
       <tt class="docutils literal">
        instance
       </tt>
       and
       <tt class="docutils literal">
        newtype
       </tt>
       . Some people claim that types help them understand code; if you're a complete beginner, things like
       <tt class="docutils literal">
        Int
       </tt>
       and
       <tt class="docutils literal">
        String
       </tt>
       will probably help, and things like
       <tt class="docutils literal">
        LayoutClass
       </tt>
       and
       <tt class="docutils literal">
        MonadError
       </tt>
       won't. Don't worry too much about it.)
      </p>
      <hr class="docutils"/>
      <p>
       <em>
        Arguments.
       </em>
       <tt class="docutils literal">
        f a b c
       </tt>
       translates into
       <tt class="docutils literal">
        f(a, b, c)
       </tt>
       . Haskell code omits parentheses and commas. One consequence of this is we sometimes need parentheses for arguments:
       <tt class="docutils literal">
        f a (b1 + b2) c
       </tt>
       translates into
       <tt class="docutils literal">
        f(a, b1 + b2, c)
       </tt>
       .
      </p>
      <hr class="docutils"/>
      <p>
       <em>
        Dollar sign.
       </em>
       Since complex statements like
       <tt class="docutils literal">
        a + b
       </tt>
       are pretty common and Haskellers don't really like parentheses, the dollar sign is used to avoid parentheses:
       <tt class="docutils literal">
        f $ a + b
       </tt>
       is equivalent to the Haskell code
       <tt class="docutils literal">
        f (a + b)
       </tt>
       and translates into
       <tt class="docutils literal">
        f(a + b)
       </tt>
       . You can think of it as a big opening left parenthesis that automatically closes at the end of the line (no need to write
       <tt class="docutils literal">
        <span class="pre">
         ))))))
        </span>
       </tt>
       anymore!) In particular, if you stack them up, each one creates a deeper nesting:
       <tt class="docutils literal">
        f $ g x $ h y $ a + b
       </tt>
       is equivalent to
       <tt class="docutils literal">
        f (g x (h y (a +
        <span class="pre">
         b)))
        </span>
       </tt>
       and translates into
       <tt class="docutils literal">
        f(g(x,h(y,a + b))
       </tt>
       (though some consider this bad practice).
      </p>
      <p>
       In some code, you may see a variant of
       <tt class="docutils literal">
        $
       </tt>
       :
       <tt class="docutils literal">
        &lt;$&gt;
       </tt>
       (with angled brackets). You can treat
       <tt class="docutils literal">
        &lt;$&gt;
       </tt>
       the same way as you treat
       <tt class="docutils literal">
        $
       </tt>
       . (You might also see
       <tt class="docutils literal">
        &lt;*&gt;
       </tt>
       ; pretend that it's a comma, so
       <tt class="docutils literal">
        f &lt;$&gt; a &lt;*&gt; b
       </tt>
       translates to
       <tt class="docutils literal">
        f(a, b)
       </tt>
       . There's not really an equivalent for regular
       <tt class="docutils literal">
        $
       </tt>
       )
      </p>
      <hr class="docutils"/>
      <p>
       <em>
        Backticks.
       </em>
       <tt class="docutils literal">
        x `f` y
       </tt>
       translates into
       <tt class="docutils literal">
        f(x,y)
       </tt>
       . The thing in the backticks is a function, usually binary, and the things to the left and right are the arguments.
      </p>
      <hr class="docutils"/>
      <p>
       <em>
        Equals sign.
       </em>
       Two possible meanings. If it's at the beginning of a code block, it just means you're defining a function:
      </p>
      <pre class="literal-block">
       doThisThing a b c = ...
  ==&gt;
def doThisThing(a, b, c):
  ...
      </pre>
      <p>
       Or if you see it to near a
       <tt class="docutils literal">
        let
       </tt>
       keyword, its acting like an assignment operator:
      </p>
      <pre class="literal-block">
       let a = b + c in ...
  ==&gt;
a = b + c
...
      </pre>
      <hr class="docutils"/>
      <p>
       <em>
        Left arrow.
       </em>
       Also acts like an assignment operator:
      </p>
      <pre class="literal-block">
       a &lt;- createEntry x
  ==&gt;
a = createEntry(x)
      </pre>
      <p>
       Why don't we use an equals sign? Shenanigans. (More precisely,
       <tt class="docutils literal">
        createEntry x
       </tt>
       has side effects. More accurately, it means that the expression is monadic. But thats just shenanigans. Ignore it for now.)
      </p>
      <hr class="docutils"/>
      <p>
       <em>
        Right arrow.
       </em>
       It's complicated. We'll get back to them later.
      </p>
      <hr class="docutils"/>
      <p>
       <em>
        Do keyword.
       </em>
       Line noise. You can ignore it. (It does give some information, namely that there are side effects below, but you never see this distinction in Python.)
      </p>
      <hr class="docutils"/>
      <p>
       <em>
        Return.
       </em>
       Line-noise. Also ignore. (Youll never see it used for control flow.)
      </p>
      <hr class="docutils"/>
      <p>
       <em>
        Dot.
       </em>
       <tt class="docutils literal">
        f . g $ a + b
       </tt>
       translates to
       <tt class="docutils literal">
        f(g(a + b))
       </tt>
       .  Actually, in a Python program you'd probably have been more likely to see:
      </p>
      <pre class="literal-block">
       x = g(a + b)
y = f(x)
      </pre>
      <p>
       But Haskell programmers are allergic to extra variables.
      </p>
      <hr class="docutils"/>
      <p>
       <em>
        Bind and fish operators.
       </em>
       You might see things like
       <tt class="docutils literal">
        =&lt;&lt;
       </tt>
       ,
       <tt class="docutils literal">
        &gt;&gt;=
       </tt>
       ,
       <tt class="docutils literal">
        &lt;=&lt;
       </tt>
       and
       <tt class="docutils literal">
        &gt;=&gt;
       </tt>
       . These are basically just more ways of getting rid of intermediate variables:
      </p>
      <pre class="literal-block">
       doSomething &gt;&gt;= doSomethingElse &gt;&gt;= finishItUp
  ==&gt;
x = doSomething()
y = doSomethingElse(x)
finishItUp(y)
      </pre>
      <p>
       Sometimes a Haskell programmer decides that it's prettier if you do it in the other direction, especially if the variable is getting assigned somewhere:
      </p>
      <pre class="literal-block">
       z &lt;- finishItUp =&lt;&lt; doSomethingElse =&lt;&lt; doSomething
  ==&gt;
x = doSomething()
y = doSomethingElse(x)
z = finishItUp(y)
      </pre>
      <p>
       The most important thing to do is to reverse engineer what's actually happening by looking at the definitions of
       <tt class="docutils literal">
        doSomething
       </tt>
       ,
       <tt class="docutils literal">
        doSomethingElse
       </tt>
       and
       <tt class="docutils literal">
        finishItUp
       </tt>
       : it will give you a clue what's flowing across the fish operator. If you do that, you can read
       <tt class="docutils literal">
        &lt;=&lt;
       </tt>
       and
       <tt class="docutils literal">
        &gt;=&gt;
       </tt>
       the same way (they actually do function composition, like the dot operator). Read
       <tt class="docutils literal">
        &gt;&gt;
       </tt>
       like a semicolon (e.g. no assignment involved):
      </p>
      <pre class="literal-block">
       doSomething &gt;&gt; doSomethingElse
  ==&gt;
doSomething()
doSomethingElse()
      </pre>
      <hr class="docutils"/>
      <p>
       <em>
        Partial application.
       </em>
       Sometimes, Haskell programmers will call a function, but they
       <em>
        won't pass enough arguments.
       </em>
       Never fear; they've probably arranged for the rest of the arguments to be given to the function somewhere else. Ignore it, or look for functions which take anonymous functions as arguments. Some of the usual culprits include
       <tt class="docutils literal">
        map
       </tt>
       ,
       <tt class="docutils literal">
        fold
       </tt>
       (and variants),
       <tt class="docutils literal">
        filter
       </tt>
       , the composition operator
       <tt class="docutils literal">
        .
       </tt>
       , the fish operators (
       <tt class="docutils literal">
        =&lt;&lt;
       </tt>
       , etc). This happens a lot to the numeric operators:
       <tt class="docutils literal">
        (+3)
       </tt>
       translates into
       <tt class="docutils literal">
        lambda x: x + 3
       </tt>
       .
      </p>
      <hr class="docutils"/>
      <p>
       <em>
        Control operators.
       </em>
       Use your instinct on these: they do what you think they do! (Even if you think they shouldn't act that way.) So if you see:
       <tt class="docutils literal">
        when (x == y) $ doSomething x
       </tt>
       , it reads like When x equals y, call doSomething with x as an argument.
      </p>
      <p>
       Ignore the fact that you couldnt actually translate that into
       <tt class="docutils literal">
        when(x == y, doSomething(x))
       </tt>
       (Since, that would result in
       <tt class="docutils literal">
        doSomething
       </tt>
       always being called.) In fact,
       <tt class="docutils literal">
        when(x == y, lambda: doSomething x)
       </tt>
       is more accurate, but it might be more comfortable to just pretend that
       <tt class="docutils literal">
        when
       </tt>
       is also a language construct.
      </p>
      <p>
       <tt class="docutils literal">
        if
       </tt>
       and
       <tt class="docutils literal">
        case
       </tt>
       are built-in keywords. They work the way youd expect them to.
      </p>
      <hr class="docutils"/>
      <p>
       <em>
        Right arrows (for real!)
       </em>
       Right arrows have nothing to do with left arrows. Think of them as colons: they're always nearby the
       <tt class="docutils literal">
        case
       </tt>
       keyword and the backslash symbol, the latter of which is lambda:
       <tt class="docutils literal">
        \x
        <span class="pre">
         -&gt;
        </span>
        x
       </tt>
       translates into
       <tt class="docutils literal">
        lambda x: x
       </tt>
       .
      </p>
      <p>
       Pattern matching using
       <tt class="docutils literal">
        case
       </tt>
       is a pretty nice feature, but a bit hard to explain in this blog post. Probably the easiest approximation is an
       <tt class="docutils literal">
        <span class="pre">
         if..elif..else
        </span>
       </tt>
       chain with some variable binding:
      </p>
      <pre class="literal-block">
       case moose of
  Foo x y z -&gt; x + y * z
  Bar z -&gt; z * 3
  ==&gt;
if isinstance(moose, Foo):
  x = moose.x # the variable binding!
  y = moose.y
  z = moose.z
  return x + y * z
elif isinstance(moose, Bar):
  z = moose.z
  return z * 3
else:
  raise Exception("Pattern match failure!")
      </pre>
      <hr class="docutils"/>
      <p>
       <em>
        Bracketing.
       </em>
       You can tell something is a bracketing function if it starts with
       <tt class="docutils literal">
        with
       </tt>
       . They work like contexts do in Python:
      </p>
      <pre class="literal-block">
       withFile "foo.txt" ReadMode $ \h -&gt; do
  ...
  ==&gt;
with open("foo.txt", "r") as h:
  ...
      </pre>
      <p>
       (You may recall the backslash from earlier. Yes, that's a lambda. Yes,
       <tt class="docutils literal">
        withFile
       </tt>
       is a function. Yes, you can define your own.)
      </p>
      <hr class="docutils"/>
      <p>
       <em>
        Exceptions.
       </em>
       <tt class="docutils literal">
        throw
       </tt>
       ,
       <tt class="docutils literal">
        catch
       </tt>
       ,
       <tt class="docutils literal">
        catches
       </tt>
       ,
       <tt class="docutils literal">
        throwIO
       </tt>
       ,
       <tt class="docutils literal">
        finally
       </tt>
       ,
       <tt class="docutils literal">
        handle
       </tt>
       and all the other functions that look like this work essentially the way you expect them to. They may look a little funny, however, because none of these are keywords: theyre all functions, and follow all those rules. So, for example:
      </p>
      <pre class="literal-block">
       trySomething x `catch` \(e :: IOException) -&gt; handleError e
  ===
catch (trySomething x) (\(e :: IOException) -&gt; handleError e)
  ==&gt;
try:
  trySomething(x)
except IOError as e:
  handleError(e)
      </pre>
      <hr class="docutils"/>
      <p>
       <em>
        Maybe.
       </em>
       If you see Nothing, it can be thought of as
       <tt class="docutils literal">
        None
       </tt>
       . So
       <tt class="docutils literal">
        isNothing x
       </tt>
       tests if
       <tt class="docutils literal">
        x is None
       </tt>
       . What's the opposite of it?
       <tt class="docutils literal">
        Just
       </tt>
       . For example,
       <tt class="docutils literal">
        isJust x
       </tt>
       tests if
       <tt class="docutils literal">
        x is not None
       </tt>
       .
      </p>
      <p>
       You might see a lot of line noise associated with keeping
       <tt class="docutils literal">
        Just
       </tt>
       and
       <tt class="docutils literal">
        None
       </tt>
       in order. Here's one of the most common ones:
      </p>
      <pre class="literal-block">
       maybe someDefault (\x -&gt; ...) mx
  ==&gt;
if mx is None:
  x = someDefault
else:
  x = mx
...
      </pre>
      <p>
       Here's one specific variant, for when a null is an error condition:
      </p>
      <pre class="literal-block">
       maybe (error "bad value!") (\x -&gt; ...) x
  ==&gt;
if x is None:
  raise Exception("bad value!")
      </pre>
      <hr class="docutils"/>
      <p>
       <em>
        Records.
       </em>
       The work they way you'd expect them too, although Haskell lets you create fields that have no names:
      </p>
      <pre class="literal-block">
       data NoNames = NoNames Int Int
data WithNames = WithNames {
  firstField :: Int,
  secondField :: Int
}
      </pre>
      <p>
       So
       <tt class="docutils literal">
        NoNames
       </tt>
       would probably be represented as a tuple
       <tt class="docutils literal">
        (1, 2)
       </tt>
       in Python, and
       <tt class="docutils literal">
        WithNames
       </tt>
       a class:
      </p>
      <pre class="literal-block">
       class WithNames:
  def __init__(self, firstField, secondField):
    self.firstField = firstField
    self.secondField = secondField
      </pre>
      <p>
       Then creation is pretty simple
       <tt class="docutils literal">
        NoNames 2 3
       </tt>
       translates into
       <tt class="docutils literal">
        (2, 3)
       </tt>
       , and
       <tt class="docutils literal">
        WithNames 2 3
       </tt>
       or
       <tt class="docutils literal">
        WithNames { firstField = 2, secondField = 3 }
       </tt>
       translates into
       <tt class="docutils literal">
        WithNames(2,3)
       </tt>
       .
      </p>
      <p>
       Accessors are a little more different. The most important thing to remember is Haskellers put their accessors before the variable, whereas you might be most familiar with them being after. So
       <tt class="docutils literal">
        field x
       </tt>
       translates to
       <tt class="docutils literal">
        x.field
       </tt>
       . How do you spell
       <tt class="docutils literal">
        x.field = 2
       </tt>
       ? Well, you cant really do that. You can copy one with modifications though:
      </p>
      <pre class="literal-block">
       return $ x { field = 2 }
  ==&gt;
y = copy(x)
y.field = 2
return y
      </pre>
      <p>
       Or you can make one from scratch if you replace
       <tt class="docutils literal">
        x
       </tt>
       with the name of the data structure (it starts with a capital letter). Why do we only let you copy data structures? This is because Haskell is a
       <em>
        pure
       </em>
       language; but don't let that worry you too much. It's just another one of Haskells quirks.
      </p>
      <hr class="docutils"/>
      <p>
       <em>
        List comprehensions.
       </em>
       They originally came from the Miranda-Haskell lineage! There are just more symbols.
      </p>
      <pre class="literal-block">
       [ x * y | x &lt;- xs, y &lt;- ys, y &gt; 2 ]
  ==&gt;
[ x * y for x in xs for y in ys if y &gt; 2 ]
      </pre>
      <p>
       It also turns out Haskellers often prefer list comprehensions written in multi-line form (perhaps they find it easier to read). They look something like:
      </p>
      <pre class="literal-block">
       do
  x &lt;- xs
  y &lt;- ys
  guard (y &gt; 2)
  return (x * y)
      </pre>
      <p>
       So if you see a left arrow and it doesn't really look like it's doing side effects, maybe it's a list comprehension.
      </p>
      <hr class="docutils"/>
      <p>
       <em>
        More symbols.
       </em>
       Lists work the way you would expect them to in Python;
       <tt class="docutils literal">
        [1, 2, 3]
       </tt>
       is in fact a list of three elements. A colon, like
       <tt class="docutils literal">
        x:xs
       </tt>
       means construct a list with
       <tt class="docutils literal">
        x
       </tt>
       at the front and
       <tt class="docutils literal">
        xs
       </tt>
       at the back (
       <tt class="docutils literal">
        cons
       </tt>
       , for you Lisp fans.)
       <tt class="docutils literal">
        ++
       </tt>
       is list concatenation.
       <tt class="docutils literal">
        !!
       </tt>
       means indexing. Backslash means lambda. If you see a symbol you don't understand, try looking for it on
       <a class="reference external" href="http://haskell.org/hoogle/">
        Hoogle
       </a>
       (yes, it works on symbols!).
      </p>
      <hr class="docutils"/>
      <p>
       <em>
        More line noise.
       </em>
       The following functions are probably line noise, and can probably be ignored.
       <tt class="docutils literal">
        liftIO
       </tt>
       ,
       <tt class="docutils literal">
        lift
       </tt>
       ,
       <tt class="docutils literal">
        runX
       </tt>
       (e.g.
       <tt class="docutils literal">
        runState
       </tt>
       ),
       <tt class="docutils literal">
        unX
       </tt>
       (e.g.
       <tt class="docutils literal">
        unConstructor
       </tt>
       ),
       <tt class="docutils literal">
        fromJust
       </tt>
       ,
       <tt class="docutils literal">
        fmap
       </tt>
       ,
       <tt class="docutils literal">
        const
       </tt>
       ,
       <tt class="docutils literal">
        evaluate
       </tt>
       , an exclamation mark before an argument (
       <tt class="docutils literal">
        f !x
       </tt>
       ),
       <tt class="docutils literal">
        seq
       </tt>
       , a hash sign (e.g.
       <tt class="docutils literal">
        I# x
       </tt>
       ).
      </p>
      <hr class="docutils"/>
      <p>
       <em>
        Bringing it all together.
       </em>
       Lets return to the original code fragment:
      </p>
      <pre class="literal-block">
       runCommand env cmd state = ...
retrieveState = ...
saveState state = ...

main :: IO ()
main = do
    args &lt;- getArgs
    let (actions, nonOptions, errors) = getOpt Permute options args
    opts &lt;- foldl (&gt;&gt;=) (return startOptions) actions
    when (null nonOptions) $ printHelp &gt;&gt; throw NotEnoughArguments
    command &lt;- fromError $ parseCommand nonOptions
    currentTerm &lt;- getCurrentTerm
    let env = Environment
            { envCurrentTerm = currentTerm
            , envOpts = opts
            }
    saveState =&lt;&lt; runCommand env command =&lt;&lt; retrieveState
      </pre>
      <p>
       With some guessing, we can pop out this translation:
      </p>
      <pre class="literal-block">
       def runCommand(env, cmd, state):
   ...
def retrieveState():
   ...
def saveState(state):
   ...

def main():
  args = getArgs()
  (actions, nonOptions, errors) = getOpt(Permute(), options, args)
  opts = **mumble**
  if nonOptions is None:
     printHelp()
     raise NotEnoughArguments
  command = parseCommand(nonOptions)

  currentTerm = getCurrentTerm()
  env = Environment(envCurrentTerm=currentTerm, envOpts=opts)

  state = retrieveState()
  result = runCommand(env, command, state)
  saveState(result)
      </pre>
      <p>
       This is not bad, for a very superficial understanding of Haskell syntax (there's only one obviously untranslatable bit, which requires knowing what a fold is. Not all Haskell code is folds; Ill repeat, dont worry about it too much!)
      </p>
      <p>
       Most of the things I have called line noise actually have very deep reasons behind them, and if youre curious behind the actual reasons behind these distinctions, I recommend learning how to
       <em>
        write
       </em>
       Haskell. But if youre just reading Haskell, I think these rules should be more than adequate.
      </p>
      <p>
       <em>
        Thanks
       </em>
       to Keegan McAllister, Mats Ahlgren, Nelson Elhage, Patrick Hurst, Richard Tibbetts, Andrew Farrell and Geoffrey Thomas for comments. Also thanks to two kind denizens of
       <tt class="docutils literal">
        #python
       </tt>
       ,
       <tt class="docutils literal">
        asdf`
       </tt>
       and
       <tt class="docutils literal">
        talljosh
       </tt>
       , for acting as Python-using guinea pigs.
      </p>
      <p>
       <em>
        Postscript.
       </em>
       If you're really curious what
       <tt class="docutils literal">
        foldl
        <span class="pre">
         (&gt;&gt;=)
        </span>
        (return startOptions) actions
       </tt>
       does, it implements the
       <a class="reference external" href="http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern">
        chain of responsibility
       </a>
       pattern. Hell yeah.
      </p>
     </div>
     <footer>
      <ul class="small">
       <li>
        <abbr class="published" title="2011-11-14T09:00:26-0400">
         <a href="http://blog.ezyang.com/2011/11/14/">
          November 14, 2011
         </a>
        </abbr>
       </li>
       <li>
        <a href="http://blog.ezyang.com/category/haskell/" rel="category tag">
         Haskell
        </a>
       </li>
      </ul>
     </footer>
    </article>
    <footer id="comments">
     <h3>
      34 Responses to How to read Haskell like Python
     </h3>
     <ol class="commentlist">
      <li class="comment even thread-even depth-1" id="comment-3102">
       <div class="comment-body" id="div-comment-3102">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://0.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Anonymous
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3102">
          November 14, 2011 at 2:15 pm
         </a>
        </div>
        <p>
         Nice Stuff! But i believe threse a small error in the following:
        </p>
        <p>
         Dot. f . g $ a + b translates to f(g(a + b)). Actually, in a Python program youd probably have been more likely to see:
        </p>
        <p>
         x = f(a + b)
         <br/>
         y = g(x)
         <br/>
         But Haskell programmers are allergic to extra variables.
        </p>
        <p>
         Should be:
        </p>
        <p>
         x = g(a + b)
         <br/>
         y = f(x)
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment byuser comment-author-admin bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-3103">
       <div class="comment-body" id="div-comment-3103">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo" height="52" src="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          <a class="url" href="http://ezyang.com" rel="external nofollow">
           Edward Z. Yang
          </a>
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3103">
          November 14, 2011 at 2:26 pm
         </a>
        </div>
        <p>
         Thanks, fixed.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment even thread-even depth-1" id="comment-3106">
       <div class="comment-body" id="div-comment-3106">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://2.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Barnaby Robson
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3106">
          November 14, 2011 at 5:18 pm
         </a>
        </div>
        <p>
         def runCommand(env, m):
        </p>
        <p>
         should be
        </p>
        <p>
         def runCommand(env, m, state):
        </p>
        <p>
         also theres an extraneous doCommand function probably from another revision.
        </p>
        <p>
         instead of just Environment(currentTerm, opts) you could make it even more similar with keyword arguments like: Environment(envCurrentTerm=currentTerm, envOpts=opts)
        </p>
        <p>
         thanks for the post.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment byuser comment-author-admin bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-3107">
       <div class="comment-body" id="div-comment-3107">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo" height="52" src="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          <a class="url" href="http://ezyang.com" rel="external nofollow">
           Edward Z. Yang
          </a>
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3107">
          November 14, 2011 at 7:59 pm
         </a>
        </div>
        <p>
         Thanks Barnaby, fixed.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment even thread-even depth-1" id="comment-3108">
       <div class="comment-body" id="div-comment-3108">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://0.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://0.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Adrusi
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3108">
          November 14, 2011 at 9:02 pm
         </a>
        </div>
        <p>
         While I see the good intention behind this post, I feel its harmful. On the HN thread, someone said that this makes Haskells seem as bad as perls and that it makes him not want to learn Haskell. Obviously a single post cant hope to teach Haskell from the ground up, which would be the best way to show that Haskell actually has less syntax than python, but the way this post dismisses so much as line noise and pretends that so much is similar to python when it really isnt.
        </p>
        <p>
         I think this post would be better broken up into two parts, still looking at the code from the top down, but the first post explaining pure code and the second post explaining monadic IO code and not pretending that monads dont exist.
        </p>
        <p>
         Although I am impressed that you were able to fit so much into a single post!
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment byuser comment-author-admin bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-3110">
       <div class="comment-body" id="div-comment-3110">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo" height="52" src="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          <a class="url" href="http://ezyang.com" rel="external nofollow">
           Edward Z. Yang
          </a>
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3110">
          November 14, 2011 at 9:07 pm
         </a>
        </div>
        <p>
         I love Haskell, but Im not trying to get people to learn Haskell in this post. I just want them to know enough syntax to be able to read uninteresting glue code written in Haskell without bleeding. There is a lot different, and a lot of value, and theres a time to learn it later.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment even thread-even depth-1" id="comment-3112">
       <div class="comment-body" id="div-comment-3112">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://2.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          nun
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3112">
          November 14, 2011 at 9:13 pm
         </a>
        </div>
        <p>
         But that Perl comment is right after all.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-3114">
       <div class="comment-body" id="div-comment-3114">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://2.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Rafael
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3114">
          November 14, 2011 at 10:30 pm
         </a>
        </div>
        <p>
         Edward,
        </p>
        <p>
         excellent post. I think its useful (as a sort of checklist) even for people like me who are learning Haskell but arent necessarily Pythonistas.
        </p>
        <p>
         The only part I didnt get is Theres not really an equivalent for regular $. What do you mean?
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment byuser comment-author-admin bypostauthor even thread-even depth-1" id="comment-3115">
       <div class="comment-body" id="div-comment-3115">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo" height="52" src="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          <a class="url" href="http://ezyang.com" rel="external nofollow">
           Edward Z. Yang
          </a>
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3115">
          November 14, 2011 at 10:35 pm
         </a>
        </div>
        <p>
         As in, theres no way to write a comma if youre using $, like there is for  (namely ). You could do it if you redefined $ to be left associative.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-3116">
       <div class="comment-body" id="div-comment-3116">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://0.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Oliver Batchelor
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3116">
          November 14, 2011 at 10:52 pm
         </a>
        </div>
        <p>
         Its only correct insofar to say that it cab be alien syntax if you are not familiar with it. It shows that the haskell is as much defined by its standard library for things like flow control  this is something which is being hammered away at constantly. Haskellers take pride in being able to write clean readable concise code, as opposed to the perception of a  perl programmer as delighting in complex dense unreadable code.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment even thread-even depth-1" id="comment-3121">
       <div class="comment-body" id="div-comment-3121">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://2.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Arun Ravindran
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3121">
          November 15, 2011 at 5:14 am
         </a>
        </div>
        <p>
         Thanks! Have been always looking for cheatsheet like this, during my early days of understanding Haskell syntax. Bookmarked!
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-3122">
       <div class="comment-body" id="div-comment-3122">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://2.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Anonymous
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3122">
          November 15, 2011 at 6:01 am
         </a>
        </div>
        <p>
         Great article! I second Rafael in every word!
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment even thread-even depth-1" id="comment-3124">
       <div class="comment-body" id="div-comment-3124">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://0.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Anonymous
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3124">
          November 15, 2011 at 10:04 am
         </a>
        </div>
        <p>
         1) This has been helpful.
         <br/>
         2) Haskell has a truly disgusting amount of syntax.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-3126">
       <div class="comment-body" id="div-comment-3126">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://1.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Anonymous
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3126">
          November 15, 2011 at 9:27 pm
         </a>
        </div>
        <p>
         @Anonymous 2) Reading comprehension fail. You, particularly, should interpret this syntax as deeply magical things.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment even thread-even depth-1" id="comment-3130">
       <div class="comment-body" id="div-comment-3130">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://0.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          joaquin
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3130">
          November 17, 2011 at 5:16 am
         </a>
        </div>
        <p>
         Great !
         <br/>
         This will help on my Haskell learning curve (after two years periodically trying it, it looks like I am still walking before the initial slope and there is a wall in front).
         <br/>
         Thanks !
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-3131">
       <div class="comment-body" id="div-comment-3131">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://1.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Carlo Pires
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3131">
          November 17, 2011 at 9:41 pm
         </a>
        </div>
        <p>
         This is fantastic! Always wanted to know more of haskell and you make it easy.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment even thread-even depth-1" id="comment-3132">
       <div class="comment-body" id="div-comment-3132">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://2.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Tommy
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3132">
          November 17, 2011 at 9:55 pm
         </a>
        </div>
        <p>
         That was a fun read.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-3135">
       <div class="comment-body" id="div-comment-3135">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://1.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Kitmanov
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3135">
          November 18, 2011 at 6:45 pm
         </a>
        </div>
        <p>
         &gt; which requires knowing what a fold is
         <br/>
         Python has built-in function reduce, so, probably, Pythonistas knows what a fold is?
        </p>
        <p>
         Thanks for this post. Im translating it to Russian right now.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="pingback even thread-even depth-1" id="comment-3250">
       <div class="comment-body" id="div-comment-3250">
        <div class="comment-author vcard">
         <cite class="fn">
          <a class="url" href="http://www.plexical.com/blog/2011/12/22/2012-python-meme/" rel="external nofollow">
           2012 python meme  the meta cloud
          </a>
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3250">
          December 22, 2011 at 5:45 am
         </a>
        </div>
        <p>
         [] experimental, either learn some Haskell (starting here then continuing here) or maybee finally get around to learn some narrow AI/machine learning []
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-3269">
       <div class="comment-body" id="div-comment-3269">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://0.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          mathk
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3269">
          December 28, 2011 at 11:38 am
         </a>
        </div>
        <p>
         Isnt the lazy evaluation will not call doSomething here: when(x == y, doSomething(x))
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment byuser comment-author-admin bypostauthor even thread-even depth-1" id="comment-3272">
       <div class="comment-body" id="div-comment-3272">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo" height="52" src="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          <a class="url" href="http://ezyang.com" rel="external nofollow">
           Edward Z. Yang
          </a>
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3272">
          December 29, 2011 at 4:03 am
         </a>
        </div>
        <p>
         mathk: It depends on whether or not x == y.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-3876">
       <div class="comment-body" id="div-comment-3876">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://1.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          rodmoorhead
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3876">
          July 24, 2012 at 10:11 pm
         </a>
        </div>
        <p>
         Ignore everything you see after :: and you have no idea what Haskell is about. Among other things, strong typing will keep you from shooting yourself in the foot or somebody else in the head.  It insures that if the code compiles, the results will 99% of the time be what you were looking for.
        </p>
        <p>
         So disregard the type references at your peril.  If you cant correctly write the type statement, then you dont know what youre actually doing.
        </p>
        <p>
         And there are times when that is true.  And thats when you go to ghci and enter &gt; :t myfunction, and it will enlighten you.  Assuming it compiles :t will tell you what you did.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment byuser comment-author-admin bypostauthor even thread-even depth-1" id="comment-3877">
       <div class="comment-body" id="div-comment-3877">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo" height="52" src="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          <a class="url" href="http://ezyang.com" rel="external nofollow">
           Edward Z. Yang
          </a>
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-3877">
          July 24, 2012 at 10:15 pm
         </a>
        </div>
        <p>
         Hello rodmoorhead: The point is not to teach people what Haskell is about, just to get the comfortable enough to read it. If I have to explain what IO a and (forall s. ST s a) -&gt; a mean I lose. The great thing about erasure is you really can ignore the types!
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-4340">
       <div class="comment-body" id="div-comment-4340">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://0.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Cory
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-4340">
          October 11, 2012 at 1:38 pm
         </a>
        </div>
        <p>
         Im a little late to the party, but I feel like something out for future readers:
        </p>
        <p>
         Almost none of what is explained in this post is actually syntax: its basically all library functions. Yes, including the fish operators. do, list things, lambdas and left arrows are the only things that are really, truly syntax.
        </p>
        <p>
         The fish operators (love that name, by the way) are used in place of named functions because they are used to express data flow (or even control flow!) and arrow-like symbols make sense for this.
        </p>
        <p>
         Great post!
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment even thread-even depth-1" id="comment-6072">
       <div class="comment-body" id="div-comment-6072">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://1.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Lee
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-6072">
          May 3, 2013 at 11:31 pm
         </a>
        </div>
        <p>
         This post is nice! I think if the Dot part is written to:
        </p>
        <p>
         def composition(x):
         <br/>
         return f(g(x))
         <br/>
         composition(a + b)
        </p>
        <p>
         might be better, because the dot is used to compose functions. Otherwise I cannot get the difference if I change the dot to dollar sign. Whats your opinion?
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment byuser comment-author-admin bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-6073">
       <div class="comment-body" id="div-comment-6073">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo" height="52" src="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          <a class="url" href="http://ezyang.com" rel="external nofollow">
           Edward Z. Yang
          </a>
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-6073">
          May 4, 2013 at 11:49 pm
         </a>
        </div>
        <p>
         Lee: Well, your code fragment is not well formed Python; do you mean:
        </p>
        <pre>
         def composition(f, g):
  def h(x):
    return f(g(x))
  return h
        </pre>
        <p>
         Dollar and dot are frequently interchangeable. However, its considered good practice to use dot when possible, because it is easier to cut and paste function pipelines written that way.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment even thread-even depth-1" id="comment-6074">
       <div class="comment-body" id="div-comment-6074">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://0.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://0.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Lee
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-6074">
          May 5, 2013 at 1:19 pm
         </a>
        </div>
        <p>
         Edward: Sorry to give you bad code fragment. Actually, I want to use function composition to represent function h not dot. And yes, dollar and dot are frequently interchangeable, but you cannot write f . g . 1 + 2, right? Thats what I mean, if we get the purpose, we can understand the code more easier, although this is not a tutorial of haskell. But, maybe you are right, it may be better to those who dont know haskell that ignoring the difference between dollar and dot. Thanks for your answer :)
         <br/>
         BTW, Im new to haskell, Ive been reading learn you a haskell a couple of weeks. Any suggestions?
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment byuser comment-author-admin bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-6075">
       <div class="comment-body" id="div-comment-6075">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo" height="52" src="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          <a class="url" href="http://ezyang.com" rel="external nofollow">
           Edward Z. Yang
          </a>
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-6075">
          May 5, 2013 at 7:16 pm
         </a>
        </div>
        <p>
         Lee: Yep. The general rule is you can use dots all the way up to the point where you have something that is not a function.
        </p>
        <p>
         As for learning Haskell, keep reading, join #haskell (or find your local Haskell enthusiast) and keep asking questions.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment even thread-even depth-1" id="comment-6154">
       <div class="comment-body" id="div-comment-6154">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://0.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Anonymous
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-6154">
          June 17, 2013 at 3:03 am
         </a>
        </div>
        <p>
         Totally awesome post. Thank you for writing this.
        </p>
        <p>
         @Cory: Check out the Lambda Calculus to learn the why almost everything is a function, I literally just discovered Haskell and Functional Programming but understanding Lambda Calculus seems to me the key to grasping all this totally aweosme functional programming stuff.
         <br/>
         <a href="http://en.wikipedia.org/wiki/Lambda_calculus" rel="nofollow">
          http://en.wikipedia.org/wiki/Lambda_calculus
         </a>
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-6264">
       <div class="comment-body" id="div-comment-6264">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://0.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Thomas Geraghty
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-6264">
          October 23, 2013 at 6:40 am
         </a>
        </div>
        <p>
         Hey, great article, but wouldnt WithNames be more suited to a NamedTuple in Python? Classes should only really be used if there are public methods that operate on the datas state. PyLint complains about this and I agree, I think classes should only be used when you actually need them.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment byuser comment-author-admin bypostauthor even thread-even depth-1" id="comment-6265">
       <div class="comment-body" id="div-comment-6265">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo" height="52" src="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          <a class="url" href="http://ezyang.com" rel="external nofollow">
           Edward Z. Yang
          </a>
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-6265">
          October 23, 2013 at 4:46 pm
         </a>
        </div>
        <p>
         Sure; but Im not prescribing how to translate Haskell code into Python code; just how to read it, and reading it as an object is conceptually simpler than having to know what named tuples are.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-6301">
       <div class="comment-body" id="div-comment-6301">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://1.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Anonymous
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-6301">
          November 19, 2013 at 7:22 pm
         </a>
        </div>
        <p>
         Great Work! It would be very helpful if you could post a complete Haskell program covering major functions and an equivalent python code. I understand you are just helping to read Haskell code like python, though.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment even thread-even depth-1" id="comment-11293">
       <div class="comment-body" id="div-comment-11293">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://1.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          chekkal
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-11293">
          December 19, 2014 at 8:05 am
         </a>
        </div>
        <p>
         Awesome
        </p>
       </div>
      </li>
      <!-- #comment-## -->
      <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-14173">
       <div class="comment-body" id="div-comment-14173">
        <div class="comment-author vcard">
         <img alt="" class="avatar avatar-52 photo avatar-default" height="52" src="http://1.gravatar.com/avatar/?s=52&amp;d=mm&amp;r=g" srcset="http://0.gravatar.com/avatar/?s=104&amp;d=mm&amp;r=g 2x" width="52"/>
         <cite class="fn">
          Beth
         </cite>
         <span class="says">
          says:
         </span>
        </div>
        <div class="comment-meta commentmetadata">
         <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/comment-page-1/#comment-14173">
          May 18, 2015 at 11:19 am
         </a>
        </div>
        <p>
         If people ignore the types they will never be able to read Haskell. Most haskellers will probably send them the types instead of code. Without the types, when can not really use documentation or Hoogle properly as well.
        </p>
        <p>
         A better advice would be, if you are new to Haskell and want to learn how to read it, ignore everything under the types and read only the types.
        </p>
       </div>
      </li>
      <!-- #comment-## -->
     </ol>
     <form action="http://blog.ezyang.com/wp-comments-post.php" id="commentform" method="post">
      <h3>
       Leave a Comment
      </h3>
      <p>
       <label>
        Name (Optional):
        <input id="author" name="author" type="text" value=""/>
       </label>
      </p>
      <label>
       Comment:
       <textarea cols="50" id="comment" name="comment" rows="20">
       </textarea>
      </label>
      <div class="p reply" id="cancel-comment-reply">
       <a href="/2011/11/how-to-read-haskell/#respond" id="cancel-comment-reply-link" rel="nofollow" style="display:none;">
        Cancel Reply
       </a>
      </div>
      <input type="submit" value="Post Comment"/>
      <input name="comment_post_ID" type="hidden" value="6048"/>
      <input id="comment_post_ID" name="comment_post_ID" type="hidden" value="6048"/>
      <input id="comment_parent" name="comment_parent" type="hidden" value="0"/>
      <p style="display: none;">
       <input id="akismet_comment_nonce" name="akismet_comment_nonce" type="hidden" value="a118a6c4af"/>
      </p>
      <p style="display:none;">
       <input name="nxts" type="text" value="1436666205"/>
       <input name="nxts_signed" type="text" value="b44b1a9d658fd40a38c97c50b28709ed48f346e8"/>
       <input name="b09a595b22b6cf898b9b58fa" type="text" value="8439223d7954fa0"/>
       <input name="604d6fb615e8f492d" type="text" value=""/>
      </p>
      <p style="display: none;">
       <input id="ak_js" name="ak_js" type="hidden" value="194"/>
      </p>
     </form>
    </footer>
    <!-- /comments -->
    <div class="pagination p">
     <span class="previous">
      <a href="http://blog.ezyang.com/2011/10/the-new-reflections-on-trusting-trust/" rel="prev">
        Previous Post
      </a>
     </span>
     <span class="next">
      <a href="http://blog.ezyang.com/2011/11/ubuntu-oneiric-thinkpad-xmonad/" rel="next">
       Next Post 
      </a>
     </span>
    </div>
   </section>
  </div>
  <!-- /content -->
  <footer class="bottom small wrap">
   <p class="small">
     Inside 206-105. Powered by
    <a href="http://wordpress.org/">
     WordPress
    </a>
    , theme based off of
    <a href="http://jxnblk.com/ashley/">
     Ashley
    </a>
    .
   </p>
  </footer>
  <script src="http://blog.ezyang.com/wp-content/plugins/akismet/_inc/form.js?ver=3.1.1" type="text/javascript">
  </script>
  <script src="http://blog.ezyang.com/wp-includes/js/comment-reply.min.js?ver=4.2.1" type="text/javascript">
  </script>
 </body>
</html>