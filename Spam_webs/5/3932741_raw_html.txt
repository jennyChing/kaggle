<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" xmlns="http://www.w3.org/1999/xhtml">
 <head id="ctl00_ctl00_Head1">
  <base href="http://www.sqlteam.com/default.aspx"/>
  <link href="http://static2.sqlteamx.com/csharp.css" rel="stylesheet" type="text/css"/>
  <link href="http://static2.sqlteamx.com/sqlteam2.css" rel="stylesheet" type="text/css"/>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <link href="http://static2.sqlteamx.com/images/favicon.ico" rel="SHORTCUT ICON"/>
  <link href="http://static2.sqlteamx.com/images/sqlteam-touch-icon.png" rel="apple-touch-icon"/>
  <link href="http://feeds.sqlteam.com/sqlteam" rel="alternate" title="SQLTeam.com -- SQL Server Information" type="application/rss+xml"/>
  <title>
   More Trees &amp; Hierarchies in SQL - SQLTeam.com
  </title>
  <meta content="7i8SPJZFQb3hJ6+PgkEIIZ52tig8nuSuDW5/nhISIt4=" name="verify-v1"/>
  <meta content="noarchive" name="robots"/>
  <meta content="181788198509369" property="fb:page_id"/>
  <script type="text/javascript">
   var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-222470-2']);
    _gaq.push(['_trackPageview']);
    _gaq.push(['_trackPageLoadTime']);

    (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
    })();
  </script>
  <meta content="Hierarchies are sometimes difficult to store in SQL tables...things like trees, threaded forums, org charts and the like...and it's usually even harder to retrieve the hierarchy once you do store it.  Here's a method that's easy to understand and maintain, and gives you the full hierarchy (or any piece of it) very quickly and easily." name="DESCRIPTION"/>
  <meta content="en-US" name="MS.LOCALE"/>
  <meta content="Rob Volk" name="Author"/>
  <meta content="1 May 2002 04:00:00 GMT" name="Search.PublishDate"/>
  <meta content="kbArticle" name="Search.TopicType"/>
  <link href="http://www.sqlteam.com/article/more-trees-hierarchies-in-sql" rel="canonical"/>
 </head>
 <body>
  <!-- ================================  Site Header ========================================= -->
  <div id="site_header">
   <!-- Logo and banner -->
   <table>
    <tr style="height: 100px;">
     <td class="site_header_cell">
      <a href="../" id="ctl00_ctl00_TopHomePage">
       <img alt="SQLTeam.com Logo" height="80" src="http://static2.sqlteamx.com/images/SqlTeamHDR2.jpg" width="123"/>
      </a>
     </td>
     <td class="site_header_cell">
      <!-- Begin -  Site: SQLTeam.com Zone: SiteBanner -->
      <script language="javascript" type="text/javascript">
       &lt;!--
var browName = navigator.appName;
var SiteID = 1;
var ZoneID = 1;
var browDateTime = (new Date()).getTime();
if (browName=='Netscape')
{
document.write('&lt;s'+'cript lang' + 'uage="jav' + 'ascript" src="http://bulldog.sqlteam.com/a.aspx?ZoneID=' + ZoneID + '&amp;Task=Get&amp;IFR=False&amp;Browser=NETSCAPE4&amp;PageID=30521&amp;SiteID=' + SiteID + '&amp;Random=' + browDateTime + '"&gt;'); document.write('&lt;/'+'scr'+'ipt&gt;');
}
if (browName!='Netscape')
{
document.write('&lt;s'+'cript lang' + 'uage="jav' + 'ascript" src="http://bulldog.sqlteam.com/a.aspx?ZoneID=' + ZoneID + '&amp;Task=Get&amp;IFR=False&amp;PageID=30521&amp;SiteID=' + SiteID + '&amp;Random=' + browDateTime + '"&gt;'); document.write('&lt;/'+'scr'+'ipt&gt;');
}
// --&gt;
      </script>
      <noscript>
       <a href="http://bulldog.sqlteam.com/a.aspx?ZoneID=1&amp;Task=Click&amp;Mode=HTML&amp;SiteID=1&amp;PageID=30521" target="_blank">
        <img alt="" border="0" height="60" src="http://bulldog.sqlteam.com/a.aspx?ZoneID=1&amp;Task=Get&amp;Mode=HTML&amp;SiteID=1&amp;PageID=30521" width="468"/>
       </a>
      </noscript>
      <!-- End -  Site: SQLTeam.com Zone: SiteBanner -->
     </td>
    </tr>
   </table>
   <!-- End Logo and Banner -->
   <div class="site_header_menu1">
    <table class="site_header_menu1" width="100%">
     <tr>
      <td>
       <a href="../" id="ctl00_ctl00_hypHome">
        Home
       </a>
       |
       <a href="http://weblogs.sqlteam.com" id="ctl00_ctl00_hypWeblogs">
        Weblogs
       </a>
       |
       <a href="http://forums.sqlteam.com/" id="ctl00_ctl00_hypForums">
        Forums
       </a>
       |
       <!-- &lt;a href="newsletter.aspx"&gt;&nbsp;Newsletter&nbsp;&lt;/a&gt; |  -->
       <a href="../sql-server-links.aspx" id="ctl00_ctl00_hypLinks">
        SQL Server Links
       </a>
      </td>
      <td style="text-align: right; padding-right: 15px;">
       <!-- Google CSE Search Box Begins  -->
       <form action="/search.aspx" id="searchbox_011171816663894899992:aow51lf_dim" style="padding: 0px; margin: 0px;">
        Search:
        <input name="cx" type="hidden" value="011171816663894899992:aow51lf_dim"/>
        <input name="cof" type="hidden" value="FORID:9"/>
        <input name="q" size="25" type="text"/>
        <input name="sa" type="submit" value="Go"/>
       </form>
       <!-- Google CSE Search Box Ends -->
      </td>
     </tr>
    </table>
   </div>
   <div id="site_header_menu2">
    <a href="../forums/active.asp" id="ctl00_ctl00_HyperLink4">
     Active Forum Topics
    </a>
    |
    <a href="popular-articles.aspx">
     Popular Articles
    </a>
    |
    <a href="tag.aspx">
     All Articles by Tag
    </a>
    |
    <a href="../store.aspx" id="ctl00_ctl00_HyperLink5">
     SQL Server Books
    </a>
    |
    <!-- &nbsp;Resources&nbsp; | 
	&nbsp;Books&nbsp; | -->
    <a href="../about.aspx" id="ctl00_ctl00_HyperLink2">
     About
    </a>
   </div>
   <!-- Site Sponsorship -->
   <!-- Begin -  Site: SQLTeam.com Zone: SiteSponsor -->
   <script language="javascript" type="text/javascript">
    &lt;!--
var browName = navigator.appName;
var SiteID = 1;
var ZoneID = 7;
var browDateTime = (new Date()).getTime();
if (browName=='Netscape')
{
document.write('&lt;s'+'cript lang' + 'uage="jav' + 'ascript" src="http://bulldog.sqlteam.com/a.aspx?ZoneID=' + ZoneID + '&amp;Task=Get&amp;IFR=False&amp;Browser=NETSCAPE4&amp;PageID=42851&amp;SiteID=' + SiteID + '&amp;Random=' + browDateTime + '"&gt;'); document.write('&lt;/'+'scr'+'ipt&gt;');
}
if (browName!='Netscape')
{
document.write('&lt;s'+'cript lang' + 'uage="jav' + 'ascript" src="http://bulldog.sqlteam.com/a.aspx?ZoneID=' + ZoneID + '&amp;Task=Get&amp;IFR=False&amp;PageID=42851&amp;SiteID=' + SiteID + '&amp;Random=' + browDateTime + '"&gt;'); document.write('&lt;/'+'scr'+'ipt&gt;');
}
// --&gt;
   </script>
   <noscript>
    <a href="http://bulldog.sqlteam.com/a.aspx?ZoneID=7&amp;Task=Click&amp;Mode=HTML&amp;SiteID=1&amp;PageID=42851" target="_blank">
     <img alt="" border="0" height="20" src="http://bulldog.sqlteam.com/a.aspx?ZoneID=7&amp;Task=Get&amp;Mode=HTML&amp;SiteID=1&amp;PageID=42851" width="100"/>
    </a>
   </noscript>
   <!-- End -  Site: SQLTeam.com Zone: SiteSponsor -->
  </div>
  <!-- ================================  End Site Header ========================================= -->
  <form action="more-trees-hierarchies-in-sql?more-trees-hierarchies-in-sql" id="aspnetForm" method="post" name="aspnetForm">
   <div>
    <input id="__VIEWSTATE" name="__VIEWSTATE" type="hidden" value="/wEPDwUKMTAxMzgyMzIxMmRk6eaVMVLqbOhNjlOt2fFeMuYOYsg="/>
   </div>
   <div>
    <input id="__VIEWSTATEGENERATOR" name="__VIEWSTATEGENERATOR" type="hidden" value="2173C2F0"/>
    <input id="__EVENTVALIDATION" name="__EVENTVALIDATION" type="hidden" value="/wEWBQLRiJDyBAKTvbqfCAKc0O/RBQLG5aPEBQKatazxCGszKUhH8OFdtvWojZILQ+GExZ77"/>
   </div>
   <div id="site_body">
    <table id="content">
     <tr>
      <td id="leftcolumn">
       <div id="page_content">
        <!-- google_ad_section_start -->
        <div style="float: right; vertical-align:middle;">
         <g:plusone size="tall">
         </g:plusone>
        </div>
        <div id="article_header">
         <h1>
          More Trees &amp; Hierarchies in SQL
         </h1>
         <p class="new-tag-line">
          By
          <strong>
           <a href="http://www.sqlteam.com/author/rob-volk">
            Rob Volk
           </a>
          </strong>
          on
          <strong>
           1 May 2002
          </strong>
          |
          <a href="http://www.sqlteam.com/forums/topic.asp?TOPIC_ID=15499" rel="nofollow">
           131 Comments
          </a>
          | Tags:
          <a href="http://www.sqlteam.com/tag/sql-server-table-design">
           Table Design
          </a>
         </p>
         <p>
         </p>
         <hr style="text-align:center; " width="100%"/>
         <p>
          Hierarchies are sometimes difficult to store in SQL tables...things like trees, threaded forums, org charts and the like...and it's usually even harder to retrieve the hierarchy once you do store it.  Here's a method that's easy to understand and maintain, and gives you the full hierarchy (or any piece of it) very quickly and easily.
         </p>
        </div>
        <!-- &lt;hr  /&gt; -->
        <div id="article_body">
         <style>
          td.n { font-family: Arial, Helvetica; text-align: left; font-size: 10pt; }
td.head { font-family: Arial, Helvetica; text-align: center; background-color: 000000; color: FFFFFF; font-size: 10pt; }
         </style>
         While XML handles hierarchical data quite well, relational SQL doesn't.  There are several different ways to model a hierarchical structure.  The most common and familiar is known as the adjacency model, and it usually works like this:
         <p>
         </p>
         <table border="0" cellpadding="2" cellspacing="2">
          <tr>
           <td align="center" valign="top" width="300">
            The table would look like this:
            <p>
            </p>
            <table border="1" cellpadding="2" cellspacing="0">
             <tr>
              <td class="head">
               EmployeeID
              </td>
              <td class="head">
               Name
              </td>
              <td class="head">
               BossID
              </td>
             </tr>
             <tr>
              <td class="n">
               1001
              </td>
              <td class="n">
               Denis Eaton-Hogg
              </td>
              <td class="n">
               NULL
              </td>
             </tr>
             <tr>
              <td class="n">
               1002
              </td>
              <td class="n">
               Bobbi Flekman
              </td>
              <td class="n">
               1001
              </td>
             </tr>
             <tr>
              <td class="n">
               1003
              </td>
              <td class="n">
               Ian Faith
              </td>
              <td class="n">
               1002
              </td>
             </tr>
             <tr>
              <td class="n">
               1004
              </td>
              <td class="n">
               David St. Hubbins
              </td>
              <td class="n">
               1003
              </td>
             </tr>
             <tr>
              <td class="n">
               1005
              </td>
              <td class="n">
               Nigel Tufnel
              </td>
              <td class="n">
               1003
              </td>
             </tr>
             <tr>
              <td class="n">
               1006
              </td>
              <td class="n">
               Derek Smalls
              </td>
              <td class="n">
               1003
              </td>
             </tr>
            </table>
           </td>
           <td align="left" valign="top">
            And the org chart/indented list looks like this:
            <pre>
             Denis Eaton-Hogg
  Bobbi Flekman
    Ian Faith
      David St. Hubbins
      Nigel Tufnel
      Derek Smalls
            </pre>
           </td>
          </tr>
         </table>
         <p>
          It's called the "adjacency" model because the parent (boss) data is stored in the same row as the child (employee) data, in an adjacent column.  It's a pretty straightforward design that's easily understood by everyone...no deep relational theory needed.  You can find a person's boss easily, and you can find their coworkers by querying the BossID column.
         </p>
         <p>
          The trouble begins when you want to list several levels of a hierarchy.  To find the boss's boss, you would need to join the Employees table to itself, like this:
         </p>
         <pre>
          SELECT BigBoss.Name BigBoss, Boss.Name Boss, Employees.Name Employee
FROM Employees 
INNER JOIN Employees AS Boss ON Employees.BossID=Boss.EmployeeID
INNER JOIN Employees BigBoss ON Boss.BossID=BigBoss.EmployeeID
         </pre>
         And you'd get the following:
         <p>
         </p>
         <table border="1" cellpadding="2" cellspacing="0">
          <tr>
           <td class="head">
            BigBoss
           </td>
           <td class="head">
            Boss
           </td>
           <td class="head">
            Employee
           </td>
          </tr>
          <tr>
           <td class="n">
            Denis Eaton-Hogg
           </td>
           <td class="n">
            Bobbi Flekman
           </td>
           <td class="n">
            Ian Faith
           </td>
          </tr>
          <tr>
           <td class="n">
            Bobbi Flekman
           </td>
           <td class="n">
            Ian Faith
           </td>
           <td class="n">
            David St. Hubbins
           </td>
          </tr>
          <tr>
           <td class="n">
            Bobbi Flekman
           </td>
           <td class="n">
            Ian Faith
           </td>
           <td class="n">
            Nigel Tufnel
           </td>
          </tr>
          <tr>
           <td class="n">
            Bobbi Flekman
           </td>
           <td class="n">
            Ian Faith
           </td>
           <td class="n">
            Derek Smalls
           </td>
          </tr>
         </table>
         <p>
          For each level, you'd need to join the table to itself...not an attractive option if you have 5 or more levels!  It would be great if it could join itself as many times as needed.  This is called a recursive join, and though some database products support it (Oracle has the CONNECT BY syntax) SQL Server is not one of them.
         </p>
         <p>
          If you look in Books Online under "expanding hierarchies" you'll find a stored procedure that runs through an adjacency table to expand the hierarchy.  While it works, it's a procedural method that requires a stack (using a temp table) and can take a while to run with large hierarchies.  It also PRINTs out the indented list, so you'd need to modify it to use ANOTHER temp table if you wanted the results as a table/query.
         </p>
         <p>
          If you've followed Joe Celko's columns or bought his books, he recommends the
          <a href="http://www.intelligententerprise.com/001020/celko1_1.shtml">
           nested set model
          </a>
          for representing trees in SQL (he's
          <a href="http://www.sqlteam.com/Forums/topic.asp?TOPIC_ID=13233">
           posted it
          </a>
          on SQL Team
          <a href="http://www.sqlteam.com/Forums/topic.asp?TOPIC_ID=14099">
           a few times
          </a>
          ).  It's very well detailed in the following articles,
          <a href="http://www.dbmsmag.com/9603d06.html">
           Part I
          </a>
          ,
          <a href="http://www.dbmsmag.com/9604d06.html">
           II
          </a>
          ,
          <a href="http://www.dbmsmag.com/9605d06.html">
           III
          </a>
          ,
          <a href="http://www.dbmsmag.com/9606d06.html">
           IV
          </a>
          , and also in his book,
          <a href="http://www.amazon.com/exec/obidos/ASIN/1558605762/sqlteamcom-20">
           SQL For Smarties
          </a>
          , and I recommend checking it out.  It's very efficient and makes it extremely easy to pull out trees/subtrees from the table.
         </p>
         <p>
          However (you knew this was coming!) one of the issues I have with nested sets is the complexity required to do relatively simple tasks, like adding, deleting, or moving nodes in the tree.  Even finding an employee's immediate supervisor or subordinates requires 3 self-joins AND a subquery!  Joe admits this shortcoming in his book...and it's interesting that the solution ONLY appears in his book, I've never seen him post it online.
         </p>
         <p>
          Although there's a very seductive logic to nested sets, and it's easy to do complicated tree operations with them, I find them less intuitive than the adjacency model.  It's harder for me to visualize a hierarchy or org chart with them.  You may be able to use them more easily than I can, but if you also find them daunting, read on.
         </p>
         <p>
          So how to represent a hierarchy, using adjacency, and avoiding recursion wherever possible?  It's pretty easy really...you build it and store it in the table! (I've posted this method in
          <a href="http://www.sqlteam.com/Forums/topic.asp?TOPIC_ID=2828">
           this thread
          </a>
          a while back, and I'm elaborating on it here)
         </p>
         <p>
          Here's the table definition for the Tree:
         </p>
         <pre>
          CREATE TABLE Tree (
Node int NOT NULL IDENTITY(100, 1),
ParentNode int, 
EmployeeID int NOT NULL,  
Depth tinyint,
Lineage varchar(255) )
         </pre>
         <p>
          I'm keeping the Tree table separate for a few good reasons I'll discuss later, but you could simply add the Depth and Lineage columns to the Employees table above, and substitute BossID for ParentNode.  (I also didn't really WANT to use an identity column, but most people will anyway)  The terms "node" and "lineage" might seem unfamiliar, but I wanted to generalize them a little more than "child", "parent" and "hierarchy".
         </p>
         <p>
          Based on the Employees table, here's how the Tree will be filled:
         </p>
         <p>
         </p>
         <table border="1" cellpadding="2" cellspacing="0">
          <tr>
           <td class="head">
            Node
           </td>
           <td class="head">
            ParentNode
           </td>
           <td class="head">
            EmployeeID
           </td>
           <td class="head">
            Depth
           </td>
           <td class="head">
            Lineage
           </td>
          </tr>
          <tr>
           <td class="n">
            100
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            1001
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            NULL
           </td>
          </tr>
          <tr>
           <td class="n">
            101
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            1002
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            NULL
           </td>
          </tr>
          <tr>
           <td class="n">
            102
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            1003
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            NULL
           </td>
          </tr>
          <tr>
           <td class="n">
            103
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            1004
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            NULL
           </td>
          </tr>
          <tr>
           <td class="n">
            104
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            1005
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            NULL
           </td>
          </tr>
          <tr>
           <td class="n">
            105
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            1006
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            NULL
           </td>
          </tr>
         </table>
         <p>
          The first thing to do is to populate the parent nodes, which is unecessary if you use a single table, but it's easy to do in any case:
         </p>
         <pre>
          UPDATE T SET T.ParentNode=P.Node
FROM Tree T 
INNER JOIN Employees E ON T.EmployeeID=E.EmployeeID
INNER JOIN Employees B ON E.BossID=B.EmployeeID
INNER JOIN Tree P ON B.EmployeeID=P.EmployeeID
         </pre>
         <p>
          And you'll get this:
         </p>
         <p>
         </p>
         <table border="1" cellpadding="2" cellspacing="0">
          <tr>
           <td class="head">
            Node
           </td>
           <td class="head">
            ParentNode
           </td>
           <td class="head">
            EmployeeID
           </td>
           <td class="head">
            Depth
           </td>
           <td class="head">
            Lineage
           </td>
          </tr>
          <tr>
           <td class="n">
            100
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            1001
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            NULL
           </td>
          </tr>
          <tr>
           <td class="n">
            101
           </td>
           <td class="n">
            100
           </td>
           <td class="n">
            1002
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            NULL
           </td>
          </tr>
          <tr>
           <td class="n">
            102
           </td>
           <td class="n">
            101
           </td>
           <td class="n">
            1003
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            NULL
           </td>
          </tr>
          <tr>
           <td class="n">
            103
           </td>
           <td class="n">
            102
           </td>
           <td class="n">
            1004
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            NULL
           </td>
          </tr>
          <tr>
           <td class="n">
            104
           </td>
           <td class="n">
            102
           </td>
           <td class="n">
            1005
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            NULL
           </td>
          </tr>
          <tr>
           <td class="n">
            105
           </td>
           <td class="n">
            102
           </td>
           <td class="n">
            1006
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            NULL
           </td>
          </tr>
         </table>
         <p>
          This will only need to be done once, and afterwards you won't need to maintain the BossID column in the Employees table.  The next part is to find the root node of the tree, also known as the top-level, or big boss man, etc. in an org chart.  That's the node that has no parent (Null), so we will start there and set the Lineage column as the root:
         </p>
         <pre>
          UPDATE Tree SET Lineage='/', Depth=0 WHERE ParentNode Is Null
         </pre>
         <p>
          Once that's done, we can then update the rows who are immediate children of the root node:
         </p>
         <pre>
          UPDATE T SET T.depth = P.Depth + 1, 
T.Lineage = P.Lineage + Ltrim(Str(T.ParentNode,6,0)) + '/' 
FROM Tree AS T 
INNER JOIN Tree AS P ON (T.ParentNode=P.Node) 
WHERE P.Depth&gt;=0 
AND P.Lineage Is Not Null 
AND T.Depth Is Null
         </pre>
         In fact, we can just put a loop on this to run through all of the children/grandchildren etc. of the tree:
         <pre>
          WHILE EXISTS (SELECT * FROM Tree WHERE Depth Is Null) 
UPDATE T SET T.depth = P.Depth + 1, 
T.Lineage = P.Lineage + Ltrim(Str(T.ParentNode,6,0)) + '/' 
FROM Tree AS T 
INNER JOIN Tree AS P ON (T.ParentNode=P.Node) 
WHERE P.Depth&gt;=0 
AND P.Lineage Is Not Null 
AND T.Depth Is Null
         </pre>
         <p>
          Don't worry about the loop, it runs once for each level in the hierarchy...10 loops for 10 levels or generations.  For a corporation, 10 layers of management is pretty deep; for a family tree, you could trace an American family back to the Revolutionary War!  And under normal circumstances, you'd also only have to run this procedure once.  The final result is:
         </p>
         <p>
         </p>
         <table border="1" cellpadding="2" cellspacing="0">
          <tr>
           <td class="head">
            Node
           </td>
           <td class="head">
            ParentNode
           </td>
           <td class="head">
            EmployeeID
           </td>
           <td class="head">
            Depth
           </td>
           <td class="head">
            Lineage
           </td>
          </tr>
          <tr>
           <td class="n">
            100
           </td>
           <td class="n">
            NULL
           </td>
           <td class="n">
            1001
           </td>
           <td class="n">
            0
           </td>
           <td class="n">
            /
           </td>
          </tr>
          <tr>
           <td class="n">
            101
           </td>
           <td class="n">
            100
           </td>
           <td class="n">
            1002
           </td>
           <td class="n">
            1
           </td>
           <td class="n">
            /100/
           </td>
          </tr>
          <tr>
           <td class="n">
            102
           </td>
           <td class="n">
            101
           </td>
           <td class="n">
            1003
           </td>
           <td class="n">
            2
           </td>
           <td class="n">
            /100/101/
           </td>
          </tr>
          <tr>
           <td class="n">
            103
           </td>
           <td class="n">
            102
           </td>
           <td class="n">
            1004
           </td>
           <td class="n">
            3
           </td>
           <td class="n">
            /100/101/102/
           </td>
          </tr>
          <tr>
           <td class="n">
            104
           </td>
           <td class="n">
            102
           </td>
           <td class="n">
            1005
           </td>
           <td class="n">
            3
           </td>
           <td class="n">
            /100/101/102/
           </td>
          </tr>
          <tr>
           <td class="n">
            105
           </td>
           <td class="n">
            102
           </td>
           <td class="n">
            1006
           </td>
           <td class="n">
            3
           </td>
           <td class="n">
            /100/101/102/
           </td>
          </tr>
         </table>
         <p>
          You'll notice that for each node, the entire lineage back to the root is stored.  This means that finding someone's boss, or their boss' boss, doesn't require any self-joins or recursion to create an indented list.  In fact, it can be accomplished with a single SELECT!
         </p>
         <pre>
          SELECT Space(T.Depth*2) + E.Name AS Name
FROM Employees E 
INNER JOIN Tree T ON E.EmployeeID=T.EmployeeID
ORDER BY T.Lineage + Ltrim(Str(T.Node,6,0))
         </pre>
         If you kept everything in one table you would not even need the JOIN!  The Depth column comes in handy for performing the indent by using the Space() function.  Using ORDER BY Lineage...etc. will sort the org chart properly, with each subordinate nesting underneath their parent.  Sort order is maintained by Node values, and can be changed simply by updating the node value.  Inserting or deleting a new node does not affect the rest of the tree, unlike the nested set model.  The lineage column can be maintained automatically using triggers, so moving or promoting a node is a no-brainer.
        </div>
        <div id="article-footer">
         <script type="text/javascript">
          var switchTo5x = true;
         </script>
         <script src="http://w.sharethis.com/button/buttons.js" type="text/javascript">
         </script>
         <script type="text/javascript">
          stLight.options({ publisher: '7b89fc1c-9734-4c09-b90c-197dc5f591dd' });
         </script>
         <table>
          <tr>
           <td valign="top">
            <p style="font-size: 125%;">
             Discuss this article:
             <strong>
              <a href="http://www.sqlteam.com/forums/topic.asp?TOPIC_ID=15499" rel="nofollow">
               131 Comments
              </a>
             </strong>
             so far.
             <a href="print/more-trees-hierarchies-in-sql" rel="nofollow">
              Print this Article
             </a>
             .
            </p>
            <p>
             If you like this article you can sign up for our
             <strong>
              weekly newsletter
             </strong>
             .  
There's an opt-out link at the
bottom of each newsletter so it's easy to unsubscribe at any time.
            </p>
            <p>
             Email Address:
             <input id="ctl00_ctl00_SiteContent_PageBody_articleRepeater_ctl00_Email2" name="ctl00$ctl00$SiteContent$PageBody$articleRepeater$ctl00$Email2" style="width:225px;" type="text"/>
             <input name="ctl00$ctl00$SiteContent$PageBody$articleRepeater$ctl00$ctl00" type="submit" value="Subscribe"/>
            </p>
           </td>
           <td style="width: 125px; padding-left: 10px;" valign="top">
            <p>
             <g:plusone size="medium">
             </g:plusone>
            </p>
            <p>
             <span class="st_twitter_hcount" displaytext="Tweet">
             </span>
            </p>
            <p>
             <span class="st_delicious_hcount" displaytext="Delicious">
             </span>
            </p>
            <p>
            </p>
            <span class="st_facebook_hcount" displaytext="Facebook">
            </span>
            <p>
            </p>
            <span class="st_email_hcount" displaytext="Email">
            </span>
           </td>
          </tr>
         </table>
        </div>
        <table>
         <tr>
          <td style="vertical-align: top; padding-right: 10px;">
           <h2>
            Related Articles
           </h2>
           <p>
            <a href="http://www.sqlteam.com/article/implementing-table-interfaces">
             Implementing Table Interfaces
            </a>
            (19 May 2008)
           </p>
           <p>
            <a href="http://www.sqlteam.com/article/implementing-table-inheritance-in-sql-server">
             Implementing Table Inheritance in SQL Server
            </a>
            (20 February 2008)
           </p>
           <p>
            <a href="http://www.sqlteam.com/article/custom-auto-generated-sequences-with-sql-server">
             Custom Auto-Generated Sequences with SQL Server
            </a>
            (24 April 2007)
           </p>
           <p>
            <a href="http://www.sqlteam.com/article/the-case-for-the-surrogate-key">
             The Case for the Surrogate Key
            </a>
            (9 August 2002)
           </p>
           <p>
            <a href="http://www.sqlteam.com/article/using-table-variables">
             Using TABLE Variables
            </a>
            (7 June 2002)
           </p>
           <p>
            <a href="http://www.sqlteam.com/article/default-constraint-names">
             Default Constraint Names
            </a>
            (24 January 2001)
           </p>
           <p>
            <a href="http://www.sqlteam.com/article/temporary-tables">
             Temporary Tables
            </a>
            (17 January 2001)
           </p>
           <p>
            <a href="http://www.sqlteam.com/article/denormalize-for-performance">
             Denormalize for Performance
            </a>
            (10 January 2001)
           </p>
          </td>
          <td style="vertical-align: top; padding-left: 10px; border-left: dotted 1px black;">
           <h2>
            Other Recent Forum Posts
           </h2>
           <p>
           </p>
           <p style="padding-bottom: 6pt; margin-bottom: 0pt;">
            <a href="http://www.sqlteam.com/forums/topic.asp?TOPIC_ID=148984" rel="nofollow">
             conditional query
            </a>
            (8Replies)
           </p>
           <p style="padding-bottom: 6pt; margin-bottom: 0pt;">
            <a href="http://www.sqlteam.com/forums/topic.asp?TOPIC_ID=27866" rel="nofollow">
             HELP!  - Corrupt BAK file - What are my options?
            </a>
            (12Replies)
           </p>
           <p style="padding-bottom: 6pt; margin-bottom: 0pt;">
            <a href="http://www.sqlteam.com/forums/topic.asp?TOPIC_ID=69942" rel="nofollow">
             Mass update from an Excel Spreadsheet
            </a>
            (4Replies)
           </p>
           <p style="padding-bottom: 6pt; margin-bottom: 0pt;">
            <a href="http://www.sqlteam.com/forums/topic.asp?TOPIC_ID=200485" rel="nofollow">
             Having problems installing SQL 2008 Exp
            </a>
            (3Replies)
           </p>
           <p style="padding-bottom: 6pt; margin-bottom: 0pt;">
            <a href="http://www.sqlteam.com/forums/topic.asp?TOPIC_ID=201217" rel="nofollow">
             Request Help Please
            </a>
            (0Replies)
           </p>
           <p style="padding-bottom: 6pt; margin-bottom: 0pt;">
            <a href="http://www.sqlteam.com/forums/topic.asp?TOPIC_ID=201215" rel="nofollow">
             Cost Tracker in SSRS 08
            </a>
            (1Reply)
           </p>
           <p style="padding-bottom: 6pt; margin-bottom: 0pt;">
            <a href="http://www.sqlteam.com/forums/topic.asp?TOPIC_ID=51289" rel="nofollow">
             UDFs  GETWORDCOUNT,  GETWORDNUM
            </a>
            (24Replies)
           </p>
           <p style="padding-bottom: 6pt; margin-bottom: 0pt;">
            <a href="http://www.sqlteam.com/forums/topic.asp?TOPIC_ID=201209" rel="nofollow">
             SSRS need help using inscope with a matrix
            </a>
            (2Replies)
           </p>
          </td>
         </tr>
        </table>
        <script src="http://apis.google.com/js/plusone.js" type="text/javascript">
        </script>
        <!-- google_ad_section_end -->
       </div>
      </td>
      <td id="rightcolumn">
       <div class="right-box" style="">
        <h2>
         Subscribe to SQLTeam.com
        </h2>
        <p>
         Weekly
         <a href="newsletter.aspx">
          SQL Server newsletter
         </a>
         with articles, 
forum posts, and blog posts via email.  Subscribers receive our
         <strong>
          white paper
with performance tips for developers
         </strong>
         .
        </p>
        <!-- &lt;p style="text-align: center; font-size: 75%;"&gt;Enter your email address:&lt;br/&gt; -->
        <p style="text-align:center;">
         <input id="ctl00_ctl00_SiteContent_RightColumn1_NS_Email" name="ctl00$ctl00$SiteContent$RightColumn1$NS$Email" style="width:165px;" type="text"/>
         <input id="ctl00_ctl00_SiteContent_RightColumn1_NS_btnSubscribe" name="ctl00$ctl00$SiteContent$RightColumn1$NS$btnSubscribe" type="submit" value="Subscribe"/>
        </p>
        <p style="text-align: center;">
         <a href="http://feeds.sqlteam.com/Sqlteam" style="margin-left: 3px;  padding: 0 0 0 19px;  background: url('http://static2.sqlteamx.com/images/feed-icon-14x14.png') no-repeat 0 50%;">
          SQLTeam.com Articles via RSS
         </a>
        </p>
        <p style="text-align: center;">
         <a href="http://feeds.sqlteam.com/SqlteamcomWeblogs" style="margin-left: 3px;  padding: 0 0 0 19px;  background: url('http://static2.sqlteamx.com/images/feed-icon-14x14.png') no-repeat 0 50%;">
          SQLTeam.com Weblog via RSS
         </a>
        </p>
       </div>
       <!-- &lt;p style="text-align:center; border-bottom: dotted 1px silver; border-top: solid 1px silver; color:silver; padding-bottom: 3px; padding-top:3px; margin-top: 10px;"&gt;Advertisement&lt;/p&gt; -->
       <!-- &lt;p style="text-align: center;"&gt; -->
       <div class="right-box" style="margin-top: 15px; padding-bottom: 15px;">
        <p style="font-size: 9px; text-align: center;">
         - Advertisement -
        </p>
        <!-- Begin -  Site: SQLTeam.com Zone: Site300x250 -->
        <script language="javascript" type="text/javascript">
         &lt;!--
var browName = navigator.appName;
var SiteID = 1;
var ZoneID = 12;
var browDateTime = (new Date()).getTime();
if (browName=='Netscape')
{
document.write('&lt;s'+'cript lang' + 'uage="jav' + 'ascript" src="http://bulldog.sqlteam.com/a.aspx?ZoneID=' + ZoneID + '&amp;Task=Get&amp;IFR=False&amp;Browser=NETSCAPE4&amp;PageID=47369&amp;SiteID=' + SiteID + '&amp;Random=' + browDateTime  + '"&gt;'); document.write('&lt;/'+'scr'+'ipt&gt;');
}
if (browName!='Netscape')
{
document.write('&lt;s'+'cript lang' + 'uage="jav' + 'ascript" src="http://bulldog.sqlteam.com/a.aspx?ZoneID=' + ZoneID + '&amp;Task=Get&amp;IFR=False&amp;PageID=47369&amp;SiteID=' + SiteID + '&amp;Random=' + browDateTime  + '"&gt;'); document.write('&lt;/'+'scr'+'ipt&gt;');
}
// --&gt;
        </script>
        <noscript>
         <a href="http://bulldog.sqlteam.com/a.aspx?ZoneID=12&amp;Task=Click&amp;Mode=HTML&amp;SiteID=1&amp;PageID=47369" target="_blank">
          <img alt="" border="0" height="250" src="http://bulldog.sqlteam.com/a.aspx?ZoneID=12&amp;Task=Get&amp;Mode=HTML&amp;SiteID=1&amp;PageID=47369" width="300"/>
         </a>
        </noscript>
        <!-- End -  Site: SQLTeam.com Zone: Site300x250 -->
        <!-- &lt;/p&gt; -->
       </div>
       <div class="right-box" style="margin-top: 15px;">
        <h2>
         Resources
        </h2>
        <p>
         <a href="../sql-server-resources.aspx" id="ctl00_ctl00_SiteContent_RightColumn1_rs1_HyperResources">
          SQL Server Resources
         </a>
        </p>
        <p>
         <a href="../advertise.aspx" id="ctl00_ctl00_SiteContent_RightColumn1_rs1_HyperLink1">
          Advertise on SQLTeam.com
         </a>
        </p>
        <p>
         <a href="../store.aspx" id="ctl00_ctl00_SiteContent_RightColumn1_rs1_HyperLink4">
          SQL Server Books
         </a>
        </p>
        <p>
         <a href="../newsletter.aspx" id="ctl00_ctl00_SiteContent_RightColumn1_rs1_HyperLink5">
          SQLTeam.com Newsletter
         </a>
        </p>
        <p>
         <a href="../contactus.aspx" id="ctl00_ctl00_SiteContent_RightColumn1_rs1_HyperLink2">
          Contact Us
         </a>
        </p>
        <p>
         <a href="../about.aspx" id="ctl00_ctl00_SiteContent_RightColumn1_rs1_HyperLink3">
          About the Site
         </a>
        </p>
        <p>
         <span id="ctl00_ctl00_SiteContent_RightColumn1_rs1_lblUserName">
         </span>
        </p>
       </div>
      </td>
     </tr>
    </table>
   </div>
   <div id="site-footer">
    <hr/>
     2000-2015 
    SQLTeam Publishing, LLC |
    <a href="../privacy.aspx" id="ctl00_ctl00_privacyHyperlink">
     Privacy Policy
    </a>
   </div>
  </form>
  <script src="http://www.google.com/coop/cse/brand?form=searchbox_011171816663894899992%3Aaow51lf_dim" type="text/javascript">
  </script>
 </body>
</html>