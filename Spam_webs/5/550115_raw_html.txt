<!DOCTYPE html>
<html lang="en">
 <head>
  <title>
   New Adventures in Software
  </title>
  <meta content="text/html;charset=utf-8" http-equiv="Content-Type"/>
  <meta content="software, engineering, development, programming, java, haskell, python, php, objective-c, android, ios, open, source, mobile, evoultionary, computation, genetic, algorithms, artificial, intelligence" name="keywords"/>
  <meta content="Software development blog written by Dan Dyer." name="description"/>
  <meta content="Dan Dyer" name="author"/>
  <link href="http://blog.uncommons.org/feed/" rel="alternate" title="RSS" type="application/rss+xml"/>
  <link href="http://blog.uncommons.org/feed/atom/" rel="alternate" title="Atom" type="application/atom+xml"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <link href="http://netdna.bootstrapcdn.com/bootswatch/3.0.0/flatly/bootstrap.min.css" rel="stylesheet"/>
  <style media="screen" type="text/css">
   @import url( http://blog.uncommons.org/wp-content/themes/bootstrap/style.css );
  </style>
  <link href="http://blog.uncommons.org/2014/08/" rel="archives" title="August 2014"/>
  <link href="http://blog.uncommons.org/2014/07/" rel="archives" title="July 2014"/>
  <link href="http://blog.uncommons.org/2014/01/" rel="archives" title="January 2014"/>
  <link href="http://blog.uncommons.org/2013/12/" rel="archives" title="December 2013"/>
  <link href="http://blog.uncommons.org/2013/06/" rel="archives" title="June 2013"/>
  <link href="http://blog.uncommons.org/2013/05/" rel="archives" title="May 2013"/>
  <link href="http://blog.uncommons.org/2013/01/" rel="archives" title="January 2013"/>
  <link href="http://blog.uncommons.org/2012/11/" rel="archives" title="November 2012"/>
  <link href="http://blog.uncommons.org/2012/10/" rel="archives" title="October 2012"/>
  <link href="http://blog.uncommons.org/2012/08/" rel="archives" title="August 2012"/>
  <link href="http://blog.uncommons.org/2012/06/" rel="archives" title="June 2012"/>
  <link href="http://blog.uncommons.org/2012/04/" rel="archives" title="April 2012"/>
  <link href="http://blog.uncommons.org/2012/03/" rel="archives" title="March 2012"/>
  <link href="http://blog.uncommons.org/2012/02/" rel="archives" title="February 2012"/>
  <link href="http://blog.uncommons.org/2012/01/" rel="archives" title="January 2012"/>
  <link href="http://blog.uncommons.org/2011/11/" rel="archives" title="November 2011"/>
  <link href="http://blog.uncommons.org/2011/10/" rel="archives" title="October 2011"/>
  <link href="http://blog.uncommons.org/2011/09/" rel="archives" title="September 2011"/>
  <link href="http://blog.uncommons.org/2011/08/" rel="archives" title="August 2011"/>
  <link href="http://blog.uncommons.org/2011/07/" rel="archives" title="July 2011"/>
  <link href="http://blog.uncommons.org/2011/06/" rel="archives" title="June 2011"/>
  <link href="http://blog.uncommons.org/2011/05/" rel="archives" title="May 2011"/>
  <link href="http://blog.uncommons.org/2011/04/" rel="archives" title="April 2011"/>
  <link href="http://blog.uncommons.org/2011/03/" rel="archives" title="March 2011"/>
  <link href="http://blog.uncommons.org/2011/02/" rel="archives" title="February 2011"/>
  <link href="http://blog.uncommons.org/2011/01/" rel="archives" title="January 2011"/>
  <link href="http://blog.uncommons.org/2010/12/" rel="archives" title="December 2010"/>
  <link href="http://blog.uncommons.org/2010/10/" rel="archives" title="October 2010"/>
  <link href="http://blog.uncommons.org/2010/09/" rel="archives" title="September 2010"/>
  <link href="http://blog.uncommons.org/2010/08/" rel="archives" title="August 2010"/>
  <link href="http://blog.uncommons.org/2010/07/" rel="archives" title="July 2010"/>
  <link href="http://blog.uncommons.org/2010/05/" rel="archives" title="May 2010"/>
  <link href="http://blog.uncommons.org/2010/02/" rel="archives" title="February 2010"/>
  <link href="http://blog.uncommons.org/2010/01/" rel="archives" title="January 2010"/>
  <link href="http://blog.uncommons.org/2009/12/" rel="archives" title="December 2009"/>
  <link href="http://blog.uncommons.org/2009/11/" rel="archives" title="November 2009"/>
  <link href="http://blog.uncommons.org/2009/10/" rel="archives" title="October 2009"/>
  <link href="http://blog.uncommons.org/2009/09/" rel="archives" title="September 2009"/>
  <link href="http://blog.uncommons.org/2009/08/" rel="archives" title="August 2009"/>
  <link href="http://blog.uncommons.org/2009/07/" rel="archives" title="July 2009"/>
  <link href="http://blog.uncommons.org/2009/06/" rel="archives" title="June 2009"/>
  <link href="http://blog.uncommons.org/2009/05/" rel="archives" title="May 2009"/>
  <link href="http://blog.uncommons.org/2009/04/" rel="archives" title="April 2009"/>
  <link href="http://blog.uncommons.org/2009/03/" rel="archives" title="March 2009"/>
  <link href="http://blog.uncommons.org/2009/02/" rel="archives" title="February 2009"/>
  <link href="http://blog.uncommons.org/2009/01/" rel="archives" title="January 2009"/>
  <link href="http://blog.uncommons.org/2008/12/" rel="archives" title="December 2008"/>
  <link href="http://blog.uncommons.org/2008/11/" rel="archives" title="November 2008"/>
  <link href="http://blog.uncommons.org/2008/10/" rel="archives" title="October 2008"/>
  <link href="http://blog.uncommons.org/2008/09/" rel="archives" title="September 2008"/>
  <link href="http://blog.uncommons.org/2008/08/" rel="archives" title="August 2008"/>
  <link href="http://blog.uncommons.org/2008/07/" rel="archives" title="July 2008"/>
  <link href="http://blog.uncommons.org/2008/06/" rel="archives" title="June 2008"/>
  <link href="http://blog.uncommons.org/2008/05/" rel="archives" title="May 2008"/>
  <link href="http://blog.uncommons.org/2008/04/" rel="archives" title="April 2008"/>
  <link href="http://blog.uncommons.org/2008/03/" rel="archives" title="March 2008"/>
  <link href="http://blog.uncommons.org/2008/02/" rel="archives" title="February 2008"/>
  <link href="http://blog.uncommons.org/2008/01/" rel="archives" title="January 2008"/>
  <link href="http://blog.uncommons.org/2007/12/" rel="archives" title="December 2007"/>
  <link href="http://blog.uncommons.org/2007/11/" rel="archives" title="November 2007"/>
  <link href="http://blog.uncommons.org/2007/10/" rel="archives" title="October 2007"/>
  <link href="http://blog.uncommons.org/2007/09/" rel="archives" title="September 2007"/>
  <link href="http://blog.uncommons.org/2007/08/" rel="archives" title="August 2007"/>
  <link href="http://blog.uncommons.org/2007/07/" rel="archives" title="July 2007"/>
  <link href="http://blog.uncommons.org/2007/06/" rel="archives" title="June 2007"/>
  <link href="http://blog.uncommons.org/2007/05/" rel="archives" title="May 2007"/>
  <link href="http://blog.uncommons.org/2006/12/" rel="archives" title="December 2006"/>
  <link href="http://blog.uncommons.org/2006/11/" rel="archives" title="November 2006"/>
  <link href="http://blog.uncommons.org/2006/10/" rel="archives" title="October 2006"/>
  <link href="http://blog.uncommons.org/2006/09/" rel="archives" title="September 2006"/>
  <link href="http://blog.uncommons.org/2006/07/" rel="archives" title="July 2006"/>
  <link href="http://blog.uncommons.org/2006/04/" rel="archives" title="April 2006"/>
  <script type="text/javascript">
   window._wpemojiSettings = {"baseUrl":"http:\/\/s.w.org\/images\/core\/emoji\/72x72\/","ext":".png","source":{"wpemoji":"http:\/\/blog.uncommons.org\/wp-includes\/js\/wp-emoji.js?ver=4.2.2","twemoji":"http:\/\/blog.uncommons.org\/wp-includes\/js\/twemoji.js?ver=4.2.2"}};
			( function( window, document, settings ) {
	var src, ready;

	/**
	 * Detect if the browser supports rendering emoji or flag emoji. Flag emoji are a single glyph
	 * made of two characters, so some browsers (notably, Firefox OS X) don't support them.
	 *
	 * @since 4.2.0
	 *
	 * @param type {String} Whether to test for support of "simple" or "flag" emoji.
	 * @return {Boolean} True if the browser can render emoji, false if it cannot.
	 */
	function browserSupportsEmoji( type ) {
		var canvas = document.createElement( 'canvas' ),
			context = canvas.getContext &amp;&amp; canvas.getContext( '2d' );

		if ( ! context || ! context.fillText ) {
			return false;
		}

		/*
		 * Chrome on OS X added native emoji rendering in M41. Unfortunately,
		 * it doesn't work when the font is bolder than 500 weight. So, we
		 * check for bold rendering support to avoid invisible emoji in Chrome.
		 */
		context.textBaseline = 'top';
		context.font = '600 32px Arial';

		if ( type === 'flag' ) {
			/*
			 * This works because the image will be one of three things:
			 * - Two empty squares, if the browser doesn't render emoji
			 * - Two squares with 'G' and 'B' in them, if the browser doesn't render flag emoji
			 * - The British flag
			 *
			 * The first two will encode to small images (1-2KB data URLs), the third will encode
			 * to a larger image (4-5KB data URL).
			 */
			context.fillText( String.fromCharCode( 55356, 56812, 55356, 56807 ), 0, 0 );
			return canvas.toDataURL().length &gt; 3000;
		} else {
			/*
			 * This creates a smiling emoji, and checks to see if there is any image data in the
			 * center pixel. In browsers that don't support emoji, the character will be rendered
			 * as an empty square, so the center pixel will be blank.
			 */
			context.fillText( String.fromCharCode( 55357, 56835 ), 0, 0 );
			return context.getImageData( 16, 16, 1, 1 ).data[0] !== 0;
		}
	}

	function addScript( src ) {
		var script = document.createElement( 'script' );

		script.src = src;
		script.type = 'text/javascript';
		document.getElementsByTagName( 'head' )[0].appendChild( script );
	}

	settings.supports = {
		simple: browserSupportsEmoji( 'simple' ),
		flag:   browserSupportsEmoji( 'flag' )
	};

	settings.DOMReady = false;
	settings.readyCallback = function() {
		settings.DOMReady = true;
	};

	if ( ! settings.supports.simple || ! settings.supports.flag ) {
		ready = function() {
			settings.readyCallback();
		};

		if ( document.addEventListener ) {
			document.addEventListener( 'DOMContentLoaded', ready, false );
			window.addEventListener( 'load', ready, false );
		} else {
			window.attachEvent( 'onload', ready );
			document.attachEvent( 'onreadystatechange', function() {
				if ( 'complete' === document.readyState ) {
					settings.readyCallback();
				}
			} );
		}

		src = settings.source || {};

		if ( src.concatemoji ) {
			addScript( src.concatemoji );
		} else if ( src.wpemoji &amp;&amp; src.twemoji ) {
			addScript( src.twemoji );
			addScript( src.wpemoji );
		}
	}

} )( window, document, window._wpemojiSettings );
  </script>
  <style type="text/css">
   img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
  </style>
  <link href="http://blog.uncommons.org/wp-content/plugins/wp-syntax/wp-syntax.css?ver=4.2.2" id="wp-syntax-css-css" media="all" rel="stylesheet" type="text/css"/>
  <link href="http://blog.uncommons.org/xmlrpc.php?rsd" rel="EditURI" title="RSD" type="application/rsd+xml"/>
  <link href="http://blog.uncommons.org/wp-includes/wlwmanifest.xml" rel="wlwmanifest" type="application/wlwmanifest+xml"/>
  <meta content="WordPress 4.2.2" name="generator"/>
  <!-- wpSpoiler Code -->
  <script type="text/javascript">
   function wpSpoilerToggle(spoiler, link, showtext, hidetext) {
                if (spoiler.style.display != 'none') {
                    spoiler.style.display = 'none';
                    link.innerHTML = showtext;
                    link.className = 'spoiler_link_show';
                } else {
                    spoiler.style.display = 'block';
                    link.innerHTML = hidetext;
                    link.className = 'spoiler_link_hide';
                }
            }
  </script>
  <script src="http://code.jquery.com/jquery-1.9.1.min.js">
  </script>
  <script src="http://netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js">
  </script>
  <script src="http://uncommons.org/amazon.js" type="text/javascript">
  </script>
  <script type="text/javascript">
   var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-3303586-1'],
                ['_trackPageview'],
                ['_setDomainName', '.uncommons.org'],
                ['_setAllowHash', 'false']);
      (function() {
        var ga = document.createElement('script');
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 
                  'http://www') + '.google-analytics.com/ga.js';
        ga.setAttribute('async', 'true');
        document.documentElement.firstChild.appendChild(ga);
      })();
  </script>
 </head>
 <body>
  <div id="wrap">
   <nav class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="navbar-header">
     <a class="navbar-brand" href="http://dandyer.co.uk/">
      Dan Dyer
     </a>
     <button class="navbar-toggle" data-target=".navbar-ex1-collapse" data-toggle="collapse" type="button">
      <span class="sr-only">
       Toggle navigation
      </span>
      <span class="icon-bar">
      </span>
      <span class="icon-bar">
      </span>
      <span class="icon-bar">
      </span>
     </button>
    </div>
    <div class="collapse navbar-collapse navbar-ex1-collapse">
     <ul class="nav navbar-nav">
      <li>
       <a href="http://blog.uncommons.org">
        Blog
       </a>
      </li>
      <li class="dropdown">
       <a class="dropdown-toggle" data-toggle="dropdown" href="#">
        Open Source Software
        <b class="caret">
        </b>
       </a>
       <ul class="dropdown-menu">
        <li class="dropdown-header" role="presentation">
         Evolution / Machine Learning
        </li>
        <li>
         <a href="http://watchmaker.uncommons.org">
          Watchmaker Framework
         </a>
        </li>
        <li>
         <a href="http://zeitgeist.uncommons.org">
          Zeitgeist
         </a>
        </li>
        <li class="divider" role="presentation">
        </li>
        <li class="dropdown-header" role="presentation">
         Java Tools / Libraries
        </li>
        <li>
         <a href="http://reportng.uncommons.org">
          ReportNG
         </a>
        </li>
        <li>
         <a href="http://maths.uncommons.org">
          Uncommons Maths
         </a>
        </li>
        <li>
         <a href="http://antlib.uncommons.org">
          Uncommons Antlib
         </a>
        </li>
        <li>
         <a href="http://dwdyer.github.io/ansiconsolelogger/">
          ANSI Console Logger
         </a>
        </li>
        <li class="divider" role="presentation">
        </li>
        <li class="dropdown-header" role="presentation">
         Sports
        </li>
        <li>
         <a href="https://github.com/dwdyer/anorak">
          Anorak
         </a>
        </li>
        <li>
         <a href="http://fsa.footballpredictions.net">
          Football Statistics Applet
         </a>
        </li>
        <li class="divider" role="presentation">
        </li>
        <li class="dropdown-header" role="presentation">
         Miscellaneous Tools
        </li>
        <li>
         <a href="/password/">
          SHA-256 Password Generator
         </a>
        </li>
        <li>
         <a href="/pstlb/">
          PokerStars TLB Calculator
         </a>
        </li>
       </ul>
      </li>
     </ul>
     <ul class="nav navbar-nav navbar-right">
      <li>
       <a href="https://linkedin.com/in/dwdyer" rel="me">
        LinkedIn
       </a>
      </li>
      <li>
       <a href="https://twitter.com/dwdyer" rel="me">
        Twitter
       </a>
      </li>
      <li>
       <a href="https://github.com/dwdyer" rel="me">
        GitHub
       </a>
      </li>
      <li class="dropdown">
       <a class="dropdown-toggle" data-toggle="dropdown" href="#">
        More
        <b class="caret">
        </b>
       </a>
       <ul class="dropdown-menu">
        <li>
         <a href="https://www.flickr.com/photos/dwdyer/" rel="me">
          Flickr
         </a>
        </li>
        <li>
         <a href="http://lanyrd.com/profile/dwdyer/" rel="me">
          Lanyrd
         </a>
        </li>
        <li>
         <a href="http://last.fm/user/dwdyer" rel="me">
          Last.fm
         </a>
        </li>
        <li>
         <a href="http://stackoverflow.com/u/5171" rel="me">
          Stack Overflow
         </a>
        </li>
       </ul>
      </li>
     </ul>
    </div>
   </nav>
   <div class="container">
    <div class="page-header">
     <h1>
      New Adventures in Software
      <small>
       by Dan Dyer
      </small>
     </h1>
    </div>
    <div class="row">
     <div class="col-md-9">
      <div class="post clearfix">
       <h2 class="posttitle">
        <a href="http://blog.uncommons.org/2014/08/08/play-our-online-football-game-and-help-raise-money-for-charities/" rel="bookmark" title="Permanent Link to Play Our Online Football Game and Help Raise Money for Charities">
         Play Our Online Football Game and Help Raise Money for Charities
        </a>
       </h2>
       <p>
        <small>
         Posted in
         <a href="http://blog.uncommons.org/category/python/" rel="category tag">
          Python
         </a>
         ,
         <a href="http://blog.uncommons.org/category/real-world/" rel="category tag">
          The Real World
         </a>
         by
         <b>
          Dan
         </b>
         on August 8th, 2014
        </small>
       </p>
       <div class="entry">
        <p>
         If youre not in the UK or youre not interested in the Beautiful Game and helping charities then this post isnt for you. Ive generally tried to keep the articleson this siteat least tangentially related to software development but on this occasion the link is a bit more tenuous than usual.
        </p>
        <p>
         <a href="https://dwad.org/super10/">
          <img alt="Super10 promo image" class="size-full wp-image-1953 img-responsive pull-right" src="http://blog.uncommons.org/wp-content/uploads/2014/08/super10.jpg" style="margin: 0 0 20px 20px;"/>
         </a>
        </p>
        <p>
         Id like to ask you to consider playing our online charity football game,
         <a href="https://dwad.org/super10/">
          Super10
         </a>
         . You can win a share of several hundred pounds in
         <a href="https://dwad.org/super10/prizes/">
          cash prizes
         </a>
         and, more importantly, you can help to raise money for charities. The charity aspect is two-pronged. Firstly you can win money for one of the four organisationsthat the game is supporting this season (
         <a href="http://demelza.org.uk">
          Demelza Hospice Care for Children
         </a>
         ,
         <a href="http://www.kssairambulance.org.uk">
          Kent, Surrey and Sussex Air Ambulance
         </a>
         ,
         <a href="http://www.pilgrimshospices.org">
          Pilgrims Hospices
         </a>
         , and homelessness charity
         <a href="http://www.porchlight.org.uk">
          Porchlight
         </a>
         ) and secondly all additional proceeds go to
         <a href="https://dwad.org">
          Donations With A Difference
         </a>
         (DWAD), the newly-registered charity, of which I am now a trustee, that is running the competition. DWAD will use this money to make grants to individuals and organisations to support the improvement of physical health, mental health and education in the UK.
        </p>
        <p>
         Super10is a little bit like fantasy football except that instead of picking players, you pick ten clubs  sevenfrom the English game and three from the top European leagues. These teams score points for you throughout the season. Compared to traditional fantasy football its a low-maintenance game as there are no substitutions to deal with each week and transfers only occur during the January transfer window. You can make your selections and mostly forget about them. That said, it does have a way of making you care deeply about the results of teams you previously had no attachment to. Never been to Peterborough? Doesnt matter, youll still feel the despair as they concede a late equaliser to Port Vale.
        </p>
        <p>
         So whats the software angle? Well Super10 has been around for a few seasons, certainly much longer than Ive been involved, but this year were trying to take it beyond its previously limited scope. That has meant getting it fully online including being able to take payments online so that we can extend the gametoa much wider audience and therefore raise more money. To enable thisIve built the responsive
         <a href="https://dwad.org/super10/">
          Super10 website
         </a>
         using Python, Django and Bootstrap. Much of thewebsite was in use for mostof last season but now weve extended itto open up Super10 to the whole country for the first time.
        </p>
        <p>
         Were restricting Super10 to the UK only for nowbecause we are not familiar enough with the lawsgoverning this kind of competition in other countries. The deadline for entries is noon (BST) on Saturday 16th August. Give it a go and get your friends to play too.
        </p>
        <p>
         Thanks,
        </p>
        <p>
         Dan.
        </p>
       </div>
      </div>
      <!-- &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"&gt;
		&lt;rdf:Description rdf:about="http://blog.uncommons.org/2014/08/08/play-our-online-football-game-and-help-raise-money-for-charities/"
    dc:identifier="http://blog.uncommons.org/2014/08/08/play-our-online-football-game-and-help-raise-money-for-charities/"
    dc:title="Play Our Online Football Game and Help Raise Money for Charities"
    trackback:ping="http://blog.uncommons.org/2014/08/08/play-our-online-football-game-and-help-raise-money-for-charities/trackback/" /&gt;
&lt;/rdf:RDF&gt; -->
      <div class="post clearfix">
       <h2 class="posttitle">
        <a href="http://blog.uncommons.org/2014/07/18/a-sceptics-view-of-google-glass/" rel="bookmark" title="Permanent Link to A Sceptics View of Google Glass">
         A Sceptics View of Google Glass
        </a>
       </h2>
       <p>
        <small>
         Posted in
         <a href="http://blog.uncommons.org/category/android/" rel="category tag">
          Android
         </a>
         ,
         <a href="http://blog.uncommons.org/category/hardware/" rel="category tag">
          Hardware
         </a>
         by
         <b>
          Dan
         </b>
         on July 18th, 2014
        </small>
       </p>
       <div class="entry">
        <p>
         Back in 1999, I was one of a group of Computer Science students invited to visit the research labs of a large consumer electronics company. I dont remember a great deal about the prototype products we were shown but I do clearly remember being told that wearable computing was the next big thing. 15 years later wearable computers are still the next big thing.
        </p>
        <p>
         This time around the devices have made it beyond the lab with a slew of underwhelming smart watches already on sale. In addition, Apple has been rumoured to be preparing its ownfor years now. Google on the other hand has taken a different approach by creating a new category of product with
         <a href="https://www.google.com/glass/start/">
          Google Glass
         </a>
         .
        </p>
        <p>
         Its been over two years since Glass
         <a href="http://www.youtube.com/watch?v=D7TB8b2t3QE">
          sky-dived
         </a>
         into public viewbutit remains subjecttoa pretty exclusive public beta that you have to pay a hefty premium to join ($1500/1000).Until a few weeks ago Glass headsetscould only be purchased in the US. They are now also available in the UK.On Wednesdayevening Google heldits first European Glass developer meet-up at
         <a href="https://skillsmatter.com">
          Skills Matter
         </a>
         in London.
        </p>
        <p>
         Since first hearing aboutGlass Ive been deeply sceptical about it. Its clearly capable of doing a few neat things that could be useful in a few niche areas but it just seems so inessential, it looks thoroughlyridiculous, and the current price tagis not destined toappeal to sensible individuals. However, Ive often been too dismissive ofnew technologies in the past, so I was prepared toat least give it a go.
        </p>
        <p>
         There was a full house at the Skills Matter Exchange includingseveral Glass-adorned Googlers anda surprising number of otherpeople who had presumably been partedfrom a grand of their own money. Interestingly, almost everybody had opted for
         <a href="https://www.google.co.uk/intl/en/glass/start/how-it-looks/">
          the version with the plastic lenses
         </a>
         . When the alternative is the bizarre lens-less titanium forehead band with nose perch it is entirely understandable, whether you need vision correction or not. The spectacle facade makes Google Glass look a lot less conspicuously weird.
         <a href="http://coolgoogleglasswearers.tumblr.com">
          Its still not a good look though
         </a>
         ,even without the beyond-parody
         <a href="http://www.bbc.co.uk/news/technology-28237582">
          third-party add-ons
         </a>
         .
        </p>
        <p>
         Google developer advocates Hoi Lam and Timothy Jordan delivered a couple of presentations suggesting how you should approach building apps for Glass (or Glassware as Google likes to call them). Onemajor drawbackfor those who might be interested in building these apps is thatat presentthere isno direct way for developers to make money fromdeveloping Glassware. Presumably that has to change at some point but for nowapps can only be distributed free-of-charge (subject to Googles approval), and in-app advertising is, mercifully, banned.
        </p>
        <p>
         Following the presentations,those of us who hadnt experienced Glass firsthand were given the opportunity to try out the headsets.Due to time constraints and the number of people who wanted to have a go, we didnt getlong enough to be able toget a feel for what it would be like to have this thing on your face all day but here are a few things I notedthat might be of interest to those who havent tried one of the devices yet.
        </p>
        <ol>
         <li>
          The early promo shots of Glass tendedto avoid showing the battery pack that rests behind your right ear and those pictures that did show it made it look awkwardly bulky. In reality this battery is quite thin and the headset is not as heavy as it looks.
         </li>
         <li>
          As a POV camera, Glass works well. Its very easy to take snapshots or video (although I didnt get an opportunity to check the quality of the results on a bigger screen). Unfortunately,
          <a href="https://plus.google.com/+Scobleizer/posts/1UfNLdZAN4h">
           according to Scoble
          </a>
          , the battery is only good for 45 minutes of video and it will cook your face in the process. If all you care about is POV photography there are probably much better/cheaper options available.
         </li>
         <li>
          In a room with a lot of background conversation, the voice recognition worked well. The microphone clearly does a good job of isolating the voice of the wearer.
         </li>
         <li>
          The screen was underwhelming, albeit in a poorly-lit environment. The resolution wasnt great and the focus didnt feel entirely comfortable although that may have been partly dueto my imperfect contact lens prescription. It may well have been possible to adjust the focus but I didnt have the time to find out.
         </li>
         <li>
          The user interface doesnt feel like it would scale well to having a large number of apps installed. At the moment there is a lot of swiping through cards in a linear fashion.
         </li>
         <li>
          <a href="http://blog.uncommons.org/2013/05/16/google-skynet/">
           Unsurprisingly
          </a>
          , Glass appears to be tightly integrated with Google+.
         </li>
        </ol>
        <p>
         I was never going to be a person who would consider paying 1000 for one of these devices but having tried it very briefly Im now certain that I wouldnt buy one at a lower price either, even if I ignored the way it looks. Thereis, as yet, no compelling use case for the average person. One of the main features is that you can get your e-mails, SMS messages and other Android notifications beamed directly on to your retina without having to remove your phone from your pocket. I really dont have any need for that kind of urgency. Id rather ignore interruptions until I choose to deal with them. Thats not to say that there arent people who could find a use for Glass givenbetter battery life and a more attractive price tag, but for most of us its a clever solution in search of a problem  the hardware equivalent of Google Wave.
        </p>
        <p>
        </p>
       </div>
      </div>
      <!-- &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"&gt;
		&lt;rdf:Description rdf:about="http://blog.uncommons.org/2014/07/18/a-sceptics-view-of-google-glass/"
    dc:identifier="http://blog.uncommons.org/2014/07/18/a-sceptics-view-of-google-glass/"
    dc:title="A Sceptic&#8217;s View of Google Glass"
    trackback:ping="http://blog.uncommons.org/2014/07/18/a-sceptics-view-of-google-glass/trackback/" /&gt;
&lt;/rdf:RDF&gt; -->
      <div class="post clearfix">
       <h2 class="posttitle">
        <a href="http://blog.uncommons.org/2014/01/04/deploying-an-apk-to-multiple-devicesemulators-simultaneously-using-ant/" rel="bookmark" title="Permanent Link to Deploying an APK to Multiple Devices/Emulators Simultaneously Using Ant">
         Deploying an APK to Multiple Devices/Emulators Simultaneously Using Ant
        </a>
       </h2>
       <p>
        <small>
         Posted in
         <a href="http://blog.uncommons.org/category/android/" rel="category tag">
          Android
         </a>
         ,
         <a href="http://blog.uncommons.org/category/ant/" rel="category tag">
          Ant
         </a>
         by
         <b>
          Dan
         </b>
         on January 4th, 2014
        </small>
       </p>
       <div class="entry">
        <p>
         Following my
         <a href="http://blog.uncommons.org/2013/12/21/django-modelchoicefield-and-html-optgroup/">
          detour to Djangoland
         </a>
         , the last week or so I have been back in the world of mobile app development. One of the things Ive been working on is updating an Android app that has two versions built from the same codebase. Part of this update has been to re-skin both versions of the app and to make sure that everything looks reasonable on various devices running versions of Android from 2.2 up to the latest 4.4. When I build a new APK I want to check it on each of the three devices connected to my machine. If I had more spare USB ports I would conceivably be testing with even more devices. In some scenarios I might also have one or more emulators running to test configurations not represented among my devices. Installing the new APK on each of these from the command line is cumbersome. The
         <code>
          adb
         </code>
         tool will only install on one device/emulator at a time and, if you have more than one connected, you have to specify a long unique device ID to tell it which one to use. You could write a bash script to retrieve the IDs of connected devices and emulators and to run the
         <code>
          adb install
         </code>
         command for each, but since Im using Ant I have written a custom task to do the job. For bonus points Ive made it issue the
         <code>
          adb
         </code>
         commands in parallel so that the total install time is determined by the slowest device and not the sum of all the devices.
        </p>
        <div class="wp_syntax">
         <table>
          <tr>
           <td class="code">
            <pre class="java5" style="font-family:monospace;">
             <span style="color: #000000; font-weight: bold;">
              import
             </span>
             <span style="color: #006699;">
              java.io.BufferedReader
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              import
             </span>
             <span style="color: #006699;">
              java.io.File
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              import
             </span>
             <span style="color: #006699;">
              java.io.IOException
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              import
             </span>
             <span style="color: #006699;">
              java.io.InputStream
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              import
             </span>
             <span style="color: #006699;">
              java.io.InputStreamReader
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              import
             </span>
             <span style="color: #006699;">
              java.io.PrintStream
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              import
             </span>
             <span style="color: #006699;">
              java.util.ArrayList
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              import
             </span>
             <span style="color: #006699;">
              java.util.List
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              import
             </span>
             <span style="color: #006699;">
              java.util.concurrent.Callable
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              import
             </span>
             <span style="color: #006699;">
              java.util.concurrent.ExecutorService
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              import
             </span>
             <span style="color: #006699;">
              java.util.concurrent.Executors
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              import
             </span>
             <span style="color: #006699;">
              java.util.concurrent.Future
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              import
             </span>
             <span style="color: #006699;">
              java.util.concurrent.TimeUnit
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              import
             </span>
             <span style="color: #006699;">
              org.apache.tools.ant.BuildException
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              import
             </span>
             <span style="color: #006699;">
              org.apache.tools.ant.Task
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #008000; font-style: italic; font-weight: bold;">
              /**
 * Custom task that uses the ADB tool to install a specified APK on all
 * connected devices and emulators.
 * @author Daniel Dyer
 */
             </span>
             <span style="color: #000000; font-weight: bold;">
              public
             </span>
             <span style="color: #000000; font-weight: bold;">
              class
             </span>
             InstallAPK
             <span style="color: #000000; font-weight: bold;">
              extends
             </span>
             Task
             <span style="color: #009900;">
              {
             </span>
             <span style="color: #000000; font-weight: bold;">
              private
             </span>
             <span style="color: #003399; font-weight: bold;">
              File
             </span>
             apkFile
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              public
             </span>
             <span style="color: #006600; font-weight: bold;">
              void
             </span>
             setAPK
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #003399; font-weight: bold;">
              File
             </span>
             apkFile
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              {
             </span>
             <span style="color: #000000; font-weight: bold;">
              this
             </span>
             .
             <span style="color: #006633;">
              apkFile
             </span>
             = apkFile
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #009900;">
              }
             </span>
             @
             <span style="color: #003399; font-weight: bold;">
              Override
             </span>
             <span style="color: #000000; font-weight: bold;">
              public
             </span>
             <span style="color: #006600; font-weight: bold;">
              void
             </span>
             execute
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #000000; font-weight: bold;">
              throws
             </span>
             BuildException
             <span style="color: #009900;">
              {
             </span>
             <span style="color: #000000;  font-weight: bold;">
              if
             </span>
             <span style="color: #009900;">
              (
             </span>
             apkFile ==
             <span style="color: #006600; font-weight: bold;">
              null
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              {
             </span>
             <span style="color: #000000; font-weight: bold;">
              throw
             </span>
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             BuildException
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #0000ff;">
              "APK file must be specified"
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #000000; font-weight: bold;">
              try
             </span>
             <span style="color: #009900;">
              {
             </span>
             <span style="color: #003399; font-weight: bold;">
              List
             </span>
             <span style="color: #339933;">
              &lt;
             </span>
             <span style="color: #003399; font-weight: bold;">
              String
             </span>
             <span style="color: #339933;">
              &gt;
             </span>
             devices = getDeviceIdentifiers
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #003399; font-weight: bold;">
              System
             </span>
             .
             <span style="color: #006633;">
              out
             </span>
             .
             <span style="color: #006633;">
              printf
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #0000ff;">
              "Installing %s on %d device(s)...%n"
             </span>
             , apkFile, devices.
             <span style="color: #006633;">
              size
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #003399; font-weight: bold;">
              ExecutorService
             </span>
             executor =
             <span style="color: #003399; font-weight: bold;">
              Executors
             </span>
             .
             <span style="color: #006633;">
              newFixedThreadPool
             </span>
             <span style="color: #009900;">
              (
             </span>
             devices.
             <span style="color: #006633;">
              size
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #003399; font-weight: bold;">
              List
             </span>
             <span style="color: #339933;">
              &lt;
             </span>
             <span style="color: #003399; font-weight: bold;">
              Future
             </span>
             <span style="color: #339933;">
              &lt;
             </span>
             <span style="color: #003399; font-weight: bold;">
              Void
             </span>
             <span style="color: #339933;">
              &gt;&gt;
             </span>
             futures =
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             <span style="color: #003399; font-weight: bold;">
              ArrayList
             </span>
             <span style="color: #339933;">
              &lt;
             </span>
             <span style="color: #003399; font-weight: bold;">
              Future
             </span>
             <span style="color: #339933;">
              &lt;
             </span>
             <span style="color: #003399; font-weight: bold;">
              Void
             </span>
             <span style="color: #339933;">
              &gt;&gt;
             </span>
             <span style="color: #009900;">
              (
             </span>
             devices.
             <span style="color: #006633;">
              size
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000;  font-weight: bold;">
              for
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #000000; font-weight: bold;">
              final
             </span>
             <span style="color: #003399; font-weight: bold;">
              String
             </span>
             device : devices
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              {
             </span>
             futures.
             <span style="color: #006633;">
              add
             </span>
             <span style="color: #009900;">
              (
             </span>
             executor.
             <span style="color: #006633;">
              submit
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             <span style="color: #003399; font-weight: bold;">
              Callable
             </span>
             <span style="color: #339933;">
              &lt;
             </span>
             <span style="color: #003399; font-weight: bold;">
              Void
             </span>
             <span style="color: #339933;">
              &gt;
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              {
             </span>
             <span style="color: #000000; font-weight: bold;">
              public
             </span>
             <span style="color: #003399; font-weight: bold;">
              Void
             </span>
             call
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #000000; font-weight: bold;">
              throws
             </span>
             <span style="color: #003399; font-weight: bold;">
              IOException
             </span>
             ,
             <span style="color: #003399; font-weight: bold;">
              InterruptedException
             </span>
             <span style="color: #009900;">
              {
             </span>
             installOnDevice
             <span style="color: #009900;">
              (
             </span>
             device
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              return
             </span>
             <span style="color: #006600; font-weight: bold;">
              null
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #000000;  font-weight: bold;">
              for
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #003399; font-weight: bold;">
              Future
             </span>
             <span style="color: #339933;">
              &lt;
             </span>
             <span style="color: #003399; font-weight: bold;">
              Void
             </span>
             <span style="color: #339933;">
              &gt;
             </span>
             future : futures
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              {
             </span>
             future.
             <span style="color: #006633;">
              get
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #009900;">
              }
             </span>
             executor.
             <span style="color: #006633;">
              shutdown
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             executor.
             <span style="color: #006633;">
              awaitTermination
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #cc66cc;">
              60
             </span>
             ,
             <span style="color: #003399; font-weight: bold;">
              TimeUnit
             </span>
             .
             <span style="color: #006633;">
              SECONDS
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #000000; font-weight: bold;">
              catch
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #003399; font-weight: bold;">
              Exception
             </span>
             ex
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              {
             </span>
             <span style="color: #000000; font-weight: bold;">
              throw
             </span>
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             BuildException
             <span style="color: #009900;">
              (
             </span>
             ex
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #000000; font-weight: bold;">
              private
             </span>
             <span style="color: #006600; font-weight: bold;">
              void
             </span>
             installOnDevice
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #003399; font-weight: bold;">
              String
             </span>
             device
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #000000; font-weight: bold;">
              throws
             </span>
             <span style="color: #003399; font-weight: bold;">
              IOException
             </span>
             ,
             <span style="color: #003399; font-weight: bold;">
              InterruptedException
             </span>
             <span style="color: #009900;">
              {
             </span>
             <span style="color: #003399; font-weight: bold;">
              String
             </span>
             <span style="color: #009900;">
              [
             </span>
             <span style="color: #009900;">
              ]
             </span>
             command =
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             <span style="color: #003399; font-weight: bold;">
              String
             </span>
             <span style="color: #009900;">
              [
             </span>
             <span style="color: #009900;">
              ]
             </span>
             <span style="color: #009900;">
              {
             </span>
             <span style="color: #0000ff;">
              "adb"
             </span>
             ,
             <span style="color: #0000ff;">
              "-s"
             </span>
             , device,
             <span style="color: #0000ff;">
              "install"
             </span>
             ,
             <span style="color: #0000ff;">
              "-r"
             </span>
             , apkFile.
             <span style="color: #006633;">
              toString
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #003399; font-weight: bold;">
              Process
             </span>
             process =
             <span style="color: #003399; font-weight: bold;">
              Runtime
             </span>
             .
             <span style="color: #006633;">
              getRuntime
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             .
             <span style="color: #006633;">
              exec
             </span>
             <span style="color: #009900;">
              (
             </span>
             command
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             consumeStream
             <span style="color: #009900;">
              (
             </span>
             process.
             <span style="color: #006633;">
              getInputStream
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             ,
             <span style="color: #003399; font-weight: bold;">
              System
             </span>
             .
             <span style="color: #006633;">
              out
             </span>
             , device
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000;  font-weight: bold;">
              if
             </span>
             <span style="color: #009900;">
              (
             </span>
             process.
             <span style="color: #006633;">
              waitFor
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              !
             </span>
             =
             <span style="color: #cc66cc;">
              0
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              {
             </span>
             consumeStream
             <span style="color: #009900;">
              (
             </span>
             process.
             <span style="color: #006633;">
              getErrorStream
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             ,
             <span style="color: #003399; font-weight: bold;">
              System
             </span>
             .
             <span style="color: #006633;">
              err
             </span>
             , device
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              throw
             </span>
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             BuildException
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #003399; font-weight: bold;">
              String
             </span>
             .
             <span style="color: #006633;">
              format
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #0000ff;">
              "Installing APK on %s failed."
             </span>
             , device
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #000000; font-weight: bold;">
              private
             </span>
             <span style="color: #006600; font-weight: bold;">
              void
             </span>
             consumeStream
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #003399; font-weight: bold;">
              InputStream
             </span>
             in,
             <span style="color: #003399; font-weight: bold;">
              PrintStream
             </span>
             out,
             <span style="color: #003399; font-weight: bold;">
              String
             </span>
             tag
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #000000; font-weight: bold;">
              throws
             </span>
             <span style="color: #003399; font-weight: bold;">
              IOException
             </span>
             <span style="color: #009900;">
              {
             </span>
             <span style="color: #003399; font-weight: bold;">
              BufferedReader
             </span>
             reader =
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             <span style="color: #003399; font-weight: bold;">
              BufferedReader
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             <span style="color: #003399; font-weight: bold;">
              InputStreamReader
             </span>
             <span style="color: #009900;">
              (
             </span>
             in
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              try
             </span>
             <span style="color: #009900;">
              {
             </span>
             <span style="color: #000000;  font-weight: bold;">
              for
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #003399; font-weight: bold;">
              String
             </span>
             line = reader.
             <span style="color: #006633;">
              readLine
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             line
             <span style="color: #339933;">
              !
             </span>
             =
             <span style="color: #006600; font-weight: bold;">
              null
             </span>
             <span style="color: #339933;">
              ;
             </span>
             line = reader.
             <span style="color: #006633;">
              readLine
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              {
             </span>
             out.
             <span style="color: #006633;">
              println
             </span>
             <span style="color: #009900;">
              (
             </span>
             tag
             <span style="color: #339933;">
              !
             </span>
             =
             <span style="color: #006600; font-weight: bold;">
              null
             </span>
             <span style="color: #339933;">
              ?
             </span>
             <span style="color: #003399; font-weight: bold;">
              String
             </span>
             .
             <span style="color: #006633;">
              format
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #0000ff;">
              "[%s] %s"
             </span>
             , tag, line.
             <span style="color: #006633;">
              trim
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              )
             </span>
             : line
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #000000; font-weight: bold;">
              finally
             </span>
             <span style="color: #009900;">
              {
             </span>
             reader.
             <span style="color: #006633;">
              close
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #000000; font-weight: bold;">
              private
             </span>
             <span style="color: #003399; font-weight: bold;">
              List
             </span>
             <span style="color: #339933;">
              &lt;
             </span>
             <span style="color: #003399; font-weight: bold;">
              String
             </span>
             <span style="color: #339933;">
              &gt;
             </span>
             getDeviceIdentifiers
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #000000; font-weight: bold;">
              throws
             </span>
             <span style="color: #003399; font-weight: bold;">
              IOException
             </span>
             ,
             <span style="color: #003399; font-weight: bold;">
              InterruptedException
             </span>
             <span style="color: #009900;">
              {
             </span>
             <span style="color: #003399; font-weight: bold;">
              Process
             </span>
             process =
             <span style="color: #003399; font-weight: bold;">
              Runtime
             </span>
             .
             <span style="color: #006633;">
              getRuntime
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             .
             <span style="color: #006633;">
              exec
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #0000ff;">
              "adb devices"
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #003399; font-weight: bold;">
              List
             </span>
             devices =
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             <span style="color: #003399; font-weight: bold;">
              ArrayList
             </span>
             <span style="color: #339933;">
              &lt;
             </span>
             <span style="color: #003399; font-weight: bold;">
              String
             </span>
             <span style="color: #339933;">
              &gt;
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #cc66cc;">
              10
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #003399; font-weight: bold;">
              BufferedReader
             </span>
             reader =
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             <span style="color: #003399; font-weight: bold;">
              BufferedReader
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             <span style="color: #003399; font-weight: bold;">
              InputStreamReader
             </span>
             <span style="color: #009900;">
              (
             </span>
             process.
             <span style="color: #006633;">
              getInputStream
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              try
             </span>
             <span style="color: #009900;">
              {
             </span>
             <span style="color: #000000;  font-weight: bold;">
              for
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #003399; font-weight: bold;">
              String
             </span>
             line = reader.
             <span style="color: #006633;">
              readLine
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             line
             <span style="color: #339933;">
              !
             </span>
             =
             <span style="color: #006600; font-weight: bold;">
              null
             </span>
             <span style="color: #339933;">
              ;
             </span>
             line = reader.
             <span style="color: #006633;">
              readLine
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              {
             </span>
             <span style="color: #000000;  font-weight: bold;">
              if
             </span>
             <span style="color: #009900;">
              (
             </span>
             line.
             <span style="color: #006633;">
              endsWith
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #0000ff;">
              "device"
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              {
             </span>
             devices.
             <span style="color: #006633;">
              add
             </span>
             <span style="color: #009900;">
              (
             </span>
             line.
             <span style="color: #006633;">
              split
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #0000ff;">
              "s"
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              [
             </span>
             <span style="color: #cc66cc;">
              0
             </span>
             <span style="color: #009900;">
              ]
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #000000;  font-weight: bold;">
              if
             </span>
             <span style="color: #009900;">
              (
             </span>
             process.
             <span style="color: #006633;">
              waitFor
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              !
             </span>
             =
             <span style="color: #cc66cc;">
              0
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              {
             </span>
             consumeStream
             <span style="color: #009900;">
              (
             </span>
             process.
             <span style="color: #006633;">
              getErrorStream
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             ,
             <span style="color: #003399; font-weight: bold;">
              System
             </span>
             .
             <span style="color: #006633;">
              err
             </span>
             ,
             <span style="color: #006600; font-weight: bold;">
              null
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #000000; font-weight: bold;">
              throw
             </span>
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             BuildException
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #0000ff;">
              "Failed getting list of connected devices/emulators."
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #000000; font-weight: bold;">
              finally
             </span>
             <span style="color: #009900;">
              {
             </span>
             reader.
             <span style="color: #006633;">
              close
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #000000; font-weight: bold;">
              return
             </span>
             devices
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #009900;">
              }
             </span>
            </pre>
           </td>
          </tr>
         </table>
        </div>
        <p>
         Once compiled and on your classpath, using it is simple:
        </p>
        <div class="wp_syntax">
         <table>
          <tr>
           <td class="code">
            <pre class="xml" style="font-family:monospace;">
             <span style="color: #009900;">
              <span style="color: #000000; font-weight: bold;">
               &lt;taskdef
              </span>
              <span style="color: #000066;">
               name
              </span>
              =
              <span style="color: #ff0000;">
               "installapk"
              </span>
              <span style="color: #000066;">
               classname
              </span>
              =
              <span style="color: #ff0000;">
               "yourpackage.InstallAPK"
              </span>
              <span style="color: #000000; font-weight: bold;">
               /&gt;
              </span>
             </span>
             <span style="color: #009900;">
              <span style="color: #000000; font-weight: bold;">
               &lt;installapk
              </span>
              <span style="color: #000066;">
               apk
              </span>
              =
              <span style="color: #ff0000;">
               "path/to/yourapp.apk"
              </span>
              <span style="color: #000000; font-weight: bold;">
               /&gt;
              </span>
             </span>
            </pre>
           </td>
          </tr>
         </table>
        </div>
       </div>
      </div>
      <!-- &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"&gt;
		&lt;rdf:Description rdf:about="http://blog.uncommons.org/2014/01/04/deploying-an-apk-to-multiple-devicesemulators-simultaneously-using-ant/"
    dc:identifier="http://blog.uncommons.org/2014/01/04/deploying-an-apk-to-multiple-devicesemulators-simultaneously-using-ant/"
    dc:title="Deploying an APK to Multiple Devices/Emulators Simultaneously Using Ant"
    trackback:ping="http://blog.uncommons.org/2014/01/04/deploying-an-apk-to-multiple-devicesemulators-simultaneously-using-ant/trackback/" /&gt;
&lt;/rdf:RDF&gt; -->
      <div class="post clearfix">
       <h2 class="posttitle">
        <a href="http://blog.uncommons.org/2013/12/21/django-modelchoicefield-and-html-optgroup/" rel="bookmark" title="Permanent Link to Django ModelChoiceField and HTML &lt;optgroup&gt;">
         Django ModelChoiceField and HTML &lt;optgroup&gt;
        </a>
       </h2>
       <p>
        <small>
         Posted in
         <a href="http://blog.uncommons.org/category/python/" rel="category tag">
          Python
         </a>
         by
         <b>
          Dan
         </b>
         on December 21st, 2013
        </small>
       </p>
       <div class="entry">
        <p>
         Ive been dabbling with
         <a href="http://djangoproject.com">
          Django
         </a>
         over the last couple of months. Ive played around with it a couple of times previously but this time Ive actually built something reasonably substantial, which has meant that Ive had to delve a bit deeper. One of the minor problems I solved today was how to group items in the HTML
         <code>
          &lt;select&gt;
         </code>
         element generated by a forms
         <code>
          ModelChoiceField
         </code>
         . HTML has the
         <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup">
          <code>
           &lt;optgroup&gt;
          </code>
         </a>
         tag for this purpose.
        </p>
        <p>
         Its not immediately obvious how you can get
         <code>
          ModelChoiceField
         </code>
         to use optgroups without over-riding the
         <code>
          render
         </code>
         method and re-implementing the HTML generation yourself, or bypassing
         <code>
          ModelChoiceField
         </code>
         completely and building something based on the basic
         <code>
          ChoiceField
         </code>
         (which does support optgroups). The only potential solutions I found from searching took the former approach (
         <a href="https://djangosnippets.org/snippets/200/">
          here
         </a>
         and
         <a href="http://stackoverflow.com/a/12313683/5171">
          here
         </a>
         ). The reason Im writing this post is because I think Ive found a better, more concise solution that might be of use to future searchers.
        </p>
        <p>
         <code>
          ChoiceField
         </code>
         accepts a
         <code>
          choices
         </code>
         parameter to its constructor. In the simple case this is just a list of items (each item is value/label pair). However, it can also accept a list of groups where each group is a tuple consisting of the group label and a list of items. The problem is that
         <code>
          ModelChoiceField
         </code>
         is different in that it has a
         <code>
          queryset
         </code>
         parameter instead, so there is no way to pass in the group information.
        </p>
        <p>
         However, a comment in
         <a href="https://github.com/django/django/blob/b80a8357d683b9a04a14ff46b1a132ad480e8a61/django/forms/models.py#L1111">
          the source code
         </a>
         says that we can set a property called
         <code>
          choices
         </code>
         after constructing the
         <code>
          ModelChoiceField
         </code>
         instance and the queryset will be ignored. The HTML
         <code>
          &lt;select&gt;
         </code>
         will instead be populated from this data structure with
         <code>
          &lt;optgroup&gt;
         </code>
         elements as required.
        </p>
        <p>
         Assuming we want to group items by a field on the model, we can build the list of tuples from the queryset by sub-classing
         <code>
          ModelChoiceField
         </code>
         and over-riding the constructor. In this example Im assuming that the field is a list of countries grouped by continent, where the continent is just a text field on the country model.
        </p>
        <div class="wp_syntax">
         <table>
          <tr>
           <td class="code">
            <pre class="python" style="font-family:monospace;">
             <span style="color: #ff7700;font-weight:bold;">
              from
             </span>
             django.
             <span style="color: black;">
              forms
             </span>
             <span style="color: #ff7700;font-weight:bold;">
              import
             </span>
             ModelChoiceField
             <span style="color: #ff7700;font-weight:bold;">
              from
             </span>
             <span style="color: #dc143c;">
              itertools
             </span>
             <span style="color: #ff7700;font-weight:bold;">
              import
             </span>
             groupby
             <span style="color: #ff7700;font-weight:bold;">
              from
             </span>
             <span style="color: #dc143c;">
              operator
             </span>
             <span style="color: #ff7700;font-weight:bold;">
              import
             </span>
             attrgetter
             <span style="color: #ff7700;font-weight:bold;">
              class
             </span>
             CountryChoiceField
             <span style="color: black;">
              (
             </span>
             ModelChoiceField
             <span style="color: black;">
              )
             </span>
             :
             <span style="color: #ff7700;font-weight:bold;">
              def
             </span>
             <span style="color: #0000cd;">
              __init__
             </span>
             <span style="color: black;">
              (
             </span>
             <span style="color: #008000;">
              self
             </span>
             <span style="color: #66cc66;">
              ,
             </span>
             *args
             <span style="color: #66cc66;">
              ,
             </span>
             **kwargs
             <span style="color: black;">
              )
             </span>
             :
             <span style="color: #008000;">
              super
             </span>
             <span style="color: black;">
              (
             </span>
             CountryChoiceField
             <span style="color: #66cc66;">
              ,
             </span>
             <span style="color: #008000;">
              self
             </span>
             <span style="color: black;">
              )
             </span>
             .
             <span style="color: #0000cd;">
              __init__
             </span>
             <span style="color: black;">
              (
             </span>
             *args
             <span style="color: #66cc66;">
              ,
             </span>
             **kwargs
             <span style="color: black;">
              )
             </span>
             groups
             <span style="color: #66cc66;">
              =
             </span>
             groupby
             <span style="color: black;">
              (
             </span>
             kwargs
             <span style="color: black;">
              [
             </span>
             <span style="color: #483d8b;">
              'queryset'
             </span>
             <span style="color: black;">
              ]
             </span>
             <span style="color: #66cc66;">
              ,
             </span>
             attrgetter
             <span style="color: black;">
              (
             </span>
             <span style="color: #483d8b;">
              'continent'
             </span>
             <span style="color: black;">
              )
             </span>
             <span style="color: black;">
              )
             </span>
             <span style="color: #008000;">
              self
             </span>
             .
             <span style="color: black;">
              choices
             </span>
             <span style="color: #66cc66;">
              =
             </span>
             <span style="color: black;">
              [
             </span>
             <span style="color: black;">
              (
             </span>
             continent
             <span style="color: #66cc66;">
              ,
             </span>
             <span style="color: black;">
              [
             </span>
             <span style="color: black;">
              (
             </span>
             c.
             <span style="color: #008000;">
              id
             </span>
             <span style="color: #66cc66;">
              ,
             </span>
             <span style="color: #008000;">
              self
             </span>
             .
             <span style="color: black;">
              label_from_instance
             </span>
             <span style="color: black;">
              (
             </span>
             c
             <span style="color: black;">
              )
             </span>
             <span style="color: black;">
              )
             </span>
             <span style="color: #ff7700;font-weight:bold;">
              for
             </span>
             c
             <span style="color: #ff7700;font-weight:bold;">
              in
             </span>
             countries
             <span style="color: black;">
              ]
             </span>
             <span style="color: black;">
              )
             </span>
             <span style="color: #ff7700;font-weight:bold;">
              for
             </span>
             continent
             <span style="color: #66cc66;">
              ,
             </span>
             countries
             <span style="color: #ff7700;font-weight:bold;">
              in
             </span>
             groups
             <span style="color: black;">
              ]
             </span>
            </pre>
           </td>
          </tr>
         </table>
        </div>
        <p>
         In order for this to work, the queryset must be sorted by the field that it is to be grouped by so that items in the same group are adjacent. You can do this before you pass it to the constructor or you can change the code above to call
         <code>
          order_by
         </code>
         on the queryset.
        </p>
       </div>
      </div>
      <!-- &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"&gt;
		&lt;rdf:Description rdf:about="http://blog.uncommons.org/2013/12/21/django-modelchoicefield-and-html-optgroup/"
    dc:identifier="http://blog.uncommons.org/2013/12/21/django-modelchoicefield-and-html-optgroup/"
    dc:title="Django ModelChoiceField and HTML &lt;optgroup&gt;"
    trackback:ping="http://blog.uncommons.org/2013/12/21/django-modelchoicefield-and-html-optgroup/trackback/" /&gt;
&lt;/rdf:RDF&gt; -->
      <div class="post clearfix">
       <h2 class="posttitle">
        <a href="http://blog.uncommons.org/2013/06/11/reportng-1-1-4/" rel="bookmark" title="Permanent Link to ReportNG 1.1.4">
         ReportNG 1.1.4
        </a>
       </h2>
       <p>
        <small>
         Posted in
         <a href="http://blog.uncommons.org/category/java/" rel="category tag">
          Java
         </a>
         by
         <b>
          Dan
         </b>
         on June 11th, 2013
        </small>
       </p>
       <div class="entry">
        <p>
         Its been a couple of years since the last release of
         <a href="http://reportng.uncommons.org">
          ReportNG
         </a>
         , my cobbled together alternative reporting plug-in for TestNG. In the time since Ive done nothing but a few users have submitted useful improvements. So, after some prompting, Ive released version 1.1.4 (download
         <a href="https://dl.dropboxusercontent.com/u/14133069/reportng-1.1.4.zip">
          zip
         </a>
         ,
         <a href="https://dl.dropboxusercontent.com/u/14133069/reportng-1.1.4.tgz">
          tgz
         </a>
         ).
        </p>
        <p>
         Thanks to Kayla Nimis, criccio, Arcadie, and Nalin Makar the new version has the following improvements:
        </p>
        <ul>
         <li>
          The report now shows the reason for skipping a test.
         </li>
         <li>
          You can specify the
          <code>
           org.uncommons.reportng.failures-only
          </code>
          property to generate a more minimal report.
         </li>
         <li>
          ReportNG will now create any missing parent directories of the report directory rather than failing if they are absent.
         </li>
        </ul>
       </div>
      </div>
      <!-- &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"&gt;
		&lt;rdf:Description rdf:about="http://blog.uncommons.org/2013/06/11/reportng-1-1-4/"
    dc:identifier="http://blog.uncommons.org/2013/06/11/reportng-1-1-4/"
    dc:title="ReportNG 1.1.4"
    trackback:ping="http://blog.uncommons.org/2013/06/11/reportng-1-1-4/trackback/" /&gt;
&lt;/rdf:RDF&gt; -->
      <div class="post clearfix">
       <h2 class="posttitle">
        <a href="http://blog.uncommons.org/2013/05/16/google-skynet/" rel="bookmark" title="Permanent Link to Google Skynet">
         Google Skynet
        </a>
       </h2>
       <p>
        <small>
         Posted in
         <a href="http://blog.uncommons.org/category/internet/" rel="category tag">
          The Internet
         </a>
         by
         <b>
          Dan
         </b>
         on May 16th, 2013
        </small>
       </p>
       <div class="entry">
        <blockquote>
         <p>
          Google policy is to get right up to the creepy line and not cross it.
         </p>
        </blockquote>
        <p>
         These are the words of former Google CEO Eric Schmidt,
         <a href="http://www.theatlantic.com/technology/archive/2010/10/googles-ceo-the-laws-are-written-by-lobbyists/63908/">
          speaking to The Atlanticin October 2010
         </a>
         .
        </p>
        <blockquote>
         <p>
          We dont need you to type at all. We know where you are. We know where youve been. We can more or less know what youre thinking about.
         </p>
        </blockquote>
        <p>
         This was two and a half years ago. Today Google is so far over the creepy line it cant even see the line any more. The problem is not so much individual Google products but the way in which the vast data from all these disparate services is combined to build a very detailed profile of you. Not just what you do on Google sites but also any other site you visit that includes Googles +1, Adsense or Analytics JavaScript (including this one). Google can read every e-mail you send and receive, it knows everything you search for online and knows pretty much every website you ever visit. It knows where you are, where youve been and probably with whom. Google knows more about you than your mother does and with Google+ its all neatly connected to your real identity.
        </p>
        <p>
         Ive so far avoided signing up for Google+ but its increasingly difficult to ignore, particularly as an Android developer, as its becoming more tightly integrated into everything that Google does. Its the keystone of Googles anti-privacy agenda. When the time comes for the last remnants of the human race to send an Austrian-accented cyborg back in time to thwart the rise of the machines, its first targets will be the architects of Google+.
        </p>
        <p>
         The privacy implications are not the only issue. Most users perceive Googles search results to represent some sort of objective truth, with links ranked only by their relevance to the search query, but in fact each user is served personalised results. If you and I both search for information on some contentious political topic,
         <a href="http://dontbubble.us/">
          Google wont necessarily give us the same response
         </a>
         ; it will show us each what it thinks we want to see based on its profiling of us.
        </p>
        <p>
         In his Google I/O Q&amp;A yesterday,
         <a href="http://www.cio.com/article/733515/Google_CEO_Larry_Page_on_Negativity_Laws_and_Competitors?page=9&amp;taxonomyId=3215">
          Google CEO Larry Page dismissed concerns over the implications of this profiling
         </a>
         :
        </p>
        <blockquote>
         <p>
          [Audience member]: Most of my opinion, I can trace back to a Google search. As search becomes more and more personalized, and predictive, I worry that it informs my world view and rules out the possibility of some other serendipitous discovery. Any comment on that?
         </p>
         <p>
          [Page]: People have a lot of concern about that  Im totally not worried about that at all.
         </p>
        </blockquote>
        <p>
         Personally, I dont like Googles all-encompassing vision. Its not the only company that employs such methods but I can easily ignore the likes of Facebook and Bing as I dont use them. Google is everywhere.
        </p>
        <p>
         Spurred more by the closure of Google Reader than anything else, a couple of months ago I began to consider alternatives to relying on the benevolence of one omniscient company for the services I use every day.
        </p>
        <p>
         The first thing to go was GMail. E-mail is important enough to be worth paying for so I signed-up with
         <a href="http://www.fastmail.fm/?STKI=10857921">
          FastMail
         </a>
         (now owned by Opera), which offers an ad-free service from $4.95 per year. It has a refined web interface, IMAP access, and a simple way to import your existing messages from GMail.
        </p>
        <p>
         I eventually replaced Google Reader with
         <a href="http://theoldreader.com">
          The Old Reader
         </a>
         and for search Im now using
         <a href="https://duckduckgo.com/">
          DuckDuckGo
         </a>
         , which
         <a href="http://donttrack.us/">
          promises not to track its users
         </a>
         or
         <a href="http://dontbubble.us/">
          filter search results
         </a>
         . DuckDuckGo doesnt quite match Google in terms of the freshness or depth of its results but its fast and has some
         <a href="https://duckduckgo.com/goodies">
          useful features
         </a>
         . On DuckDuckGos
         <a href="http://fixtracking.com/">
          recommendation
         </a>
         I also installed
         <a href="https://www.ghostery.com/">
          Ghostery
         </a>
         for Opera to block Google and others attempts to track me on third-party sites. Ive removed the Google +1 buttons from this blog and will be looking for more privacy-friendly alternatives to Google Analytics and Adsense (both of which would be useless anyway if everybody is driven to use the likes of Ghostery).
        </p>
        <p>
         Im not giving up on Google entirely, I just prefer to keep it at arms length. Ill still be developing for Android (for which there were many very welcome developer announcements at I/O yesterday) and no doubt Ill continue to use some of its other services.
        </p>
       </div>
      </div>
      <!-- &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"&gt;
		&lt;rdf:Description rdf:about="http://blog.uncommons.org/2013/05/16/google-skynet/"
    dc:identifier="http://blog.uncommons.org/2013/05/16/google-skynet/"
    dc:title="Google Skynet"
    trackback:ping="http://blog.uncommons.org/2013/05/16/google-skynet/trackback/" /&gt;
&lt;/rdf:RDF&gt; -->
      <div class="post clearfix">
       <h2 class="posttitle">
        <a href="http://blog.uncommons.org/2013/01/24/android-listview-fixing-missingblank-dividers/" rel="bookmark" title="Permanent Link to Android ListView  Fixing Missing/Blank Dividers">
         Android ListView  Fixing Missing/Blank Dividers
        </a>
       </h2>
       <p>
        <small>
         Posted in
         <a href="http://blog.uncommons.org/category/android/" rel="category tag">
          Android
         </a>
         ,
         <a href="http://blog.uncommons.org/category/java/" rel="category tag">
          Java
         </a>
         by
         <b>
          Dan
         </b>
         on January 24th, 2013
        </small>
       </p>
       <div class="entry">
        <p>
         A post with code in it. Because its been a long time since
         <a href="http://blog.uncommons.org/2011/05/09/embedding-admob-adverts-in-android-listviews/">
          the last one
         </a>
         .
        </p>
        <p>
         If you work with
         <code>
          ListView
         </code>
         s in Android, as all Android developers will do at some point, you may notice that if you set your list items to be non-selectable the dividers that are drawn between each cell disappear.In the Holo Light theme you would normally get a thin light grey dividing line between cells. Depending on how youve implemented your adapter, you may find that these dividers become white/transparent when the cells are not selectable.
         <a href="https://groups.google.com/forum/?fromgroups=#!topic/android-developers/uoiJo0djRZ8">
          According to Android framework engineer Romain Guy
         </a>
         , this isthe intended behaviour.
        </p>
        <p>
         AsHaythem Souissi points out in
         <a href="http://stackoverflow.com/a/9197037/5171">
          this Stack Overflow answer
         </a>
         , you can work around this by ensuring that the
         <a href="http://developer.android.com/reference/android/widget/BaseAdapter.html#areAllItemsEnabled()">
          <code>
           areAllItemsEnabled
          </code>
         </a>
         method returns
         <code>
          true
         </code>
         , even though all items are not enabled (maybe none of them are). The
         <code>
          isEnabled
         </code>
         method will take care of actually disabling the cells and the dividers will be drawn between each of them.
        </p>
        <p>
         All very straightforward so far but it all goes wrong again when you try to
         <a href="http://developer.android.com/reference/android/widget/ListView.html#addHeaderView(android.view.View,%20java.lang.Object,%20boolean)">
          add a non-selectable header view
         </a>
         to the list. The way that
         <code>
          ListView
         </code>
         deals with headers and footers is that it creates its own adapter to wrap/decorate yours and insert the header/footer views in the appropriate places. This is fine but its not delegating the
         <code>
          areAllItemsEnabled
         </code>
         method, so our above fix no longer works.
        </p>
        <p>
         Fortunately, and unusually for Android, everything we need to resolve this issue is part of the public API. The adapter decorator class is
         <a href="http://developer.android.com/reference/android/widget/HeaderViewListAdapter.html">
          <code>
           android.widget.HeaderViewListAdapter
          </code>
         </a>
         . We just need to create our own instance, wrapping our own adapter, and override
         <code>
          areAllItemsEnabled
         </code>
         as above. Theres a slight complication in that we have to wrap the header view in an instance of
         <code>
          ListView.FixedViewInfo
         </code>
         and this is a non-static inner class of
         <code>
          ListView
         </code>
         , but we can reach into our bag of
         <a href="http://blog.uncommons.org/2008/08/26/more-stupid-java-tricks/">
          obscure Java tricks
         </a>
         to create an instance from outside the enclosing class.
        </p>
        <div class="wp_syntax">
         <table>
          <tr>
           <td class="code">
            <pre class="java5" style="font-family:monospace;">
             <span style="color: #666666; font-style: italic;">
              // I assume you know how get a reference to the ListView and create your own adapter.
             </span>
             <span style="color: #003399; font-weight: bold;">
              ListView
             </span>
             listView =
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #003399; font-weight: bold;">
              ListView
             </span>
             <span style="color: #009900;">
              )
             </span>
             view.
             <span style="color: #006633;">
              findViewById
             </span>
             <span style="color: #009900;">
              (
             </span>
             android.
             <span style="color: #006633;">
              R
             </span>
             .
             <span style="color: #006633;">
              id
             </span>
             .
             <span style="color: #006633;">
              list
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             CustomAdapter adapter =
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             CustomAdapter
             <span style="color: #009900;">
              (
             </span>
             context, listOfItems
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #666666; font-style: italic;">
              // You can create any view you like for the header.
             </span>
             TextView listHeader =
             <span style="color: #009900;">
              (
             </span>
             TextView
             <span style="color: #009900;">
              )
             </span>
             inflater.
             <span style="color: #006633;">
              inflate
             </span>
             <span style="color: #009900;">
              (
             </span>
             R.
             <span style="color: #006633;">
              layout
             </span>
             .
             <span style="color: #006633;">
              list_header
             </span>
             ,
             <span style="color: #006600; font-weight: bold;">
              null
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             listHeader.
             <span style="color: #006633;">
              setText
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #0000ff;">
              "My Header Text"
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #666666; font-style: italic;">
              // This is how you create an instance of the non-static nested class, providing
             </span>
             <span style="color: #666666; font-style: italic;">
              // it with a reference to an instance of the containing class (ListView).
             </span>
             <span style="color: #003399; font-weight: bold;">
              ListView
             </span>
             .
             <span style="color: #006633;">
              FixedViewInfo
             </span>
             headerInfo = listView.
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             FixedViewInfo
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             headerInfo.
             <span style="color: #006633;">
              view
             </span>
             = listHeader
             <span style="color: #339933;">
              ;
             </span>
             headerInfo.
             <span style="color: #006633;">
              isSelectable
             </span>
             =
             <span style="color: #006600; font-weight: bold;">
              false
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #666666; font-style: italic;">
              // HeaderViewListAdapter insists on concrete ArrayLists.
             </span>
             <span style="color: #003399; font-weight: bold;">
              ArrayList
             </span>
             headers =
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             <span style="color: #003399; font-weight: bold;">
              ArrayList
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #cc66cc;">
              1
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             headerInfoList.
             <span style="color: #006633;">
              add
             </span>
             <span style="color: #009900;">
              (
             </span>
             headerInfo
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #003399; font-weight: bold;">
              ArrayList
             </span>
             footers =
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             <span style="color: #003399; font-weight: bold;">
              ArrayList
             </span>
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #cc66cc;">
              0
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
             HeaderViewListAdapter wrapper =
             <span style="color: #000000; font-weight: bold;">
              new
             </span>
             HeaderViewListAdapter
             <span style="color: #009900;">
              (
             </span>
             headers, footers, adapter
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              {
             </span>
             @
             <span style="color: #003399; font-weight: bold;">
              Override
             </span>
             <span style="color: #000000; font-weight: bold;">
              public
             </span>
             <span style="color: #006600; font-weight: bold;">
              boolean
             </span>
             areAllItemsEnabled
             <span style="color: #009900;">
              (
             </span>
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #009900;">
              {
             </span>
             <span style="color: #000000; font-weight: bold;">
              return
             </span>
             <span style="color: #006600; font-weight: bold;">
              true
             </span>
             <span style="color: #339933;">
              ;
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #009900;">
              }
             </span>
             <span style="color: #339933;">
              ;
             </span>
             listView.
             <span style="color: #006633;">
              setAdapter
             </span>
             <span style="color: #009900;">
              (
             </span>
             wrapper
             <span style="color: #009900;">
              )
             </span>
             <span style="color: #339933;">
              ;
             </span>
            </pre>
           </td>
          </tr>
         </table>
        </div>
       </div>
      </div>
      <!-- &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"&gt;
		&lt;rdf:Description rdf:about="http://blog.uncommons.org/2013/01/24/android-listview-fixing-missingblank-dividers/"
    dc:identifier="http://blog.uncommons.org/2013/01/24/android-listview-fixing-missingblank-dividers/"
    dc:title="Android ListView &#8211; Fixing Missing/Blank Dividers"
    trackback:ping="http://blog.uncommons.org/2013/01/24/android-listview-fixing-missingblank-dividers/trackback/" /&gt;
&lt;/rdf:RDF&gt; -->
      <div class="post clearfix">
       <h2 class="posttitle">
        <a href="http://blog.uncommons.org/2013/01/20/googles-lag-problem-or-why-android-app-development-is-22-months-behind-ios/" rel="bookmark" title="Permanent Link to Googles Lag Problem  Or Why Android App Development is 22 Months Behind iOS">
         Googles Lag Problem  Or Why Android App Development is 22 Months Behind iOS
        </a>
       </h2>
       <p>
        <small>
         Posted in
         <a href="http://blog.uncommons.org/category/android/" rel="category tag">
          Android
         </a>
         ,
         <a href="http://blog.uncommons.org/category/ios/" rel="category tag">
          iOS
         </a>
         by
         <b>
          Dan
         </b>
         on January 20th, 2013
        </small>
       </p>
       <div class="entry">
        <p>
         On 12th October 2011 Apple unveiled iOS 5.0 to the world. 7 days later Google released Android 4.0 (Ice Cream Sandwich).
        </p>
        <p>
         Apple rarely announces how many devices are running each version of its mobile operating system but, according to
         <a href="http://david-smith.org/iosversionstats/">
          third-party stats
         </a>
         <sup>
          [1]
         </sup>
         , today only a few percent of iPhone/iPad/iPod Touch owners are still running an earlier version of iOS.
        </p>
        <p>
         In contrast, Google is
         <a href="http://developer.android.com/about/dashboards/index.html">
          much more up-front
         </a>
         about how many people are running each version but it doesnt compare favourably. Just 39.3% of users have access to the 15-month-old Android OS or one of its later revisions.
        </p>
        <p>
         Of course, there are some mitigating factors. Android is a much more open ecosystem with dozens of manufacturers needing to test and approve updates for hundreds or even thousands of devices. Apple on the other hand retains a strict control over its (
         <a href="http://blog.rectangularsoftware.com/2012/09/latest-smartphone-market-share-data-android-dominance-increases/">
          smaller
         </a>
         ) mobile empire and is able to push out updates directly to end users. But whatever the reasons, and despite Googles recent efforts to rein in manufacturers and network operators, the fact remains that, unlike their iOS counterparts, Android app developers cannot target a recent version of the operating system and hope to have their app runnable by the majority of device owners.
        </p>
        <p>
         Google has tried to address this issue with its
         <a href="http://developer.android.com/tools/extras/support-library.html">
          support library
         </a>
         , which brings some of the more recent API additions to earlier Android versions but this is only a partial solution that adds complexity and does nothing to resolve the vast visual differences between Android 4.x and its predecessors.
        </p>
        <p>
         Today if you want to reach over 90% of iOS users you must support iOS 5.1, which was released in March 2012, and later versions. To reach the same proportion of Android users you would have to target Android 2.2 (Froyo), which dates back to May 2010.
        </p>
        <p>
         The many comparisons of the relative merits of the latest iOS versus the latest Android version are largely irrelevant to Android app developers who are working from a baseline that is almost two years older than that of their iOS counterparts. An iOS developer can build an app that requires the absolute latest version of the operating system confident that the user base will soon be there (iOS 6 has reached 78.5% penetration in four months). Android developers will always need to be more conservative.
        </p>
        <p>
         <em>
          <small>
           1. These stats may not be fully representative of all iOS users but they provide useful ballpark figures.
          </small>
         </em>
        </p>
       </div>
      </div>
      <!-- &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"&gt;
		&lt;rdf:Description rdf:about="http://blog.uncommons.org/2013/01/20/googles-lag-problem-or-why-android-app-development-is-22-months-behind-ios/"
    dc:identifier="http://blog.uncommons.org/2013/01/20/googles-lag-problem-or-why-android-app-development-is-22-months-behind-ios/"
    dc:title="Google&#8217;s Lag Problem &#8211; Or Why Android App Development is 22 Months Behind iOS"
    trackback:ping="http://blog.uncommons.org/2013/01/20/googles-lag-problem-or-why-android-app-development-is-22-months-behind-ios/trackback/" /&gt;
&lt;/rdf:RDF&gt; -->
      <div class="post clearfix">
       <h2 class="posttitle">
        <a href="http://blog.uncommons.org/2012/11/22/uncommons-maths-1-2-3/" rel="bookmark" title="Permanent Link to Uncommons Maths 1.2.3">
         Uncommons Maths 1.2.3
        </a>
       </h2>
       <p>
        <small>
         Posted in
         <a href="http://blog.uncommons.org/category/java/" rel="category tag">
          Java
         </a>
         by
         <b>
          Dan
         </b>
         on November 22nd, 2012
        </small>
       </p>
       <div class="entry">
        <p>
         Its five years ago this week that I first released
         <a href="http://maths.uncommons.org">
          Uncommons Maths
         </a>
         as a standalone project spun-off from an early version of the
         <a href="http://watchmaker.uncommons.org">
          Watchmaker Framework
         </a>
         . Uncommons Maths is a Java library that provides, among other things, various classes for working with random numbers, probability distributions and combinatorics. There hasnt been a release in over two years so today Ive published a maintenance release, version 1.2.3,
         <a href="https://github.com/dwdyer/uncommons-maths/downloads">
          on GitHub
         </a>
         .
        </p>
        <p>
         There are two main changes in this version. Firstly, thanks to a contribution from Dave LeBlanc, the Uncommons Maths JAR file is now a valid OSGi bundle. Secondly, I found and fixed a pretty fundamental bug in the
         <code>
          convertBytesToLong
         </code>
         method of
         <code>
          BinaryUtils
         </code>
         . The fact this bug went undetected for so long suggests that nobody is actually using this method. It also reinforces that full test coverage is worthless if you dont select your test inputs carefully.
        </p>
        <p>
         Finally, the documentation has been updated to make it clear that none of the RNG implementations support the seeding mechanism inherited from the
         <code>
          java.util.Random
         </code>
         base class. The reason for this is that the
         <a href="http://docs.oracle.com/javase/6/docs/api/java/util/Random.html#setSeed(long)">
          <code>
           setSeed
          </code>
         </a>
         method only takes a single
         <code>
          long
         </code>
         argument. This means its not possible to provide more than 64 bits of entropy, which is insufficient for most of the Uncommons Maths RNGs. In practice calling this method on an RNG instance has no effect. Ideally the method would be over-ridden to throw
         <code>
          UnsupportedOperationException
         </code>
         but to do so is not possible because
         <code>
          setSeed
         </code>
         is invoked internally by the
         <code>
          java.util.Random
         </code>
         constructors. If it threw an exception it would not be possible to create an instance of an object that inherits from
         <code>
          java.util.Random
         </code>
         .
        </p>
       </div>
      </div>
      <!-- &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"&gt;
		&lt;rdf:Description rdf:about="http://blog.uncommons.org/2012/11/22/uncommons-maths-1-2-3/"
    dc:identifier="http://blog.uncommons.org/2012/11/22/uncommons-maths-1-2-3/"
    dc:title="Uncommons Maths 1.2.3"
    trackback:ping="http://blog.uncommons.org/2012/11/22/uncommons-maths-1-2-3/trackback/" /&gt;
&lt;/rdf:RDF&gt; -->
      <div class="post clearfix">
       <h2 class="posttitle">
        <a href="http://blog.uncommons.org/2012/10/27/thoughts-on-droidcon-london-2012/" rel="bookmark" title="Permanent Link to Thoughts on Droidcon London 2012">
         Thoughts on Droidcon London 2012
        </a>
       </h2>
       <p>
        <small>
         Posted in
         <a href="http://blog.uncommons.org/category/android/" rel="category tag">
          Android
         </a>
         by
         <b>
          Dan
         </b>
         on October 27th, 2012
        </small>
       </p>
       <div class="entry">
        <p>
         Twelve months on from my
         <a href="http://blog.uncommons.org/2011/10/06/droidcon-uk-barcamp-round-up/">
          first visit
         </a>
         to the
         <a href="http://uk.droidcon.com">
          UK edition of Droidcon
         </a>
         , I was back in Islington this week for this years version. The format was the same: barcamp on day 1, conference proper on day 2. Im not sure the distinction between the two days is all that worthwhile. After the initial hour of pitching and organising, the first day proceeds along similar lines to the second, with four tracks of presentations. Id vote for just having two normal conference days with the programme for both days published in advance, which appears to be how the Dutch Droidcon works. If there is a need to democratise the programme, this could be done online beforehand.
        </p>
        <p>
         Anyway, while its all still fresh in the memory, here are some of the things I thought worth noting. These may or may not be of interest to other Android developers. If you want to watch some of the talks, keep an eye on the
         <a href="http://skillsmatter.com">
          Skills Matter
         </a>
         website as I suspect the videos will start appearing on there shortly.
        </p>
        <p>
         <a href="http://proguard.sourceforge.net/">
          Proguard
         </a>
         author
         <a href="http://www.lafortune.eu/">
          Eric Lafortune
         </a>
         talked about obfuscation and optimisation of Android apps. Ive been
         <a href="http://blog.uncommons.org/tag/proguard/">
          using
         </a>
         his Java obfuscator for many years, since well before it became an integral part of the Android tool set, so it was good to speak to him and finally put a face to the name. Erics start-up has another Proguard-based obfuscator/optimiser, called
         <a href="http://www.saikoa.com/dexguard">
          DexGuard
         </a>
         , with extra Android-specific features, which may be of interest to app developers who need stronger protection and are willing to pay for it.
        </p>
        <p>
         Erik Hellman made using
         <a href="http://opencv.org/">
          OpenCV
         </a>
         for computer vision on Android look reasonably painless. Id previously discarded a good app idea that required this kind of functionality as too complicated and too processor-intensive. Might need to revisit that.
        </p>
        <p>
         David Teitelbaum of
         <a href="http://www.apkudo.com/">
          Apkudo
         </a>
         showed step-by-step how to crack an APK and inject code. He was able to cheat at one of Zyngas word games by reverse-engineering the obfuscated code. It was an eye-opening demo and may well have caused a few app developers to seriously consider DexGuard as an extra line of defence against this kind of attack.
        </p>
        <p>
         <a href="http://jenkins-ci.org/">
          Jenkins
         </a>
         contributors Christopher Orr andJrgen Tjern spoke about the plugins that are available for continuous integration on Android projects. If you have the server resources to dedicate to it, you can use Jenkins to automatically build and test your app with an emulator for every combination of Android version, screen size and configuration that you are interested in. A long time ago I wrote
         <a href="http://blog.uncommons.org/2008/05/09/why-are-you-still-not-using-hudson/">
          why you should use Jenkins
         </a>
         for general Java projects, or Hudson as it was then (technically Hudson still exists as a separate Oracle-backed project but the community has moved en masse to the Jenkins fork). Christopher and Jrgen made the case for using it to improve the quality of your Android apps.
        </p>
        <p>
         James Hugman gave an updated overview of
         <a href="https://github.com/KirinJS/Kirin">
          Kirin
         </a>
         , a hybrid approach to cross-platform app development that uses native-specific UIs and Javascript for logic. This was one of the more interesting topics from
         <a href="http://blog.uncommons.org/2011/10/07/droidcon-uk-day-2/">
          last year
         </a>
         but I never got around to actually trying it out. It was interesting to see how the project has progressed. It now seems to be based around
         <a href="http://nodejs.org/">
          Node.js
         </a>
         .
        </p>
        <p>
         Given my interest in artificial intelligence, the session I was most interested in attending was the one called Integrating AI into your app. Unfortunately this was a complete waste of time and served only to prevent me from taking an earlier train home. It was nothing more than an advert for some tool for building expert systems. Neither the tool itself nor the generated systems had anything to do with Android. You expect some degree of being advertised at from the fee-paying keynote speakers who are subsidising the event but at least they have the decency not to stray too far from the main theme of the conference.
        </p>
        <p>
         Thats the type of session Id like to see fewer of but Id like to see more like the preceding session by Anders Ericsson. He delivered a live-coding demo of a fairly clean approach to applying animation to custom views. The results were impressive (the approach is also outlined in
         <a href="http://www.jayway.com/2012/08/29/creating-custom-android-views-part-3-animating-your-custom-views-smoothly/">
          this blog post
         </a>
         ) and the presentation followed on nicely from
         <a href="http://www.sqisland.com/talks/">
          Chiu-Ki Chan
         </a>
         s earlier talk on developing custom views. A couple of people pointed out that the new animation features in Android 3.0 and later can be used to achieve similar effects but this approach also works on the large number of Android devices that are still running Android 2.x. This session and David Teitelbaums APK cracking were probably the two best talks and are the kind of things Id like to see if I attend next year.
        </p>
       </div>
      </div>
      <!-- &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"&gt;
		&lt;rdf:Description rdf:about="http://blog.uncommons.org/2012/10/27/thoughts-on-droidcon-london-2012/"
    dc:identifier="http://blog.uncommons.org/2012/10/27/thoughts-on-droidcon-london-2012/"
    dc:title="Thoughts on Droidcon London 2012"
    trackback:ping="http://blog.uncommons.org/2012/10/27/thoughts-on-droidcon-london-2012/trackback/" /&gt;
&lt;/rdf:RDF&gt; -->
      <p>
       <a href="http://blog.uncommons.org/page/2/">
         Older Posts
       </a>
      </p>
     </div>
     <div class="col-md-3">
      <ul id="sidebar">
       <li>
        <div class="textwidget">
         <div style="text-align: center;">
          <iframe src="http://duckduckgo.com/search.html?width=204&amp;site=blog.uncommons.org&amp;prefill=Search%20articles" style="overflow:hidden;margin:20px 0px 0px;padding:0;width:262px;height:40px;">
          </iframe>
         </div>
        </div>
       </li>
       <li>
        <h3>
         Recent Posts
        </h3>
        <ul>
         <li>
          <a href="http://blog.uncommons.org/2014/08/08/play-our-online-football-game-and-help-raise-money-for-charities/">
           Play Our Online Football Game and Help Raise Money for Charities
          </a>
         </li>
         <li>
          <a href="http://blog.uncommons.org/2014/07/18/a-sceptics-view-of-google-glass/">
           A Sceptics View of Google Glass
          </a>
         </li>
         <li>
          <a href="http://blog.uncommons.org/2014/01/04/deploying-an-apk-to-multiple-devicesemulators-simultaneously-using-ant/">
           Deploying an APK to Multiple Devices/Emulators Simultaneously Using Ant
          </a>
         </li>
         <li>
          <a href="http://blog.uncommons.org/2013/12/21/django-modelchoicefield-and-html-optgroup/">
           Django ModelChoiceField and HTML &lt;optgroup&gt;
          </a>
         </li>
         <li>
          <a href="http://blog.uncommons.org/2013/06/11/reportng-1-1-4/">
           ReportNG 1.1.4
          </a>
         </li>
         <li>
          <a href="http://blog.uncommons.org/2013/05/16/google-skynet/">
           Google Skynet
          </a>
         </li>
         <li>
          <a href="http://blog.uncommons.org/2013/01/24/android-listview-fixing-missingblank-dividers/">
           Android ListView  Fixing Missing/Blank Dividers
          </a>
         </li>
        </ul>
       </li>
       <li>
        <h3>
         Categories
        </h3>
        <label class="screen-reader-text" for="cat">
         Categories
        </label>
        <select class="postform" id="cat" name="cat">
         <option value="-1">
          Select Category
         </option>
         <option class="level-0" value="18">
          Android(25)
         </option>
         <option class="level-0" value="19">
          Ant(3)
         </option>
         <option class="level-0" value="119">
          Blackberry(2)
         </option>
         <option class="level-0" value="16">
          Books(6)
         </option>
         <option class="level-0" value="4">
          Evolutionary Computation(32)
         </option>
         <option class="level-0" value="17">
          Hardware(6)
         </option>
         <option class="level-0" value="7">
          Haskell(11)
         </option>
         <option class="level-0" value="116">
          iOS(2)
         </option>
         <option class="level-0" value="3">
          Java(87)
         </option>
         <option class="level-0" value="13">
          JavaScript(2)
         </option>
         <option class="level-0" value="8">
          Linux(1)
         </option>
         <option class="level-0" value="6">
          Mac(8)
         </option>
         <option class="level-0" value="12">
          PHP(6)
         </option>
         <option class="level-0" value="10">
          Python(3)
         </option>
         <option class="level-0" value="15">
          Ruby(1)
         </option>
         <option class="level-0" value="5">
          Software Development(53)
         </option>
         <option class="level-0" value="9">
          The Internet(37)
         </option>
         <option class="level-0" value="11">
          The Real World(3)
         </option>
        </select>
        <script type="text/javascript">
         /* &lt;![CDATA[ */
(function() {
	var dropdown = document.getElementById( "cat" );
	function onCatChange() {
		if ( dropdown.options[ dropdown.selectedIndex ].value &gt; 0 ) {
			location.href = "http://blog.uncommons.org/?cat=" + dropdown.options[ dropdown.selectedIndex ].value;
		}
	}
	dropdown.onchange = onCatChange;
})();
/* ]]&gt; */
        </script>
       </li>
      </ul>
     </div>
    </div>
   </div>
  </div>
  <div class="text-center" id="footer">
   <small class="text-muted">
     2006-2014
    <a href="http://www.dandyer.co.uk">
     Daniel W. Dyer
    </a>
   </small>
   <span id="bruteprotect_uptime_check_string" style="display:none;">
    7ads6x98y
   </span>
  </div>
 </body>
</html>
<!-- Dynamic Page Served (once) in 0.992 seconds -->
