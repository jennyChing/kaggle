<!DOCTYPE html>
<html>
 <head>
  <meta charset="utf-8"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <title>
   DNSSEC: Complexities and Considerations
  </title>
  <meta content="" name="description"/>
  <meta content="True" name="HandheldFriendly"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <script type="text/javascript">
   //&lt;![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"081fde01cbb79b6d4d1147fdaf7240bf",petok:"2ac24bddf298389a113be18d8b2521b922095834-1436900189-1800",betok:"ba9d160060e83d1b22823a4f5dc1dde7b59022b3-1436900189-120",zone:"cloudflare.com",rocket:"0",apps:0}];CloudFlare.push({"apps":{"smarterror":{"swiftype":{"engine_key":""}}}});!function(a,b){a=document.createElement("script"),b=document.getElementsByTagName("script")[0],a.async=!0,a.src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=7e13c32551/cloudflare.min.js",b.parentNode.insertBefore(a,b)}()}}catch(e){};
//]]&gt;
  </script>
  <link href="/assets/images/favicon.ico?v=cb2a117229" rel="shortcut icon"/>
  <link href="/assets/images/apple-touch-icon-57x57-precomposed.png?v=cb2a117229" rel="apple-touch-icon-precomposed" sizes="57x57"/>
  <link href="/assets/images/apple-touch-icon-72x72-precomposed.png?v=cb2a117229" rel="apple-touch-icon-precomposed" sizes="72x72"/>
  <link href="/assets/images/apple-touch-icon-114x114-precomposed.png?v=cb2a117229" rel="apple-touch-icon-precomposed" sizes="114x114"/>
  <link href="/assets/images/apple-touch-icon-144x144-precomposed.png?v=cb2a117229" rel="apple-touch-icon-precomposed" sizes="144x144"/>
  <link href="/assets/css/screen.css?v=cb2a117229" rel="stylesheet" type="text/css"/>
  <!--[if lt IE 9]&gt;&lt;link rel="stylesheet" type="text/css" href="/assets/css/ie.css?v=cb2a117229" /&gt;&lt;![endif]-->
  <script>
   (function(G,o,O,g,l){G.GoogleAnalyticsObject=O;G[O]||(G[O]=function(){(G[O].q=G[O].q||[]).push(arguments)});G[O].l=+new Date;g=o.createElement('script'),l=o.scripts[0];g.src='//www.google-analytics.com/analytics.js';l.parentNode.insertBefore(g,l)}(this,document,'ga'));ga('create','UA-10218544-12', 'none');ga('send','pageview')
  </script>
  <link href="http://blog.cloudflare.com/dnssec-complexities-and-considerations/" rel="canonical"/>
  <meta content="CloudFlare" property="og:site_name"/>
  <meta content="article" property="og:type"/>
  <meta content="DNSSEC: Complexities and Considerations" property="og:title"/>
  <meta content="This blog post is a follow-up to our previous introduction to DNSSEC. Read that first if you are not familiar with DNSSEC. DNSSEC is an extension to DNS: it provides a system of trust for DNS records. Its a..." property="og:description"/>
  <meta content="http://blog.cloudflare.com/dnssec-complexities-and-considerations/" property="og:url"/>
  <meta content="2014-11-05T14:25:04.000Z" property="article:published_time"/>
  <meta content="2015-05-08T18:45:04.000Z" property="article:modified_time"/>
  <meta content="DNS" property="article:tag"/>
  <meta content="ddos" property="article:tag"/>
  <meta content="protection" property="article:tag"/>
  <meta content="DNSSEC" property="article:tag"/>
  <meta content="NSEC" property="article:tag"/>
  <meta content="Key management" property="article:tag"/>
  <meta content="secuirty" property="article:tag"/>
  <meta content="summary" name="twitter:card"/>
  <meta content="DNSSEC: Complexities and Considerations" name="twitter:title"/>
  <meta content="This blog post is a follow-up to our previous introduction to DNSSEC. Read that first if you are not familiar with DNSSEC. DNSSEC is an extension to DNS: it provides a system of trust for DNS records. Its a..." name="twitter:description"/>
  <meta content="http://blog.cloudflare.com/dnssec-complexities-and-considerations/" name="twitter:url"/>
  <script type="application/ld+json">
   {
    "@context": "http://schema.org",
    "@type": "Article",
    "publisher": "CloudFlare",
    "author": {
        "@type": "Person",
        "name": "Nick Sullivan",
        "url": "http://blog.cloudflare.com/author/nick-sullivan",
        "sameAs": null,
        "description": null
    },
    "headline": "DNSSEC: Complexities and Considerations",
    "url": "http://blog.cloudflare.com/dnssec-complexities-and-considerations/",
    "datePublished": "2014-11-05T14:25:04.000Z",
    "dateModified": "2015-05-08T18:45:04.000Z",
    "keywords": "DNS, ddos, protection, DNSSEC, NSEC, Key management, secuirty",
    "description": "This blog post is a follow-up to our previous introduction to DNSSEC. Read that first if you are not familiar with DNSSEC. DNSSEC is an extension to DNS: it provides a system of trust for DNS records. Its a..."
}
  </script>
  <meta content="Ghost 0.6" name="generator"/>
  <link href="http://blog.cloudflare.com/rss/" rel="alternate" title="CloudFlare" type="application/rss+xml"/>
  <style>
   .st-default-search-input{font-family:Helvetica,Arial,"Lucida Grande",sans-serif;font-size:14px;line-height:16px;font-weight:400;-moz-transition:opacity 0.2s;-o-transition:opacity 0.2s;-webkit-transition:opacity 0.2s;transition:opacity 0.2s;display:inline-block;width:190px;height:16px;padding:7px 11px 7px 28px;border:1px solid rgba(0,0,0,0.25);color:#444;-moz-box-sizing:content-box;box-sizing:content-box;-moz-border-radius:5px;-webkit-border-radius:5px;border-radius:5px;background:#fff 8px 8px no-repeat url("data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAA0AAAANCAYAAABy6%2BR8AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAIGNIUk0AAG11AABzoAAA%2FN0AAINkAABw6AAA7GgAADA%2BAAAQkOTsmeoAAAESSURBVHjajNCxS9VRGMbxz71E4OwgoXPQxVEpXCI47%2BZqGP0LCoJO7UVD3QZzb3SwcHB7F3Uw3Zpd%2FAPCcJKG7Dj4u%2FK7Pwp94HDg5Xyf5z1Pr9YKImKANTzFXxzjU2ae6qhXaxURr%2FAFl9hHDy%2FwEK8z89sYVEp5gh84wMvMvGiSJ%2FEV85jNzLMR1McqfmN5BEBmnmMJFSvtpH7jdJiZv7q7Z%2BZPfMdcF6rN%2FT%2F1m2LGBkd4HhFT3dcRMY2FpskxaLNpayciHrWAGeziD7b%2BVfkithuTk8bkGa4wgWFmbrSTZOYeBvjc%2BucQj%2FEe6xHx4Taq1nrnKaW8K6XUUsrHWuvNevdRRLzFGwzvDbXAB9cDAHvhedDruuxSAAAAAElFTkSuQmCC")}.st-ui-close-button{-moz-transition:none;-o-transition:none;-webkit-transition:none;transition:none}
  </style>
 </head>
 <body class="post-template tag-dns tag-ddos tag-protection tag-dnssec tag-nsec tag-key-management tag-secuirty">
  <div id="fb-root">
  </div>
  <header class="header" id="header">
   <div class="wrapper">
    <a class="logo logo-header" href="https://www.cloudflare.com">
     CloudFlare
    </a>
    <nav class="header-navigation navigation" id="main-menu" role="navigation">
     <ul class="menu menu-header">
      <li>
       <a href="https://blog.cloudflare.com/">
        Blog home
       </a>
      </li>
      <li>
       <a href="https://www.cloudflare.com/overview" tabindex="1">
        How it works
       </a>
      </li>
      <li>
       <a href="https://www.cloudflare.com/support" tabindex="9">
        Support
       </a>
      </li>
      <li>
       <a href="https://www.cloudflare.com/login" tabindex="10">
        Login
       </a>
      </li>
      <li>
       <a class="btn btn-success" href="https://www.cloudflare.com/sign-up" tabindex="11">
        Sign up
       </a>
      </li>
     </ul>
    </nav>
   </div>
  </header>
  <div class="wrapper reverse-sidebar">
   <section class="primary-content" role="main">
    <article class="post tag-dns tag-ddos tag-protection tag-dnssec tag-nsec tag-key-management tag-secuirty">
     <header class="post-header">
      <h1 class="title">
       DNSSEC: Complexities and Considerations
      </h1>
      <div class="meta">
       <time class="meta-date" datetime="2014-11-05">
        05 Nov 2014
       </time>
       by
       <a href="/author/nick-sullivan/">
        Nick Sullivan
       </a>
       .
      </div>
      <div class="social">
       <div class="g-plusone" data-href="https://blog.cloudflare.com/dnssec-complexities-and-considerations/" data-size="medium">
       </div>
       <script data-counter="right" data-url="https://blog.cloudflare.com/dnssec-complexities-and-considerations/" type="IN/Share">
       </script>
       <div class="fb-like" data-action="like" data-href="https://blog.cloudflare.com/dnssec-complexities-and-considerations/" data-layout="button_count" data-share="false" data-show-faces="false">
       </div>
       <a class="twitter-share-button" data-related="cloudflare" data-text="DNSSEC: Complexities and Considerations" data-url="https://blog.cloudflare.com/dnssec-complexities-and-considerations/" data-via="cloudflare" href="https://twitter.com/share">
        Tweet
       </a>
      </div>
     </header>
     <div class="post-content">
      <p>
       <em>
        This blog post is a follow-up to our previous
        <a href="https://blog.cloudflare.com/dnssec-an-introduction/">
         introduction to DNSSEC
        </a>
        . Read that first if you are not familiar with DNSSEC.
       </em>
      </p>
      <p>
       DNSSEC is an extension to DNS: it provides a system of trust for DNS records. Its a major change to one of the core components of the Internet. In this post we examine some of the complications of DNSSEC, and what CloudFlare plans to do to reduce any negative impact they might have. The main issues are zone content exposure, key management, and the impact on DNS reflection/amplification attacks.
      </p>
      <h2 id="zonecontentexposure">
       Zone content exposure
      </h2>
      <p>
       DNS is split into smaller pieces called zones. A zone typically starts at a domain name, and contains all records pertaining to the subdomains. Each zone is managed by a single manager. For example, cloudflare.com is a zone containing all DNS records for cloudflare.com and its subdomains (e.g. www.cloudflare.com, api.cloudflare.com).
      </p>
      <p>
       There is no directory service for subdomains in DNS so if you want to know if api.cloudflare.com exists, you have to ask a DNS server and that DNS server will end up asking cloudflare.com whether api.cloudflare.com exists. This is not true with DNSSEC. In some cases, enabling DNSSEC may expose otherwise obscured zone content. Not everyone cares about the secrecy of subdomains, and zone content may already be easily guessable because most sites have a www subdomain; however, subdomains are sometimes used as login portals or other services that the site owner wants to keep private. A site owner may not want to reveal that secretbackdoor.example.com exists in order to protect that site from attackers.
      </p>
      <p>
       <img alt="" src="/content/images/2014/11/x-ray_specs.jpg"/>
      </p>
      <p>
       The reason DNSSEC can expose subdomains has to do with how zones are signed. Historically, DNSSEC is used to sign static zones. A static zone is a complete set of records for a given domain. The DNSSEC signature records are created using the Key Signing Key (KSK) and Zone Signing Key (ZSK) in a central location and sent to the authoritative server to be published. This set of records allows an authoritative server to answer any question it is asked, including questions about subdomains that dont exist.
      </p>
      <p>
       Unlike standard DNS, where the server returns an unsigned NXDOMAIN (Non-Existent Domain) response when a subdomain does not exist, DNSSEC guarantees that every answer is signed. This is done with a special record that serves as a proof of non-existence called the NextSECure (NSEC) record. An NSEC record can be used to say: there are no subdomains between subdomains X and subdomain Y. By filling the gap between every domain in the zone, NSEC provides a way to answer any query with a static record. The NSEC record also lists what Resource Record types exist at each name.
      </p>
      <p>
       For statically signed zones, there are, by definition, a fixed number of records. Since each NSEC record points to the next, this results in a finite ring of NSEC records that covers all the subdomains. Anyone can walk a zone by following one NSEC record to the next until they know all subdomains. This method can be used to reveal all of the names in that zone---possibly exposing internal information.
      </p>
      <p>
       Suppose there is a DNSSEC-enabled zone called example.com, with subdomains public.example.com and secret.example.com. Adding NSEC records will reveal the existence of all subdomains.
      </p>
      <p>
       Asking for the NSEC record of example.com gives the following:
      </p>
      <pre>
       <code>
        example.com.        NSEC    public.example.com.     A NS SOA TXT AAAA RRSIG NSEC DNSKEY
       </code>
      </pre>
      <p>
       Asking for public.example.com gives the following NSEC record:
      </p>
      <pre>
       <code>
        public.example.com.        NSEC    secret.example.com.  A TXT AAAA RRSIG NSEC
       </code>
      </pre>
      <p>
       Asking for secret.example.com gives the following NSEC record:
      </p>
      <pre>
       <code>
        secret.example.com.        NSEC    example.com.         A TXT AAAA RRSIG NSEC
       </code>
      </pre>
      <p>
       The first one is for the zone top/apex, and says that the name example.com exists and the next name is public.example.com. The public.example.com record says that the next name is secret.example.com revealing the existence of a private subdomain. The secret.example.com says the next record is example.com completing the chain of subdomains. Therefore, with a few queries anybody can know the complete set of records in the zone.
      </p>
      <p>
       Technically, DNS records are not supposed to be secret, but in practice they are sometimes considered so. Subdomains have been used to keep things (such as a corporate login page) private for a while, and suddenly revealing the contents of the zone file may be unexpected and unappreciated.
      </p>
      <p>
       Before DNSSEC the only way to discover the contents of names in a zone was to either query for them, or attempt to perform a transfer of the zone from one of the authoritative servers. Zone Transfers (AXFR) are frequently blocked. NSECs alternatative, NSEC3, was introduced to fight zone enumeration concerns, but even NSEC3 can be used to reveal the existence of subdomains.
      </p>
      <p>
       <img alt="" src="/content/images/2014/11/dnssec_nsec_stat.png"/>
       <small>
        <em>
         <a href="http://securityblog.switch.ch/2013/02/19/dnssec-deployment-in-ch/">
          Most domains under .ch use NSEC3
         </a>
        </em>
       </small>
      </p>
      <p>
       The NSEC3 record is like an NSEC record, but, rather than a signed gap of domain names for which there are no answers to the question, NSEC3 provides a signed gap of hashes of domain names. This was intended to prevent zone enumeration. Thus, the NSEC3 chain for a zone containing example.com and www.example.com could be (each NSEC3 record is on 3 lines for clarity):
      </p>
      <pre>
       <code>
        231SPNAMH63428R68U7BV359PFPJI2FC.example.com. NSEC3 1 0 3 ABCDEF  
            NKDO8UKT2STOL6EJRD1EKVD1BQ2688DM
            A NS SOA TXT AAAA RRSIG DNSKEY NSEC3PARAM
       </code>
      </pre>
      <pre>
       <code>
        NKDO8UKT2STOL6EJRD1EKVD1BQ2688DM.example.com. NSEC3 1 0 3 ABCDEF  
            231SPNAMH63428R68U7BV359PFPJI2FC
            A TXT AAAA RRSIG
       </code>
      </pre>
      <p>
       Where
       <code>
        231SPNAMH63428R68U7BV359PFPJI2FC
       </code>
       is the salted hash of
       <code>
        example.com
       </code>
       and
       <code>
        NKDO8UKT2STOL6EJRD1EKVD1BQ2688DM
       </code>
       is the salted hash of
       <code>
        www.example.com
       </code>
       . This is reminiscent of the way
       <a href="http://blog.cloudflare.com/keeping-passwords-safe-by-staying-up-to-date/">
        password databases work
       </a>
       .
      </p>
      <p>
       The first line of the NSEC3 record contains the name of the zone after it has been hashed, the number of hash rounds and salt used in the hashing are the two last parameters on the first line 3 ABCDEF. The 1 0 stands for digest algorithm (1 means SHA-1) and if the zone uses Opt-out (0 means no). The second line is the next hashed name in the zone, the third line lists the types at the name. You can see the next name at the first NSEC3 record matches the name on the second NSEC3 record and the next name on that one completes the chain.
      </p>
      <p>
       For NSEC enumeration, you can create the full list of domains by starting to guess at possible names in the domain. If the zone has around 100 domain names, it will take around 100 requests to enumerate the entire zone. With NSEC3, when you request a record that does not exist, a signed NSEC3 record is returned with the next zone present ordered alphabetically by hash. Checking if the next query name candidate fits in one of the known gaps allows anyone to discover the full chain in around 100 queries. There are many tools that can do this computation for you, including
       <a href="http://nmap.org/nsedoc/scripts/dns-nsec3-enum.html">
        a plug-in to nmap
       </a>
       .
      </p>
      <p>
       With the hashes that correspond to all the valid names in the zone, a dictionary attack can be used to figure out the real names. Short names are easily guessed, and by using a dictionary, longer names can be revealed as existing without having to flood the authoritative nameservers with guesses. Tools like
       <a href="http://hashcat.net/oclhashcat/">
        HashCat
       </a>
       make this easy to do in software, and the popularity of bitcoin has dramatically lowered the price of hashing-specific hardware. There is a burgeoning cottage industry of devices built to compute cryptographic hashes. The Tesla Password cracker (below) is just one example of these off-the shelf devices.
      </p>
      <p>
       <img alt="" src="/content/images/2014/11/Tesla-cracker.jpg"/>
       <small>
        <em>
         The Tesla Password Cracker
        </em>
       </small>
      </p>
      <p>
       Because hashing is cheap, zone privacy is only slightly improved when using NSEC3 as designed; the amount of protection a name gets is proportional to its unguessability.
      </p>
      <p>
       In short, NSEC is like revealing plaintext passwords, and NSEC3 is like revealing a Unix-style passwords file. Neither technique is very secure. With NSEC3 a subdomain is only as private as it is hard to guess.
      </p>
      <p>
       This vulnerability can be mitigated by a techniques introduced in RFCs 4470 and 4471 (
       <a href="https://tools.ietf.org/html/rfc4470">
        https://tools.ietf.org/html/rfc4470
       </a>
       and
       <a href="https://tools.ietf.org/html/rfc4471">
        https://tools.ietf.org/html/rfc4471
       </a>
       ) called DNSSEC white lies; this was implemented by Dan Kaminsky for demonstration purposes. When a request comes in for a domain that is not present, instead of providing an NSEC3 record of the next real domain, an NSEC3 record of the next hash alphabetically is presented. This does not break the NSEC3 guarantee that there are no domains whose hash fits lexicographically between the NSEC3 response and the question.
      </p>
      <p>
       You can only implement NSEC3 or NSEC white lies if signatures can be computed in real-time in response to questions. Traditionally, static zone records for DNS resolution are created offline, and all the records with signatures stored in a zone file. This file is then read by a live DNS server allowing it to answer questions about the zone. Having a DNS server with the minimum amount of logic inside allows the operator to conserve CPU resources and maximize the number of queries that can be answered. In order to do DNSSEC white lies, the servers must have keys available to perform generation of signatures on the fly. This is a major change in the traditional operating practices of DNS servers because the DNS authoritative server itself needs to do the cryptographic operations in response to the incoming query. This demand for live signing imposes several other security problems in distributed environments.
      </p>
      <h2 id="keymanagement">
       Key management
      </h2>
      <p>
       DNSSEC was designed to operate in various modes, each providing different security, performance and convenience tradeoffs. Live signing solves the zone content exposure problem in exchange for less secure key management.
      </p>
      <p>
       The most common DNSSEC mode is offline signing of static zones. This allows the signing system to be highly protected from external threats by keeping the private keys on a machine that is not connected to the network. This operating model works well when the DNS information does not change often.
      </p>
      <p>
       Another common operating mode is centralized online signing. If you sign data in restricted access, dedicated DNS signing systems, it allows DNS data to change and get published quickly. Some operators run DNS signing on their main DNS servers. Just like offline signing of static zones, this mode follows the central signing model, i.e., a single (or replicated) central signer does all the signing and data gets propagated from it to the actual authoritative DNS servers.
      </p>
      <p>
       A more radical mode is to allow the actual authoritative DNS servers to sign data on the fly when needed, this allows a number of new features including geographically dependant information signed where the answer is generated. The downside is that now the keying material is on many different machines that have direct access to the Internet. Doing live signing at the edge introduces new problems such as key distribution and places extra computing requirements on the nodes.
      </p>
      <p>
       Recently, a bug known as
       <a href="http://blog.cloudflare.com/answering-the-critical-question-can-you-get-private-ssl-keys-using-heartbleed/">
        Heartbleed
       </a>
       was found that opened a major security hole in server applications. It was caused by a coding error in OpenSSL that created a remote memory disclosure vulnerability. This bug allowed remote attackers to extract cryptographic keys from Internet-facing servers. Remote memory exposure bug are just one of the many threats to private key security when the key is being used in an active process such as DNSSEC live signing. The more a machine is exposed to the Internet, the more vectors of attack there are. Offline signing machines have a much smaller window of exposure to such threats.
      </p>
      <p>
       One way to keep keys secure is to use a hardware-backed solution such as a Hardware Security Module (HSM). The major drawback for this is cost  HSMs are very expensive (and slow). This is one of the stickiest points for running DNS servers that are spread out geographically in order to be close to their customers. Running an HSM in every server location can not only be expensive, but there can also be
       <a href="http://www.kslaw.com/imageserver/KSPublic/library/publication/2011articles/11-11WorldECRCloutierCohen.pdf">
        legal complications
       </a>
       too.
      </p>
      <p>
       Another solution to protect keys from remote disclosure is to offload cryptographic operations into trusted component of the system. This is where having a
       <a href="http://blog.cloudflare.com/cloudflare-fastest-free-dns-among-fastest-dns/">
        custom DNS server
       </a>
       that can offload cryptography can come in handy.
      </p>
      <p>
       Key management for DNSSEC is similar to key management for TLS and has similar challenges. Earlier this year, we introduced
       <a href="https://blog.cloudflare.com/keyless-ssl-the-nitty-gritty-technical-details/">
        Keyless SSL
       </a>
       to help improve key security for TLS. We are looking at extending Keyless SSL to provide the advantages of remote key servers for DNSSEC live-signing.
      </p>
      <h2 id="reflectionamplificationthreat">
       Reflection/amplification threat
      </h2>
      <p>
       Operators running an authoritative DNS server are often nervous their server will be used as a conduit for malicious distributed denial of service (DDoS) attacks. This stems from the fact that DNS uses UDP, a stateless protocol.
      </p>
      <p>
       In TCP, each connection begins with a three-way handshake. This ensures that the IP address of both parties is known and correct before starting a connection. In UDP, there is no such handshake: messages are just sent directly to an IP with an unverified from IP address. If an attacker can craft a UDP packet that says hi, from IP X to a server, the server will typically respond by sending a UDP packet to X. Choosing X as a victims IP address instead of the senders is called UDP spoofing. By spoofing a victim, an attacker can cause a server that responds to UDP requests to flood the victim with reflected traffic. This applies as much to authoritative servers as to open recursive resolvers.
      </p>
      <p>
       DNSSEC also works over UDP, and the answers to DNS queries can be very long, containing multiple DNSKEY and RRSIG records. This is an attractive target for attackers since it allows them to amplify their reflection attacks. If a small volume of spoofed UDP DNSSEC requests is sent to nameservers, the victim will receive a large volume of reflected traffic. Sometimes this is enough to overwhelm the victims server, and cause a denial of service.
      </p>
      <p>
       Asking for a TLD that does not exist from a root server returns an answer that is around 100 bytes, the signed answer for the same question is about 650 bytes or an amplification factor of 6.5. The root is signed using a 1,024 bit RSA key and uses NSEC for negative answers. Asking for a domain that does not exist in a TLD using NSEC3 signed with 1,024 bit key will yield an amplification factor of around 10. There are other queries that can yield even higher amplification factors, the most effective being the ANY query.
      </p>
      <p>
       Like many services, DNS can also work over TCP. There is a truncation flag that can be sent back to a resolver to indicate that TCP is required. This would fix the issue of DNS reflection at the cost of slower DNS requests. This solution is not practical at the moment since 16% of resolvers dont respect the TCP truncation flag, and
       <a href="http://www.circleid.com/posts/20130820_a_question_of_dns_protocols/">
        4% dont try a second server
       </a>
       .
      </p>
      <p>
       Another option to reduce the size of responses is to use
       <a href="http://blog.cloudflare.com/ecdsa-the-digital-signature-algorithm-of-a-better-internet/">
        Elliptic Curve Digital Signature Algorithm (ECDSA)
       </a>
       keys instead of traditional RSA keys. ECDSA keys are much smaller than RSA keys of equivalent strength, and they produce smaller signatures making DNSSEC responses much smaller, reducing the amplification factor. Unfortunately, many recursive resolvers (including
       <a href="https://lists.dns-oarc.net/pipermail/dns-operations/2014-January/011257.html">
        Google Public DNS
       </a>
       ) do not support this key type yet, and many registrars have not added the option to their DNS management portals.
      </p>
      <p>
       Support for TCP and ECDSA is still lagging behind general DNSSEC support, so traditional anti-abuse methods can be used instead. This includes
       <a href="https://kb.isc.org/article/AA-01000/0/A-Quick-Introduction-to-Response-Rate-Limiting.html">
        Resource Rate Limiting (RRL)
       </a>
       and other heuristics.
      </p>
      <p>
       To protect against reflection attacks, CloudFlare is working on a multi-pronged approach. First, by using attack identification heuristics and anti-abuse techniques that we are currently using in our DNS server, and second by reducing the amplification factor of DNSSEC responses. Ways to reduces the maximum amplification factor includes only replying to ANY requests over TCP, using smaller ECDSA keys when possible, and reducing the frequency of key rollovers.
      </p>
      <h2 id="conclusions">
       Conclusions
      </h2>
      <p>
       CloudFlare is aware of the complexity introduced by DNSSEC with respect to zone privacy, key management, and reflection/amplification risk. With smart engineering decisions, and operational controls in place, the dangers of DNSSEC can be prevented.
      </p>
     </div>
     <footer>
      <small>
       Tagged with
       <a href="/tag/dns/">
        DNS
       </a>
       ,
       <a href="/tag/ddos/">
        ddos
       </a>
       ,
       <a href="/tag/protection/">
        protection
       </a>
       ,
       <a href="/tag/dnssec/">
        DNSSEC
       </a>
       ,
       <a href="/tag/nsec/">
        NSEC
       </a>
       ,
       <a href="/tag/key-management/">
        Key management
       </a>
       ,
       <a href="/tag/secuirty/">
        secuirty
       </a>
      </small>
     </footer>
     <aside class="section learn-more">
      <h5>
       Want to learn more about CloudFlare?
      </h5>
      <p>
       <a class="btn btn-success" href="https://www.cloudflare.com">
        Learn more
       </a>
      </p>
     </aside>
     <aside class="section comments">
      <h3>
       Comments
      </h3>
     </aside>
     <div id="disqus_thread">
     </div>
     <script type="text/javascript">
      var disqus_shortname = 'cloudflare';
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
     </script>
     <noscript>
      Please enable JavaScript to view the
      <a href="http://disqus.com/?ref_noscript">
       comments powered by Disqus.
      </a>
     </noscript>
     <a class="dsq-brlink" href="http://disqus.com">
      comments powered by
      <span class="logo-disqus">
       Disqus
      </span>
     </a>
    </article>
    <script>
     !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');
    </script>
    <script>
     (function(d, s, id) {
      var js, fjs = d.getElementsByTagName(s)[0];
      if (d.getElementById(id)) return;
      js = d.createElement(s); js.id = id;
      js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&amp;appId=596756540369391";
      fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));
    </script>
    <script src="//platform.linkedin.com/in.js" type="text/javascript">
     lang: en_US
    </script>
    <script type="text/javascript">
     (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/platform.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
    </script>
   </section>
   <aside class="sidebar">
    <div class="widget">
     <input class="st-default-search-input" placeholder="Search the blog" type="text"/>
     <script type="text/javascript">
      (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){
          (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);
          e=d.getElementsByTagName(t)[0];s.async=0;s.src=u;e.parentNode.insertBefore(s,e);
          })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st');
        _st('install','_KobMC_zsd_tDx_7NWiX','2.0.0');
     </script>
    </div>
    <div class="widget">
     <h4 class="widget-title">
      CloudFlare blog
     </h4>
     <p style="margin-top: 20px">
      <a class="btn btn-success" href="https://www.cloudflare.com/enterprise-service-request" tabindex="11" target="_blank">
       Contact our team
      </a>
     </p>
     <p>
      <strong>
       US callers
      </strong>
      <br/>
      1 (888) 99-FLARE
      <br/>
      <strong>
       UK callers
      </strong>
      <br/>
      +44 (0)20 3514 6970
      <br/>
      <strong>
       International callers
      </strong>
      <br/>
      +1 (650) 319-8930
      <br/>
      <br/>
      <a href="https://www.cloudflare.com/plans" target="_blank">
       Full feature list and plan types
      </a>
     </p>
     <p>
      CloudFlare provides performance and security for any website. More than 2 million websites use CloudFlare.
     </p>
     <p>
      There is no hardware or software. CloudFlare works at the DNS level. It takes only 5 minutes to sign up. To learn more, please visit our website
     </p>
    </div>
    <div class="widget">
     <h4 class="widget-title">
      CloudFlare features
     </h4>
     <ul class="menu menu-sidebar">
      <li>
       <a href="https://www.cloudflare.com/overview">
        Overview
       </a>
      </li>
      <li>
       <a href="https://www.cloudflare.com/features-cdn">
        CDN
       </a>
      </li>
      <li>
       <a href="https://www.cloudflare.com/features-optimizer">
        Optimizer
       </a>
      </li>
      <li>
       <a href="https://www.cloudflare.com/features-security">
        Security
       </a>
      </li>
      <li>
       <a href="https://www.cloudflare.com/features-analytics">
        Analytics
       </a>
      </li>
      <li>
       <a href="https://www.cloudflare.com/features-apps">
        Apps
       </a>
      </li>
      <li>
       <a href="https://www.cloudflare.com/network-map">
        Network map
       </a>
      </li>
      <li>
       <a href="https://www.cloudflarestatus.com">
        System status
       </a>
      </li>
     </ul>
    </div>
    <div class="widget" id="mc_embed_signup">
     <form action="https://cloudflare.us5.list-manage.com/subscribe/post?u=d80d4d74266c0c044b0bcd7ca&amp;id=8dc0bf9dea" class="validate" id="mc-embedded-subscribe-form" method="post" name="mc-embedded-subscribe-form" novalidate="" target="_blank">
      <input class="width-full required email" id="mce-EMAIL" name="EMAIL" placeholder="Enter your email address" type="email" value=""/>
      <div class="clearfix" id="mce-responses">
       <div class="response" id="mce-error-response" style="display:none">
       </div>
       <div class="response" id="mce-success-response" style="display:none">
       </div>
      </div>
      <div class="clearfix">
       <button class="btn btn-primary width-full" id="mc-embedded-subscribe" name="subscribe" type="submit">
        Sign up for email updates
       </button>
      </div>
     </form>
    </div>
    <div class="widget">
     <a class="btn btn-secondary btn-block" href="/rss/">
      Subscribe via RSS
     </a>
    </div>
    <div class="modunit">
     <div class="mod-content">
      <h4 class="widget-title">
       Live webinar
      </h4>
      <p>
       <strong>
        When:
       </strong>
       Thursday, 10am PT
       <strong>
        Where:
       </strong>
       Online.
       <a href="https://support.cloudflare.com/hc/en-us/articles/204154468-Upcoming-live-webinars" target="new">
        Register here
       </a>
      </p>
      <p>
       Each webinar covers a different topic. More info at registration link.
      </p>
     </div>
    </div>
   </aside>
  </div>
  <footer class="footer" id="footer">
   <div class="wrapper">
    <nav class="navigation footer-nav">
     <ul role="navigation">
      <li class="footer-column widget_cf_nav_menu" id="cf_nav_menu-2">
       <h6 class="widget-title">
        What We Do
       </h6>
       <div class="menu-what-we-do-container">
        <ul class="menu menu-footer">
         <li>
          <a href="https://www.cloudflare.com/plans">
           Plans
          </a>
         </li>
         <li>
          <a href="https://www.cloudflare.com/overview">
           Features
          </a>
         </li>
         <li>
          <a href="https://www.cloudflare.com/apps">
           Apps
          </a>
         </li>
         <li>
          <a href="https://www.cloudflare.com/network-map">
           Network
          </a>
         </li>
        </ul>
       </div>
      </li>
      <li class="footer-column widget_cf_nav_menu" id="cf_nav_menu-3">
       <h6 class="widget-title">
        Community
       </h6>
       <div class="menu-community-container">
        <ul class="menu menu-footer">
         <li>
          <a href="https://www.cloudflare.com/case-studies">
           Case Studies
          </a>
         </li>
         <li class="active">
          <a href="/">
           Blog
          </a>
         </li>
         <li>
          <a href="https://www.cloudflare.com/hosting-partners">
           Partners
          </a>
         </li>
         <li>
          <a href="https://developers.cloudflare.com/">
           Developers
          </a>
         </li>
        </ul>
       </div>
      </li>
      <li class="footer-column widget_cf_nav_menu" id="cf_nav_menu-4">
       <h6 class="widget-title">
        Support
       </h6>
       <div class="menu-support-container">
        <ul class="menu menu-footer">
         <li>
          <a href="https://www.cloudflare.com/support">
           Help Center
          </a>
         </li>
         <li>
          <a href="https://www.cloudflarestatus.com">
           System Status
          </a>
         </li>
         <li>
          <a href="https://www.cloudflare.com/contact">
           Contact Us
          </a>
         </li>
         <li>
          <a href="https://www.cloudflare.com/abuse/">
           Trust &amp; Safety
          </a>
         </li>
        </ul>
       </div>
      </li>
      <li class="footer-column widget_cf_nav_menu" id="cf_nav_menu-5">
       <h6 class="widget-title">
        About Us
       </h6>
       <div class="menu-about-us-container">
        <ul class="menu menu-footer">
         <li>
          <a href="https://www.cloudflare.com/people">
           Team
          </a>
         </li>
         <li>
          <a href="https://www.cloudflare.com/join-our-team">
           Careers
          </a>
         </li>
         <li>
          <a href="https://www.cloudflare.com/press-center">
           Press
          </a>
         </li>
         <li>
          <a href="https://www.cloudflare.com/terms">
           Legal
          </a>
         </li>
        </ul>
       </div>
      </li>
      <li class="footer-column widget_cf_nav_menu" id="cf_nav_menu-6">
       <h6 class="widget-title">
        Connect
       </h6>
       <div class="menu-connect-container">
        <ul class="menu menu-footer">
         <li>
          <a href="http://twitter.com/cloudflare">
           Twitter
          </a>
         </li>
         <li>
          <a href="https://www.facebook.com/CloudFlare">
           Facebook
          </a>
         </li>
         <li>
          <a href="https://plus.google.com/+cloudflare/posts">
           Google+
          </a>
         </li>
         <li>
          <a href="/rss/">
           RSS
          </a>
         </li>
        </ul>
       </div>
      </li>
     </ul>
     <div class="credits">
      All content  2015
      <a href="https://cloudflare.com">
       CloudFlare
      </a>
      . Proudly published with
      <a href="https://ghost.org">
       Ghost
      </a>
      .
     </div>
    </nav>
   </div>
  </footer>
  <script src="/public/jquery.min.js?v=cb2a117229">
  </script>
  <script src="/assets/js/jquery.fitvids.js?v=cb2a117229" type="text/javascript">
  </script>
  <script type="text/javascript">
   $(document).ready(function(){ $(".post-content").fitVids(); });
  </script>
  <script type="text/javascript">
   var disqus_shortname = 'cloudflare';
    (function () {
        var s = document.createElement('script'); s.async = true;
        s.type = 'text/javascript';
        s.src = '//' + disqus_shortname + '.disqus.com/count.js';
        (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
    }());
  </script>
  <img alt="" hidden="" src="/view.gif?page=/dnssec-complexities-and-considerations/" style="display:none"/>
 </body>
</html>