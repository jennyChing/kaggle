<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <!--
///////////////////////////////////////////////////////////////////////////////
// HTML Header
///////////////////////////////////////////////////////////////////////////////
-->
 <head>
  <title>
   Game Programming Training | Game Institute
  </title>
  <!-- Meta Data-->
  <meta content="text/html;charset=utf-8" http-equiv="Content-Type"/>
  <meta content="Learn game programming from the ground up. From C++ basics to the inner workings of 3D graphics engines, you'll get professional training at every step." name="Description"/>
  <!--[if IE]&gt;&lt;meta http-equiv="X-UA-Compatible" content="IE=9" /&gt;&lt;![endif]-->
  <!--&lt;meta name="viewport" content="width=100%;" /&gt;-->
  <link href="http://www.gameinstitute.com/game-development/game-programming.php" rel="canonical"/>
  <!-- StyleSheet Libraries -->
  <link href="http://assets-1.gameinstitute.com/elements/common_v9.min.css" rel="stylesheet" type="text/css"/>
  <!--[if IE]&gt;&lt;link rel="stylesheet" type="text/css" href="http://assets-2.gameinstitute.com/elements/common-ie.css" /&gt;&lt;![endif]-->
  <!--[if lt IE 9]&gt;&lt;link rel="stylesheet" type="text/css" href="http://assets-3.gameinstitute.com/elements/common-ie-lt9.css" /&gt;&lt;![endif]-->
  <link href="http://assets-4.gameinstitute.com/elements/custom-theme/jquery-ui-1.8.18.custom.css" rel="stylesheet" type="text/css"/>
  <link href="/elements/gamedev-package_v12.min.css" rel="stylesheet" type="text/css"/>
  <!--[if IE]&gt;&lt;link rel="stylesheet" type="text/css" href="/elements/gamedev-package-ie.css" /&gt;&lt;![endif]-->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript">
  </script>
  <script src="http://assets-1.gameinstitute.com/elements/js/jquery/jquery-ui-1.8.18.custom.min.js" type="text/javascript">
  </script>
  <script src="http://assets-2.gameinstitute.com/elements/js/base_v7.min.js" type="text/javascript">
  </script>
  <script type="text/javascript">
   // DOM loaded
	$(function()
	{
		// Setup login form submission
		$('input#quick-login-username,input#quick-login-password').keypress(function(e)
		{
			if ( e.which == 13 )
			{
				e.preventDefault();
				$('form#quick-login').submit();
				return false;
			}
		});

		// Setup login watermarks.
		// Workaround: Ensure login input does not have focus by default.
		$('input#quick-login-username').watermark('User Name         ', {useNative:false}).blur();
		$('input#quick-login-password').watermark('Password          ', {useNative:false});

	});
  </script>
  <script src="/popud/js.php?popup=1" type="text/javascript">
  </script>
  <script type="text/javascript">
   $(function() {
			$('.trialbutton').click( function( e) { e.preventDefault(); popud_show_lightbox(true); } );
		});
  </script>
  <!-- Implicit Styles (Functionality) -->
 </head>
 <body>
  <noscript>
   <style>
    .jsonly { display: none }
   </style>
  </noscript>
  <!-- Analytics -->
  <!-- Google Analytics -->
  <script>
   (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
		ga('create', 'UA-31257236-1', 'gameinstitute.com', {'siteSpeedSampleRate': 5});
		ga('require', 'displayfeatures');
		ga('send', 'pageview');
  </script>
  <!-- End Google Analytics -->
  <!-- Piwik -->
  <script type="text/javascript">
   var pkBaseURL = (("https:" == document.location.protocol) ? "https://www.gameinstitute.com/piwik/" : "http://www.gameinstitute.com/piwik/");
document.write(unescape("%3Cscript src='" + pkBaseURL + "piwik.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
   try {
var piwikTracker = Piwik.getTracker(pkBaseURL + "piwik.php", 1);
piwikTracker.trackPageView();
piwikTracker.enableLinkTracking();
} catch( err ) {}
  </script>
  <noscript>
   <p>
    <img alt="" src="https://www.gameinstitute.com/piwik/piwik.php?idsite=1" style="border:0"/>
   </p>
  </noscript>
  <!-- End Piwik Tracking Code -->
  <!--
///////////////////////////////////////////////////////////////////////////////
// HTML Body
///////////////////////////////////////////////////////////////////////////////
-->
  <!-- Site Header -->
  <header>
   <!-- Social Media Buttons -->
   <!--&lt;div id="social-media-links"&gt;
		&lt;a href="http://facebook.com/gameinstitute" target="_new"&gt;&lt;img src="/elements/images/social/fb-small.png" /&gt;&lt;/a&gt;
		&lt;a href="http://twitter.com/gameinstitute" target="_new"&gt;&lt;img src="/elements/images/social/tw-small.png" /&gt;&lt;/a&gt;
		&lt;a href="http://youtube.com/user/gameinstitute" target="_new"&gt;&lt;img src="/elements/images/social/yt-small.png" /&gt;&lt;/a&gt;
	&lt;/div&gt;-->
   <!-- Message -->
   <div id="user-message">
    <img alt="[Close]" height="22" src="http://assets-3.gameinstitute.com/elements/images/icons/message-close-22x22.png" width="22"/>
    <div class="internal">
    </div>
   </div>
   <!-- Main Menu Logged Out -->
   <div id="main-menu">
    <!-- Main home link -->
    <div class="home">
     <a href="/" title="Home">
     </a>
    </div>
    <!-- Login section -->
    <form action="https://www.gameinstitute.com/interface/login.php?r=aHR0cDovL3d3dy5nYW1laW5zdGl0dXRlLmNvbS9nYW1lLWRldmVsb3BtZW50L2dhbWUtcHJvZ3JhbW1pbmcucGhw" class="login" id="quick-login" method="post">
     <div class="input-frame">
      <input class="inputs" id="quick-login-username" name="username"/>
     </div>
     <div class="input-frame">
      <input class="inputs" id="quick-login-password" name="password" type="password"/>
     </div>
     <noscript>
      <!-- Hidden submit box for browsers that require one for auto-submit on enter with JS disabled. -->
      <input style="background-color: transparent; border: none; margin-left:-25px; margin-top: -25px;" type="submit" value=""/>
     </noscript>
    </form>
    <!-- Navigation section -->
    <div class="nav">
     <nav>
      <div class="separator">
      </div>
      <div class="item highlight" style="background-image: url('http://assets-4.gameinstitute.com/elements/images/menu/game-development.png');">
       <a href="/game-development/">
       </a>
      </div>
      <div class="separator">
      </div>
      <div class="item" style="background-image: url('http://assets-1.gameinstitute.com/elements/images/menu/pricing.png');">
       <a href="/membership/">
       </a>
      </div>
      <div class="separator">
      </div>
      <div class="item trialbutton" style="background-image: url('http://assets-2.gameinstitute.com/elements/images/menu/free-training.png');">
       <a href="#">
       </a>
      </div>
      <div class="separator">
      </div>
      <div class="item end" style="background-image: url('http://assets-3.gameinstitute.com/elements/images/menu/support.png');">
       <a href="http://support.gameinstitute.com">
       </a>
      </div>
     </nav>
    </div>
   </div>
   <!-- Secondary Text Menu -->
   <div id="sub-menu">
    <!-- Breadcrumbs -->
    <div id="sub-menu-breadcrumbs">
     <a href="/">
      &gt;&gt; Home
     </a>
     
     <a href="http://www.gameinstitute.com/game-development/game-programming.php">
      Game Programming
     </a>
    </div>
    <!-- Secondary Links -->
    <div id="sub-menu-links">
     <span class="sign-in">
      <a href="https://www.gameinstitute.com/signin.php?r=aHR0cDovL3d3dy5nYW1laW5zdGl0dXRlLmNvbS9nYW1lLWRldmVsb3BtZW50L2dhbWUtcHJvZ3JhbW1pbmcucGhw">
       Sign In
      </a>
     </span>
     |
     <span class="mycart" id="mini-cart">
      <a href="/cart/">
       My Cart (
       <span id="mini-cart-items">
        0
       </span>
       )
      </a>
     </span>
    </div>
   </div>
   <div id="page-header">
   </div>
  </header>
  <div id="page">
   <!-- Home Page Body -->
   <div id="page-content">
    <div id="page-grid-960" style="text-align:justify">
     <!-- Banner Details -->
     <div id="banner" style="background-image: url(/elements/images/gamedev-package/banner-carbon.jpg);">
      <!--&lt;h1 style="line-height:45px"&gt;Game Programming Training&lt;/h1&gt;
				&lt;h2 style="margin: 0px 0px 20px 500px; padding-top: 8px; border-top: 1px dotted #aaa; font-family: Tahoma; font-size:18px;"&gt;The Game Developer Package&lt;/h2&gt;
				&lt;p&gt;Some of the most comprehensive game programming instruction available anywhere in the world can be found right here in this package. Designed by accomplished authors and experienced industry veterans, you will be hard pressed to find a more effective way to learn how to program games.&lt;/p&gt;-->
      <h1 style="font-size:27px">
       Game Programming Step-by-Step
      </h1>
      <p>
       Some of the most comprehensive game programming instruction available anywhere on the planet can be found right here in this package. Designed by accomplished authors and experienced industry veterans, you will be hard pressed to find a more effective way to learn how to program games.
      </p>
      <h2 style="margin-left: 550px;">
       The Game Developer Package
      </h2>
      <div class="button-overlay" style="margin-top:-18px;">
       <ul>
        <li>
         <a class="green" href="/membership/" style="cursor:pointer">
          <span class="title" style="font-size:1.0em; letter-spacing:0px;">
           Save 50% - Limited Time Only
          </span>
          <span class="text">
           Join Now from $49
          </span>
         </a>
        </li>
        <li>
         <a class="blue trialbutton" href="#">
          <span class="title">
           Try For Free
          </span>
          <span class="text">
           Start Building Games Now
          </span>
         </a>
        </li>
       </ul>
      </div>
      <div class="footer" style="left:163px;">
       <div class="left" style="width: 185px;">
       </div>
       <img alt="Package includes all of our game development materials." height="39" src="/elements/images/gamedev-package/everything-included.png" width="202"/>
       <div class="right" style="width: 185px;">
       </div>
      </div>
     </div>
     <!-- Package Overview -->
     <div class="ui-panel-bg" id="overview">
      <div class="jsonly ui-tabs ui-widget ui-widget-content ui-corner-all" id="tabs">
       <ul class="ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all">
        <li class="ui-state-default ui-corner-top" style="text-transform:lowercase;">
         <a href="/game-development/" style="width: 120px;">
          Package Overview
         </a>
        </li>
        <li class="ui-state-default ui-corner-top ui-tabs-selected ui-state-active" style="text-transform:lowercase;">
         <a href="game-programming.php" style="width: 120px;">
          Game Programming
         </a>
        </li>
        <li class="ui-state-default ui-corner-top" style="text-transform:lowercase;">
         <a href="game-design.php" style="width: 120px;">
          Game Art &amp; Animation
         </a>
        </li>
        <li class="ui-state-default ui-corner-top" style="text-transform:lowercase;">
         <a href="/unity-tutorials.php" style="width: 120px;">
          Unity Tutorials
         </a>
        </li>
        <li class="ui-state-default ui-corner-top" style="text-transform:lowercase;">
         <a href="software.php" style="width: 120px;">
          Software &amp; Tools
         </a>
        </li>
        <!--&lt;li style="text-transform:lowercase;" class="ui-state-default ui-corner-top"&gt;&lt;a style='width: 120px;' href="faq.php"&gt;FAQ&lt;/a&gt;&lt;/li&gt;-->
        <li class="ui-state-default ui-corner-top" style="text-transform:lowercase;">
         <a href="testimonials.php" style="width: 120px;">
          Testimonials
         </a>
        </li>
       </ul>
       <!-- Programming &amp; Math Tab -->
       <div class="ui-tabs-panel ui-widget-content ui-corner-bottom" id="programming-math">
        <div class="content-container-outer">
         <div class="content-container-inner">
          <div class="spine">
           <h2>
            Game Programming
           </h2>
          </div>
          <div class="package-content-item" id="cpp">
           <img alt="Game Programming - C++ Programming for Games" src="/elements/images/gamedev-package/courses/cpp7.jpg"/>
           <div class="details">
            <h2>
             C++ Programming
            </h2>
            <hr/>
            <div style="display:table; margin-bottom: 10px;">
             <div style="display:table-cell; padding-right: 20px;">
              <ul class="contents">
               <li>
                20 Lessons
               </li>
               <li>
                2 Textbooks
               </li>
              </ul>
             </div>
             <div style="display:table-cell;">
              <ul class="contents">
               <li>
                20 Presentations
               </li>
               <li>
                78 Projects
               </li>
              </ul>
             </div>
            </div>
            <p>
             If you want to be a game programmer, this is where you'll start. Most commercial games are built using the C++ programming language and this material will guide you through the process of making your very first video game. The skills you pick up along the way will serve as a foundation for the rest of the material in the package. In addition, you will be a competent C++ programmer capable of writing many different types of application.
            </p>
           </div>
           <!-- Content Detail -->
           <div class="collapsible-outer" id="cpp-contents">
            <!-- Topics -->
            <h3>
             <a href="#">
              Topics
             </a>
            </h3>
            <div class="outer-container">
             <div class="collapsible-inner">
              <h4>
               <a href="#">
                Environment &amp; Core Language Features
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Create, compile, link and execute C++ programs.
                </li>
                <li>
                 Find out how C++ code is transformed into machine code.
                </li>
                <li>
                 Learn some of the basic C++ features necessary for every C++ program.
                </li>
                <li>
                 Discover how to output and input text information to and from the user.
                </li>
                <li>
                 Understand the concept of variables.
                </li>
                <li>
                 Perform simple arithmetic operations in C++.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Our First C++ Program
                 <ul>
                  <li>
                   Creating the Project
                  </li>
                  <li>
                   Adding .CPP File to the Project
                  </li>
                  <li>
                   Writing the Code
                  </li>
                  <li>
                   Compiling, Linking, and Executing
                  </li>
                  <li>
                   Comments
                  </li>
                  <li>
                   White Space
                  </li>
                  <li>
                   Include Directives
                  </li>
                  <li>
                   Namespaces
                  </li>
                  <li>
                   The main{...} Function
                  </li>
                  <li>
                   std::string
                  </li>
                  <li>
                   cin and cout
                  </li>
                 </ul>
                </li>
                <li>
                 Variables
                 <ul>
                  <li>
                   Declarations and Definitions
                  </li>
                  <li>
                   Names
                  </li>
                  <li>
                   sizeof
                  </li>
                  <li>
                   The unsigned Keyword
                  </li>
                  <li>
                   Literal Assignments
                  </li>
                  <li>
                   Type Conversions / Casts
                  </li>
                  <li>
                   typedefs
                  </li>
                  <li>
                   Const Variables
                  </li>
                  <li>
                   Macros
                  </li>
                 </ul>
                </li>
                <li>
                 Arithmetic Operations
                 <ul>
                  <li>
                   Unary Arithmetic Operations
                  </li>
                  <li>
                   The Modulus Operator
                  </li>
                  <li>
                   Compound Arithmetic Operations
                  </li>
                  <li>
                   Operator Precedence
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <!-- Conditionals, Loops, and Arrays -->
              <h4>
               <a href="#">
                Conditionals, Loops, and Arrays
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand and evaluate logical expressions.
                </li>
                <li>
                 Form and apply conditional, if...then, statements.
                </li>
                <li>
                 Discover how to execute a block of code repeatedly using various kinds of loops.
                </li>
                <li>
                 Learn how to create containers of variables and how to manipulate the individual elements in those containers.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 The Relational Operators
                </li>
                <li>
                 The Logical Operators
                </li>
                <li>
                 Conditional Statements
                 <ul>
                  <li>
                   The If Statement
                  </li>
                  <li>
                   The Else Clause
                  </li>
                  <li>
                   Nested If...Else Statements
                  </li>
                  <li>
                   The Switch Statement
                  </li>
                  <li>
                   The Ternary Operator
                  </li>
                 </ul>
                </li>
                <li>
                 Repetition
                 <ul>
                  <li>
                   The for-loop
                  </li>
                  <li>
                   The while Loop
                  </li>
                  <li>
                   The do...while Loop
                  </li>
                  <li>
                   Nesting Loops
                  </li>
                  <li>
                   Break and Continue Keywords
                  </li>
                 </ul>
                </li>
                <li>
                 Arrays
                 <ul>
                  <li>
                   Array Initialization
                  </li>
                  <li>
                   Iterating Over an Array
                  </li>
                  <li>
                   Multidimensional Arrays
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <!-- Functions -->
              <h4>
               <a href="#">
                Functions
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand and construct logical code groupings/tasks as functions.
                </li>
                <li>
                 Understand the various definitions for scope as it pertains to variable declarations.
                </li>
                <li>
                 Understand how to use code libraries for common tasks in mathematics and for random number generation.
                </li>
                <li>
                 Understand function parameter overloading and the concept of the default parameter.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 User-Defined Functions
                 <ul>
                  <li>
                   Functions with One Parameter
                  </li>
                  <li>
                   Functions with Several Parameters
                  </li>
                 </ul>
                </li>
                <li>
                 Variable Scope
                </li>
                <li>
                 Math Library Functions
                </li>
                <li>
                 Random Number Library Functions
                </li>
                <li>
                 Function Overloading
                </li>
                <li>
                 Default Parameters
                </li>
               </ul>
              </div>
              <!-- References and Pointers -->
              <h4>
               <a href="#">
                References and Pointers
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Become familiar with reference and pointer syntax.
                </li>
                <li>
                 Understand how C++ passes array arguments into functions.
                </li>
                <li>
                 Discover how to return multiple return values from a function.
                </li>
                <li>
                 Learn how to create and destroy memory at runtime (i.e., while the program is running).
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 References
                 <ul>
                  <li>
                   Constant References
                  </li>
                 </ul>
                </li>
                <li>
                 Pointers
                 <ul>
                  <li>
                   Computer Memory Primer
                  </li>
                  <li>
                   Pointer Initialization
                  </li>
                  <li>
                   Dereferencing
                  </li>
                 </ul>
                </li>
                <li>
                 Arrays Revisited
                 <ul>
                  <li>
                   Arrays and Pointers
                  </li>
                  <li>
                   Pointer Arithmetic
                  </li>
                  <li>
                   Arrays as Function Parameters
                  </li>
                 </ul>
                </li>
                <li>
                 Multiple Function Return Values using References and Pointers
                </li>
                <li>
                 Dynamic Memory
                 <ul>
                  <li>
                   Allocating Memory
                  </li>
                  <li>
                   Deleting Memory
                  </li>
                  <li>
                   Memory Leaks
                  </li>
                 </ul>
                </li>
                <li>
                 std::vector
                </li>
                <li>
                 Pointers to Functions
                </li>
               </ul>
              </div>
              <!-- Object Oriented Programming -->
              <h4>
               <a href="#">
                Object Oriented Programming
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand the problems object oriented programming attempts to solve.
                </li>
                <li>
                 Define a class and instantiate members of that class.
                </li>
                <li>
                 Learn some basic class design strategies.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Object Oriented Programming Ideas
                </li>
                <li>
                 Classes and Objects
                 <ul>
                  <li>
                   Basic Syntax
                  </li>
                  <li>
                   The Dot/Arrow Operators
                  </li>
                  <li>
                   Header Files
                  </li>
                  <li>
                   Inclusion Guards
                  </li>
                  <li>
                   Class Definitions
                  </li>
                  <li>
                   Class Implementations
                  </li>
                  <li>
                   Data Hiding: Private versus Public
                  </li>
                  <li>
                   Constructors and Destructors
                  </li>
                  <li>
                   Copy Constructors
                  </li>
                  <li>
                   Assignment Operators
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Strings and Miscellaneous C++ Topics
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand how C++ natively describes strings.
                </li>
                <li>
                 Learn some important standard library string functions.
                </li>
                <li>
                 Review std::string and become familiar with some of its methods.
                </li>
                <li>
                 Become familiar with the
                 <em>
                  this
                 </em>
                 pointer.
                </li>
                <li>
                 Learn about the friend and static keywords.
                </li>
                <li>
                 Discover how to create your own namespaces.
                </li>
                <li>
                 Understand what enumerated types are, how they are defined in C++, and when they would be used.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <div class="two_columns">
                <ul>
                 <li>
                  Char Strings
                 </li>
                 <li>
                  String Literals
                 </li>
                 <li>
                  Escape Characters
                 </li>
                 <li>
                  C-String Functions
                  <ul>
                   <li>
                    Length (strlen)
                   </li>
                   <li>
                    Equality (strcmp)
                   </li>
                   <li>
                    Copying (strcpy)
                   </li>
                   <li>
                    Addition (strcat)
                   </li>
                   <li>
                    Formatting (sprintf)
                   </li>
                  </ul>
                 </li>
                 <li>
                  std::string
                  <ul>
                   <li>
                    Length
                   </li>
                   <li>
                    Relational Operators
                   </li>
                   <li>
                    Addition
                   </li>
                   <li>
                    Empty Strings
                   </li>
                   <li>
                    Substrings
                   </li>
                   <li>
                    Inserting
                   </li>
                   <li>
                    Finding
                   </li>
                   <li>
                    Replacing
                   </li>
                   <li>
                    Bracket Operator
                   </li>
                   <li>
                    getline
                   </li>
                  </ul>
                 </li>
                </ul>
               </div>
               <div class="two_columns">
                <ul>
                 <li>
                  The this Pointer
                 </li>
                 <li>
                  Friends
                  <ul>
                   <li>
                    Friend Functions
                   </li>
                   <li>
                    Friend Classes
                   </li>
                  </ul>
                 </li>
                 <li>
                  The static Keyword
                  <ul>
                   <li>
                    Static Variables in Functions
                   </li>
                   <li>
                    Static Data Members
                   </li>
                   <li>
                    Static Methods
                   </li>
                  </ul>
                 </li>
                 <li>
                  Namespaces
                  <ul>
                   <li>
                    Variations of the "using" Clause
                   </li>
                  </ul>
                 </li>
                 <li>
                  Enumerated Types
                 </li>
                </ul>
               </div>
              </div>
              <!-- Operator Overloading -->
              <h4>
               <a href="#">
                Operator Overloading
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Learn how to overload the arithmetic operators.
                </li>
                <li>
                 Discover how to overload the relational operators.
                </li>
                <li>
                 Overload the conversion operators.
                </li>
                <li>
                 Understand the difference between deep copies and shallow copies.
                </li>
                <li>
                 Find out how to overload the assignment operator and copy constructor to perform deep copies.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 A Vector Class
                 <ul>
                  <li>
                   Constructors
                  </li>
                  <li>
                   Equality
                  </li>
                  <li>
                   Addition and Subtraction
                  </li>
                  <li>
                   Scalar Multiplication
                  </li>
                  <li>
                   Length
                  </li>
                  <li>
                   Normalization
                  </li>
                  <li>
                   The Dot Product
                  </li>
                  <li>
                   Printing
                  </li>
                  <li>
                   Accepting Input
                  </li>
                 </ul>
                </li>
                <li>
                 Overloading Arithmetic Operators
                 <ul>
                  <li>
                   Operator Overloading Syntax
                  </li>
                  <li>
                   Overloading the Other Arithmetic Operators
                  </li>
                 </ul>
                </li>
                <li>
                 Overloading Relational Operators
                </li>
                <li>
                 Overloading Conversion Operators
                </li>
                <li>
                 Overloading the Extraction and Insertion Operators
                </li>
                <li>
                 A String Class
                 <ul>
                  <li>
                   Assignment Operator
                  </li>
                  <li>
                   Copy Constructor
                  </li>
                  <li>
                   Bracket Operator
                  </li>
                  <li>
                   Construction and Destruction
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <!-- File Input/Output -->
              <h4>
               <a href="#">
                File Input/Output
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Learn how to load and save text files.
                </li>
                <li>
                 Learn how to load and save binary files.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Streams
                </li>
                <li>
                 Text File I/O
                 <ul>
                  <li>
                   Saving Data
                  </li>
                  <li>
                   Loading Data
                  </li>
                 </ul>
                </li>
                <li>
                 Binary File I/O
                 <ul>
                  <li>
                   Saving Data
                  </li>
                  <li>
                   Loading Data
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <!-- Inheritance and Polymorphism -->
              <h4>
               <a href="#">
                Inheritance and Polymorphism
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand what inheritance means in C++ and why it is a useful code construct.
                </li>
                <li>
                 Understand the syntax of polymorphism, how it works, and why it is useful.
                </li>
                <li>
                 Learn how to create general abstract types and interfaces.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Inheritance
                 <ul>
                  <li>
                   Repeated Inheritance
                  </li>
                  <li>
                   "isa" vs. "hasa" relationships
                  </li>
                  <li>
                   Base Class/Derived Class Casting
                  </li>
                  <li>
                   Public vs. Private Inheritance
                  </li>
                  <li>
                   Method Overriding
                  </li>
                 </ul>
                </li>
                <li>
                 Constructors and Destructors with Inheritance
                </li>
                <li>
                 Multiple Inheritance
                </li>
                <li>
                 Polymorphism
                </li>
                <li>
                 How Virtual Functions Work
                </li>
                <li>
                 The Cost of Virtual Functions
                </li>
                <li>
                 Abstract Classes
                 <ul>
                  <li>
                   Interfaces
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <!-- Templates -->
              <h4>
               <a href="#">
                Templates
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Learn how to design and implement generic classes.
                </li>
                <li>
                 Learn how to define generic functions.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Class Templates
                 <ul>
                  <li>
                   Class Template Definition
                  </li>
                  <li>
                   Class Template Implementation
                  </li>
                  <li>
                   Class Template Instantiation
                  </li>
                 </ul>
                </li>
                <li>
                 A Table Template Class
                 <ul>
                  <li>
                   Table Data
                  </li>
                  <li>
                   Class Interface
                  </li>
                  <li>
                   destroy
                  </li>
                  <li>
                   resize
                  </li>
                  <li>
                   The Overloaded Parenthesis Operator
                  </li>
                  <li>
                   The Table Class
                  </li>
                 </ul>
                </li>
                <li>
                 Function Templates
                </li>
               </ul>
              </div>
              <!-- Exception Handling -->
              <h4>
               <a href="#">
                Exception Handling
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand the method of catching errors via function return codes, and an understanding of the shortcomings of this method.
                </li>
                <li>
                 Become familiar with the concepts of exception handling, its syntax, and its benefits.
                </li>
                <li>
                 Learn how to write assumption verification code using asserts.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Error Codes
                </li>
                <li>
                 Exception Handling Basics
                </li>
                <li>
                 Assert
                </li>
               </ul>
              </div>
              <!-- Number Systems -->
              <h4>
               <a href="#">
                Number Systems
               </a>
              </h4>
              <div>
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Learn how to represent numbers with the binary and hexadecimal numbering systems, how to perform basic arithmetic in these numbering systems, and how to convert between these numbering systems as well as the base ten numbering system.
                </li>
                <li>
                 Gain an understanding of how the computer describes intrinsic C++ types internally.
                </li>
                <li>
                 Become proficient with the various binary operations.
                </li>
                <li>
                 Become familiar with the way in which floating-point numbers are represented internally.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Number Systems
                 <ul>
                  <li>
                   The Binary Number System
                   <ul>
                    <li>
                     Counting in Binary
                    </li>
                    <li>
                     Binary and Powers of 2
                    </li>
                    <li>
                     Binary Arithmetic
                    </li>
                    <li>
                     Converting Binary to Decimal
                    </li>
                    <li>
                     Converting Decimal to Binary
                    </li>
                   </ul>
                  </li>
                  <li>
                   The Hexadecimal Number System
                   <ul>
                    <li>
                     Counting in Hexadecimal
                    </li>
                    <li>
                     Hexadecimal Arithmetic
                    </li>
                    <li>
                     Converting Hexadecimal to Binary
                    </li>
                    <li>
                     Converting Binary to Hexadecimal
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
                <li>
                 Bits and Memory
                </li>
                <li>
                 Bit Operations
                 <ul>
                  <li>
                   AND
                  </li>
                  <li>
                   Inclusive OR
                  </li>
                  <li>
                   NOT
                  </li>
                  <li>
                   Exclusive OR
                  </li>
                  <li>
                   Shifting
                  </li>
                  <li>
                   Compound Bit Operators
                  </li>
                 </ul>
                </li>
                <li>
                 Floating-Point Number Analysis
                </li>
               </ul>
              </div>
              <!-- The Standard Template Library -->
              <h4>
               <a href="#">
                The Standard Template Library
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Discover how lists, stacks, queues, deques, and maps work internally, and in which situations they should be used.
                </li>
                <li>
                 Become familiar with a handful of the generic algorithms the standard library provides and how to apply these algorithms on a variety of data structures.
                </li>
                <li>
                 Learn how to create objects that act like functions, called functors, and learn how to create and use predicates with the standard library.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Linked Lists
                </li>
                <li>
                 Stacks
                </li>
                <li>
                 Queues
                </li>
                <li>
                 Deques
                </li>
                <li>
                 Maps
                </li>
                <li>
                 Algorithms
                </li>
                <li>
                 Functors
                </li>
                <li>
                 Predicates
                </li>
               </ul>
              </div>
              <!-- Basic Windows Programming -->
              <h4>
               <a href="#">
                Basic Windows Programming
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Learn how to create a basic Win32 application.
                </li>
                <li>
                 Gain an understanding of the event driven programming model.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 The Event Driven Programming Model
                 <ul>
                  <li>
                   Win32 Programming Theory
                  </li>
                  <li>
                   The MSG Structure
                  </li>
                 </ul>
                </li>
                <li>
                 Overview of Creating a Windows Application
                 <ul>
                  <li>
                   Defining the Window Procedure
                  </li>
                  <li>
                   The WNDCLASS Structure
                  </li>
                  <li>
                   WNDCLASS Registration
                  </li>
                  <li>
                   CreateWindow
                  </li>
                  <li>
                   Showing and Updating the Window
                  </li>
                  <li>
                   The Message Loop
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <!-- GDI and Menus -->
              <h4>
               <a href="#">
                GDI and Menus
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Learn how to output text onto a window, and how to draw several GDI shape primitives like lines, rectangles and ellipses.
                </li>
                <li>
                 Understand how different pens and brushes can be used to change the way GDI shapes are colored and drawn.
                </li>
                <li>
                 Learn how to load bitmap (.bmp) images from file into our Windows programs, and how to draw them on the client area of our windows.
                </li>
                <li>
                 Become familiar with the Visual C++ menu resource editor, and learn how to create menus.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Text Output
                 <ul>
                  <li>
                   The WM_PAINT Message
                  </li>
                  <li>
                   The Device Context
                  </li>
                  <li>
                   TextOut
                  </li>
                  <li>
                   Example Program
                  </li>
                 </ul>
                </li>
                <li>
                 Shape Primitives
                 <ul>
                  <li>
                   Drawing Lines
                  </li>
                  <li>
                   Drawing Rectangles
                  </li>
                  <li>
                   Drawing Ellipses
                  </li>
                 </ul>
                </li>
                <li>
                 Bitmaps
                 <ul>
                  <li>
                   Loading
                  </li>
                  <li>
                   Rendering
                  </li>
                  <li>
                   Deleting
                  </li>
                 </ul>
                </li>
                <li>
                 Pens and Brushes
                </li>
                <li>
                 Menus
                 <ul>
                  <li>
                   Creating a Menu Resource
                  </li>
                  <li>
                   Loading a Menu and Attaching it to a Window
                  </li>
                  <li>
                   Checking Menu Items
                  </li>
                  <li>
                   Selecting Menu Items
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <!-- Dialogs and Controls -->
              <h4>
               <a href="#">
                Dialogs and Controls
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Learn how to create modal and modeless dialog boxes, and how to distinguish between the two.
                </li>
                <li>
                 Discover how to create and design dialog boxes with the Visual C++ resource editor.
                </li>
                <li>
                 Become familiar with several Win32 controls such as static text controls, picture box controls, edit box controls, radio button controls, button controls, and combo box controls.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Modal Dialog Boxes
                 <ul>
                  <li>
                   Static Text Controls
                  </li>
                  <li>
                   Button Controls
                  </li>
                  <li>
                   Dialog Box Design
                  </li>
                 </ul>
                </li>
                <li>
                 Modeless Dialog Boxes
                 <ul>
                  <li>
                   Edit Controls
                  </li>
                 </ul>
                </li>
                <li>
                 Radio Buttons
                </li>
                <li>
                 Combo Boxes
                </li>
               </ul>
              </div>
              <!-- Sprite Animation -->
              <h4>
               <a href="#">
                Sprite Animation
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Learn how to use the Windows multimedia timer functions for smooth animation.
                </li>
                <li>
                 Discover how to do basic 2D computer animation.
                </li>
                <li>
                 Understand the technique of double buffering to avoid flicker.
                </li>
                <li>
                 Learn how to draw complex non-rectangular 2D image bitmaps using the GDI raster operations.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Timing
                 <ul>
                  <li>
                   Windows Multimedia Timer Functions
                  </li>
                  <li>
                   Computing Elapsed Time
                  </li>
                  <li>
                   Computing Frames Per Second
                  </li>
                 </ul>
                </li>
                <li>
                 Double Buffering
                </li>
                <li>
                 Sprites
                 <ul>
                  <li>
                   Theory
                  </li>
                  <li>
                   Implementation
                  </li>
                  <li>
                   Art Resources
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <!-- First Game -->
              <h4>
               <a href="#">
                First Game
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Become familiar with the three-stage software development process of analysis, design, and implementation.
                </li>
                <li>
                 Practice the three-stage software development process by analyzing, designing, and implementing an Air Hockey game.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Analysis
                </li>
                <li>
                 Object Identification
                </li>
                <li>
                 Game Behavior/Problem Solving
                </li>
                <li>
                 Design
                </li>
                <li>
                 Algorithms
                 <ul>
                  <li>
                   Mouse Velocity
                  </li>
                  <li>
                   Paddle Artificial Intelligence
                  </li>
                  <li>
                   Puck-Paddle Collision
                  </li>
                  <li>
                   Puck-Wall Collision
                  </li>
                  <li>
                   Paddle-Wall Collision
                  </li>
                  <li>
                   Pausing/Un-pausing
                  </li>
                  <li>
                   Keeping Score
                  </li>
                 </ul>
                </li>
                <li>
                 Software Design
                </li>
                <li>
                 Implementation
                </li>
                <li>
                 Main Application Code
                </li>
               </ul>
              </div>
             </div>
            </div>
            <!-- Presentations -->
            <h3>
             <a href="#">
              Presentations
             </a>
            </h3>
            <div class="outer-container presentations">
             <div class="two_columns">
              <ul>
               <li>
                Introducing C++
               </li>
               <li>
                Conditionals, Loops, and Arrays
               </li>
               <li>
                Functions
               </li>
               <li>
                References and Pointers
               </li>
               <li>
                Object Oriented Programming
               </li>
               <li>
                Strings and Miscellaneous C++ Topics
               </li>
               <li>
                Operator Overloading
               </li>
               <li>
                File Input/Output
               </li>
               <li>
                Inheritance and Polymorphism
               </li>
               <li>
                C++ Summary I
               </li>
              </ul>
             </div>
             <div class="two_columns">
              <ul>
               <li>
                Templates
               </li>
               <li>
                Exception Handling
               </li>
               <li>
                Number Systems
               </li>
               <li>
                The Standard Template Library
               </li>
               <li>
                Win32 Programming I: Basic Windows Programming
               </li>
               <li>
                Win32 Programming II: GDI and Menus
               </li>
               <li>
                Win32 Programming III: Dialogs and Controls
               </li>
               <li>
                Sprite Animation
               </li>
               <li>
                Final Game
               </li>
               <li>
                C++ Summary II
               </li>
              </ul>
             </div>
            </div>
            <!-- Projects -->
            <h3>
             <a href="#">
              Projects
             </a>
            </h3>
            <div class="outer-container projects">
             <div class="three_columns">
              <ul>
               <li>
                Experiment 1:  Arithmetic Operators
               </li>
               <li>
                Experiment 2:  Cin/Cout
               </li>
               <li>
                Experiment 3:  Cube
               </li>
               <li>
                Experiment 4:  Area/Circumference
               </li>
               <li>
                Experiment 5:  Average
               </li>
               <li>
                Experiment 6:  Bug Fixing
               </li>
               <li>
                Experiment 7:  Logical Operator Evaluation
               </li>
               <li>
                Experiment 8:  Navigator
               </li>
               <li>
                Experiment 9:  Average
               </li>
               <li>
                Experiment 10:  Factorial
               </li>
               <li>
                Experiment 11:  Matrix Addition
               </li>
               <li>
                Experiment 12:  ASCII
               </li>
               <li>
                Experiment 13:  Linear Search
               </li>
               <li>
                Experiment 14:  Selection Sort
               </li>
               <li>
                Experiment 15:  Factorial
               </li>
               <li>
                Experiment 16:  ToUpper/ToLower
               </li>
               <li>
                Experiment 17:  Distance
               </li>
               <li>
                Experiment 18:  Arc Tangent
               </li>
               <li>
                Experiment 19:  Calculator Program
               </li>
               <li>
                Experiment 20:  Slot Machine
               </li>
               <li>
                Experiment 21:  Binary Search
               </li>
               <li>
                Experiment 22:  Bubble Sort
               </li>
               <li>
                Experiment 23:  Dice Function
               </li>
               <li>
                Experiment 24:  Array Fill
               </li>
               <li>
                Experiment 25:  Quadratic Equation
               </li>
               <li>
                Experiment 26:  Gold
               </li>
              </ul>
             </div>
             <div class="three_columns">
              <ul>
               <li>
                Experiment 27:  Character Races
               </li>
               <li>
                Experiment 28:  Leveling Up
               </li>
               <li>
                Experiment 29:  Magic Points
               </li>
               <li>
                Experiment 30:  Random Encounters
               </li>
               <li>
                Experiment 31:  Weapon/Armor Store
               </li>
               <li>
                Experiment 32:  Magic Items
               </li>
               <li>
                Experiment 33:  Multiple Enemies
               </li>
               <li>
                Experiment 34:  String Reverse
               </li>
               <li>
                Experiment 35:  To-Upper
               </li>
               <li>
                Experiment 36:  To-Lower
               </li>
               <li>
                Experiment 37:  Palindrome
               </li>
               <li>
                Experiment 38:  Fraction Class
               </li>
               <li>
                Experiment 39:  float Array Class
               </li>
               <li>
                Experiment 40:  Line Count
               </li>
               <li>
                Experiment 41:  Rewrite
               </li>
               <li>
                Experiment 42:  Database
               </li>
               <li>
                Experiment 43:  Template Array Class
               </li>
               <li>
                Experiment 44:  Template Bubble Sort Function
               </li>
               <li>
                Experiment 45:  Table Driver
               </li>
               <li>
                Experiment 46:  Exception Handling
               </li>
               <li>
                Experiment 47:  Binary Arithmetic
               </li>
               <li>
                Experiment 48:  Hex Arithmetic
               </li>
               <li>
                Experiment 49:  Base Conversions
               </li>
               <li>
                Experiment 50:  Bit Operations
               </li>
               <li>
                Experiment 51:  Binary to Decimal
               </li>
               <li>
                Experiment 52:  Decimal to Binary
               </li>
              </ul>
             </div>
             <div class="three_columns">
              <ul>
               <li>
                Experiment 53:  Bit Operation Calculator
               </li>
               <li>
                Experiment 54:  Linked List
               </li>
               <li>
                Experiment 55:  Stack
               </li>
               <li>
                Experiment 56:  Queue
               </li>
               <li>
                Experiment 57:  Algorithms
               </li>
               <li>
                Experiment 58:  Exit Messages
               </li>
               <li>
                Experiment 59:  Horizontal/Vertical Scroll Bars
               </li>
               <li>
                Experiment 60:  Multiple Windows
               </li>
               <li>
                Experiment 61:  Changing the Cursor
               </li>
               <li>
                Experiment 62:  Changing the Background
               </li>
               <li>
                Experiment 63:  Custom Icons
               </li>
               <li>
                Experiment 64:  Changing Colors
               </li>
               <li>
                Experiment 65:  Changing Styles
               </li>
               <li>
                Experiment 66:  Cube Rendering
               </li>
               <li>
                Experiment 67:  Adding an Undo Feature
               </li>
               <li>
                Experiment 68:  List Boxes
               </li>
               <li>
                Experiment 69:  Checkbox Controls
               </li>
               <li>
                Experiment 70:  File Save and Open Dialogs
               </li>
               <li>
                Experiment 71:  The Color Dialog
               </li>
               <li>
                Experiment 72:  Colors
               </li>
               <li>
                Experiment 73:  Drawing Order
               </li>
               <li>
                Experiment 74:  Masking
               </li>
               <li>
                Experiment 75:  Make Your Own Sprite
               </li>
               <li>
                Experiment 76:  Bouncing Ball
               </li>
               <li>
                Experiment 77:  Pong
               </li>
               <li>
                Experiment 78:  Air Hockey
               </li>
              </ul>
             </div>
            </div>
            <!-- Requirements -->
            <h3>
             <a href="#">
              Requirements
             </a>
            </h3>
            <div class="outer-container requirements">
             <ul>
              <li>
               Microsoft Visual C++ 7.0 (2002 .NET) or higher.
              </li>
             </ul>
            </div>
           </div>
          </div>
          <div class="package-content-item" id="3dgp">
           <img alt="Game Programming - 3D Graphics and Game Engine Programming" src="/elements/images/gamedev-package/courses/3dgp8.jpg"/>
           <div class="details">
            <h2>
             3D Graphics and Game Engine Programming
            </h2>
            <hr/>
            <div style="display:table;">
             <div style="display:table-cell; padding-right: 20px;">
              <ul class="contents">
               <li>
                28 Lessons
               </li>
               <li>
                3 Textbooks
               </li>
               <li>
                23 Presentations
               </li>
              </ul>
             </div>
             <div style="display:table-cell;">
              <ul class="contents">
               <li>
                42 Projects
               </li>
               <li>
                8 Supplementals
               </li>
              </ul>
             </div>
            </div>
            <p>
             To make great games, you need to know how game engines work under the hood. Develop industry-level 3D graphics and game engine expertise that will leave you ready to take on any project. With 3000+ pages of in-depth text and over 40 hours of detailed presentations, you'll soon be an expert at writing shaders, computing lighting, and programming high-performance engine code that uses spatial trees, potential visibility sets, and more to render high quality visuals in real-time.
            </p>
           </div>
           <!-- Content Detail -->
           <div class="collapsible-outer" id="3dgp-contents">
            <!-- Topics -->
            <h3>
             <a href="#">
              Topics
             </a>
            </h3>
            <div class="outer-container">
             <!-- Environment &amp; Core Language Features -->
             <div class="collapsible-inner">
              <h4>
               <a href="#">
                3D Graphics Fundamentals
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand how 3D game objects are represented geometrically and how they are drawn.
                </li>
                <li>
                 Master the mathematics of the transformation pipeline, from model space through to screen space.
                </li>
                <li>
                 Review basic transformations such as scaling, rotation, and translation.
                </li>
                <li>
                 Be able to move points from one coordinate space to another.
                </li>
                <li>
                 Get comfortable with the specific math operations and data types we will use in future lessons.
                </li>
                <li>
                 Examine vectors, planes, and matrices and understand their roles in the transformation pipeline and in other common cases.
                </li>
                <li>
                 Review dot and cross products, normalization, and matrix and vector multiplication.
                </li>
                <li>
                 Learn the D3DX equivalent data types and functions for the operations discussed.
                </li>
                <li>
                 Understand perspective projection and how the matrix is constructed.
                </li>
                <li>
                 Learn how arbitrary fields of view can be created to model different camera settings.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <div class="two_columns">
                <ul>
                 <li>
                  Geometric Modeling
                  <ul>
                   <li>
                    2D/3D Coordinate Systems
                   </li>
                   <li>
                    Meshes
                    <ul>
                     <li>
                      Vertices
                     </li>
                     <li>
                      Winding Order
                     </li>
                    </ul>
                   </li>
                  </ul>
                 </li>
                 <li>
                  The Transformation Pipeline
                  <ul>
                   <li>
                    Translation
                   </li>
                   <li>
                    Rotation
                   </li>
                   <li>
                    Viewing Transformations
                   </li>
                   <li>
                    Perspective Projection
                   </li>
                   <li>
                    Screen Space Mapping
                   </li>
                  </ul>
                 </li>
                 <li>
                  3D Mathematics Primer
                  <ul>
                   <li>
                    Vectors
                    <ul>
                     <li>
                      Magnitude
                     </li>
                     <li>
                      Addition &amp; Subtraction
                     </li>
                     <li>
                      Scalar Multiplication
                     </li>
                     <li>
                      Normalization
                     </li>
                     <li>
                      Cross Product
                     </li>
                     <li>
                      Dot Product
                     </li>
                    </ul>
                   </li>
                   <li>
                    Planes
                   </li>
                   <li>
                    Matrices
                    <ul>
                     <li>
                      Matrix/Matrix Multiplication
                     </li>
                     <li>
                      Vector/Matrix Multiplication
                     </li>
                     <li>
                      3D Rotation Matrices
                     </li>
                     <li>
                      Identity Matrices
                     </li>
                     <li>
                      Scaling and Shearing
                     </li>
                     <li>
                      Concatenation
                     </li>
                     <li>
                      Homogenous Coordinates
                     </li>
                    </ul>
                   </li>
                  </ul>
                 </li>
                </ul>
               </div>
               <div class="two_columns">
                <ul>
                 <li>
                  D3DX Math
                  <ul>
                   <li>
                    Data Types
                    <ul>
                     <li>
                      D3DXMATRIX
                     </li>
                     <li>
                      D3DXVECTOR
                     </li>
                     <li>
                      D3DXPLANE
                     </li>
                    </ul>
                   </li>
                   <li>
                    Matrix and Transformation Functions
                    <ul>
                     <li>
                      D3DXMatrixMultiply
                     </li>
                     <li>
                      D3DXMatrixRotation{XYZ}
                     </li>
                     <li>
                      D3DXMatrixTranslation
                     </li>
                     <li>
                      D3DXMatrixRotationYawPitchRoll
                     </li>
                     <li>
                      D3DXVecTransform{...}
                     </li>
                    </ul>
                   </li>
                   <li>
                    Vector Functions
                    <ul>
                     <li>
                      Cross Product
                     </li>
                     <li>
                      Dot Product
                     </li>
                     <li>
                      Magnitude
                     </li>
                     <li>
                      Normalization
                     </li>
                    </ul>
                   </li>
                  </ul>
                 </li>
                 <li>
                  The Transformation Pipeline II
                  <ul>
                   <li>
                    The World Matrix
                   </li>
                   <li>
                    The View Matrix
                   </li>
                   <li>
                    The Perspective Projection Matrix
                    <ul>
                     <li>
                      Field of View
                     </li>
                     <li>
                      Aspect Ratio
                     </li>
                    </ul>
                   </li>
                  </ul>
                 </li>
                </ul>
               </div>
              </div>
              <h4>
               <a href="#">
                DirectX Graphics Overview
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Begin examining the DirectX Graphics pipeline and see how the different pieces relate to what we have already learned.
                </li>
                <li>
                 Study the COM programming model to better understand the low-level processes involved when working with the DirectX API.
                </li>
                <li>
                 Learn how to properly initialize the DirectX environment.
                </li>
                <li>
                 Create a rendering device for output.
                </li>
                <li>
                 Understand important device resources like window settings, front and back buffers, depth buffers, swap chains, and surface formats.
                </li>
                <li>
                 Use presentation parameters for device setup.
                </li>
                <li>
                 Develop strategies to handle lost devices.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 The Component Object Model (COM)
                 <ul>
                  <li>
                   Interfaces/IUnknown
                  </li>
                  <li>
                   GUIDS
                  </li>
                  <li>
                   COM and DirectX Graphics
                  </li>
                 </ul>
                </li>
                <li>
                 Initializing DirectX Graphics
                </li>
                <li>
                 The Direct3D Device
                 <ul>
                  <li>
                   Pipeline Overview
                  </li>
                  <li>
                   Device Memory
                   <ul>
                    <li>
                     The Front/Back Buffer(s)
                    </li>
                    <li>
                     Swap Chains
                    </li>
                   </ul>
                  </li>
                  <li>
                   Window Settings
                   <ul>
                    <li>
                     Fullscreen vs. Windowed Mode
                    </li>
                   </ul>
                  </li>
                  <li>
                   Depth Buffers
                   <ul>
                    <li>
                     The Z-Buffer / W-Buffer
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
                <li>
                 Surface Formats
                 <ul>
                  <li>
                   Adapter Formats
                  </li>
                  <li>
                   Frame Buffer Formats
                  </li>
                 </ul>
                </li>
                <li>
                 Device Creation
                 <ul>
                  <li>
                   Presentation Parameters
                  </li>
                  <li>
                   Lost Devices
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Geometry Rendering
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Learn how to render 3D objects as wireframe or solid objects.
                </li>
                <li>
                 Examine how to apply various forms of shading.
                </li>
                <li>
                 Learn about flexible vertex formats, triangle data, and the DrawPrimitive function.
                </li>
                <li>
                 Look at core device render states used when drawing - depth buffering, lighting and shading, back face culling, etc.
                </li>
                <li>
                 Talk about transformation states and learn how to pass matrices to the device for use in the transformation pipeline.
                </li>
                <li>
                 Learn how to clear buffers, begin and end scene rendering, and present rendered results to the viewer.
                </li>
                <li>
                 Start to examine more optimal rendering strategies in DirectX.
                </li>
                <li>
                 Get comfortable with creating, filling, and drawing vertex and index buffers.
                </li>
                <li>
                 Look at indexed and non-indexed mesh rendering for static and dynamic (animated) geometry.
                </li>
                <li>
                 Understand device memory pools and know which is appropriate for a given job.
                </li>
                <li>
                 Examine indexed triangle strip generation and the role of degenerate triangles.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <div class="two_columns">
                <ul>
                 <li>
                  Primitive Rendering
                  <ul>
                   <li>
                    Fill Modes
                    <ul>
                     <li>
                      Point
                     </li>
                     <li>
                      Wireframe
                     </li>
                     <li>
                      Solid
                     </li>
                    </ul>
                   </li>
                   <li>
                    Shading Modes
                    <ul>
                     <li>
                      Flat
                     </li>
                     <li>
                      Gouraud
                     </li>
                    </ul>
                   </li>
                   <li>
                    Vertex Data and the FVF
                   </li>
                   <li>
                    DrawPrimitiveUP
                   </li>
                  </ul>
                 </li>
                 <li>
                  Device States
                  <ul>
                   <li>
                    Render States
                    <ul>
                     <li>
                      Z - Buffering
                     </li>
                     <li>
                      Lighting/Shading/Dithering
                     </li>
                     <li>
                      Backface Culling
                     </li>
                    </ul>
                   </li>
                   <li>
                    Transformation States
                    <ul>
                     <li>
                      World/View/Projection Matrices
                     </li>
                    </ul>
                   </li>
                  </ul>
                 </li>
                </ul>
               </div>
               <div class="two_columns">
                <ul>
                 <li>
                  Scene Rendering
                  <ul>
                   <li>
                    Frame/Depth Buffer Clearing
                   </li>
                   <li>
                    Begin/End Scene
                   </li>
                   <li>
                    Presenting the Frame
                   </li>
                  </ul>
                 </li>
                 <li>
                  Device Memory Pools and Resources
                  <ul>
                   <li>
                    Video/AGP/System Memory
                   </li>
                  </ul>
                 </li>
                 <li>
                  Vertex Buffers
                  <ul>
                   <li>
                    Creating Vertex Buffers
                   </li>
                   <li>
                    Vertex Buffer Memory Pools
                   </li>
                   <li>
                    Vertex Buffer Performance
                   </li>
                   <li>
                    Filling Vertex Buffers
                   </li>
                   <li>
                    Vertex Stream Sources
                   </li>
                   <li>
                    DrawPrimitive
                   </li>
                  </ul>
                 </li>
                 <li>
                  Index Buffers
                  <ul>
                   <li>
                    Creating Index Buffers
                   </li>
                   <li>
                    DrawIndexedPrimitive/DrawIndexedPrimitiveUP
                   </li>
                   <li>
                    Indexed Triangle Strips/Degenerate Triangles
                   </li>
                  </ul>
                 </li>
                </ul>
               </div>
              </div>
              <h4>
               <a href="#">
                Cameras
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Take a more detailed look at the view transformation and its associated matrix.
                </li>
                <li>
                 Create first person, third person, and spacecraft camera types.
                </li>
                <li>
                 Learn how to use rendering viewports and see what role matrices play in that process.
                </li>
                <li>
                 Use a camera's clipping planes (frustum) to optimize scene rendering.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 The View Matrix
                 <ul>
                  <li>
                   Vectors, Matrices, and Planes
                   <ul>
                    <li>
                     The View Space Planes
                    </li>
                    <li>
                     The View Space Transformation
                    </li>
                    <li>
                     The Inverse Translation Vector
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
                <li>
                 Viewports
                 <ul>
                  <li>
                   The Viewport Matrix
                  </li>
                  <li>
                   Viewport Aspect Ratios
                  </li>
                 </ul>
                </li>
                <li>
                 Camera Systems
                 <ul>
                  <li>
                   Vector Regeneration
                  </li>
                  <li>
                   First Person Cameras
                  </li>
                  <li>
                   Third Person Cameras
                  </li>
                 </ul>
                </li>
                <li>
                 The View Frustum
                 <ul>
                  <li>
                   Camera Space Frustum Plane Extraction
                  </li>
                  <li>
                   World Space Frustum Plane Extraction
                  </li>
                  <li>
                   Frustum Culling an AABB
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Lights
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand the fixed-function DirectX Graphics vertex lighting pipeline and its advantages/disadvantages.
                </li>
                <li>
                 Examine the primary lighting (ambient/diffuse/specular/emissive) modeled in real-time games.
                </li>
                <li>
                 Get comfortable with the most common light types (point/spot/directional) and see how to setup their properties.
                </li>
                <li>
                 Configure the lighting pipeline to use our light sources.
                </li>
                <li>
                 Learn the role of vertex normals and how to calculate them when necessary.
                </li>
                <li>
                 Discuss materials and how they define a surface's interact lights in the environment.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Lighting Models
                 <ul>
                  <li>
                   Indirect Lighting
                   <ul>
                    <li>
                     Emissive/Ambient Illumination
                    </li>
                   </ul>
                  </li>
                  <li>
                   Direct Lighting
                   <ul>
                    <li>
                     Diffuse/Specular Light
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
                <li>
                 The Lighting Pipeline
                 <ul>
                  <li>
                   Enabling DirectX Graphics Lighting
                  </li>
                  <li>
                   Enabling Specular Highlights
                  </li>
                  <li>
                   Enabling Global Ambient Lighting
                  </li>
                  <li>
                   Lighting Vertex Formats and Normals
                  </li>
                  <li>
                   Setting Lights and Light Limits
                  </li>
                 </ul>
                </li>
                <li>
                 Light Types
                 <ul>
                  <li>
                   Point/Spot/Directional
                  </li>
                 </ul>
                </li>
                <li>
                 Materials
                 <ul>
                  <li>
                   Colors, Specular and Power
                  </li>
                  <li>
                   Material Sources
                  </li>
                 </ul>
                </li>
                <li>
                 Vertex Lighting Advantages/Disadvantages
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Texture Mapping
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand what textures are and how they are defined in memory.
                </li>
                <li>
                 Understand mip maps, how they relate to anti-aliasing, memory footprint, and bandwidth.
                </li>
                <li>
                 Look at the various options for loading textures from disk or memory.
                </li>
                <li>
                 Learn how to set a texture for rendering.
                </li>
                <li>
                 Understand the relationship between texture coordinates and addressing modes.
                </li>
                <li>
                 Talk about aliasing and common artifacts and how to use filters to improve visual quality.
                </li>
                <li>
                 Learn how to configure the texture pipeline for single and multi-texturing operations.
                </li>
                <li>
                 Examine texture compression as a means for reducing memory requirements and improving performance.
                </li>
                <li>
                 Use transformation matrices to animate texture coordinates.
                </li>
                <li>
                 Get familiar with DirectX texture and surface types and their associated utility functions.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <div class="two_columns">
                <ul>
                 <li>
                  Texture Memory Pools
                  <ul>
                   <li>
                    Texture Formats
                   </li>
                   <li>
                    Validating Texture Formats
                   </li>
                   <li>
                    Surface Formats
                   </li>
                  </ul>
                 </li>
                 <li>
                  MIP Maps
                 </li>
                 <li>
                  Loading Textures
                 </li>
                 <li>
                  Setting Textures
                 </li>
                 <li>
                  Texture Coordinates
                 </li>
                 <li>
                  Sampler States
                  <ul>
                   <li>
                    Texture Addressing Modes
                    <ul>
                     <li>
                      Wrap
                     </li>
                     <li>
                      Mirror/Mirror
                     </li>
                     <li>
                      Border
                     </li>
                     <li>
                      Clamp
                     </li>
                    </ul>
                   </li>
                   <li>
                    Texture Coordinate Wrapping
                   </li>
                   <li>
                    Texture Filtering
                    <ul>
                     <li>
                      Magnification &amp; Minification
                     </li>
                     <li>
                      Point
                     </li>
                     <li>
                      Bilinear
                     </li>
                     <li>
                      Trilinear
                     </li>
                     <li>
                      Anisotropic
                     </li>
                    </ul>
                   </li>
                  </ul>
                 </li>
                </ul>
               </div>
               <div class="two_columns">
                <ul>
                 <li>
                  Texture Stages
                  <ul>
                   <li>
                    Texture Color
                   </li>
                   <li>
                    Texture Stage States
                   </li>
                  </ul>
                 </li>
                 <li>
                  Multi-Texturing and Color Blending
                 </li>
                 <li>
                  Compressed Textures
                  <ul>
                   <li>
                    Compressed Texture Formats
                    <ul>
                     <li>
                      Pre-Multiplied Alpha
                     </li>
                    </ul>
                   </li>
                   <li>
                    Texture Compression Interpolation
                   </li>
                   <li>
                    Compressed Data Blocks - Color/Alpha Data Layout
                   </li>
                  </ul>
                 </li>
                 <li>
                  Texture Coordinate Transformation
                 </li>
                 <li>
                  The IDirect3DTexture Interface
                 </li>
                 <li>
                  The IDirect3DSurface Interface
                 </li>
                 <li>
                  D3DX Texture Functions
                 </li>
                </ul>
               </div>
              </div>
              <h4>
               <a href="#">
                Transparency and Fog
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand the general blending equation and the related concept of 'alpha' blending.
                </li>
                <li>
                 Know where transparency data can be stored (vertices, materials, textures) and the associated pros and cons.
                </li>
                <li>
                 Learn how to configure the transformation and texture pipelines to do blending operations.
                </li>
                <li>
                 Use alpha testing and alpha surfaces to reject specific texels during rendering (e.g., for chain link fences).
                </li>
                <li>
                 Study front-to-back sorting algorithms for transparent polygon rendering.
                </li>
                <li>
                 Add colored fog to a scene using both vertex and pixel level computations.
                </li>
                <li>
                 Learn the traditional equations for global fog effects: linear, exponential, and exponential squared).
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Alpha Components
                 <ul>
                  <li>
                   Vertex Alpha &amp; Pre-Lit/Unlit Vertices
                  </li>
                  <li>
                   Material Alpha
                  </li>
                  <li>
                   Constant Alpha &amp; Per-Stage Constant Alpha
                  </li>
                  <li>
                   Texture Alpha
                  </li>
                 </ul>
                </li>
                <li>
                 The Texture Stage Alpha Pipeline
                </li>
                <li>
                 Frame Buffer Alpha Blending
                </li>
                <li>
                 Alpha Testing
                </li>
                <li>
                 Transparent Polygon Sorting
                 <ul>
                  <li>
                   Sorting Algorithms and Criteria
                  </li>
                  <li>
                   Bubble Sort
                  </li>
                  <li>
                   Quick Sort
                  </li>
                  <li>
                   Hash Table Sort
                  </li>
                 </ul>
                </li>
                <li>
                 Alpha Surfaces
                </li>
                <li>
                 Fog
                 <ul>
                  <li>
                   Enabling Fog and Setting the Fog Color
                  </li>
                  <li>
                   Vertex/Pixel Fog
                  </li>
                  <li>
                   Fog Factor Formulas
                   <ul>
                    <li>
                     Linear/Exponential/Exponential Squared
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Meshes
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Introduce the mesh containers in the D3DX library.
                </li>
                <li>
                 Use scene level attribute batching and subset rendering to improve performance.
                </li>
                <li>
                 Learn optimization techniques to speed up rendering on modern hardware.
                </li>
                <li>
                 Look at how to import X file geometry.
                </li>
                <li>
                 Learn how to construct and fill mesh internal buffers manually.
                </li>
                <li>
                 Discussion cloning (copying) of mesh data and some of the features available during the process.
                </li>
                <li>
                 Learn how to manage geometric level of detail (LOD) using view-independent progressive meshes.
                </li>
                <li>
                 Look at how to construct and use progressive meshes and see how they work algorithmically.
                </li>
                <li>
                 Examine mesh simplification and assorted other useful mesh utility functions.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 ID3DXMesh Interface
                 <ul>
                  <li>
                   Vertex/Index/Adjacency Buffers
                  </li>
                  <li>
                   Attribute Buffers and Subset Rendering
                  </li>
                 </ul>
                </li>
                <li>
                 Mesh Optimization
                </li>
                <li>
                 ID3DXBuffer
                </li>
                <li>
                 Mesh Loading
                </li>
                <li>
                 Manual Mesh Creation
                </li>
                <li>
                 Mesh Cloning
                </li>
                <li>
                 ID3DXPMesh Interface
                 <ul>
                  <li>
                   View Independent Progressive Meshes (VIPM)
                  </li>
                  <li>
                   Data Validation and Cleaning
                  </li>
                  <li>
                   Setting LOD
                  </li>
                  <li>
                   LOD Trimming
                  </li>
                  <li>
                   Vertex History
                  </li>
                 </ul>
                </li>
                <li>
                 ID3DXSPMesh Interface
                </li>
                <li>
                 Global Mesh Utility Functions
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Frame Hierarchies
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Look at how to import and manage more complex 3D models and scenes.
                </li>
                <li>
                 Introduce frames of reference and parent-child hierarchical relationships.
                </li>
                <li>
                 Use hierarchies to build more complex scenery consisting of independent, animation-ready meshes.
                </li>
                <li>
                 Study X file templates to see how scene data is stored and learn how to load custom data chunks.
                </li>
                <li>
                 Examine the D3DXLoadMeshHierarchyFromX function in detail, including callback mechanisms and memory management.
                </li>
                <li>
                 Understand how to traverse, transform, and render a hierarchy of meshes.
                </li>
                <li>
                 Introduce a simple animation controller to prepare for the next set of topics.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Hierarchies
                 <ul>
                  <li>
                   Frame of Reference
                  </li>
                  <li>
                   Parent/Child Relationships
                  </li>
                 </ul>
                </li>
                <li>
                 X File Templates
                 <ul>
                  <li>
                   Open/Closed/Restricted Templates
                  </li>
                  <li>
                   Hierarchical X Files
                  </li>
                 </ul>
                </li>
                <li>
                 D3DXLoadMeshHierarchyFromX
                </li>
                <li>
                 ID3DXAllocateHierarchy Interface
                 <ul>
                  <li>
                   Allocating/De-allocating Frames
                  </li>
                 </ul>
                </li>
                <li>
                 ID3DXMeshContainer Interface
                 <ul>
                  <li>
                   Allocating/De-allocating Mesh Containers
                  </li>
                 </ul>
                </li>
                <li>
                 Extending Hierarchy Data Types
                </li>
                <li>
                 ID3DXLoadUserData Interface
                 <ul>
                  <li>
                   Loading Custom Top-Level Data
                  </li>
                  <li>
                   Loading Customer Child Data
                  </li>
                 </ul>
                </li>
                <li>
                 Hierarchy Traversal and Rendering
                </li>
                <li>
                 Simple Hierarchy Animation
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Keyframe Animation
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand the fundamentals of animating game scenes.
                </li>
                <li>
                 Use keyframe data to animate the hierarchies introduced previously.
                </li>
                <li>
                 Learn the representations of X file animation data and how it translates to D3DX data structures in the application.
                </li>
                <li>
                 Understand how an animation controller interpolates keyframe data and how it can be controlled.
                </li>
                <li>
                 Construct a custom animation set object that can be plugged into the D3DX animation system.
                </li>
                <li>
                 Learn how to use the animation mixer to blend multiple simultaneous animation tracks.
                </li>
                <li>
                 Synchronize the animation timeline with events (e.g., playing sound effects or triggering code).
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Keyframes
                 <ul>
                  <li>
                   SRT vs. Matrix Animation Data
                  </li>
                 </ul>
                </li>
                <li>
                 Interpolation
                </li>
                <li>
                 X Files and Animation
                 <ul>
                  <li>
                   Timing Data
                  </li>
                 </ul>
                </li>
                <li>
                 D3DX Animation System
                </li>
                <li>
                 ID3DXKeyframedAnimationSet
                </li>
                <li>
                 ID3DXAnimationController
                 <ul>
                  <li>
                   Hierarchy Animation
                  </li>
                 </ul>
                </li>
                <li>
                 Keyframe Data
                </li>
                <li>
                 Animation Blending
                 <ul>
                  <li>
                   The Animation Mixer
                   <ul>
                    <li>
                     Setting Track Weight, Speed, Priority
                    </li>
                    <li>
                     Enabling &amp; Disabling Tracks
                    </li>
                   </ul>
                  </li>
                  <li>
                   Priority Blending
                  </li>
                 </ul>
                </li>
                <li>
                 Animation Controller Cloning
                </li>
                <li>
                 The Animation Sequencer
                 <ul>
                  <li>
                   Registering Events
                  </li>
                  <li>
                   Event Handles
                  </li>
                 </ul>
                </li>
                <li>
                 The Animation Callback System
                 <ul>
                  <li>
                   Callback Keys and Animation Sets
                  </li>
                  <li>
                   Executing Callback Functions
                  </li>
                  <li>
                   ID3DXAnimationCallbackHandler Interface
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Skinning / Vertex Blending
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Learn how skinning and skeletal animation provides realistic visual results.
                </li>
                <li>
                 Understand skins, bones, and skeletons and how they are constructed, animated, and rendered.
                </li>
                <li>
                 Look at skinning related X file data templates and the matching game data structures.
                </li>
                <li>
                 Examine software and hardware skinning.
                </li>
                <li>
                 Examine non-indexed and palette-driven indexed skinning techniques.
                </li>
                <li>
                 Integrate animated characters into our experimental framework.
                </li>
                <li>
                 Construct a skeleton and skin model programmatically.
                </li>
                <li>
                 Generate simple animated trees for demonstration purposes.
                </li>
                <li>
                 Extend our lab project middle-tier to include data-driven support for animation switching and blending.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Vertex Tweening
                </li>
                <li>
                 Segmented Models and Animation
                </li>
                <li>
                 Bone Hierarchies/Skeletons
                </li>
                <li>
                 Vertex Blending
                </li>
                <li>
                 Skinning
                </li>
                <li>
                 X File Templates for Skinning
                </li>
                <li>
                 The Bone Offset Matrix
                </li>
                <li>
                 Software Skinning
                </li>
                <li>
                 ID3DXSkinInfo Interface
                </li>
                <li>
                 Non-Indexed Skinning
                 <ul>
                  <li>
                   Setting multiple world matrices
                  </li>
                  <li>
                   Enabling/disabling vertex blending
                  </li>
                  <li>
                   ConvertToBlendedMesh
                  </li>
                 </ul>
                </li>
                <li>
                 Indexed Skinning
                 <ul>
                  <li>
                   Determining Support
                  </li>
                  <li>
                   Matrix Palette Indices
                  </li>
                  <li>
                   ConvertToIndexedBlendedMesh
                  </li>
                 </ul>
                </li>
                <li>
                 Transforming and Rendering Skinned Characters
                </li>
                <li>
                 Trees
                 <ul>
                  <li>
                   Procedural Skins and Skeletons
                  </li>
                  <li>
                   Procedural Keyframe Animation
                  </li>
                 </ul>
                </li>
                <li>
                 The Animation Middle Layer
                 <ul>
                  <li>
                   Data Driven File Support
                  </li>
                  <li>
                   Animation Set Blending
                  </li>
                  <li>
                   Controller Configuration
                  </li>
                  <li>
                   Playing Back Complex Animations
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Collision Detection &amp; Response
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand broad and narrow phase collision detection algorithms.
                </li>
                <li>
                 Develop a collision detection and response system based on ellipsoids.
                </li>
                <li>
                 Understand the mathematics of ellipsoid space.
                </li>
                <li>
                 Examine intersection algorithms for the narrow phase.
                </li>
                <li>
                 Test rays against common game primitives.
                </li>
                <li>
                 Test spheres against triangle interiors.
                </li>
                <li>
                 Test swept spheres against the edges and vertices of triangles.
                </li>
                <li>
                 Review solving quadratic equations and their role in the detection phase.
                </li>
                <li>
                 Learn how to support dynamic objects in terms of detection and response.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Collision Systems Overview
                </li>
                <li>
                 Broad Phase vs. Narrow Phase Collision Detection
                </li>
                <li>
                 Collision Responses
                 <ul>
                  <li>
                   Sliding
                  </li>
                 </ul>
                </li>
                <li>
                 Ray Intersection Testing
                 <ul>
                  <li>
                   Ray vs. Plane
                  </li>
                  <li>
                   Ray vs. Polygon
                  </li>
                 </ul>
                </li>
                <li>
                 Ellipsoids, Unit Spheres, and Ellipsoid Space
                </li>
                <li>
                 Swept sphere vs. Triangle
                </li>
                <li>
                 Quadratic Equations
                </li>
                <li>
                 Swept Sphere Intersection Testing
                 <ul>
                  <li>
                   Swept Sphere vs. Edge
                  </li>
                  <li>
                   Swept Sphere vs. Vertex
                  </li>
                 </ul>
                </li>
                <li>
                 Animation and the Collision Geometry Database
                </li>
                <li>
                 Dynamic Object Collision Support
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Spatial Partitioning
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Examine axis-aligned hierarchical spatial partitioning data structures like quadtrees, octrees, and kD-trees.
                </li>
                <li>
                 Implement broad phase collision detection using spatial partitioning to improve performance.
                </li>
                <li>
                 Examine hardware-friendly rendering of spatial trees.
                </li>
                <li>
                 Use hierarchical frustum culling to speed up scene rendering.
                </li>
                <li>
                 Use frame coherence to improve rendering performance.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Spatial Partitioning Data Structures/Algorithms
                 <ul>
                  <li>
                   Quadtrees
                  </li>
                  <li>
                   Octrees
                  </li>
                  <li>
                   kD Trees
                  </li>
                 </ul>
                </li>
                <li>
                 Polygon Clipping
                </li>
                <li>
                 Polygon Database Intersection Querying
                 <ul>
                  <li>
                   Ray/AABB/Sphere testing
                  </li>
                 </ul>
                </li>
                <li>
                 Broad Phase Implementation for Collision System
                </li>
                <li>
                 Frame Coherence
                </li>
                <li>
                 Hardware Friendly Rendering
                 <ul>
                  <li>
                   Static vs. Dynamic Solutions
                  </li>
                  <li>
                   Polygon Caches (Pros/Cons)
                  </li>
                 </ul>
                </li>
                <li>
                 Hierarchical Frustum Culling/Rendering
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                BSP Trees &amp; Constructive Solid Geometry (CSG)
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand the Binary Space Partitioning (BSP) tree.
                </li>
                <li>
                 Learn how to compile BSP node trees and use them for pixel-perfect transparent polygon sorting.
                </li>
                <li>
                 Create BSP leaf trees and examine how to add solid and empty space information to our BSP tree representation.
                </li>
                <li>
                 Use BSP trees to perform constructive solid geometry (CSG).
                </li>
                <li>
                 Learn how to use CSG to merge geometric objects and carve shapes out of other shapes.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Node BSP Trees
                 <ul>
                  <li>
                   Transparent Polygon Sorting
                  </li>
                 </ul>
                </li>
                <li>
                 Solid Leaf BSP Trees
                 <ul>
                  <li>
                   Rendering
                  </li>
                  <li>
                   Line of Sight Tests
                  </li>
                 </ul>
                </li>
                <li>
                 Constructive Solid Geometry (CSG)
                 <ul>
                  <li>
                   Union Operation
                  </li>
                  <li>
                   Intersection Operation
                  </li>
                  <li>
                   Difference Operation
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Potential Visibility Sets (PVS)
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               &gt;
               <ul>
                <li>
                 Understand and learn how to calculate potential visibility sets (PVS).
                </li>
                <li>
                 Discuss portal generation and clipping.
                </li>
                <li>
                 Examine penumbras and anti-penumbras to see how volumetric lighting techniques can be used as visibility proxies.
                </li>
                <li>
                 Model the flow of light through the scene for visibility.
                </li>
                <li>
                 Learn how to compress PVS information.
                </li>
                <li>
                 Use PVS to efficiently render complex scenes.
                </li>
                <li>
                 Learn now to avoid problems caused by illegal geometry during BSP compilation.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Portals
                 <ul>
                  <li>
                   Portal Clipping
                  </li>
                 </ul>
                </li>
                <li>
                 Potential Visibility Sets
                 <ul>
                  <li>
                   Zero Run Length Encoding
                  </li>
                  <li>
                   Scene Rendering
                  </li>
                 </ul>
                </li>
                <li>
                 Anti-Penumbras
                 <ul>
                  <li>
                   Generator Portal Visibility
                  </li>
                  <li>
                   Portal Flow
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Effects
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand how to use effects to manage state and organize scene rendering.
                </li>
                <li>
                 Learn how to load and compile effects from files, resources, and memory buffers.
                </li>
                <li>
                 Learn how to send custom data to the graphics pipeline for state management and as prelude to our coming shader discussions.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Effect File Components
                 <ul>
                  <li>
                   Parameters
                  </li>
                  <li>
                   Techniques
                  </li>
                  <li>
                   Passes
                  </li>
                  <li>
                   Functions
                  </li>
                 </ul>
                </li>
                <li>
                 Effects and Device States
                 <ul>
                  <li>
                   Render States
                  </li>
                  <li>
                   Texture Stage States
                  </li>
                  <li>
                   Sampler States
                  </li>
                  <li>
                   Transform States
                  </li>
                  <li>
                   Light States
                  </li>
                  <li>
                   Material States
                  </li>
                 </ul>
                </li>
                <li>
                 Integrating Effect Files
                 <ul>
                  <li>
                   Loading and Creating Effects
                   <ul>
                    <li>
                     D3DXCreateEffect
                    </li>
                    <li>
                     D3DXCreateEffectFromFile
                    </li>
                    <li>
                     D3DXCreateEffectFromResource
                    </li>
                    <li>
                     Macros
                    </li>
                    <li>
                     Includes
                    </li>
                    <li>
                     Extended Functions
                    </li>
                    <li>
                     The ID3DXInclude Interface
                    </li>
                    <li>
                     The Effect Compiler
                    </li>
                    <li>
                     Custom State Managers
                    </li>
                   </ul>
                  </li>
                  <li>
                   Rendering with Effects
                   <ul>
                    <li>
                     Beginning and Ending Techniques
                    </li>
                    <li>
                     Beginning and Ending Passes
                    </li>
                    <li>
                     CommitChanges
                    </li>
                   </ul>
                  </li>
                  <li>
                   Handling Lost Devices
                  </li>
                  <li>
                   Getting and Setting Effect Parameters
                  </li>
                  <li>
                   Parameter Blocks
                  </li>
                  <li>
                   Semantics
                  </li>
                  <li>
                   Annotations
                  </li>
                  <li>
                   Effect Pools and Parameter Sharing
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Shaders
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand shader hardware architecture and the concept of shader models.
                </li>
                <li>
                 Learn how to use vertex and pixel shaders to replace fixed-function rendering techniques.
                </li>
                <li>
                 See how to use HLSL with effect files to simplify shader integration into our code framework.
                </li>
                <li>
                 Understand how data is passed from our application to shader programs running on the GPU.
                </li>
                <li>
                 Convert our vertex lighting model to a per-pixel model that supports bump maps and real-time shadows.
                </li>
                <li>
                 Introduce render target textures and deferred rendering.
                </li>
                <li>
                 Learn how to use pixel shaders to process images to accomplish various effects.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 The Evolution of Programmable Shaders
                </li>
                <li>
                 Shader Models
                </li>
                <li>
                 Vertex and Pixel Shader Overview
                </li>
                <li>
                 Shader Programs and the GPU
                 <ul>
                  <li>
                   Shader Hardware Architecture
                  </li>
                  <li>
                   The Vertex Shader Unit
                  </li>
                  <li>
                   The Pixel Shader Unit
                  </li>
                  <li>
                   Registers
                  </li>
                 </ul>
                </li>
                <li>
                 HLSL Shaders
                 <ul>
                  <li>
                   Compiling Shaders
                  </li>
                  <li>
                   HLSL Shaders with Effects
                  </li>
                  <li>
                   HLSL Shaders without Effects
                  </li>
                  <li>
                   Shader Semantics
                  </li>
                  <li>
                   Vertex Declarations
                  </li>
                  <li>
                   Structures for Input/Output
                  </li>
                  <li>
                   Uniform Inputs
                  </li>
                  <li>
                   HLSL Keywords
                  </li>
                  <li>
                   Intrinsic Functions
                  </li>
                  <li>
                   Effects and The Pre-Shader
                  </li>
                 </ul>
                </li>
                <li>
                 Transformation &amp; Lighting with Shaders
                 <ul>
                  <li>
                   Vertex Transformation and Lighting
                  </li>
                  <li>
                   Vertex Blending and Skinning
                  </li>
                  <li>
                   Texturing and Samplers
                  </li>
                  <li>
                   Per-Pixel Diffuse and Specular Lighting
                  </li>
                  <li>
                   Per-Pixel Normal Mapped Lighting
                   <ul>
                    <li>
                     Creating Normal Maps
                    </li>
                    <li>
                     Tangent Space
                    </li>
                   </ul>
                  </li>
                  <li>
                   Per-Pixel Lighting with Shadows
                   <ul>
                    <li>
                     Shadow Maps
                    </li>
                    <li>
                     Shadow Map Aliasing
                    </li>
                    <li>
                     Parallel Split Shadow Maps
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
                <li>
                 Deferred Rendering
                 <ul>
                  <li>
                   Render Targets
                  </li>
                  <li>
                   Geometry Buffers
                  </li>
                  <li>
                   Lighting vs. Shading
                  </li>
                 </ul>
                </li>
                <li>
                 Image Processing (In-Development)
                 <ul>
                  <li>
                   Processing Chain
                  </li>
                  <li>
                   Color Manipulation
                  </li>
                  <li>
                   Resampling
                  </li>
                  <li>
                   Blurs
                  </li>
                 </ul>
                </li>
                <li>
                 High Dynamic Range (HDR) Lighting (In-Development)
                 <ul>
                  <li>
                   sRGB and Linear Lighting
                  </li>
                  <li>
                   Tone Mapping
                  </li>
                  <li>
                   HDR Texture Compression
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <!--
			&lt;h4&gt;&lt;a href="#"&gt;Image Based Rendering (In Development)&lt;/a&gt;&lt;/h4&gt;
			&lt;div class="inner-container topics"&gt;
				&lt;p&gt;Goals:&lt;/p&gt;
				&lt;ul&gt;
					&lt;li&gt;Learn how to use image based rendering techniques to add complex objects and effects at low cost.&lt;/li&gt; 
					&lt;li&gt;Understand the different types of billboards available and what scenarios each is best suited for.&lt;/li&gt; 
					&lt;li&gt;Learn how to use particle systems to create dynamic effects like smoke, rain, snow, dust, etc.&lt;/li&gt; 
				&lt;/ul&gt;
				&lt;hr&gt;
				&lt;p&gt;Key Topics:&lt;/p&gt;
				&lt;ul&gt;
					&lt;li&gt;Image Based Rendering Overview
						&lt;ul&gt;
							&lt;li&gt;Historical Perspective&lt;/li&gt;
							&lt;li&gt;Sprites&lt;/li&gt;
							&lt;li&gt;Use in Modern Games&lt;/li&gt;
						&lt;/ul&gt;
					&lt;/li&gt;
					&lt;li&gt;Billboards
						&lt;ul&gt;
							&lt;li&gt;Screen/View Plane Aligned&lt;/li&gt;
							&lt;li&gt;World Aligned&lt;/li&gt;
							&lt;li&gt;View Point Aligned&lt;/li&gt;
							&lt;li&gt;Axial&lt;/li&gt;
						&lt;/ul&gt;
					&lt;/li&gt;
					&lt;li&gt;Billboard Rendering
						&lt;ul&gt;
							&lt;li&gt;Billboard Updates&lt;/li&gt;
							&lt;li&gt;Buffer Management&lt;/li&gt;
							&lt;li&gt;Instancing Strategies&lt;/li&gt;
							&lt;li&gt;Vertex Shader Billboard Expansion&lt;/li&gt;
							&lt;li&gt;Lighting and Textures&lt;/li&gt;
							&lt;li&gt;Sorted vs. Unsorted Drawing&lt;/li&gt;
							&lt;li&gt;Screen-Door Transparency&lt;/li&gt;
						&lt;/ul&gt;
					&lt;/li&gt;
					&lt;li&gt;Particle Systems
						&lt;ul&gt;
							&lt;li&gt;Overview and Use Cases&lt;/li&gt;
							&lt;li&gt;Basic Physics&lt;/li&gt;
							&lt;li&gt;Hard vs. Soft Particles&lt;/li&gt;
						&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
			&lt;/div&gt;

			&lt;h4&gt;&lt;a href="#"&gt;Environment Rendering (In Development)&lt;/a&gt;&lt;/h4&gt;
			&lt;div class="inner-container topics"&gt;
				&lt;p&gt;Goals:&lt;/p&gt;
				&lt;ul&gt;
					&lt;li&gt;Understand how to use noise functions to generate a variety of important procedural effects.&lt;/li&gt; 
					&lt;li&gt;Upgrade our terrain rendering with better geometry and more flexible lighting and texturing models.&lt;/li&gt; 
					&lt;li&gt;Introduce a new sky model that allows for more realistic visuals and improved scene lighting.&lt;/li&gt;
					&lt;li&gt;Learn how to render simple but attractive water to add more realism to our scenes.&lt;/li&gt; 
				&lt;/ul&gt;
				&lt;hr&gt;
				&lt;p&gt;Key Topics:&lt;/p&gt;
				&lt;ul&gt;
					&lt;li&gt;Noise 
						&lt;ul&gt;
							&lt;li&gt;Perlin Noise&lt;/li&gt;
							&lt;li&gt;Turbulence&lt;/li&gt;
							&lt;li&gt;Fractals&lt;/li&gt;
							&lt;li&gt;Perturbation&lt;/li&gt;
							&lt;li&gt;Smoothing/Filtering&lt;/li&gt;
						&lt;/ul&gt;
					&lt;/li&gt;
					&lt;li&gt;Procedural Terrains
						&lt;ul&gt;
							&lt;li&gt;Heightmaps
								&lt;ul&gt;
									&lt;li&gt;Voronoi Diagrams&lt;/li&gt;
									&lt;li&gt;Multi-Fractals&lt;/li&gt;
									&lt;li&gt;Thermal Erosion&lt;/li&gt;
									&lt;li&gt;Hydraulic Erosion&lt;/li&gt;
								&lt;/ul&gt;
							&lt;/li&gt;
							&lt;li&gt;Texturing
								&lt;ul&gt;
									&lt;li&gt;Pixel Shader Layered Blending&lt;/li&gt;
									&lt;li&gt;Height and Slope Based Weights&lt;/li&gt;
									&lt;li&gt;Triplanar Texture Mapping&lt;/li&gt;
									&lt;li&gt;Detail and Normal Mapping&lt;/li&gt;
								&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
					&lt;/li&gt;
				
					&lt;li&gt;Sky Rendering
						&lt;ul&gt;
							&lt;li&gt;Sky Domes and Sky Planes&lt;/li&gt;
							&lt;li&gt;Skylight and Sunlight&lt;/li&gt;
							&lt;li&gt;Atmospheric Scattering&lt;/li&gt;
							&lt;li&gt;Cloud Generation and Lighting&lt;/li&gt;
							&lt;li&gt;Sunlight Shafts&lt;/li&gt;
						&lt;/ul&gt;
					&lt;/li&gt;

					&lt;li&gt;Water Rendering
						&lt;ul&gt;
							&lt;li&gt;Animated Water Surfaces&lt;/li&gt;
							&lt;li&gt;Reflection and Refraction&lt;/li&gt;
							&lt;li&gt;Water Optics&lt;/li&gt;
						&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
			&lt;/div&gt;

			&lt;h4&gt;&lt;a href="#"&gt;Lightmapping (In Development)&lt;/a&gt;&lt;/h4&gt;
			&lt;div class="inner-container topics"&gt;
				&lt;p&gt;Goals:&lt;/p&gt;
				&lt;ul&gt;
					&lt;li&gt;Understand how precomputed lighting can be used to reduce the costs of scene rendering.&lt;/li&gt; 
					&lt;li&gt;Learn how to create lightmap texture coordinates using mesh parameterization.&lt;/li&gt; 
					&lt;li&gt;Examine how atlasing allows us to pack large amounts of lighting information into a small number of textures.&lt;/li&gt; 
					&lt;li&gt;Build a basic ray-based direct lighting lightmapper with soft shadows.&lt;/li&gt; 
					&lt;li&gt;Build a GPU-based hemicube renderer with support for indirect, emissive lighting, and ambient occlusion.&lt;/li&gt; 
					&lt;li&gt;Include support for lighting normal mapped geometry with directional lightmapping solutions.&lt;/li&gt; 
					&lt;li&gt;See how irradiance caching can be used to speed up lightmap compilation times.&lt;/li&gt;
					&lt;li&gt;Learn how to reduce HDR lighting texture bandwidth with various compression algorithms.&lt;/li&gt; 
				&lt;/ul&gt;
				&lt;hr&gt;
				&lt;p&gt;Key Topics:&lt;/p&gt;
				&lt;ul&gt;
					&lt;li&gt;View-Independant Precomputed Lighting&lt;/li&gt;
					&lt;li&gt;Mesh/Scene Parameterization&lt;/li&gt;
					&lt;li&gt;Texture Atlases
						&lt;ul&gt;
							&lt;li&gt;The Gutter Helper&lt;/li&gt;
						&lt;/ul&gt;
					&lt;/li&gt;
					&lt;li&gt;Direct Lighting Compiler
						&lt;ul&gt;
							&lt;li&gt;Ray Tracing (CPU)&lt;/li&gt;
							&lt;li&gt;Light Sources&lt;/li&gt;
							&lt;li&gt;Lightmap Filtering&lt;/li&gt;
						&lt;/ul&gt;
					&lt;/li&gt;
					&lt;li&gt;Indirect Lighting Compiler
						&lt;ul&gt;
							&lt;li&gt;The Radiosity Equation&lt;/li&gt;
							&lt;li&gt;Hemicube Rendering (GPU)&lt;/li&gt;
							&lt;li&gt;Emissive Lighting&lt;/li&gt;
							&lt;li&gt;Ambient Occlusion&lt;/li&gt;
						&lt;/ul&gt;
					&lt;/li&gt;
					&lt;li&gt;Directional Lightmaps
						&lt;ul&gt;
							&lt;li&gt;Radiosity Normal Mapping&lt;/li&gt;
							&lt;li&gt;Spherical Harmonics&lt;/li&gt;
							&lt;li&gt;Approximated Precomputed Specular&lt;/li&gt;
						&lt;/ul&gt;
					&lt;/li&gt;
					&lt;li&gt;Irradiance Caching&lt;/li&gt;
					&lt;li&gt;Lightmap Texture Compression
						&lt;ul&gt;
							&lt;li&gt;8-bit HDR Formats (LogLUV, RGBe, RGBm)&lt;/li&gt;
							&lt;li&gt;DXT Texture Compression&lt;/li&gt;
						&lt;/ul&gt;
					&lt;/li&gt;						
				&lt;/ul&gt;
			&lt;/div&gt;
			-->
             </div>
            </div>
            <!-- Presentations -->
            <h3>
             <a href="#">
              Presentations
             </a>
            </h3>
            <div class="outer-container presentations">
             <div class="two_columns">
              <ul>
               <li>
                3D Graphics Fundamentals I
               </li>
               <li>
                3D Graphics Fundamentals II
               </li>
               <li>
                DirectX Graphics Fundamentals I
               </li>
               <li>
                DirectX Graphics Fundamentals II
               </li>
               <li>
                Primitive Rendering I
               </li>
               <li>
                Primitive Rendering II
               </li>
               <li>
                Camera Systems
               </li>
               <li>
                Lighting
               </li>
               <li>
                Texture Mapping I
               </li>
               <li>
                Texture Mapping II
               </li>
               <li>
                Alpha Blending
               </li>
               <li>
                Meshes
               </li>
              </ul>
             </div>
             <div class="two_columns">
              <ul>
               <li>
                Frame Hierarchies
               </li>
               <li>
                Keyframe Animation I
               </li>
               <li>
                Keyframe Animation II
               </li>
               <li>
                Skinning I
               </li>
               <li>
                Skinning II
               </li>
               <li>
                Collision Systems I
               </li>
               <li>
                Collision Systems II
               </li>
               <li>
                Spatial Partitioning I
               </li>
               <li>
                Spatial Partitioning II
               </li>
               <li>
                Spatial Partitioning III
               </li>
               <li>
                Spatial Partitioning IV
               </li>
              </ul>
             </div>
            </div>
            <!-- Projects -->
            <h3>
             <a href="#">
              Projects
             </a>
            </h3>
            <div class="outer-container projects">
             <div class="two_columns">
              <ul>
               <li>
                Lab Project 1:  Wireframe Renderer
               </li>
               <li>
                Lab Project 2:  DirectX Graphics Initialization
               </li>
               <li>
                Lab Project 3:  Device Enumeration
               </li>
               <li>
                Lab Project 4:  Static Vertex Buffers
               </li>
               <li>
                Lab Project 5:  Simple Terrain Renderer
               </li>
               <li>
                Lab Project 6:  Dynamic Vertex Buffers
               </li>
               <li>
                Lab Project 7:  Dynamic Lights
               </li>
               <li>
                Lab Project 8:  Scene Lighting
               </li>
               <li>
                Lab Project 9:  Simple Texturing
               </li>
               <li>
                Lab Project 10: Terrain Detail Texturing
               </li>
               <li>
                Lab Project 11: Scene Texturing
               </li>
               <li>
                Lab Project 12: GDI and Textures
               </li>
               <li>
                Lab Project 13: Offscreen Surfaces
               </li>
               <li>
                Lab Project 14: Vertex Alpha
               </li>
               <li>
                Lab Project 15: Alpha Testing
               </li>
               <li>
                Lab Project 16: Alpha Sorting
               </li>
               <li>
                Lab Project 17: Texture Splatting
               </li>
               <li>
                Lab Project 18: Mesh Viewer
               </li>
               <li>
                Lab Project 19: Level of Detail
               </li>
               <li>
                Lab Project 20: Mesh Hierarchies
               </li>
               <li>
                Lab Project 21: Mesh Animation
               </li>
              </ul>
             </div>
             <div class="two_columns">
              <ul>
               <li>
                Lab Project 22: Animation Splitter
               </li>
               <li>
                Lab Project 23: Skin Viewer
               </li>
               <li>
                Lab Project 24: Animation Splitter II
               </li>
               <li>
                Lab Project 25: Tree Generation I
               </li>
               <li>
                Lab Project 26: Tree Generation II
               </li>
               <li>
                Lab Project 27: Skinned Characters
               </li>
               <li>
                Lab Project 28: Collision Detection
               </li>
               <li>
                Lab Project 29: Spatial Partitioning I
               </li>
               <li>
                Lab Project 30: Spatial Partitioning II
               </li>
               <li>
                Lab Project 31: Solid Leaf BSP Compiler
               </li>
               <li>
                Lab Project 32: Portal &amp; PVS Compiler
               </li>
               <li>
                Lab Project 33: Basic Effect Files
               </li>
               <li>
                Lab Project 34: Effect Driven Terrain
               </li>
               <li>
                Lab Project 35: Effect Compilation &amp; Enumeration
               </li>
               <li>
                Lab Project 36: Shared Effect Parameters
               </li>
               <li>
                Lab Project 37: Per Pixel Lighting
               </li>
               <li>
                Lab Project 38: Deferred Shading
               </li>
               <li>
                Lab Project 39: Deferred Lighting
               </li>
               <li>
                Lab Project 40: Shadow Mapping
               </li>
               <li>
                Lab Project 41: Hardware Shadow Maps
               </li>
               <li>
                Lab Project 42: Shadow Map Caching System
               </li>
              </ul>
             </div>
            </div>
            <!-- Requirements -->
            <h3>
             <a href="#">
              Requirements
             </a>
            </h3>
            <div class="outer-container requirements">
             <ul>
              <li>
               Microsoft Visual C++ 9.0 (2008) or higher.
              </li>
              <li>
               Microsoft DirectX SDK (latest).
              </li>
             </ul>
            </div>
           </div>
          </div>
          <div class="package-content-item" id="math">
           <img alt="Game Programming Mathematics - Math for Game Developers" src="/elements/images/gamedev-package/courses/gmt7.jpg"/>
           <div class="details">
            <h2>
             Mathematics
            </h2>
            <hr/>
            <div style="display:table;">
             <div style="display:table-cell; padding-right: 20px;">
              <ul class="contents">
               <li>
                15 Lessons
               </li>
               <li>
                1 Textbook
               </li>
               <li>
                11 Presentations
               </li>
              </ul>
             </div>
             <div style="display:table-cell;">
              <ul class="contents">
               <li>
                74 Projects
               </li>
               <li>
                1 Supplemental
               </li>
              </ul>
             </div>
            </div>
            <p>
             Math is the foundation of all video games. Although mathematics cannot be avoided, it doesn't have to be a dreadful experience either. Our training combines the depth of knowledge necessary to build realistic video games with a friendly approach that reduces much of the struggle. Whether you're programming your own game engine from scratch or using a third-party engine like Carbon or Unity, you'll be in great shape for the computational challenges ahead.
            </p>
           </div>
           <!-- Content Detail -->
           <div class="collapsible-outer" id="math-contents">
            <!-- Topics -->
            <h3>
             <a href="#">
              Topics
             </a>
            </h3>
            <div class="outer-container">
             <!-- Environment &amp; Core Language Features -->
             <div class="collapsible-inner">
              <h4>
               <a href="#">
                Real Numbers
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand how the real numbers (integers, rational &amp; irrational numbers) are used and the operations we can perform on them.
                </li>
                <li>
                 Ensure a common "language" with a study of number lines and basic interval notation.
                </li>
                <li>
                 Discuss equations and their properties (reflexive, symmetric, transitive, substitution).
                </li>
                <li>
                 Get comfortable with fractions and exponents.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Introduction to Real Numbers
                </li>
                <li>
                 Use of Real Numbers
                </li>
                <li>
                 Number lines and interval notation
                </li>
                <li>
                 Equations and their properties
                </li>
                <li>
                 Operations
                 <ul>
                  <li>
                   Order of Operations
                  </li>
                 </ul>
                </li>
                <li>
                 Fractions
                </li>
                <li>
                 Exponents
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Algebra and Functions
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Review the principles of high school level algebra.
                </li>
                <li>
                 Understand the concept of a variable and how variables are used to form equations.
                </li>
                <li>
                 Discuss the fundamental algebraic rules for solving single-variable and multi-variable equations.
                </li>
                <li>
                 Solve linear equations and non-linear equations such as quadratics.
                </li>
                <li>
                 Nail down the methods for simplifying and rearranging equations.
                </li>
                <li>
                 Look at some of the common functions used in game development.
                </li>
                <li>
                 Discuss domain, range, sets, inverse functions, square roots, exponentials, and logarithms.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Algebra
                 <ul>
                  <li>
                   Variables
                  </li>
                  <li>
                   Solving single-variable equations
                  </li>
                  <li>
                   Solving multi-variable linear equations
                  </li>
                  <li>
                   Solving non-linear equations
                  </li>
                  <li>
                   Simplifying/Rearranging
                   <ul>
                    <li>
                     Collecting Like Terms
                    </li>
                    <li>
                     Factoring
                    </li>
                    <li>
                     Expanding (FOIL)
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
                <li>
                 Functions
                 <ul>
                  <li>
                   Set Theory Basics
                  </li>
                  <li>
                   Square Roots
                   <ul>
                    <li>
                     The Quadratic Equation
                    </li>
                   </ul>
                  </li>
                  <li>
                   Exponential Functions
                  </li>
                  <li>
                   Logarithmic Functions
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Geometry
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand the basics of analytic geometry.
                </li>
                <li>
                 Learn about the Cartesian coordinate system and the notion of graphing points.
                </li>
                <li>
                 Examine lines, planes, and spheres and their equations in 2D and 3D.
                </li>
                <li>
                 Learn how to find the intersections of the shapes introduced previously.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Analytic Geometry
                 <ul>
                  <li>
                   The Cartesian Coordinate System
                   <ul>
                    <li>
                     Graphing equations and functions
                    </li>
                   </ul>
                  </li>
                  <li>
                   Equations of Geometric objects
                   <ul>
                    <li>
                     Lines/planes/spheres
                    </li>
                   </ul>
                  </li>
                  <li>
                   Intersecting geometric objects
                   <ul>
                    <li>
                     Line/line and line/sphere
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Set Theory
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand the basics of set theory and its symbols.
                </li>
                <li>
                 Learn how entities are grouped into sets.
                </li>
                <li>
                 Conduct various operations on sets, such as unions and intersections (i.e., the algebra of sets).
                </li>
                <li>
                 Introduce the relationship between functions and sets to set the stage for the next conversation.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Introduction to Set Theory
                 <ul>
                  <li>
                   The Language of Set Theory
                  </li>
                  <li>
                   Set Membership
                  </li>
                  <li>
                   Subsets, Supersets, and Equality
                  </li>
                  <li>
                   The Algebra of Set Theory
                  </li>
                  <li>
                   Set Theory and Functions
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Functions
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Understand the role of functions in mathematics and in games.
                </li>
                <li>
                 Look at the concept of mapping values between domain and range.
                </li>
                <li>
                 Spend time visualizing various kinds of functions using graphs.
                </li>
                <li>
                 Discuss some of the popular functions (absolute value, exponential, logarithmic) used in game development.
                </li>
                <li>
                 Model game phenomena like fog and weapon damage using functions.
                </li>
                <li>
                 Design a custom function and develop a means for selecting appropriate values that reflect the desired outcome.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Mathematical Functions
                </li>
                <li>
                 Graphs
                 <ul>
                  <li>
                   Single-Variable Functions
                  </li>
                  <li>
                   Two-Variable Functions
                  </li>
                 </ul>
                </li>
                <li>
                 Families of Functions
                 <ul>
                  <li>
                   Absolute Value Function
                  </li>
                  <li>
                   Exponential Functions
                   <ul>
                    <li>
                     Fog Density
                    </li>
                    <li>
                     Damage Calculations
                    </li>
                   </ul>
                  </li>
                  <li>
                   Logarithmic Functions
                   <ul>
                    <li>
                     Using the Log Function for Game Development
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Polynomials
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Examine the algebra of polynomials.
                </li>
                <li>
                 Study graphs for various kinds of polynomial functions.
                </li>
                <li>
                 Learn how to apply different kinds of polynomials in game development projects.
                </li>
                <li>
                 See how to use linear interpolation to draw polygons on the display.
                </li>
                <li>
                 Learn how to use polynomials to approximate the behavior of complex functions too costly to compute in real-time games.
                </li>
                <li>
                 Learn how to use polynomials to predict the future values of variables.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Polynomial Algebra (Single Variable)
                 <ul>
                  <li>
                   Addition/Subtraction
                  </li>
                  <li>
                   Scalar Multiplication
                  </li>
                  <li>
                   Multiplication/Division
                  </li>
                 </ul>
                </li>
                <li>
                 Quadratic Equations
                </li>
                <li>
                 Graphing Polynomials
                </li>
                <li>
                 Using Polynomials
                 <ul>
                  <li>
                   Linear Interpolation
                  </li>
                  <li>
                   Approximating Functions
                  </li>
                  <li>
                   Prediction
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Trigonometry
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Develop a firm grasp of the properties of triangles, and right triangles in particular.
                </li>
                <li>
                 Look at the relationships that exist between the internal angles and the lengths of triangle sides.
                </li>
                <li>
                 Understand the most commonly used trigonometric functions (sine, cosine, tangent) that relate triangle properties to unit circles.
                </li>
                <li>
                 See how to use triangle properties and functions to solve a number of issues related to graphics programming.
                </li>
                <li>
                 Create an animated wave function that might be used for a water or cloth simulation.
                </li>
                <li>
                 Examine how to use trigonometric concepts to render circles and ellipses on the display.
                </li>
                <li>
                 Look at how inverse trig functions (arcsin, arcos, arctan) can be used to determine angle values.
                </li>
                <li>
                 Get comfortable with the core trig identities, such as the reduction and double angle identities.
                </li>
                <li>
                 Learn how to use trig identities as a means for deriving mathematical proofs.
                </li>
                <li>
                 Use trigonometry to rotate points in two and three dimensions.
                </li>
                <li>
                 Construct a proper field-of-view for an in-game camera system.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Angles
                 <ul>
                  <li>
                   Common Angles
                  </li>
                  <li>
                   The Polar Coordinate System
                  </li>
                 </ul>
                </li>
                <li>
                 Triangles
                 <ul>
                  <li>
                   Properties
                  </li>
                  <li>
                   Right Triangles
                  </li>
                 </ul>
                </li>
                <li>
                 Introduction to Trigonometry
                 <ul>
                  <li>
                   The Trigonometric Functions
                  </li>
                  <li>
                   Applications of Basic Trigonometry
                  </li>
                  <li>
                   Solving Triangle Problems
                  </li>
                 </ul>
                </li>
                <li>
                 Modeling Phenomena
                 <ul>
                  <li>
                   Modeling Waves
                  </li>
                  <li>
                   Drawing Circles and Ellipses
                  </li>
                  <li>
                   Projection
                  </li>
                 </ul>
                </li>
                <li>
                 Trig Functions
                 <ul>
                  <li>
                   Derivative Trigonometric Functions
                  </li>
                  <li>
                   Inverse Trig Functions
                  </li>
                  <li>
                   Identities
                   <ul>
                    <li>
                     Pythagorean Identities
                    </li>
                    <li>
                     Reduction Identities
                    </li>
                    <li>
                     Angle Sum/Difference Identities
                    </li>
                    <li>
                     Double-Angle Identities
                    </li>
                    <li>
                     Sum-To-Product Identities
                    </li>
                    <li>
                     Product-to-Sum Identities
                    </li>
                    <li>
                     Triangle Laws
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
                <li>
                 Applications
                 <ul>
                  <li>
                   Point Rotation
                  </li>
                  <li>
                   Field-of-View
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Analytic Geometry
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Learn the basics of analytic geometry.
                </li>
                <li>
                 Use functions and polynomials to mathematically represent points, lines, planes and ellipses.
                </li>
                <li>
                 Understand 2D lines and their various forms, including the all-important parametric representation.
                </li>
                <li>
                 Look at intersection and distance formulas with respect to lines, points, and planes.
                </li>
                <li>
                 Briefly examine ellipsoidal intersections.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Points and Lines
                </li>
                <li>
                 Two-Dimensional Lines
                </li>
                <li>
                 Parametric Representation
                </li>
                <li>
                 Parallel and Perpendicular Lines
                </li>
                <li>
                 Intersection of Two Lines
                </li>
                <li>
                 Distance from a Point to a Line
                </li>
                <li>
                 Angles between Lines
                </li>
                <li>
                 Three-Dimensional Lines
                </li>
                <li>
                 Ellipses and Ellipsoids
                 <ul>
                  <li>
                   Intersecting Lines with Ellipses
                  </li>
                  <li>
                   Intersecting Lines with Spheres
                  </li>
                 </ul>
                </li>
                <li>
                 Planes
                 <ul>
                  <li>
                   Intersecting Lines with Planes
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Vectors
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Get very comfortable with vectors, the mathematical heart of all 3D game engines.
                </li>
                <li>
                 Learn vector addition and subtraction, scalar multiplication, and the all-important dot and cross products.
                </li>
                <li>
                 Examine the use of vectors in games.
                </li>
                <li>
                 Discuss the relationship between vectors and planes and the plane representation.
                </li>
                <li>
                 Revisit distance calculations using vectors.
                </li>
                <li>
                 Learn how to rotate and scale geometry using vector representations of mesh vertices.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Elementary Vector Math
                 <ul>
                  <li>
                   Linear Combinations
                  </li>
                  <li>
                   Vector Representations
                  </li>
                  <li>
                   Addition/Subtraction
                  </li>
                  <li>
                   Scalar Multiplication/Division
                  </li>
                  <li>
                   Vector Magnitude
                  </li>
                  <li>
                   The Dot Product
                  </li>
                  <li>
                   Vector Projection
                  </li>
                  <li>
                   The Cross Product
                  </li>
                 </ul>
                </li>
                <li>
                 Applications of Vectors
                 <ul>
                  <li>
                   Directed Lines
                  </li>
                  <li>
                   Vectors and Planes
                  </li>
                  <li>
                   Back-face Culling
                  </li>
                  <li>
                   Vector-based Plane Representation
                  </li>
                  <li>
                   Distance Calculations (Points, Planes, Lines)
                  </li>
                  <li>
                   Point Rotation, Scaling, Skewing
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Matrices
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Get very comfortable with matrices, one of the other core components of every 3D game engine.
                </li>
                <li>
                 Understand matrices from a purely mathematical perspective.
                </li>
                <li>
                 Know what matrices are and what problems they are intended to solve.
                </li>
                <li>
                 Examine important matrix mathematics -- addition and subtraction, multiplication by scalars and/or by other matrices.
                </li>
                <li>
                 Learn how to use matrices to solve systems of linear equations with Gaussian elimination.
                </li>
                <li>
                 Understand the idea of linear transformations.
                </li>
                <li>
                 Learn how 4D homogenous coordinates can make the non-linear translation operation compliant with matrix operations.
                </li>
                <li>
                 Examine a number of common matrices used to effect transformations in 3D games (projection, rotation, translation, scaling, skewing).
                </li>
                <li>
                 See how to perform rotations around all three coordinate axes.
                </li>
                <li>
                 Study the vector/matrix transformation operation (multiplication) at the heart of all 3D graphics rendering pipelines.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Matrices
                 <ul>
                  <li>
                   Matrix Relations
                  </li>
                  <li>
                   Matrix Operations
                   <ul>
                    <li>
                     Addition/Subtraction
                    </li>
                    <li>
                     Scalar Multiplication
                    </li>
                    <li>
                     Matrix Multiplication
                    </li>
                    <li>
                     Transpose
                    </li>
                    <li>
                     Determinant
                    </li>
                    <li>
                     Inverse
                    </li>
                   </ul>
                  </li>
                  <li>
                   Systems of Linear Equations
                  </li>
                  <li>
                   Gaussian Elimination
                  </li>
                 </ul>
                </li>
                <li>
                 Linear Transformations
                 <ul>
                  <li>
                   Computing Linear Transformation Matrices
                  </li>
                  <li>
                   Translation and Homogeneous Coordinates
                  </li>
                  <li>
                   Transformation Matrices
                   <ul>
                    <li>
                     The Scaling Matrix
                    </li>
                    <li>
                     The Skewing Matrix
                    </li>
                    <li>
                     The Translation Matrix
                    </li>
                    <li>
                     The Rotation Matrices
                    </li>
                    <li>
                     The Projection Matrix
                    </li>
                   </ul>
                  </li>
                  <li>
                   Linear Transformations in 3D Games
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Quaternions &amp; Imaginary Numbers
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Examine the concept of imaginary numbers and the various arithmetical operations that can be performed on them.
                </li>
                <li>
                 Discuss the similarities and differences between imaginary and real numbers.
                </li>
                <li>
                 Study complex numbers and the algebra involved in working with them.
                </li>
                <li>
                 Examine the quaternion and its associated algebra.
                </li>
                <li>
                 Look at applications of the quaternion in game development.
                </li>
                <li>
                 Understand how to use quaternions to perform rotations about arbitrary axes.
                </li>
                <li>
                 Solve the gimbal lock problem encountered with Euler angles.
                </li>
                <li>
                 Create an updated world-to-view space transformation matrix that is derived from a quaternion after rotation has taken place.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Imaginary Numbers
                 <ul>
                  <li>
                   Powers
                  </li>
                  <li>
                   Multiplication/Division
                  </li>
                  <li>
                   Addition/Subtraction
                  </li>
                 </ul>
                </li>
                <li>
                 Complex Numbers
                 <ul>
                  <li>
                   Addition/Subtraction
                  </li>
                  <li>
                   Multiplication/Division
                  </li>
                  <li>
                   Powers
                  </li>
                  <li>
                   Complex Conjugates
                  </li>
                  <li>
                   Magnitude
                  </li>
                 </ul>
                </li>
                <li>
                 Quaternions
                 <ul>
                  <li>
                   Addition/Subtraction
                  </li>
                  <li>
                   Multiplication
                  </li>
                  <li>
                   Complex Conjugates
                  </li>
                  <li>
                   Magnitude
                  </li>
                  <li>
                   Inverse
                  </li>
                  <li>
                   Rotations
                  </li>
                  <li>
                   World-to-View Transformation
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Practical Applications
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Spend time focusing on some practical applications of mathematics in games.
                </li>
                <li>
                 Look at how analytic geometry plays an important role in a number of different areas of game development.
                </li>
                <li>
                 Learn how to design a simple collision/response system in 2D using lines and planes (e.g., a billiards simulation).
                </li>
                <li>
                 Find a way to detect collision between two convex polygons of arbitrary shape.
                </li>
                <li>
                 Use vectors and planes to create reflections such as might be seen in a mirror.
                </li>
                <li>
                 See how to use of a convex volume to create shadows in a game world.
                </li>
                <li>
                 Take a look how vector dot products can be used to determine the lighting and shading of points across a surface.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 2D Collisions
                </li>
                <li>
                 Reflections
                </li>
                <li>
                 Polygon/Polygon Intersection
                </li>
                <li>
                 Shadow Casting
                </li>
                <li>
                 Lighting
                </li>
               </ul>
              </div>
             </div>
            </div>
            <!-- Presentations -->
            <h3>
             <a href="#">
              Presentations
             </a>
            </h3>
            <div class="outer-container presentations">
             <div class="two_columns">
              <ul>
               <li>
                Set Theory
               </li>
               <li>
                Functions
               </li>
               <li>
                Polynomials
               </li>
               <li>
                Basic Trigonometry I
               </li>
               <li>
                Basic Trigonometry II
               </li>
               <li>
                Analytic Geometry I
               </li>
              </ul>
             </div>
             <div class="two_columns">
              <ul>
               <li>
                Vector Mathematics
               </li>
               <li>
                Matrix Mathematics I
               </li>
               <li>
                Matrix Mathematics II
               </li>
               <li>
                Quaternion Mathematics
               </li>
               <li>
                Analytic Geometry II
               </li>
              </ul>
             </div>
            </div>
            <!-- Projects -->
            <h3>
             <a href="#">
              Projects
             </a>
            </h3>
            <div class="outer-container projects">
             Numerous mathematical exercises related to the topics covered are included at the end of each textbook chapter. (Solutions also available for separate download.)
            </div>
            <!-- Requirements -->
            <h3>
             <a href="#">
              Requirements
             </a>
            </h3>
            <div class="outer-container requirements">
             <ul>
              <li>
               Microsoft Visual C++ 7.0 (2002 .NET) or higher.
              </li>
             </ul>
            </div>
           </div>
          </div>
          <div class="package-content-item" id="ai">
           <img alt="Game Programming - Artificial Intelligence (AI) for Game Development" src="/elements/images/gamedev-package/courses/ai3.jpg"/>
           <div class="details">
            <h2>
             Artificial Intelligence
            </h2>
            <hr/>
            <div style="display:table;">
             <div style="display:table-cell; padding-right: 20px;">
              <ul class="contents">
               <li>
                10 Lessons
               </li>
               <li>
                1 Textbook
               </li>
               <li>
                8 Presentations
               </li>
              </ul>
             </div>
             <div style="display:table-cell;">
              <ul class="contents">
               <li>
                5 Projects
               </li>
               <li>
                2 Supplementals
               </li>
              </ul>
             </div>
            </div>
            <p>
             Just about all video games require non-player characters that provide the illusion of intelligent thought. This material will teach you how to program AI entities capable of navigating their environments, both individually and in groups, while displaying appropriate and customizable levels of decision making ability. Artificial intelligence is often the determining factor between games that are engrossing and fun to play and those that are destined for the bargain bin.
            </p>
           </div>
           <!-- Content Detail -->
           <div class="collapsible-outer" id="ai-contents">
            <!-- Topics -->
            <h3>
             <a href="#">
              Topics
             </a>
            </h3>
            <div class="outer-container">
             <!-- Environment &amp; Core Language Features -->
             <div class="collapsible-inner">
              <h4>
               <a href="#">
                General AI Principles
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Layout a few guidelines for AI in games.
                </li>
                <li>
                 Learn about some of the different types of AI that exist.
                </li>
                <li>
                 Introduce the fundamentals of pathfinding and explore the different types available.
                </li>
                <li>
                 Work through some specific pathfinding examples.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 General Principles of AI
                 <ul>
                  <li>
                   The KISS Method
                  </li>
                  <li>
                   Hard != Fun
                  </li>
                  <li>
                   Play Fair
                  </li>
                 </ul>
                </li>
                <li>
                 Fundamental AI Types
                 <ul>
                  <li>
                   Decision Making
                  </li>
                  <li>
                   Classification
                  </li>
                  <li>
                   Life Systems
                  </li>
                  <li>
                   Pathfinding
                  </li>
                 </ul>
                </li>
                <li>
                 Types of Pathfinding
                 <ul>
                  <li>
                   Non-Look-Ahead Iterative Traversals
                  </li>
                  <li>
                   Look-Ahead Iterative Traversals
                  </li>
                  <li>
                   Look-Ahead Recursive Traversals
                  </li>
                 </ul>
                </li>
                <li>
                 Non-Look-Ahead Iterative Traversals
                 <ul>
                  <li>
                   Random Backstepping
                  </li>
                  <li>
                   Obstacle Tracing
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Look-Ahead Iterative Pathfinding
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Examine look-ahead iterative traversals for pathfinding.
                </li>
                <li>
                 Understand Breadth-First Search, Best-First Search, and Dijkstra's search.
                </li>
                <li>
                 Learn about the Depth-First Search.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Look-Ahead Iterative Traversals
                 <ul>
                  <li>
                   Breadth First Search
                  </li>
                  <li>
                   Best First Search
                  </li>
                  <li>
                   Dijkstra's Search
                  </li>
                 </ul>
                </li>
                <li>
                 Look-Ahead Recursive Traversals
                 <ul>
                  <li>
                   Depth First Search
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                A* and Hierarchical Pathfinding
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Discover the famous A* search algorithm -- how it works, its limitations, and how to make it more efficient.
                </li>
                <li>
                 Use the concept of heuristics to produce better traversal results.
                </li>
                <li>
                 Talk about how we might apply A* to a simple RTS game.
                </li>
                <li>
                 Introduce hierarchical pathfinding and discuss some possible use cases.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 A* Search
                 <ul>
                  <li>
                   How A* works.
                  </li>
                  <li>
                   Limitations of A*
                  </li>
                  <li>
                   Making A* more efficient
                  </li>
                  <li>
                   Heuristics
                  </li>
                 </ul>
                </li>
                <li>
                 Hierarchical Pathfinding
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Non-Gridded Map Pathfinding
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Complete our pathfinding studies with a look at pathfinding on non-gridded maps.
                </li>
                <li>
                 Discuss methods for dealing with non-gridded worlds.
                </li>
                <li>
                 Examine the design strategy used for the Pathfinding Demo, and see how the interface can be extended for your own use.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Grid It
                </li>
                <li>
                 Visibility Points / Waypoint Networks
                </li>
                <li>
                 Radial Basis
                </li>
                <li>
                 Cost Fields
                </li>
                <li>
                 Quad-Trees
                </li>
                <li>
                 Mesh Navigation
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Behavior-Based Movement
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Introduce the concept of decision making in AI.
                </li>
                <li>
                 Examine various types of behavior-based movement to control single and grouped AI entities.
                </li>
                <li>
                 Study a traditional implementation of flocking that demonstrates various behaviors for movement.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Separation
                </li>
                <li>
                 Cohesion
                </li>
                <li>
                 Alignment
                </li>
                <li>
                 Avoidance
                </li>
                <li>
                 Separation
                </li>
                <li>
                 Cohesion
                </li>
                <li>
                 Alignment
                </li>
                <li>
                 Avoidance
                </li>
                <li>
                 Cruising
                </li>
                <li>
                 Stay Within Sphere
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Decision Making
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Examine the different types of decision making commonly used in game AI systems.
                </li>
                <li>
                 Discuss state machines in detail -- one of the most popular types of decision making systems.
                </li>
                <li>
                 Develop an understanding of transition diagrams and see how they can be used for state machines.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Decision Making
                 <ul>
                  <li>
                   Decision Trees
                  </li>
                  <li>
                   State Machines
                  </li>
                  <li>
                   Rule Base
                  </li>
                  <li>
                   Squad Behaviors
                  </li>
                 </ul>
                </li>
                <li>
                 Finite State Machines
                 <ul>
                  <li>
                   Transition Diagrams
                  </li>
                  <li>
                   Uses for State Machines
                   <ul>
                    <li>
                     A.I.
                    </li>
                    <li>
                     Animation
                    </li>
                    <li>
                     Game State
                    </li>
                    <li>
                     Save File System
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Scripting
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Discuss scripting and why it is important when developing an AI system.
                </li>
                <li>
                 Learn how to integrate Python, a popular scripting language, into the state machine we developed earlier.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Scripting Basics
                </li>
                <li>
                 Introdution to Python
                 <ul>
                  <li>
                   Default Types and Built-ins
                  </li>
                  <li>
                   Classes
                  </li>
                  <li>
                   Functions
                  </li>
                  <li>
                   Control Statements
                  </li>
                  <li>
                   Importing Packages
                  </li>
                 </ul>
                </li>
                <li>
                 Embedding Python
                 <ul>
                  <li>
                   Boost.Python
                  </li>
                  <li>
                   Scripting Engines
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Waypoint Networks
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Learn how to create waypoint networks and how to load and store them in our AI engine.
                </li>
                <li>
                 Examine some of the different kinds of data that can be stored at waypoints to help the AI make decisions.
                </li>
                <li>
                 Traverse a waypoint network using our pathfinding methods for the purposes of navigating around in the environment.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Waypoint Networks
                 <ul>
                  <li>
                   Loading and Storing Waypoints
                  </li>
                  <li>
                   Edges
                   <ul>
                    <li>
                     Unidirectional vs. Bidirectional
                    </li>
                    <li>
                     Cost Modifiers
                    </li>
                   </ul>
                  </li>
                  <li>
                   Waypoints and Decision Making
                   <ul>
                    <li>
                     State Machine Updates
                    </li>
                    <li>
                     Waypoint Orientation
                    </li>
                   </ul>
                  </li>
                  <li>
                   Waypoints and Navigation
                   <ul>
                    <li>
                     A* Traversals
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
               </ul>
              </div>
             </div>
            </div>
            <!-- Presentations -->
            <h3>
             <a href="#">
              Presentations
             </a>
            </h3>
            <div class="outer-container presentations">
             <div class="two_columns">
              <ul>
               <li>
                Introduction to AI and Pathfinding
               </li>
               <li>
                Look-Ahead Iterative Methods of Pathfinding
               </li>
               <li>
                Data Structures
               </li>
               <li>
                Non-Gridded Pathfinding and The Pathfinding Demo
               </li>
              </ul>
             </div>
             <div class="two_columns">
              <ul>
               <li>
                Flocking
               </li>
               <li>
                Decision Making
               </li>
               <li>
                Scripting
               </li>
               <li>
                Waypoint Networks
               </li>
              </ul>
             </div>
            </div>
            <!-- Projects -->
            <h3>
             <a href="#">
              Projects
             </a>
            </h3>
            <div class="outer-container projects">
             <ul>
              <li>
               Lab Project 1: Pathfinding
              </li>
              <li>
               Lab Project 2: Behaviors
              </li>
              <li>
               Lab Project 3: State Machines
              </li>
              <li>
               Lab Project 4: Waypoint Networks
              </li>
              <li>
               Lab Project 5: Final Demo
              </li>
             </ul>
            </div>
            <!-- Requirements -->
            <h3>
             <a href="#">
              Requirements
             </a>
            </h3>
            <div class="outer-container requirements">
             <ul>
              <li>
               Microsoft Visual C++ 7.0 (2002 .NET) or higher.
              </li>
              <li>
               Microsoft DirectX SDK (latest).
              </li>
              <li>
               ActiveState Python 2.3 or higher.
              </li>
             </ul>
            </div>
           </div>
          </div>
          <div class="package-content-item" id="console">
           <img alt="Game Development Hardware - Video Game Console Design and Programming" src="/elements/images/gamedev-package/courses/vgc.jpg"/>
           <div class="details">
            <h2>
             Building Video Game Consoles
            </h2>
            <h5>
             Hardware Sold Separately.
             <a href="#" id="vgc-requirements-link">
              Click for Details
             </a>
            </h5>
            <hr/>
            <div style="display:table; margin-bottom: 10px;">
             <div style="display:table-cell; padding-right: 20px;">
              <ul class="contents">
               <li>
                12 Lessons
               </li>
               <li>
                1 Textbook
               </li>
              </ul>
             </div>
             <div style="display:table-cell;">
              <ul class="contents">
               <li>
                12 Presentations
               </li>
               <li>
                36 Projects
               </li>
              </ul>
             </div>
            </div>
            <p>
             Learn how to design and build your own video game console and then program games for it. Beyond the thrill of accomplishment that comes from doing it all yourself, these projects offer a fun and interesting way to pick up some useful hardware engineering experience. Understanding the fundamentals of game hardware (consoles, handhelds, video cards, etc.) will in turn make you a better programmer, armed with a deeper understanding of what goes on under the hood.
            </p>
           </div>
           <!-- Content Detail -->
           <div class="collapsible-outer" id="console-contents">
            <!-- Topics -->
            <h3>
             <a href="#">
              Topics
             </a>
            </h3>
            <div class="outer-container">
             <div class="collapsible-inner">
              <h4>
               <a href="#">
                Analog Circuitry
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Develop an understanding of analog circuits.
                </li>
                <li>
                 Learn some of the fundamentals of electronics including: electron motion, Ohm's law, Kirchoff's laws.
                </li>
                <li>
                 Understand some of the common circuit solving techniques.
                </li>
                <li>
                 Become familiar with common engineering tools such as solderless breadboards, digital multi-meters, and more.
                </li>
                <li>
                 Create a 5 Volt regulator that will be used for all additional hardware experiments.
                </li>
                <li>
                 Turn blinking lights (LEDs) on and off with a few simple components.
                </li>
                <li>
                 Learn about the relationships between capacitors, inductors, transformers, and transistors.
                </li>
                <li>
                 Test circuit designs in software using a circuit simulator.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <div class="two_columns">
                <ul>
                 <li>
                  Understanding electronic signals (analog vs. digital)
                 </li>
                 <li>
                  Voltage and current definitions
                 </li>
                 <li>
                  Ohms Law
                 </li>
                 <li>
                  Power Equations
                 </li>
                 <li>
                  Resistors, Capacitors, Inductors, Transformers
                 </li>
                 <li>
                  Testing Equipment
                 </li>
                 <li>
                  Kirchoff's Laws
                 </li>
                 <li>
                  Voltage Dividers
                 </li>
                 <li>
                  5 Volt Regulator
                 </li>
                 <li>
                  Mechanical Switches
                 </li>
                </ul>
               </div>
               <div class="two_columns">
                <ul>
                 <li>
                  Potentiometers
                 </li>
                 <li>
                  Capacitor Equations
                 </li>
                 <li>
                  Low and High Pass Filters
                 </li>
                 <li>
                  Inductor Equations
                 </li>
                 <li>
                  Rectifiers
                 </li>
                 <li>
                  Transistor Switching
                 </li>
                 <li>
                  Building Inverters
                 </li>
                 <li>
                  Clock Generation
                 </li>
                 <li>
                  SPICE simulations
                 </li>
                </ul>
               </div>
              </div>
              <h4>
               <a href="#">
                Digital Circuitry
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Learn about digital circuits.
                </li>
                <li>
                 Understand concepts such as Boolean logic, truth tables, logic voltage levels, and basic gates.
                </li>
                <li>
                 Become comfortable with binary math.
                </li>
                <li>
                 Learn advanced digital design concepts that are required for building game consoles.
                </li>
                <li>
                 Learn about glue logic and logic simplification through techniques like K-maps and ones looping.
                </li>
                <li>
                 Examine more complicated digital chips like shift registers that are used on the XGS micro-edition for reading joysticks and the SRAM.
                </li>
                <li>
                 Get familiar with state machines.
                </li>
                <li>
                 Design, on paper, a full state machine with inputs and outputs and then finish the design in hardware with LEDs and switches.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Logic Symbols
                </li>
                <li>
                 Truth Tables
                </li>
                <li>
                 Boolean Algebra
                </li>
                <li>
                 DeMorgan's Theorem
                </li>
                <li>
                 Datasheets
                </li>
                <li>
                 Loading Concepts
                </li>
                <li>
                 DIP Packages
                </li>
                <li>
                 Half/Full Bit Adders
                </li>
                <li>
                 Logic Simplification
                </li>
                <li>
                 Bubble Pushing
                </li>
                <li>
                 Minterms/Maxterms
                </li>
                <li>
                 K-Maps
                </li>
                <li>
                 Decoders, 7 Segment Displays, Muxes
                </li>
                <li>
                 Flip Flops
                </li>
                <li>
                 State Machine Design
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Computer Architecture
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Learn about microprocessors and microcontrollers.
                </li>
                <li>
                 Understand the general ideas behind building your own simple computer.
                </li>
                <li>
                 Know the inner workings of a processor.
                </li>
                <li>
                 Learn how assembly language and machine code comes together to control inputs and outputs.
                </li>
                <li>
                 Work with a microprocessor entirely in simulation by writing some basic code.
                </li>
                <li>
                 Learn how to run and save your programs without having to touch a single piece of hardware.
                </li>
                <li>
                 Perform experiments with the sx-28 microcontroller (the heart of the Pico XGS).
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Microprocessors &amp; Microcontrollers
                </li>
                <li>
                 Von Neumann vs. Harvard
                </li>
                <li>
                 Endianess
                </li>
                <li>
                 External/Internal Architecture
                </li>
                <li>
                 Pipelining
                </li>
                <li>
                 Addressing Modes
                </li>
                <li>
                 Interrupts
                </li>
                <li>
                 Memory Types
                </li>
                <li>
                 Intro to the SX-28 Microcontroller
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Designing Game Systems
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Study the early generation game consoles.
                </li>
                <li>
                 Examine ideas implemented by other video game console designers, to better understand how all the pieces fit together.
                </li>
                <li>
                 Do a series of experiments with sound.
                </li>
                <li>
                 Experiment with input devices like the Nintendo controller.
                </li>
                <li>
                 Draw video to a TV screen.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <div class="two_columns">
                <ul>
                 <li>
                  SX-28 Overview
                 </li>
                 <li>
                  Jump Tables
                 </li>
                 <li>
                  Accessing RAM
                 </li>
                 <li>
                  SX Registers
                 </li>
                 <li>
                  Assembly Programming the SX-28
                 </li>
                 <li>
                  XGameStation Prototypes
                 </li>
                 <li>
                  D/A Converters
                 </li>
                 <li>
                  Game Console Sound
                 </li>
                 <li>
                  PWM Signals
                 </li>
                 <li>
                  Display Technologies
                 </li>
                 <li>
                  Raster Graphics
                 </li>
                </ul>
               </div>
               <div class="two_columns">
                <ul>
                 <li>
                  NTSC Basics
                 </li>
                 <li>
                  Adding Color
                 </li>
                 <li>
                  RGB/VGA Basics
                 </li>
                 <li>
                  Vector Graphics
                 </li>
                 <li>
                  Game Controller Inputs
                 </li>
                 <li>
                  Atari, Sega, NES Controllers Examined
                 </li>
                 <li>
                  Serial Communications
                 </li>
                 <li>
                  RS-232 Communications
                 </li>
                 <li>
                  Game Cartridges
                 </li>
                 <li>
                  Assembly Overview of Video Generation on the SX chip
                 </li>
                </ul>
               </div>
              </div>
              <h4>
               <a href="#">
                Breadboards
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Assemble a working video game console on a breadboard.
                </li>
                <li>
                 Play your first games on a TV with sound and input.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Game Console Schematic
                </li>
                <li>
                 5 Volt Regulator Construction
                </li>
                <li>
                 SX-28 Circuit
                </li>
                <li>
                 Clock Circuit
                </li>
                <li>
                 LED Output Port
                </li>
                <li>
                 Video Out Circuit
                </li>
                <li>
                 Audio Out Circuit
                </li>
                <li>
                 Joystick Port
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Printed Circuit Boards
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Make a more permanent game console by soldering it onto a prefabricated printed circuit board (PCB).
                </li>
                <li>
                 Learn about the different components of a PCB like silk screen, solder mask, copper traces, through holes, and more.
                </li>
                <li>
                 Get comfortable with various soldering techniques.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Soldering Iron Usage
                </li>
                <li>
                 5 Volt Power Supply
                </li>
                <li>
                 Filtering and Pull Up Resistors
                </li>
                <li>
                 Current Limiting Resistors
                </li>
                <li>
                 Directional Pad and LEDs
                </li>
                <li>
                 7 Segment LEDs
                </li>
                <li>
                 Audio and Video R2R Ladders
                </li>
                <li>
                 DIP Socket Headers
                </li>
                <li>
                 Expansion, RCA, and Joystick Headers
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Hacking Demos
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Gain confidence in programming the game console by making small changes (hacks) to existing assembly language demos.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Starfield Hack
                </li>
                <li>
                 Character Tiles Hack
                </li>
                <li>
                 Game Text Hack
                </li>
                <li>
                 Racer Hack
                </li>
                <li>
                 Sound Hack
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Creating Games for the Console
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Develop games for the console you've built.
                </li>
                <li>
                 Experiment with tile engines to build the game world.
                </li>
                <li>
                 Add your own customizations to provided samples.
                </li>
                <li>
                 Show off your new games to friends and family :)
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Game Components Required
                </li>
                <li>
                 Organizing Code and Art into System ROM Space
                </li>
                <li>
                 Organizing RAM
                </li>
                <li>
                 Using the Real Time Clock Counter
                </li>
                <li>
                 Creating the Title Screen
                </li>
                <li>
                 Creating the Game Boards
                </li>
                <li>
                 Game Screen Layout
                </li>
                <li>
                 Creating the Game Screen
                </li>
               </ul>
              </div>
              <h4>
               <a href="#">
                Emulators and Simulators
               </a>
              </h4>
              <div class="inner-container topics">
               <p>
                Goals:
               </p>
               <ul>
                <li>
                 Use emulators and simulators to reduce game development time and increase your productivity.
                </li>
               </ul>
               <hr/>
               <p>
                Key Topics:
               </p>
               <ul>
                <li>
                 Emulators and Simulators
                </li>
                <li>
                 XGS Emu Overview
                </li>
                <li>
                 SXSim Overview
                </li>
                <li>
                 Launching the SXSim
                </li>
                <li>
                 Breakpoints
                </li>
                <li>
                 Measuring Clock Cycles
                </li>
                <li>
                 Code Organizing
                </li>
                <li>
                 Macro Expansion
                </li>
               </ul>
              </div>
             </div>
            </div>
            <!-- Presentations -->
            <h3>
             <a href="#">
              Presentations
             </a>
            </h3>
            <div class="outer-container presentations">
             <ul>
              <li>
               Introduction to Analog Circuitry
              </li>
              <li>
               Advanced Analog Circuitry
              </li>
              <li>
               Introduction to the Digital Realm
              </li>
              <li>
               Advanced Digital Design
              </li>
              <li>
               Computer Architecture
              </li>
              <li>
               Designing Game Systems I
              </li>
              <li>
               Designing Game Systems II
              </li>
              <li>
               Game Console on a Breadboard
              </li>
              <li>
               Game Console on a PCB
              </li>
              <li>
               Hacking Demos
              </li>
              <li>
               Creating Games for the Console
              </li>
              <li>
               Emulators and Simulators
              </li>
             </ul>
            </div>
            <!-- Projects -->
            <h3>
             <a href="#">
              Projects
             </a>
            </h3>
            <div class="outer-container projects">
             <div class="two_columns">
              <ul>
               <li>
                Experiment 1:   Creating the 5 Volt Regulator
               </li>
               <li>
                Experiment 2:   Power LED
               </li>
               <li>
                Experiment 3:   Measuring with the Multimeter
               </li>
               <li>
                Experiment 4:   Voltage Divider Circuit
               </li>
               <li>
                Experiment 5:   Introduction to the Potentiometer
               </li>
               <li>
                Experiment 6:   Playing with Switches
               </li>
               <li>
                Experiment 7:   Simulation and Hardware Verification
               </li>
               <li>
                Experiment 8:   Diode Experiment
               </li>
               <li>
                Experiment 9:   Capacitor Charging and Discharging
               </li>
               <li>
                Experiment 10:  Playing with Transistors
               </li>
               <li>
                Experiment 11:  Introduction to the AND Gate
               </li>
               <li>
                Experiment 12:  Introduction to the OR Gate
               </li>
               <li>
                Experiment 13:  More Complex Circuit
               </li>
               <li>
                Experiment 14:  Playing with the XOR Gate
               </li>
               <li>
                Experiment 15:  Building a Half Bit Adder
               </li>
               <li>
                Experiment 16:  555 Timer and Binary Counter
               </li>
               <li>
                Experiment 17:  7 Segment Display
               </li>
               <li>
                Experiment 18:  LED State Machine Design
               </li>
              </ul>
             </div>
             <div class="two_columns">
              <ul>
               <li>
                Experiment 19:  Pattern Detector Design
               </li>
               <li>
                Experiment 20:  Microprocessor Simulators
               </li>
               <li>
                Experiment 21:  Intro to the SX-28
               </li>
               <li>
                Experiment 22:  SX-28 Controlling the 7 Segment LED
               </li>
               <li>
                Experiment 23:  SX Pong
               </li>
               <li>
                Experiment 24:  Digital Organ
               </li>
               <li>
                Experiment 25:  PWM Generated Sound
               </li>
               <li>
                Experiment 26:  PCM Digitized Sound
               </li>
               <li>
                Experiment 27:  Read Nintendo Controller
               </li>
               <li>
                Experiment 28:  Mono Color Bar Demo
               </li>
               <li>
                Experiment 29:  Color Bar Demo
               </li>
               <li>
                Experiment 30:  Drawing a Star Field
               </li>
               <li>
                Experiment 31:  Assembly of the Game Console onto a Breadboard
               </li>
               <li>
                Experiment 32:  Numerous Demos to Verify Working Console
               </li>
               <li>
                Experiment 33:  Assembly of the Game Console onto a PCB
               </li>
               <li>
                Experiment 34:  Numerous Demos to Verify Working Console
               </li>
               <li>
                Experiment 35:  Modifying Source Code with Hacks
               </li>
               <li>
                Experiment 36:  Programming Game Console with Final Course Game
               </li>
              </ul>
             </div>
            </div>
            <!-- Requirements -->
            <h3>
             <a href="#" id="vgc-requirements">
              Requirements
             </a>
            </h3>
            <div class="outer-container requirements">
             <ul>
              <li>
               The XGS Pico Edition Kit is required (sold separately) if you wish to build the hardware. For more details about the necessary hardware kit, and to purchase directly, visit the
               <a href="http://www.xgamestation.com/view_product.php?id=45" target="_blank">
                XGS Game Console Starter Kit 2.0 website
               </a>
               .
              </li>
             </ul>
            </div>
           </div>
           <script type="text/javascript">
            $(function() {
		$('#vgc-requirements-link').click( function( e ) {
			e.preventDefault();
			$("#console-contents").accordion( "option", "active", 3 );
			$("html,body").animate({scrollTop: $('#vgc-requirements').offset().top},200);
		});
	});
           </script>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
   <!-- Site Footer -->
   <footer>
    <div id="page-footer">
     <div style="float:right; padding:5px; font-size:0.85em; color:#aaaaaa">
      Page generated in 31ms
     </div>
     <div id="page-footer-frame">
      <div class="affiliates">
       <a href="http://www.igda.org">
        <img alt="IGDA" height="38" src="http://assets-4.gameinstitute.com/elements/images/partners/igda.png" width="100"/>
       </a>
       <a href="http://www.cengage.com/">
        <img alt="Cengage Learning" height="37" src="http://assets-1.gameinstitute.com/elements/images/partners/cengage.png" width="120"/>
       </a>
       <a href="http://www.excelsior.edu/">
        <img alt="Excelsior College" height="46" src="http://assets-2.gameinstitute.com/elements/images/partners/excelsior.png" width="120"/>
       </a>
       <a href="http://www.parallax.com/">
        <img alt="Parallax Inc." height="32" src="http://assets-3.gameinstitute.com/elements/images/partners/parallax.png" width="125"/>
       </a>
       <a href="http://www.ieee.org">
        <img alt="IEEE" height="29" src="http://assets-4.gameinstitute.com/elements/images/partners/ieee.png" width="100"/>
       </a>
      </div>
      <div class="links">
       <a href="/about.php">
        About
       </a>
       :
       <a href="/privacy.php">
        Privacy
       </a>
       :
       <a href="/agreement.php">
        User Agreement
       </a>
       :
       <a href="/contact.php">
        Contact Us
       </a>
       :
       <a href="/game-development/faq.php">
        FAQ
       </a>
      </div>
      <div class="copyright">
        2015 GameInstitute.com
      </div>
     </div>
    </div>
    <script type="text/javascript">
     setTimeout(function(){var a=document.createElement("script");
var b=document.getElementsByTagName("script")[0];
a.src=document.location.protocol+"//dnn506yrbagrg.cloudfront.net/pages/scripts/0014/0782.js?"+Math.floor(new Date().getTime()/3600000);
a.async=true;a.type="text/javascript";b.parentNode.insertBefore(a,b)}, 1);
    </script>
    <script type="text/javascript">
     /* &lt;![CDATA[ */
		var google_conversion_id = 1001957415;
		var google_custom_params = window.google_tag_params;
		var google_remarketing_only = true;
		/* ]]&gt; */
    </script>
    <script src="//www.googleadservices.com/pagead/conversion.js" type="text/javascript">
    </script>
    <noscript>
     <div style="display:inline;">
      <img alt="" height="1" src="//googleads.g.doubleclick.net/pagead/viewthroughconversion/1001957415/?value=0&amp;guid=ON&amp;script=0" style="border-style:none;" width="1"/>
     </div>
    </noscript>
    <!-- SERVER1 -->
   </footer>
  </div>
  <!-- Inline Document Scripts -->
  <script src="http://assets-1.gameinstitute.com/elements/js/tooltip.js" type="text/javascript">
  </script>
  <script type="text/javascript">
   // Global variables
	var originalOverlayTop = 0,
	    view = $( window ),
		buttonOverlay = null;

	// DOM loaded
	$(function()
	{
		// Setup all tooltips in the page
		$(".buytip").toolTip( { xOffset:-40, yOffset:-20 });
		
		// Cache references to commonly used items.
		buttonOverlay = $( "#banner .button-overlay" );
		
		// Add sliding button overlay support on desktop devices.
		if ( !isMobileDevice() )
		{
			// Get the origional position of the overlay; we will need this to compare to the view 
			// scroll for reverting back to the original display position.
			originalOverlayTop = buttonOverlay.offset().top;
			 
			// Bind to the window scroll and resize events. Remember, resizing can also change the scroll
			// of the page.
			view.bind( "scroll resize", function(){

				// Update the button overlay
				updateButtonOverlay( true );

			});
			view.bind( "resize", function(){

				// Update the button overlay so that it docks to the edge 
				// of the window on resize.
				updateButtonOverlay( false );
			});

		} // End if !isMobileDevice

		// Setup accordians.
		$( ".collapsible-outer" ).accordion({ header: "h3", autoHeight: false, active: false, collapsible: true, clearStyle: true, animated: 'easeOutQuart' });
		$( ".collapsible-inner" ).accordion({ header: "h4", autoHeight: false, active: false, collapsible: true, clearStyle: true, animated: 'easeOutQuart' });

		// Find list items representing folders and style them accordingly
		collapseLists( );

		// We only want these styles applied when javascript is enabled
		$('div.content').css('display', 'block');

	});

	function collapseLists( )
	{
		// Find list items representing folders and style them accordingly.  Also, turn them
		// into links that can expand/collapse the tree leaf.
		$('div.package-content-item .collapsible-outer li &gt; ul').each(function(i) {

			// Find this list's parent list item.
			var parent_li = $(this).parent('li');

			// Style the list item as folder.
			parent_li.addClass('collapsed');

			// Temporarily remove the list from the
			// parent list item, wrap the remaining
			// text in an anchor, then reattach it.
			var sub_ul = $(this).remove();
			parent_li.wrapInner('&lt;a/&gt;').find('a').click(function() {
				if ( parent_li.is( '.collapsed' ) )
				{
					parent_li.removeClass('collapsed');
					parent_li.addClass('expanded');
				}
				else
				{
					parent_li.removeClass('expanded');
					parent_li.addClass('collapsed');
				}
				
				// Make the anchor toggle the leaf display.
				sub_ul.toggle();
			});

			parent_li.append(sub_ul);
		});

		// Hide all lists except the outermost.
		$('div.package-content-item .collapsible-outer ul ul').hide();
	}

	function updateButtonOverlay( scroll )
	{
		// Get the current scroll of the window.
		var viewTop = view.scrollTop();
		var viewWidth = view.width();
		 
		// In response to scroll, or resize?
		if ( !scroll )
		{
			// This is a standard resize event
			if ( buttonOverlay.is( ".button-overlay-fixed" ) )
			{
				// Generate new margin for the overlay that clamps to the right edge of the screen.
				var viewWidth = view.width();
				var newMargin = 490;
				if ( (newMargin + buttonOverlay.outerWidth()) &gt; (viewWidth / 2) )
					newMargin = (viewWidth / 2) - buttonOverlay.outerWidth();

				// Clamp as necessary.
				buttonOverlay.css( {"margin-left": newMargin} );
			
			} // End if overlay should be clamped
		
		} // End if !scroll
		else
		{
			// Check to see if the view has scrolled down past the top of the original overlay
			// (or back up above it). If so, apply / remove the appropriate "fixed" class.
			if ( (viewTop &gt; originalOverlayTop) &amp;&amp; !buttonOverlay.is( ".button-overlay-fixed" ) )
			{
				// Switch to the fixed class.
				buttonOverlay.addClass( "button-overlay-fixed" );
				
				// Generate new margin for the overlay that clamps to the right edge of the screen.
				var newMargin = 490;
				if ( (newMargin + buttonOverlay.outerWidth()) &gt; (viewWidth / 2) )
					newMargin = (viewWidth / 2) - buttonOverlay.outerWidth();

				// Slide out
				buttonOverlay.css( 'margin-top','10px' );
				buttonOverlay.animate( {
					"margin-left": newMargin/*,
					"margin-top": 130*/
				}, {
					duration:	200,
					queue:		false
				});
			}
			else if ( (viewTop &lt;= originalOverlayTop) &amp;&amp; buttonOverlay.is( ".button-overlay-fixed" ) )
			{
				buttonOverlay.removeClass( "button-overlay-fixed" );
				buttonOverlay.css( 'margin-top','-18px' );
				buttonOverlay.animate( {
					"margin-left": 211/*,
					"margin-top": 10*/
				}, {
					duration:	200,
					queue:		false
				});
			}

		} // End if scroll
	}
  </script>
 </body>
</html>