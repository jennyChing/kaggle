<!DOCTYPE html>
<html lang="en">
 <head>
  <meta charset="utf-8"/>
  <title>
   OAuth 2 Simplified - Aaron Parecki
  </title>
  <meta content="Aaron Parecki" name="author"/>
  <link href="https://aaronparecki.com/webmention" rel="webmention"/>
  <link href="https://webmention.io/webmention?forward=https%3A%2F%2Faaronparecki.com%2Fpingback" rel="pingback"/>
  <!-- External Services -->
  <link href="/opensearch.xml" rel="search" title="Search aaronparecki.com" type="application/opensearchdescription+xml"/>
  <link href="https://pin13.net/mf2/?url=http%3A%2F%2Faaronparecki.com%2Farticles%2F2012%2F07%2F29%2F1%2Foauth2-simplified" rel="alternate" type="application/json"/>
  <link href="https://indieauth.com/auth" rel="authorization_endpoint"/>
  <link href="https://tokens.indieauth.com/token" rel="token_endpoint"/>
  <link href="https://aaronparecki.com/api/post" rel="micropub"/>
  <link href="https://switchboard.p3k.io/" rel="hub"/>
  <link href="http://aaronparecki.com/articles/2012/07/29/1/oauth2-simplified" rel="self"/>
  <link href="https://indieauth.com/openid" rel="openid.server"/>
  <link href="https://aaronparecki.com/" rel="openid.delegate"/>
  <link href="mailto:aaron@parecki.com" rel="me"/>
  <link href="sms:+15035678642" rel="me"/>
  <!-- CSS -->
  <link href="/bootstrap-2.2.2/css/bootstrap.min.css" rel="stylesheet"/>
  <link href="/bootstrap-2.2.2/css/bootstrap-responsive.min.css" rel="stylesheet"/>
  <link href="/css/style.css?body=1" media="all" rel="stylesheet" type="text/css"/>
  <link href="/css/font-awesome/css/font-awesome.min.css" media="all" rel="stylesheet"/>
  <link href="/css/aaronpk.css" media="all" rel="stylesheet" type="text/css"/>
  <!-- Set zoom to full-res on mobile devices by default -->
  <meta content="width=device-width,initial-scale=1" name="viewport"/>
  <!-- Website icons, see: http://indiewebcamp.com/icon -->
  <link href="/favicon.ico" rel="shortcut icon" type="image/ico"/>
  <link href="/images/aaronpk-256.jpg" rel="shortcut icon" type="image/jpg"/>
  <link href="/images/aaronpk-256.jpg" rel="apple-touch-icon-precomposed"/>
  <!-- Support adding to Android home screen -->
  <meta content="yes" name="mobile-web-app-capable"/>
  <!-- Facebook meta tags -->
  <meta content="Aaron Parecki" property="og:site_name"/>
  <meta content="11500459" property="fb:admins"/>
  <meta content="OAuth 2 Simplified" property="og:title"/>
  <meta content="article" property="og:type"/>
  <meta content="https://aaronparecki.com/articles/2012/07/29/1/oauth2-simplified" property="og:url"/>
  <meta content="https://aaronparecki.com/articles/2012/07/29/1/files/oauth-authorization-prompt.png" property="og:image"/>
  <meta content="Many services such as Facebook, Github, and Google have already deployed OAuth 2 servers, and deployed implementations win." property="og:description"/>
  <meta content="summary" name="twitter:card"/>
  <meta content="@aaronpk" name="twitter:site"/>
  <meta content="@aaronpk" name="twitter:creator"/>
  <meta content="https://aaronparecki.com/articles/2012/07/29/1/oauth2-simplified" name="twitter:url"/>
  <meta content="OAuth 2 Simplified" name="twitter:title"/>
  <meta content="Many services such as Facebook, Github, and Google have already deployed OAuth 2 servers, and deployed implementations win." name="twitter:description"/>
  <meta content="https://aaronparecki.com/articles/2012/07/29/1/files/oauth-authorization-prompt.png" name="twitter:image"/>
  <meta content="aaronparecki.com" name="twitter:domain"/>
  <script type="text/javascript">
   var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-4617305-1']);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();

    &lt;/script&gt;
    &lt;script src="/js/fragmentions.js"&gt;
  </script>
 </head>
 <body>
  <div id="fb-root">
  </div>
  <script>
   (function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&amp;appId=163993483698061";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));
  </script>
  <script>
   window.fbAsyncInit = function() {
  FB.Event.subscribe('edge.create', function(targetUrl) {
    _gaq.push(['_trackSocial', 'facebook', 'like', targetUrl]);
  });
  FB.Event.subscribe('edge.remove', function(targetUrl) {
    _gaq.push(['_trackSocial', 'facebook', 'unlike', targetUrl]);
  });
  FB.Event.subscribe('message.send', function(targetUrl) {
    _gaq.push(['_trackSocial', 'facebook', 'send', targetUrl]);
  });
};
  </script>
  <div class="search container-fluid" id="site-title">
   <div class="row-fluid">
    <ul class="top-nav" style="float: right;">
     <li>
      <a href="/articles">
       Articles
      </a>
     </li>
     <li>
      <a href="/notes">
       Notes
      </a>
     </li>
     <li>
      <a href="/metrics">
       Metrics
      </a>
     </li>
     <li>
      <a href="/contact">
       Contact
      </a>
     </li>
     <li>
      
     </li>
     <li>
      <a href="http://map.geoloqi.com/45.5,-122.7?z=11">
       6:44pm PDT
      </a>
     </li>
    </ul>
    <h1>
     <a href="/">
      Aaron Parecki
     </a>
    </h1>
   </div>
  </div>
  <div id="page">
   <div class="container-fluid container-narrow h-entry">
    <div class="row-fluid">
     <div class="span8 article">
      <div class="content has-footer">
       <h1 class="p-name">
        OAuth 2 Simplified
       </h1>
       <a class="u-url" href="https://aaronparecki.com/articles/2012/07/29/1/oauth2-simplified">
        <time class="dt-published published" datetime="2012-07-29T09:30:00-07:00">
         July 29, 2012 9:30am GMT-0700
        </time>
       </a>
       <div class="e-content">
        <!-- We don't need [a new version of OAuth 2](http://tav.espians.com/oauth-3.0-the-sane-and-simple-way-to-do-it.html). The current version provides sufficient options for developers to implement most types of applications. -->
        <p>
         Many services such as Facebook, Github, and Google have already
         <a href="http://oauth.net/2/">
          deployed OAuth 2 servers
         </a>
         , and deployed implementations win.
        </p>
        <p>
         The
         <a href="http://tools.ietf.org/html/draft-ietf-oauth-v2">
          OAuth 2 spec
         </a>
         itself leaves many decisions up to the implementor. Instead of describing all possible decisions that need to be made to successfully implement OAuth 2, this post makes decisions that are appropriate for most implementations.
        </p>
        <p>
         This post is an attempt to describe OAuth 2 in a simplified format to help developers and service providers implement the protocol.
        </p>
        <h2 id="table-of-contents">
         Table of Contents
        </h2>
        <ul>
         <li>
          <a href="#roles">
           Roles
          </a>
          : Applications, APIs and Users
         </li>
         <li>
          <a href="#creating-an-app">
           Creating an App
          </a>
         </li>
         <li>
          <a href="#authorization">
           Authorization
          </a>
          : Obtaining an access token
          <ul>
           <li>
            <a href="#web-server-apps">
             Web Server Apps
            </a>
           </li>
           <li>
            <a href="#browser-based-apps">
             Browser-Based Apps
            </a>
           </li>
           <li>
            <a href="#mobile-apps">
             Mobile Apps
            </a>
           </li>
           <li>
            <a href="#others">
             Others
            </a>
           </li>
          </ul>
         </li>
         <li>
          <a href="#making-authenticated-requests">
           Making Authenticated Requests
          </a>
         </li>
         <li>
          <a href="#differences">
           Differences from OAuth 1.0
          </a>
          <ul>
           <li>
            <a href="#authentication-and-signatures">
             Authentication and Signatures
            </a>
           </li>
           <li>
            <a href="#user-experience-and-alternative-authorization-flows">
             User Experience and Alternative Authorization Flows
            </a>
           </li>
           <li>
            <a href="#performance-at-scale">
             Performance at Scale
            </a>
           </li>
          </ul>
         </li>
         <li>
          <a href="#resources">
           Resources
          </a>
         </li>
        </ul>
        <h2 id="roles">
         Roles
        </h2>
        <h3 id="the-third-party-application-client">
         The Third-Party Application: "Client"
        </h3>
        <p>
         The client is the application that is attempting to get access to the user's account. It needs to get permission from the user before it can do so.
        </p>
        <h3 id="the-api-resource-server">
         The API: "Resource Server"
        </h3>
        <p>
         The resource server is the API server used to access the user's information.
        </p>
        <h3 id="the-user-resource-owner">
         The User: "Resource Owner"
        </h3>
        <p>
         The resource owner is the person who is giving access to some portion of their account.
        </p>
        <h2 id="creating-an-app">
         Creating an App
        </h2>
        <p>
         Before you can begin the OAuth process, you must first register a new app with the service. When registering a new app, you usually register basic information such as application name, website, a logo, etc. In addition, you must register a redirect URI to be used for redirecting users to for web server, browser-based, or mobile apps.
        </p>
        <h3 id="redirect-uris">
         Redirect URIs
        </h3>
        <p>
         The service will only redirect users to a registered URI, which helps prevent some attacks. Any HTTP redirect URIs must be protected with TLS security, so the service will only redirect to URIs beginning with "https". This prevents tokens from being intercepted during the authorization process.
        </p>
        <h3 id="client-id-and-secret">
         Client ID and Secret
        </h3>
        <p>
         After registering your app, you will receive a client ID and a client secret. The client ID is considered public information, and is used to build login URLs, or included in Javascript source code on a page. The client secret
         <strong>
          must
         </strong>
         be kept confidential. If a deployed app cannot keep the secret confidential, such as Javascript or native apps, then the secret is not used.
        </p>
        <h2 id="authorization">
         Authorization
        </h2>
        <p>
         The first step of OAuth 2 is to get authorization from the user. For browser-based or mobile apps, this is usually accomplished by displaying an interface provided by the service to the user.
        </p>
        <p>
         OAuth 2 provides several "grant types" for different use cases. The grant types defined are:
        </p>
        <ul>
         <li>
          <strong>
           Authorization Code
          </strong>
          for apps running on a
          <a href="#web-server-apps">
           web server
          </a>
         </li>
         <li>
          <strong>
           Implicit
          </strong>
          for
          <a href="#browser-based-apps">
           browser-based
          </a>
          or
          <a href="#mobile-apps">
           mobile apps
          </a>
         </li>
         <li>
          <strong>
           Password
          </strong>
          for logging in with a
          <a href="#other-app-types">
           username and password
          </a>
         </li>
         <li>
          <strong>
           Client credentials
          </strong>
          for
          <a href="#other-app-types">
           application access
          </a>
         </li>
        </ul>
        <p>
         Each use case is described in detail below.
        </p>
        <h2 id="web-server-apps">
         Web Server Apps
        </h2>
        <p>
         Web server apps are the most common type of application you encounter when dealing with OAuth servers. Web apps are written in a server-side language and run on a server where the source code of the application is not available to the public.
        </p>
        <h3 id="authorization-1">
         Authorization
        </h3>
        <p>
         Create a "Log In" link sending the user to:
        </p>
        <pre>
         <code>
          <span class="highlight" data-content="Always use HTTPS" data-placement="left" data-title="https" rel="popover">
           https
          </span>
          ://oauth2server.com/auth?
          <span class="highlight" data-content="&lt;b&gt;code&lt;/b&gt; indicates that your server expects to receive an authorization code" data-placement="top" data-title="response_type" rel="popover">
           response_type=code
          </span>
          &amp;
          <span class="highlight" data-content="The client ID you received when you first created the application" data-placement="left" data-title="client_id" rel="popover">
           client_id=CLIENT_ID
          </span>
          &amp;
          <span class="highlight" data-content="Indicates the URI to return the user to after authorization is complete" data-placement="bottom" data-title="redirect_uri" rel="popover">
           redirect_uri=REDIRECT_URI
          </span>
          &amp;
          <span class="highlight" data-content="One or more scope values indicating which parts of the user's account you wish to access" data-placement="right" data-title="scope" rel="popover">
           scope=photos
          </span>
         </code>
        </pre>
        <p>
         The user sees the authorization prompt
        </p>
        <p>
         <img alt="OAuth Authorization Prompt" src="/articles/2012/07/29/1/files/oauth-authorization-prompt.png"/>
        </p>
        <p>
         If the user clicks "Allow," the service redirects the user back to your site with an auth code
        </p>
        <pre>
         <code>
          <span class="highlight" data-content="Always use HTTPS" data-placement="left" data-title="https" rel="popover">
           https
          </span>
          ://oauth2client.com/cb
          <span class="highlight" data-content="The server returns the authorization code in the query string" data-placement="top" data-title="code" rel="popover">
           ?code=AUTH_CODE_HERE
          </span>
         </code>
        </pre>
        <p>
         Your server exchanges the auth code for an access token
        </p>
        <pre>
         <code>
          POST
          <span class="highlight" data-content="Always use HTTPS" data-placement="top" data-title="https" rel="popover">
           https
          </span>
          ://api.oauth2server.com/token
          <span class="highlight" data-content="The grant type for this flow is authorization_code" data-placement="left" data-title="grant_type" rel="popover">
           grant_type=authorization_code
          </span>
          &amp;
          <span class="highlight" data-content="This is the code you received in the query string" data-placement="left" data-title="code" rel="popover">
           code=AUTH_CODE_HERE
          </span>
          &amp;
          <span class="highlight" data-content="Must be identical to the redirect URI provided in the original link" data-placement="left" data-title="redirect_uri" rel="popover">
           redirect_uri=REDIRECT_URI
          </span>
          &amp;
          <span class="highlight" data-content="The client ID you received when you first created the application" data-placement="left" data-title="client_id" rel="popover">
           client_id=CLIENT_ID
          </span>
          &amp;
          <span class="highlight" data-content="The client secret you received when you first created the application" data-placement="left" data-title="client_secret" rel="popover">
           client_secret=CLIENT_SECRET
          </span>
         </code>
        </pre>
        <p>
         The server replies with an access token
        </p>
        <pre>
         <code>
          {
    "access_token":"RsT5OjbzRn430zqMLgV3Ia"
}
         </code>
        </pre>
        <p>
         or if there was an error
        </p>
        <pre>
         <code>
          {
    "error":"invalid_request"
}
         </code>
        </pre>
        <p>
         Security: Note that the service must require apps to pre-register their redirect URIs.
        </p>
        <h2 id="browser-based-apps">
         Browser-Based Apps
        </h2>
        <p>
         Browser-based apps run entirely in the browser after loading the source code from a web page. Since the entire source code is available to the browser, they cannot maintain the confidentiality of their client secret, so the secret is not used in this case.
        </p>
        <h3 id="authorization-2">
         Authorization
        </h3>
        <p>
         Create a "Log In" link sending the user to:
        </p>
        <pre>
         <code>
          <span class="highlight" data-content="Always use HTTPS" data-placement="left" data-title="https" rel="popover">
           https
          </span>
          ://oauth2server.com/auth?
          <span class="highlight" data-content="&lt;b&gt;token&lt;/b&gt; indicates that your server expects to receive an access token" data-placement="top" data-title="response_type" rel="popover">
           response_type=token
          </span>
          &amp;
          <span class="highlight" data-content="The client ID you received when you first created the application" data-placement="left" data-title="client_id" rel="popover">
           client_id=CLIENT_ID
          </span>
          &amp;
          <span class="highlight" data-content="Indicates the URI to return the user to after authorization is complete" data-placement="bottom" data-title="redirect_uri" rel="popover">
           redirect_uri=REDIRECT_URI
          </span>
          &amp;
          <span class="highlight" data-content="One or more scope values indicating which parts of the user's account you wish to access" data-placement="right" data-title="scope" rel="popover">
           scope=photos
          </span>
         </code>
        </pre>
        <p>
         The user sees the authorization prompt
        </p>
        <p>
         <img alt="OAuth Authorization Prompt" src="/articles/2012/07/29/1/files/oauth-authorization-prompt.png"/>
        </p>
        <p>
         If the user clicks "Allow," the service redirects the user back to your site with an access token
        </p>
        <pre>
         <code>
          <span class="highlight" data-content="Always use HTTPS" data-placement="left" data-title="https" rel="popover">
           https
          </span>
          ://oauth2client.com/cb
          <span class="highlight" data-content="The server returns the access token in the URI fragment (after the #)" data-placement="top" data-title="token" rel="popover">
           #token=ACCESS_TOKEN
          </span>
         </code>
        </pre>
        <p>
         That's it, there's no other steps! At this point, some Javascript code can pull out the access token from the fragment (the part after the #) and begin making API requests.
        </p>
        <p>
         If there was an error, you will instead receive an error code in the URI fragment, such as:
        </p>
        <pre>
         <code>
          <span class="highlight" data-content="Always use HTTPS" data-placement="left" data-title="https" rel="popover">
           https
          </span>
          ://oauth2client.com/cb
          <span class="highlight" data-content="The server returns an error code in the URI fragment" data-placement="top" data-title="error" rel="popover">
           #error=access_denied
          </span>
         </code>
        </pre>
        <h2 id="mobile-apps">
         Mobile Apps
        </h2>
        <p>
         Like browser-based apps, mobile apps also cannot maintain the confidentiality of their client secret. Because of this, mobile apps must also use an OAuth flow that does not require a client secret.
        </p>
        <h3 id="authorization-3">
         Authorization
        </h3>
        <p>
         Create a "Log in" button sending the user to either the native app of the service on the phone, or a mobile web page for the service. On iPhone, apps can register a custom URI protocol such as "facebook://" so the native Facebook app is launched whenever a URL with that protocol is visited. On Android, apps can register URL matching patterns which will launch the native app if a URL matching the pattern is visited.
        </p>
        <h4 id="iphone">
         iPhone
        </h4>
        <p>
         If the user has the native Facebook app installed, direct them to the following URL:
        </p>
        <pre>
         <code>
          fbauth2://authorize?
          <span class="highlight" data-content="&lt;b&gt;token&lt;/b&gt; indicates that your server expects to receive an access token" data-placement="top" data-title="response_type" rel="popover">
           response_type=token
          </span>
          &amp;
          <span class="highlight" data-content="The client ID you received when you first created the application" data-placement="top" data-title="client_id" rel="popover">
           client_id=CLIENT_ID
          </span>
          &amp;
          <span class="highlight" data-content="Indicates the URI to return the user to after authorization is complete, such as fb00000000://authorize" data-placement="bottom" data-title="redirect_uri" rel="popover">
           redirect_uri=REDIRECT_URI
          </span>
          &amp;
          <span class="highlight" data-content="One or more scope values indicating which parts of the user's account you wish to access" data-placement="bottom" data-title="scope" rel="popover">
           scope=email
          </span>
         </code>
        </pre>
        <p>
         In this case, your redirect URI looks like
         <code>
          fb00000000://authorize
         </code>
         where the protocol is "fb" followed by your app's client ID. This means your app must be registered to open URLs with that protocol.
        </p>
        <h4 id="android-or-others">
         Android or Others
        </h4>
        <p>
         If the user does not have the Facebook iPhone app, or for other devices, you can launch a mobile browser to the standard web authorization URL.
        </p>
        <pre>
         <code>
          <span class="highlight" data-content="Always use HTTPS" data-placement="top" data-title="https" rel="popover">
           https
          </span>
          ://facebook.com/dialog/oauth?
          <span class="highlight" data-content="&lt;b&gt;token&lt;/b&gt; indicates that your server expects to receive an access token" data-placement="top" data-title="response_type" rel="popover">
           response_type=token
          </span>
          &amp;
          <span class="highlight" data-content="The client ID you received when you first created the application" data-placement="left" data-title="client_id" rel="popover">
           client_id=CLIENT_ID
          </span>
          &amp;
          <span class="highlight" data-content="Indicates the URI to return the user to after authorization is complete, such as fb00000000://authorize" data-placement="bottom" data-title="redirect_uri" rel="popover">
           redirect_uri=REDIRECT_URI
          </span>
          &amp;
          <span class="highlight" data-content="One or more scope values indicating which parts of the user's account you wish to access" data-placement="right" data-title="scope" rel="popover">
           scope=email
          </span>
         </code>
        </pre>
        <p>
         The user will see the authorization prompt
        </p>
        <p>
         <img alt="Facebook Authorization Prompt" src="/articles/2012/07/29/1/files/everyday-city-auth.png"/>
        </p>
        <p>
         After clicking "Okay", the user will be redirected back to your application by a URL like
        </p>
        <pre>
         <code>
          fb00000000://authorize#token=ACCESS_TOKEN
         </code>
        </pre>
        <p>
         Your mobile application can parse out the access token from the URI and begin using it to make API requests.
        </p>
        <h2 id="others">
         Others
        </h2>
        <h3 id="password">
         Password
        </h3>
        <p>
         OAuth 2 also provides a "password" grant type which can be used to exchange a username and password for an access token directly. Since this obviously requires the application to collect the user's password, it should only be used by apps created by the service itself. For example, the native Twitter app could use this grant type to log in on mobile or desktop apps.
        </p>
        <p>
         To use the password grant type, simply make a POST request like the following:
        </p>
        <pre>
         <code>
          POST
          <span class="highlight" data-content="Always use HTTPS" data-placement="top" data-title="https" rel="popover">
           https
          </span>
          ://api.oauth2server.com/token
          <span class="highlight" data-content="The grant type for this flow is password" data-placement="left" data-title="grant_type" rel="popover">
           grant_type=password
          </span>
          &amp;
          <span class="highlight" data-content="The user's username" data-placement="left" data-title="username" rel="popover">
           username=USERNAME
          </span>
          &amp;
          <span class="highlight" data-content="The user's password" data-placement="left" data-title="password" rel="popover">
           password=PASSWORD
          </span>
          &amp;
          <span class="highlight" data-content="The client ID you received when you first created the application" data-placement="left" data-title="client_id" rel="popover">
           client_id=CLIENT_ID
          </span>
         </code>
        </pre>
        <p>
         The server replies with an access token in the same format as the other grant types.
        </p>
        <p>
         Note, the client secret is not included here under the assumption that most of the use cases for password grants will be mobile or desktop apps, where the secret cannot be protected.
        </p>
        <h3 id="application-access">
         Application access
        </h3>
        <p>
         In some cases, applications may wish to update their own information such as their website URL or application icon, or they may wish to get statistics about the users of the app. In this case, applications need a way to get an access token for their own account, outside the context of any specific user. OAuth provides the client_credentials grant type for this purpose.
        </p>
        <p>
         To use the client credentials grant type, make a POST request like the following:
        </p>
        <pre>
         <code>
          POST
          <span class="highlight" data-content="Always use HTTPS" data-placement="top" data-title="https" rel="popover">
           https
          </span>
          ://api.oauth2server.com/token
          <span class="highlight" data-content="The grant type for this flow is client_credentials" data-placement="left" data-title="grant_type" rel="popover">
           grant_type=client_credentials
          </span>
          &amp;
          <span class="highlight" data-content="The client ID you received when you first created the application" data-placement="left" data-title="client_id" rel="popover">
           client_id=CLIENT_ID
          </span>
          &amp;
          <span class="highlight" data-content="The client secret you received when you first created the application" data-placement="left" data-title="client_secret" rel="popover">
           client_secret=CLIENT_SECRET
          </span>
         </code>
        </pre>
        <p>
         You will get an access token response in the same format as the other grant types.
        </p>
        <h2 id="making-authenticated-requests">
         Making Authenticated Requests
        </h2>
        <p>
         Now that you have an access token, you can make requests to the API. You can quickly make an API request using cURL as follows:
        </p>
        <pre>
         <code>
          curl -H "Authorization: Bearer RsT5OjbzRn430zqMLgV3Ia" \
          <span class="highlight" data-content="Always use HTTPS" data-placement="left" data-title="https" rel="popover">
           https
          </span>
          ://api.oauth2server.com/1/me
         </code>
        </pre>
        <p>
         That's it! Make sure you always send requests over HTTPS and never ignore invalid certificates. HTTPS is the only thing protecting requests from being intercepted or modified.
        </p>
        <h2 id="differences">
         Differences from OAuth 1.0
        </h2>
        <p>
         OAuth 1.0 was largely based on existing proprietary protocols such as Flickr's "FlickrAuth" and Google's "AuthSub". The result represented the best solution based on actual implementation experience. However, after several years of working with the protocol, the community learned enough to rethink and improve the protocol in three main areas where OAuth 1.0 proved limited or confusing:
        </p>
        <h3 id="authentication-and-signatures">
         Authentication and Signatures
        </h3>
        <p>
         The majority of developers' confusion and annoyance with OAuth 1.0 was due to the cryptographic requirements of signing requests with the client ID and secret. Losing the ability to easily copy and paste cURL examples made it much more difficult to get started quickly.
        </p>
        <p>
         OAuth 2 recognizes this difficulty and replaces signatures with requiring HTTPS for all communications between browsers, clients and the API.
        </p>
        <h3 id="user-experience-and-alternative-authorization-flows">
         User Experience and Alternative Authorization Flows
        </h3>
        <p>
         OAuth includes two main parts, obtaining an access token, and using the access token to make requests. OAuth 1.0 works best for desktop web browsers, but fails to provide a good user experience for native desktop and mobile apps or alternative devices such as game or TV consoles.
        </p>
        <p>
         OAuth 2 supports a better user experience for native applications, and supports extending the protocol to provide compatibility with future device requirements.
        </p>
        <h3 id="performance-at-scale">
         Performance at Scale
        </h3>
        <p>
         As larger providers started to use OAuth 1.0, the community quickly realized the protocol does not scale well. Many steps require state management and temporary credentials, which require shared storage and are difficult to synchronize across data centers. OAuth 1.0 also requires that the API server has access to the application's ID and secret, which often breaks the architecture of most large providers where the authorization server and API servers are completely separate.
        </p>
        <p>
         OAuth 2 supports the separation of the roles of obtaining user authorization and handling API calls. Larger providers needing this scalability are free to implement it as such, and smaller providers can use the same server for both roles if they wish.
        </p>
        <h2 id="resources">
         Resources
        </h2>
        <p>
         Credit: Some content adapted from
         <a href="http://hueniverse.com">
          hueniverse.com
         </a>
         .
        </p>
        <p>
         More information is available on
         <a href="http://oauth.net">
          OAuth.net
         </a>
        </p>
        <p>
         You can pre-order my book from O'Reilly:
         <a href="http://shop.oreilly.com/product/0636920023531.do">
          OAuth 2: The Definitive Guide
         </a>
        </p>
       </div>
       <!-- e-content -->
       <div class="meta">
        <ul>
         <li>
          <a class="u-url" href="https://aaronparecki.com/articles/2012/07/29/1/oauth2-simplified">
           <time class="date dt-published" datetime="2012-07-29T09:30:00-07:00">
            July 29, 2012 9:30am
           </time>
          </a>
          GMT-0700
         </li>
         <li>
          <a href="/articles/2012/07/29/1/oauth2-simplified#comments">
           <i class="fa fa-comment-o">
           </i>
           3 comments
          </a>
         </li>
         <li>
          <a href="/articles/2012/07/29/1/oauth2-simplified#comments">
           <i class="fa fa-file-text-o">
           </i>
           23 mentions
          </a>
         </li>
        </ul>
        <div class="clear">
        </div>
       </div>
      </div>
      <!-- content -->
      <div class="note-footer">
       <div class="external-note references">
        <ul>
         <li>
          Have you written a response to this? Let me know the URL:
          <form action="https://aaronparecki.com/webmention" method="post">
           <input class="span6" name="source" style="margin-bottom: 0" type="text"/>
           <input class="btn btn-small" type="submit" value="Send Webmention"/>
           <input name="target" type="hidden" value="https://aaronparecki.com/articles/2012/07/29/1/oauth2-simplified"/>
           <input name="via" type="hidden" value="browser"/>
          </form>
         </li>
         <a name="comments">
         </a>
         <li class="p-comment h-cite" data-url="https://brid-gy.appspot.com/comment/twitter/aaronpk/475693384091598848/475693384091598848" id="external_https_brid-gy_appspot_com_comment_twitter_aaronpk_475693384091598848_475693384091598848">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="Avdi Grimm" class="photo logo u-photo" src="https://pbs.twimg.com/profile_images/436586539229777920/4NQoTOEN.png" width="48"/>
            </div>
            <a class="u-url" href="http://avdi.org">
             avdi.org
            </a>
            <a class="p-name fn value name" href="http://avdi.org">
             Avdi Grimm
            </a>
           </div>
           <div class="quote-text">
            <div class="e-content p-name">
             As guides to OAuth go, this one doesn't suck pocket.co/sckvF
            </div>
           </div>
           <a class="u-url" href="https://twitter.com/avdi/status/475693384091598848">
            <time class="date dt-published" datetime="2014-06-08T17:38:35+00:00">
             June 8, 2014 5:38pm GMT+0000
            </time>
           </a>
          </div>
         </li>
         <li class="p-comment h-cite" data-url="https://brid-gy.appspot.com/comment/twitter/aaronpk/475695395310690304/475695395310690304" id="external_https_brid-gy_appspot_com_comment_twitter_aaronpk_475695395310690304_475695395310690304">
          <div class="inner">
           <div class="minicard h-card vcard author p-author twitter">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <i class="fa fa-twitter">
             </i>
             <img alt="David Montesdeoca" class="photo logo u-photo" src="https://pbs.twimg.com/profile_images/467328564174401536/CIbu_zH1.jpeg" width="48"/>
            </div>
            <a class="u-url" href="https://twitter.com/backpackerhh">
             twitter.com/backpackerhh
            </a>
            <a class="p-name fn value name" href="https://twitter.com/backpackerhh">
             David Montesdeoca
            </a>
           </div>
           <div class="quote-text">
            <div class="e-content p-name">
             <a href="/tag/oauth">
              #
              <span class="p-category">
               OAuth
              </span>
             </a>
             2 Simplified: aaronparecki.com/articles/2012/
            </div>
           </div>
           <a class="u-url" href="https://twitter.com/backpackerhh/status/475695395310690304">
            <time class="date dt-published" datetime="2014-06-08T17:46:34+00:00">
             June 8, 2014 5:46pm GMT+0000
            </time>
           </a>
          </div>
         </li>
         <li class="p-comment h-cite" data-url="https://brid-gy.appspot.com/comment/twitter/aaronpk/507204150610763776/507204928742252544" id="external_https_brid-gy_appspot_com_comment_twitter_aaronpk_507204150610763776_507204928742252544">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="channa ly" class="photo logo u-photo" src="https://abs.twimg.com/sticky/default_profile_images/default_profile_1.png" width="48"/>
            </div>
            <a class="u-url" href="http://www.channaly.info">
             www.channaly.info
            </a>
            <a class="p-name fn value name" href="http://www.channaly.info">
             channa ly
            </a>
           </div>
           <div class="quote-text">
            <div class="e-content p-name">
             <a href="http://aaronparecki.com">
              @aaronpk
             </a>
             yes sure. it is really helpful thanks for sharing that.
            </div>
           </div>
           <a class="u-url" href="https://twitter.com/channaly/status/507204928742252544">
            <time class="date dt-published" datetime="2014-09-03T16:34:13+00:00">
             September 3, 2014 4:34pm GMT+0000
            </time>
           </a>
          </div>
         </li>
         <a name="mentions">
         </a>
         <h4>
          Other Mentions
         </h4>
         <li class="p-comment h-cite" data-url="http://blogmobile.itude.com/2014/04/08/checklist-for-building-an-api/" id="external_http_blogmobile_itude_com_2014_04_08_checklist-for-building-an-api_">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="Posted by cristanmeijer" class="photo logo u-photo" src="/images/nouns/user.svg" width="48"/>
            </div>
            <a class="u-url" href="http://blogmobile.itude.com/author/cristanmeijer/">
             blogmobile.itude.com/author/cristanmeijer
            </a>
            <a class="p-name fn value name" href="http://blogmobile.itude.com/author/cristanmeijer/">
             Posted by cristanmeijer
            </a>
           </div>
           <div class="quote-text">
            <div class="p-name">
             <a href="http://blogmobile.itude.com/2014/04/08/checklist-for-building-an-api/">
              Checklist for building an API	
	
		Apr 8
	

	
		Posted by cristanmeijer
	

	
		The API Strategy &amp; Practice Conference in Amsterdam was a very interesting look into the world of APIs. I was mostly interested in what building an API involves, and Id like to share what Ive learned in this regard. Building an API should consist of the following steps: Design &gt; Mock &gt; Test &gt; Build &gt; Publish &gt; Operate &gt; Engage. Lets take a look at each of them:
Design
The first thing to do is something which is often ignored: you really need to design your API before you start building it. Youll need to think about what functions you need, what the parameters are going to be and what the responses will be. This information should be described in a structured way and youll need to share this information with your API consumers so you can receive feedback before you actually start developing.
Of course you can create a word document to specify your API, but there are better ways to do so. The most well known ways are Swagger, API blueprint and RAML. I have chosen RAML because of its excellent tools support, most notably, the very nice API designer.

The advantage of specifying your API in a structured way becomes evident very early: after specifying your API, you can see a nice list of your calls, and you can even launch a mock server with 1 click off a button where you can call your own defined calls and get a (mock) response back.
After youve completed your design, you should send this documentation to your API consumers to get early feedback and change your specification accordingly.
While designing your API, you should consider the following:
Your API should be platform agnostic
A good API can be powered by any technology. So dont use SQL queries as GET parameters if your backend is powered by SQL and dont return package names if your backend is powered by Java.
Security
You need to think about security up front. Using OAuth 2.0 is a good choice (see here for a nice, simple explanation), but you can also pick SAML for example.
Versioning
You need to think about versioning upfront in order to prevent issues in the future. You really dont to have calls named EXTCallName, EXTCallNameV2, EXTCallNameV3 (Ive seen it happen).
Mock
When you have specified your API you should be able to generate a mock server in a matter of minutes. In case of RAML, youd do this by using the online tool. You can also use SoapUI where you can create a pretty advanced mocking service with support for multiple responses per call. Another way is to create a project in Mule Studio with APIkit installed and generate your flows with your .raml file. The advantage here is that you can gradually change each call to be an actually working call in stead of giving a mock response.
You should use this mockup for testing (see next step). You can also use this mock to allow your API consumers to already start using your API before development on it has even started.
An overview of the calls, with the Try it functionality to get a mock response.
Test
This mock server should also be tested. You can use SoapUI to do so. You can do this to be sure you get the correct responses. The best thing about it, is that you can use the same test later to test whether your actual backend still confirms to the same specs.
Build
How to build your API depends entirely on the platform that you choose. For me, 2 things have worked out really well in the past: Grails and Mule Studio.
Grails
Grails makes it really, really easy to make a simple CRUD backend. The main advantage is that a lot of features you need for creating a backend are created for you. For persistence: if you define a domain class, youll get free save, get, find and delete methods. Likewise: adding a maintenance screen for your domain is 1 line of code. Generating/parsing XML or JSON is 1 line of code as well. Id recommend using Groovy/Grails Tools Suite to start developing.
Mule
Mule on the other hand is designed for making integration work easy. For example: you can make an HTTP backend which queries your database, whose result then transformed to JSON, an order is entered in SalesForce and your sales employee gets an SMS message. Hell, it even makes sense to plug in the grails backend you just made if you want to integrate it with other systems or want to add things like OAuth support to it. You can start developing for Mule with Mule studio.
Code generation
You can use the specification for your API which you create in step 1 to get you started while developing. You can use this in Mule studio to generate a project for you, but also code generation (for example for JAX-RS) exists.
Test
After youve completed one of your calls, you should use the same tests you created earlier for you mock backend and try it on your new API and see if they still validate. You might also want to test things like the performance of your code.
Operate
When your API is live, youll need API management for the following:
Contract enforcement (some clients should be able to do more than others)
Managing security and managing security policies
Usage monitoring (how often is your API used? Which are the most used calls? Who is using my API?)
Monitoring of quality (what is the average response time for my API? Which calls are the slowest? / Do I get any crashes?)
Engage
Creating an API portal
Youll want to engage with other developers if you want your API to actually be used. The most important thing (after having a good API) is to have a developer portal with good documentation (you should be able to generate all the technical specification from the design you made in step 1).
Youll also need a way for to test your API. Please do your best to restrict potential users as little as possible. For example: if your API isnt free, make sure your users can still try your API without paying. Also, make sure users wont experience rate limitations while testing your API.
Another way to make testing your API as easy as possible: make sure your API can be tested in your API portal, so your users wont need an IDE to get a good feel for your API. In the screen youll create, you might want to consider not just showing the raw data returned from your backend, but also showing this data in a visual way. For example: when you return a geolocation with data, you could present this data on a map.
CitySDK is a good example of how you can allow potential developers to get a good feel for the SDK in an accessable way.
You dont need to create your API portal yourself: there are several services on the internet who help you with just that.
Marketing
Even if you have a fantastic API with a great developer portal, this doesnt mean that developers are actually going to use your API: youll need to market it. In case your API is an internal API, a simple e-mail will probably do, but in other cases, you really need to think about how you are going to reach developers for your API. You might want to start with a small amount (e.g. three), before you open up your API to the world.
Youll also need to think about who your target audience is. According to a research by developereconomics.com, only 50% of API users are using the API in order to earn money. Therefore, you might want to market this non-professional audience as well.
Interact with your developers
Think of how you are going to interact with your developers. You can let them provide feedback, rate and discuss calls add a general place for discussions, etc.
Share this:

	Related
             </a>
            </div>
           </div>
           <a class="u-url" href="http://blogmobile.itude.com/2014/04/08/checklist-for-building-an-api/">
            <span class="date">
             permalink
            </span>
           </a>
          </div>
         </li>
         <li class="p-comment h-cite" data-url="http://chenlu4.sinaapp.com/?p=250" id="external_http_chenlu4_sinaapp_com_?p=250">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="chenlu" class="photo logo u-photo" src="/images/nouns/user.svg" width="48"/>
            </div>
            <a class="u-url" href="http://chenlu4.sinaapp.com/?author=1">
             chenlu4.sinaapp.com/?author=1
            </a>
            <a class="p-name fn value name" href="http://chenlu4.sinaapp.com/?author=1">
             chenlu
            </a>
           </div>
           <div class="quote-text">
            <a href="http://chenlu4.sinaapp.com/?p=250">
             http://chenlu4.sinaapp.com/?p=250
            </a>
           </div>
           <a class="u-url" href="http://chenlu4.sinaapp.com/?p=250">
            <span class="date">
             permalink
            </span>
           </a>
          </div>
         </li>
         <li class="p-comment h-cite" data-url="http://www.kaleidos.net/blog/295/stateless-authentication-with-api-rest/" id="external_http_www_kaleidos_net_blog_295_stateless-authentication-with-api-rest_">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="" class="photo logo u-photo" src="/images/nouns/user.svg" width="48"/>
            </div>
            <a class="u-url" href="http://www.kaleidos.net">
             www.kaleidos.net
            </a>
            <a class="p-name fn value name" href="http://www.kaleidos.net">
            </a>
           </div>
           <div class="quote-text">
            <div class="p-name">
             <a href="http://www.kaleidos.net/blog/295/stateless-authentication-with-api-rest/">
              Stateless Authentication with api rest
             </a>
            </div>
           </div>
           <a class="u-url" href="http://www.kaleidos.net/blog/295/stateless-authentication-with-api-rest/">
            <span class="date">
             permalink
            </span>
           </a>
          </div>
         </li>
         <li class="p-comment h-cite" data-url="http://aaronparecki.com/replies/2014/06/25/5/" id="external_http_aaronparecki_com_replies_2014_06_25_5_">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="Aaron Parecki" class="photo logo u-photo" src="https://aaronparecki.com/images/aaronpk.png" width="48"/>
            </div>
            <a class="u-url" href="http://aaronparecki.com/">
             aaronparecki.com
            </a>
            <a class="p-name fn value name" href="http://aaronparecki.com/">
             Aaron Parecki
            </a>
           </div>
           <div class="quote-text">
            <a href="http://aaronparecki.com/replies/2014/06/25/5/">
             http://aaronparecki.com/replies/2014/06/25/5/
            </a>
           </div>
           <a class="u-url" href="http://aaronparecki.com/replies/2014/06/25/5/">
            <time class="date dt-published" datetime="2014-06-25T13:37:29-07:00">
             June 25, 2014 1:37pm GMT-0700
            </time>
           </a>
          </div>
         </li>
         <li class="p-comment h-cite" data-url="http://www.zescience.com/?p=4937" id="external_http_www_zescience_com_?p=4937">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="zero" class="photo logo u-photo" src="/images/nouns/user.svg" width="48"/>
            </div>
            <a class="u-url" href="http://www.zescience.com/?author=1">
             www.zescience.com/?author=1
            </a>
            <a class="p-name fn value name" href="http://www.zescience.com/?author=1">
             zero
            </a>
           </div>
           <div class="quote-text">
            <div class="p-name">
             <a href="http://www.zescience.com/?p=4937">
              As an Oauth2 service provider, how do I validate which app is passing me the user token?
             </a>
            </div>
           </div>
           <a class="u-url" href="http://www.zescience.com/?p=4937">
            <span class="date">
             permalink
            </span>
           </a>
          </div>
         </li>
         <li class="h-cite nocontent" id="external_http_www_pearltrees_com_gandra404_oauth_id12376161_item122338697">
          <a href="http://www.pearltrees.com/gandra404/oauth/id12376161/item122338697">
           www.pearltrees.com/gandra404/oauth/id12376161/item122338697
          </a>
          <a href="http://www.pearltrees.com/gandra404/oauth/id12376161/item122338697">
           <time class="date dt-published" datetime="2014-08-20T15:37:18+00:00">
            August 20, 2014 3:37pm UTC
           </time>
          </a>
         </li>
         <li class="p-comment h-cite" data-url="http://aaronparecki.com/replies/2014/09/03/1/oauth2" id="external_http_aaronparecki_com_replies_2014_09_03_1_oauth2">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="Aaron Parecki" class="photo logo u-photo" src="https://aaronparecki.com/images/aaronpk.png" width="48"/>
            </div>
            <a class="u-url" href="http://aaronparecki.com/">
             aaronparecki.com
            </a>
            <a class="p-name fn value name" href="http://aaronparecki.com/">
             Aaron Parecki
            </a>
           </div>
           <div class="quote-text">
            <a href="http://aaronparecki.com/replies/2014/09/03/1/oauth2">
             http://aaronparecki.com/replies/2014/09/03/1/oauth2
            </a>
           </div>
           <a class="u-url" href="http://aaronparecki.com/replies/2014/09/03/1/oauth2">
            <time class="date dt-published" datetime="2014-09-03T09:31:07-07:00">
             September 3, 2014 9:31am GMT-0700
            </time>
           </a>
          </div>
         </li>
         <li class="p-comment h-cite" data-url="http://doanswers.biz/abelson/2014/09/08/fontface-not-operative-on-server-though-on-localhost/" id="external_http_doanswers_biz_abelson_2014_09_08_fontface-not-operative-on-server-though-on-localhost_">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="admin" class="photo logo u-photo" src="/images/nouns/user.svg" width="48"/>
            </div>
            <a class="u-url" href="http://doanswers.biz/abelson/author/admin/">
             doanswers.biz/abelson/author/admin
            </a>
            <a class="p-name fn value name" href="http://doanswers.biz/abelson/author/admin/">
             admin
            </a>
           </div>
           <div class="quote-text">
            <div class="p-name">
             <a href="http://doanswers.biz/abelson/2014/09/08/fontface-not-operative-on-server-though-on-localhost/">
              @fontface not operative on server though on localhost
             </a>
            </div>
           </div>
           <a class="u-url" href="http://doanswers.biz/abelson/2014/09/08/fontface-not-operative-on-server-though-on-localhost/">
            <span class="date">
             permalink
            </span>
           </a>
          </div>
         </li>
         <li class="p-comment h-cite" data-url="http://curiouser.cheshireeng.com/2014/09/10/digression-using-oauth-2-0-at-wordpress-com/" id="external_http_curiouser_cheshireeng_com_2014_09_10_digression-using-oauth-2-0-at-wordpress-com_">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="rberteig" class="photo logo u-photo" src="/images/nouns/user.svg" width="48"/>
            </div>
            <a class="u-url" href="http://curiouser.cheshireeng.com/author/rberteig/">
             curiouser.cheshireeng.com/author/rberteig
            </a>
            <a class="p-name fn value name" href="http://curiouser.cheshireeng.com/author/rberteig/">
             rberteig
            </a>
           </div>
           <div class="quote-text">
            <div class="p-name">
             <a href="http://curiouser.cheshireeng.com/2014/09/10/digression-using-oauth-2-0-at-wordpress-com/">
              Digression: Using OAuth 2.0 at WordPress.com					
			10
			Wednesday
			Sep 2014
		
	
	
		
			Posted  by rberteig in Technologies		
		
			 Leave a comment
		
	
	
			
				Tagsaccess token, OAuth, OAuth2, security, WordPress, WordPress.com	

		
			This is a digression from a series of posts discussing using a tool written in Lua to publishing posts on a WordPress blog.
Part 1 showed how to use XML-RPC and wp.newPost 
Part 2 added file reading to make a minimal working utility.
Part 3 added amenities and made the utility useful.
Part 4 will switch to the REST API and OAuth
But before we can really get to Part 4, we need to delve into some of the mysteries of OAuth since it is the mechanism used by WordPress to get around many of the security issues that are implicit in using saved usernames and passwords.
Unfortunately, the improved security of OAuth comes at the price of ease of use. The old XML-RPC API generally required that a username and password be supplied in the body of each request. If the requests were not handled over a secure connection (using an https: URL) then your password is available to anyone who is listening.
The solution that is becoming the accepted standard practice is to replace passwords with security tokens that in effect prove to the server that the client is authorized to make the request. While tokens could be stolen, their utility is limited because they are useful only for conversations with a specific server, and often about a specific resourse. On WordPress.com, tokens are generally limited to a single blog accessed by a single user, for example.
OAuth at WordPress.com is described by their OAuth2 Authentication page. Unfortunately that page is fairly opaque on a first reading. This post will attempt to clarify that document by attempting relate it to our WP CLI utilities.
Although I have only tested against WordPress.com hosted blogs while writing this post, everything should also work with self-hosted blogs that have the Jetpack plugin installed and correctly configured.
OAuth Overview
OAuth replaces a username and password that must be either entered manually or stored locally so that it is available every time you run the script, and which are transmitted to the server on every request. Entering a password manually swiftly becomes annoying, and the user will be tempted to make the password simpler and easier to type, which will reduce its strength and make the users blogs less secure. Which hints at the other problem. For users of the powerful, free, and popular WordPress.com blog hosting service, your are encouraged to have a single account that can own and be authorized (at various levels) at multiple blogs. So by requiring that the user tell our tool a username and password and allowing the tool to store that on her PC, we are actually letting the tool store information that potentially provides access to every blog the user can update rather than just the one she wants to post to.
OAuth is different. With OAuth, the tool asks the blog for permission to operate, and the user of the blog has to log in to WordPress and grant that permission. For each individual blog they want to update. If they change their mind, they can revoke that permission and the tool will no longer be able to make updates.
The tool itself need never know or store the password. In fact, it would be a bad idea for it even ask for the password. The tool is expected to launch the system web browser to perform the authorization, which will provide the tool a token it can store as evidence that the user authorized its use.
If youve used the mobile apps for facebook, flickr, or even WordPress, youve already seen OAuth in practice.
From a developers perspective, the work related to supporting OAuth in a client application can be roughly divided into tasks that must be done as part of writing the application, and tasks the application does when the user is using it.
Development Tasks
Understand OAuth Client Workflow
Warning: From a security perspective, I am just some guy writing a blog on the internet. Please take the time to review security decisions for your own application, and please do hire security experts if you are handling any data more private or valuable than yesterdays lunch menu. Furthermore, I may be wrong and security is an area where overconfidence is very prone to lead to lapses.
Due to the history of the OAuth specification itself, the current release of the specification is best thought of as a security framework. It provides a point of reference for terms of art and sequences of actions by the various interested parts of the system. Unfortunately it leaves a lot of decisions open to the implementation and there are likely ways to produce a fully compliant system that is less secure than just using passwords.
A key requirement is that secure connections be used for all transactions, with the corollary that all relevant certificates must be valid. In other words, you should always use https:, not http:, and your implementation must be able to warn you about invalid certificates.
OAuth names three distinct parties to the security negotiation: The client application accesses a resource owned by a service through an API of the resource server.
There are some pre-conditions: The client is known to the service through a registration process when it was developed. The user is known to the service by some form of user registration and account process.
In the workflow we expect to use, the user will ask the service to authorize the client. The client can then use that authorization to act as the user until it expires.
Create and Register an Application
Before our client application can use OAuth, it must be known to the service, that is WordPress.com. To do that we need to create and register an application with WordPress. Once completed, this process gives us the information that must be coded in the application to identify our tool to WP. Naturally, you need to log in to your WordPress account to do this.
Note that all OAuth services require this step, and even if an application is designed to operate with more than one service, this step must be performed by the developer once for each service and the resulting service IDs must all be stored for use with their matching service providers.
In that form at WordPress.com, you provide a name and description of the application that will be shown to users. You need to provide URLs for a website for the application, and where to redirect after authorization is complete.
For this application make the Type be Native and not Web since that better describes the usage pattern of a CLI tool.
Once youve filled in the form, and then added additional information in the second page, you will be issued your OAuth2 identifiers for the application.
Warning: Keep the Client Secret string secret. With that string, someone can impersonate your application, and that could be bad.
This is the origin of the distinction between web and native application. Native applications are assumed to be accessible by an attacker for reverse engineering or even fully open source. So OAuth makes it possible to get an access token without needing to store the Client Secret in the client application at all. This is obviously the path we should take.
At any time you can view a list of your applications where you can access each to manage its settings, regenerate a lost secret, and even learn some statistics about its use in the wild.
Application Tasks
Naturally we dont want just anybody making posts to our blog. That is where the OAuth mechanism comes in to play.
Given that we have created and registered an application already, we now need to use the applications OAuth identifiers to retrieve a token which will allow us to operate on the blog. This is a complex process behind the scenes, but it boils down to two major steps:
Get an Authorization Grant: our Client ID and Redirect URI are exchanged for an authorization token. The user logs in to the authorization server (wordpress.com in this case) and affirms our access level as part of this process.
Get an Access Token: our Client ID, Secret and authorization token are exchanged for an access token without user intervention.
For a native application workflow, these two steps are folded into one from our perspective. We exchange our Client ID and Redirect URI directly for an access token that has a short lifetime, but the user is required to take action at the WordPress.com website to allow this exchange.
We store the access token for use when actually making posts or taking other actions that require authentication. The token will expire, so we will also store enough information to enable us to ask the user to fix that when it happens, or for some styles of authorization, enough information for us to fix it without the users intervention.
Authorization Grant
The client asks the user for permission. This is done via a system provided web browser so that the user can log in to WordPress.com without fear that the client application is directly involved.
To do this, the client asks the system to fetch an url from the authorization endpoint. The URL to fetch is long due to the number of required parameters, so Ive broken it up for display here.


https://public-api.wordpress.com/oauth2/authorize

  ?client_id=...
  &amp;redirect_uri=...
  &amp;response_type=...
  &amp;blog=...

The client_id and redirect_uri must match information in your applications description as registered with wordpress.com. The client ID was assigned when you created the app, and the redirect URI is specified by you as part of the app profile.
The blog is optional, and can be used to suggest that the app wants to be used with a particular blog. If not supplied, the user will be given a list of their blogs and be asked to select which one the authorization will apply to. Either way, the delivered token will permit access to only that one blog.
The response_type is either code or token, but for a native application the recommended type is token which causes WordPress.com to do what they call Implicit OAuth and directly issue an access token. The code response is an authorization token that must be exchanged along with the Client Secret to get the access token. Since that would require storing the Client Secret, that is not recommended for native applications.
The first page the user sees describes the application that is requesting access, using fields you filled out when you registered your application. You can see that here for token and here for code for the version of the WP Client Tools application that I registered for myself.
If the user wants to see what applications they have authorized and possibly revoke one, they can do that at the Security section of their personal account settings.
Both of the authorize URLs Ive given above will redirect to the same page at this blog, which is completely unaware of the extra information returned in the page URL. More on that in the next section.
Access Token
Since we are using the Native App workflow, we will use the token request type. After the user has granted permission, her browser will be redirected to the redirect_uri, with additional information added after a # character.
http://curiouser.cheshireeng.com/applications/wp-cli-tools/#access_token=tq5gXPd%24YZIIu%21D%40KBAv%21sdt%405Zdgy9i%5EJrMRkg3%24%23Sx%26X%25MlrmnRxgc%40Eyr%40uMT&amp;expires_in=1209600&amp;token_type=bearer&amp;site_id=73256621
The application should be implemented in a way that permits this information to be automatically extracted and stored. In the URI quoted above, we can locate the following fields:

#access_token=tq5gXPd%24YZIIu%21D%40KBAv%21sdt%405Zdgy9i%5EJrMRkg3%24%23Sx%26X%25MlrmnRxgc%40Eyr%40uMT
&amp;expires_in=1209600
&amp;token_type=bearer
&amp;site_id=73256621

(Note that the access token shown is already disabled, but it did come from a successful authorization session for this blog. Im not quite foolish enough to publish an open token!)
The token has been URL encoded with %xx hex notation. The expiration is given in seconds, and for WordPress.com is currently always 2 weeks. The token type will always be bearer. The site ID is the unique serial number of the authorized blog.
Actually implementing the capture of the token can be done one of several ways. For a client written in javascript and running in the browser, catching the redirect is easy enough by intercepting it when the application loads.
For clients running in typical phone environments, it is often easy to register a temporary URI schema, and set the redirect URI to something like myprivateauth://myapp/ and let the phones browser restart the application when the user is done by fetching that URL. For clients running in a PC, the smart option seems to be to make the redirect URI be something like http://localhost:12345/myapp/ and start a very limited web server before sending the user off to give authorization. When his local browser redirects to that URL, the apps internal web server can capture the token and display a page letting the user know that the authorization is complete.
Further Reading about OAuth
OAuth 2 Simplified
WordPress OAuth2 Authentication
OAuth Standard
Using OAuth 2.0 to Access Google APIs
Next Steps
There is no actual code in this post. The next obvious step is to write some.
The plan is to add an authorization tool to the collection of WP CLI utilities. It will launch the system web browser to get authorization, and will run a web server to catch the redirection. When redirected, it will write the token and related info down in a configuration file for use by the rest of the utilities.
Keep an eye open here for that installment real soon now!
Share this:TwitterFacebookGoogleLike this:Like Loading...

	Related
             </a>
            </div>
           </div>
           <a class="u-url" href="http://curiouser.cheshireeng.com/2014/09/10/digression-using-oauth-2-0-at-wordpress-com/">
            <span class="date">
             permalink
            </span>
           </a>
          </div>
         </li>
         <li class="p-comment h-cite" data-url="http://ziesman.ld-gyan.biz/2014/09/11/asp-net-mvc-forms-auth-vs-oauth-2-0/" id="external_http_ziesman_ld-gyan_biz_2014_09_11_asp-net-mvc-forms-auth-vs-oauth-2-0_">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="admin" class="photo logo u-photo" src="/images/nouns/user.svg" width="48"/>
            </div>
            <a class="u-url" href="http://ziesman.ld-gyan.biz/author/admin/">
             ziesman.ld-gyan.biz/author/admin
            </a>
            <a class="p-name fn value name" href="http://ziesman.ld-gyan.biz/author/admin/">
             admin
            </a>
           </div>
           <div class="quote-text">
            <div class="p-name">
             <a href="http://ziesman.ld-gyan.biz/2014/09/11/asp-net-mvc-forms-auth-vs-oauth-2-0/">
              ASP.NET MVC  Forms Auth vs OAuth 2.0
             </a>
            </div>
           </div>
           <a class="u-url" href="http://ziesman.ld-gyan.biz/2014/09/11/asp-net-mvc-forms-auth-vs-oauth-2-0/">
            <span class="date">
             permalink
            </span>
           </a>
          </div>
         </li>
         <li class="p-comment h-cite" data-url="http://mintknow.biz/zeidler/2014/09/12/oauth2-server-should-we-have-unparalleled-or-opposite-endpoints-for-opposite-extend-type/" id="external_http_mintknow_biz_zeidler_2014_09_12_oauth2-server-should-we-have-unparalleled-or-opposite-endpoints-for-opposite-extend-type_">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="admin" class="photo logo u-photo" src="/images/nouns/user.svg" width="48"/>
            </div>
            <a class="u-url" href="http://mintknow.biz/zeidler/author/admin/">
             mintknow.biz/zeidler/author/admin
            </a>
            <a class="p-name fn value name" href="http://mintknow.biz/zeidler/author/admin/">
             admin
            </a>
           </div>
           <div class="quote-text">
            <div class="p-name">
             <a href="http://mintknow.biz/zeidler/2014/09/12/oauth2-server-should-we-have-unparalleled-or-opposite-endpoints-for-opposite-extend-type/">
              oAuth2 server. Should we have unparalleled or opposite endpoints for opposite extend type
             </a>
            </div>
           </div>
           <a class="u-url" href="http://mintknow.biz/zeidler/2014/09/12/oauth2-server-should-we-have-unparalleled-or-opposite-endpoints-for-opposite-extend-type/">
            <span class="date">
             permalink
            </span>
           </a>
          </div>
         </li>
         <li class="p-comment h-cite" data-url="http://inhumanbean.com/blog/?p=1340" id="external_http_inhumanbean_com_blog_?p=1340">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="admin" class="photo logo u-photo" src="/images/nouns/user.svg" width="48"/>
            </div>
            <a class="u-url" href="http://inhumanbean.com/blog/?author=1">
             inhumanbean.com/blog/?author=1
            </a>
            <a class="p-name fn value name" href="http://inhumanbean.com/blog/?author=1">
             admin
            </a>
           </div>
           <div class="quote-text">
            <div class="p-name">
             <a href="http://inhumanbean.com/blog/?p=1340">
              OAuth 2 Simplified  Aaron Parecki
             </a>
            </div>
           </div>
           <a class="u-url" href="http://inhumanbean.com/blog/?p=1340">
            <span class="date">
             permalink
            </span>
           </a>
          </div>
         </li>
         <li class="p-comment h-cite" data-url="http://raymondhlee.wordpress.com/2014/12/21/implementing-oauth2-with-spring-security/" id="external_http_raymondhlee_wordpress_com_2014_12_21_implementing-oauth2-with-spring-security_">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="" class="photo logo u-photo" src="/images/nouns/user.svg" width="48"/>
            </div>
            <a class="u-url" href="http://raymondhlee.wordpress.com">
             raymondhlee.wordpress.com
            </a>
            <a class="p-name fn value name" href="http://raymondhlee.wordpress.com">
            </a>
           </div>
           <div class="quote-text">
            <div class="p-name">
             <a href="http://raymondhlee.wordpress.com/2014/12/21/implementing-oauth2-with-spring-security/">
              Implementing OAuth2 with Spring Security

					
						
							December 21, 2014
																						Leave a comment
																				
					

					I would share my notes on understanding how to set up Spring Security to implement OAuth2. My ultimate goal is to implement an authority provider (Authorization Server in OAuth2 terminology) to support multiple microservices. In this post, I will describe step by step on how to setup Spring Security with OAuth2 and demonstrate how a web server client should interact with the Oauth2 servers.
OAuth2 Roles
OAuth2 consists of the following roles:
User / Resource Owner  an entity capable of granting access to a protected resource.
Resource Server  server hosting the protected resources, capable of accepting and responding to protected resource requests using access token
Client  An application making requests to protected resources on behalf of the owner. It can be a web app server, a mobile app, or a client side (e.g. javascript) application.
Authorization Server  Server issuing access tokens to client after successfully authentication the resource owner and obtaining authorization.
Note:
Many common servers, e.g. Facebook, Google APIs, implement both the Authorization and Resource Servers.
Depending on the type of clients, the interaction with the OAuth2 servers varies. This blog will focus on a web server client. Aaron Pareckis blog post provides a concise description of OAuth2 and the interactions required by various client applications
Spring Security OAuth2 Configuration
The codes used in this blog post are largely taken from the sample here, with some minor additions/changes.
Authorization Server
The codes to configure an authorization server are shown below.
@Configuration
@ComponentScan
@EnableAutoConfiguration
@RestController
public class Application {

 private static final String RESOURCE_ID = "blog_resource";

 public static void main(String[] args) {
      SpringApplication.run(Application.class, args);
 }

 @Configuration
 @EnableAuthorizationServer // [1]
 protected static class OAuth2Config extends AuthorizationServerConfigurerAdapter {

      @Autowired
      private AuthenticationManager authenticationManager;

      @Override // [2]
      public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
           endpoints.authenticationManager(authenticationManager);
      }

      @Override // [3]
      public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
           // @formatter:off
           clients.inMemory()
           .withClient("client-with-registered-redirect")
           .authorizedGrantTypes("authorization_code")
           .authorities("ROLE_CLIENT")
           .scopes("read", "trust")
           .resourceIds(RESOURCE_ID)
           .redirectUris("http://anywhere?key=value")
           .secret("secret123")
           .and()
           .withClient("my-client-with-secret")
           .authorizedGrantTypes("client_credentials", "password")
           .authorities("ROLE_CLIENT")
           .scopes("read")
           .resourceIds(RESOURCE_ID)
           .secret("secret");
           // @formatter:on
      } 

 }
}
Note:
The convenient annotation @EnableAuthorizationServer is used. The server is customized by extending the class AuthorizationServerConfigurerAdapter which provides empty method implementations for the interface AuthorizationServerConfigurer. See the javadoc here for more information.
By default, the authorization server does not secure the authorization end point (/oauth/authorize). The configure method here injects the Spring Security authentication manager (set up in @EnableWebSecurity as in normal Spring Security)
The configure method here setup the clients that can access the server. An in memory client detail service is used here for demo purpose.
Resource Server
The codes to configure a resource server are shown below
 @RequestMapping("/") //[1]
 public String home() {
      return "Hello World";
 }

 @Configuration
 @EnableResourceServer // [2]
 protected static class ResourceServer extends ResourceServerConfigurerAdapter {

      @Override // [3]
      public void configure(HttpSecurity http) throws Exception {
           // @formatter:off
           http
           // Just for laughs, apply OAuth protection to only 2 resources
           .requestMatchers().antMatchers("/","/admin/beans").and()
           .authorizeRequests()
           .anyRequest().access("#oauth2.hasScope('read')"); //[4]
           // @formatter:on
      }

      @Override
      public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
           resources.resourceId(RESOURCE_ID);
      }

 }
Note:
For testing purpose, a resource end point is included here
Like the Authorization Server, the convenient annotation @EnableResourceServer is used with a bean that extends ResourceServerConfigurerAdapter. See javadoc here for more details
The configure method shows how to setup resources for OAuth2 protection.
Spring Securitys expression based support is used here, i.e. #autho2.hasScope(). An expression handler is registered by default by @EnableResourceServer.
Web Server Client
Now with the OAuth2 servers setup, we can demonstrate how a web server client can access protected resource on behalf of the end user via OAuth2. It consists of the following sequence of interactions:
Client redirects user to the authorization server. User login and approve client access to the resource
Authorization server redirects back to client with the access code
Client exchange the access code with an access token from the authorization server
Client uses the access token to get resource from  the resource server
I wont have a client web server implemented here but will use a chrome rest client plugin to issue the requests to the oauth2 servers. You may use curl to send the equivalent requests.
Also, for the following to work, you will need to setup normal Spring Security and have a login page so that the end user can login with his credential at the oauth2 server so that he can approve the client for accessing the resource on his behalf. For example, as shown in the codes here.
1: Client redirects user to the authorization server. User login and approve client access to the resource
The client redirects the user to the following URL:
http://localhost:8080/oauth/authorize?
     response_type=code
     &amp;client_id=client-with-registered-redirect
     &amp;redirect_url=http://client_host?key=value
     &amp;scope=read
Running the above on your browser should redirect it to the oauth2 servers login page. Once the user enters and submits his username and password, The OAuth approval page should display as below. I will need to work out how to customize this page later

2: Authorization server redirects back to client with the access code
When the user clicks Approve, the authorization server will redirect back to the client url as defined in the redirect_url parameter of the original request, together with an authorization code, i.e.
http://client_host/?key=value&amp;code=3X42jv
Since we dont have a client server implemented,  the above will cause browser error. But we do now has the authorization code from the authorization server.
3: Client exchange the access code with an access token from the authorization server
Now the client has to exchange the access code with the authorization server for an access token by the following:
POST http://localhost:8080/oauth/token
Header: Authorization: Basic Y2xpZW50LXdpdGgtcmVnaXN0ZXJlZC1yZWRpcmVjdDpzZWNyZXQxMjM=
Payload: grant_type=authorization_code&amp;code=3X42jv
Note that base authorization is set up by default with the @EnableAuthroizationServer annotation for the token endpoint. The string Y2xpM= is the Base64 encoded text of the clients id and password of the form
              <client_id>
               :
               <client_secret>
                , i.e.  client-with-registered-redirect:secret123. Ignoring this header will result in the oauth2 server returning an Full authentication is required to access this resource error. 
The authorization server should return something like below:
{
     access_token: "cd515d9d-56b1-4ef6-ae99-317d8975f292" 
     token_type: "bearer" 
     expires_in: 43199 
     scope: "read"
}
4: Client uses the access token to get resource from  the resource server
With the access token, the client can now get the resource on behalf of the user. Remember we set up 2 toy resources to be protected under oauth2 when setting up the resource server? Lets try go get hold of it
GET http://localhost:8080/ 
Header : Authorization: Bearer cd515d9d-56b1-4ef6-ae99-317d8975f292
It should return Hello World in the response body.
Thats it. We finally got the resource after all these interactions!
A few words on grant type
The client here uses authorization code grant type. As demonstrated above, this means the authorization code is obtained using the authorization server as an intermediate between the client and the resource owner. Note the resource onwers credential is never shared with the client. Also, the access token is passed directly from the authorization server to the ciient without going through resource owners user-agent, adding a level of security.
You may notice the authorization server config also includes a client my-client-with-secret with grant type client_credentials. This is intended for the client to get access token for accessing its own account. For example:
POST http://localhost:8080/oauth/token
Header: Authorization: Basic bXktY2xpZW50LXdpdGgtc2VjcmV0OnNlY3JldA==
Payload: grant_type=client_credentials
Another interesting grant type is implicit, which is intended for client-side (e.g. browse) client.
Wrap Upfor now
Thats it for now. OAuth2 is a flexible protocol and this article only describe a rather simple but hopefully typical use of it in securing web resources. Also, most of Spring Security support for OAuth2 is not explored here. I wish to cover both in future posts.



About these ads

		var wpcom_adclk_hovering = false;
		var wpcom_adclk_recorded = false;
		var wpcom_adclk_theme = "Enterprise";
		var wpcom_adclk_slot = "wpcom_below_post";
		var wpcom_adclk_network = ( typeof wpcom_adclk_network === "undefined" ) ? "" : wpcom_adclk_network ;

		jQuery(document).ready( function() {
			function wpcom_adclk_hover_yes() { wpcom_adclk_hovering = true; }
			function wpcom_adclk_hover_no() { wpcom_adclk_hovering = false; }
			jQuery(".wpa").click(wpcom_adclk_click);
			jQuery(".wpa iframe").hover( wpcom_adclk_hover_yes, wpcom_adclk_hover_no );
			jQuery(".wpa object").hover( wpcom_adclk_hover_yes, wpcom_adclk_hover_no );

			jQuery(window).blur( function() {
				if ( wpcom_adclk_hovering ) { wpcom_adclk_click(); }
			});
		});

		function wpcom_adclk_impression() {
			var stat_gif = document.location.protocol + "//pixel.wp.com/g.gif?v=wpcom-no-pv";
			stat_gif += "&amp;x_ads_imp_theme=" + wpcom_adclk_theme;
			stat_gif += "&amp;x_ads_imp_placement="+wpcom_adclk_slot;
			stat_gif += "&amp;x_ads_imp_network=" + wpcom_adclk_network;
			stat_gif += "&amp;x_ads_imp_theme_network="+wpcom_adclk_theme+"_"+wpcom_adclk_network;
			new Image().src = stat_gif + "&amp;baba=" + Math.random();
			return true;
		}

		function wpcom_adclk_click() {
			if (wpcom_adclk_recorded) { return true; } // no double counting
			var stat_gif = document.location.protocol + "//pixel.wp.com/g.gif?v=wpcom-no-pv";
			stat_gif += "&amp;x_ads_click_theme=" + wpcom_adclk_theme;
			stat_gif += "&amp;x_ads_click_placement="+wpcom_adclk_slot;
			stat_gif += "&amp;x_ads_click_network=" + wpcom_adclk_network;
			stat_gif += "&amp;x_ads_click_theme_network="+wpcom_adclk_theme+"_"+wpcom_adclk_network;

			new Image().src = stat_gif + "&amp;baba=" + Math.random();
			wpcom_adclk_recorded = true;
			var now=new Date(); var end=now.getTime()+250;
			while(true){now=new Date();if(now.getTime()&gt;end){break;}}
			return true;
		}
	
if ( typeof GA_googleAddAttr == 'function' ) {
GA_googleAddAttr("AdOpt", "1");
GA_googleAddAttr("Origin", "other");
GA_googleAddAttr("LangId", "1");
GA_googleAddAttr("Domain", "raymondhlee.wordpress.com");
GA_googleAddAttr("BlogId", "23527173");
GA_googleAddAttr("PageURL", "http://raymondhlee.wordpress.com/2014/12/21/implementing-oauth2-with-spring-security/");
GA_googleAddAttr("Autotag", "technology");
GA_googleAddAttr("Autotag", "business");
GA_googleAddAttr("Tag", "j2ee");
GA_googleAddAttr("Tag", "java");
GA_googleAddAttr("Tag", "spring");
GA_googleAddAttr("Tag", "enableauthorizationserver");
GA_googleAddAttr("Tag", "enableresourceserver");
GA_googleAddAttr("Tag", "access-token");
GA_googleAddAttr("Tag", "authorization-code");
GA_googleAddAttr("Tag", "full-authentication-is-required-to-access-this-resource");
GA_googleAddAttr("Tag", "grant-type");
GA_googleAddAttr("Tag", "oauth2");
GA_googleAddAttr("Tag", "spring-security-3-1");
GA_googleAddAttr("theme_bg", "f0f0f0");
GA_googleAddAttr("theme_border", "cccccc");
GA_googleAddAttr("theme_text", "555555");
GA_googleAddAttr("theme_link", "008DCF");
GA_googleAddAttr("theme_url", "008DCF");
GA_googleAddAdSensePageAttr("google_page_url", "http://raymondhlee.wordpress.com/2014/12/21/implementing-oauth2-with-spring-security/");
GA_googleFillSlot("wpcom_below_post");
}




jQuery( window ).load( function() {
    if ( jQuery(".wpa script[src*='virool.com']").length &gt; 0 || jQuery(".wpa script[src*='shareth.ru']").length &gt; 0 || jQuery(".wpa iframe[src*='boomvideo.tv']").length &gt; 0 || jQuery(".wpa iframe[src*='viewablemedia.net']").length &gt; 0 || jQuery(".wpa .sharethrough-placement").length &gt; 0 ) {
        jQuery( '.wpa' ).css( 'width', '400px' );
    }
setTimeout(function(){if(typeof GS_googleAddAdSenseService !== 'function'){new Image().src=document.location.protocol+"//pixel.wp.com/g.gif?v=wpcom-no-pv&amp;x_noads=adblock&amp;baba="+Math.random()}},100);
} );


	Related

					
					

				

				
					
						Filed under J2EE, Java, Spring
						Tagged with @EnableAuthorizationServer, @EnableResourceServer, access token, authorization code, Full authentication is required to access this resource, grant type, oauth2, spring security 3.1
               </client_secret>
              </client_id>
             </a>
            </div>
           </div>
           <a class="u-url" href="http://raymondhlee.wordpress.com/2014/12/21/implementing-oauth2-with-spring-security/">
            <span class="date">
             permalink
            </span>
           </a>
          </div>
         </li>
         <li class="h-cite nocontent" id="external_http_www_quora_com_How-should-I-understand-authentication-with-Facebook-to-an-other-service-I-authenticate-first-to-FB-and-then-I-send-my-credentials-to-my-server-I-try-to-implement-this-using-ionic-framework-or-angular-js#ans9657904">
          <a href="http://www.quora.com/How-should-I-understand-authentication-with-Facebook-to-an-other-service-I-authenticate-first-to-FB-and-then-I-send-my-credentials-to-my-server-I-try-to-implement-this-using-ionic-framework-or-angular-js#ans9657904">
           www.quora.com/How-should-I-understand-authentication-with-Facebook-to-an-other-service-I-authenticate-first-to-FB-and-then-I-send-my-credentials-to-my-server-I-try-to-implement-this-using-ionic-framework-or-angular-js#ans9657904
          </a>
          <a href="http://www.quora.com/How-should-I-understand-authentication-with-Facebook-to-an-other-service-I-authenticate-first-to-FB-and-then-I-send-my-credentials-to-my-server-I-try-to-implement-this-using-ionic-framework-or-angular-js#ans9657904">
           <time class="date dt-published" datetime="2015-02-06T16:30:48+00:00">
            February 6, 2015 4:30pm UTC
           </time>
          </a>
         </li>
         <li class="p-comment h-cite" data-url="http://www.noblebuffalo.com/2015/02/portico-api/" id="external_http_www_noblebuffalo_com_2015_02_portico-api_">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="A.J." class="photo logo u-photo" src="/images/nouns/user.svg" width="48"/>
            </div>
            <a class="u-url" href="http://www.noblebuffalo.com/author/admin/">
             www.noblebuffalo.com/author/admin
            </a>
            <a class="p-name fn value name" href="http://www.noblebuffalo.com/author/admin/">
             A.J.
            </a>
           </div>
           <div class="quote-text">
            <div class="p-name">
             <a href="http://www.noblebuffalo.com/2015/02/portico-api/">
              Portico API
             </a>
            </div>
           </div>
           <a class="u-url" href="http://www.noblebuffalo.com/2015/02/portico-api/">
            <span class="date">
             permalink
            </span>
           </a>
          </div>
         </li>
         <li class="p-comment h-cite" data-url="http://dluat.com/session-integration-is-this-approach-secure/" id="external_http_dluat_com_session-integration-is-this-approach-secure_">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="dicol" class="photo logo u-photo" src="/images/nouns/user.svg" width="48"/>
            </div>
            <a class="u-url" href="http://dluat.com/author/dicol/">
             dluat.com/author/dicol
            </a>
            <a class="p-name fn value name" href="http://dluat.com/author/dicol/">
             dicol
            </a>
           </div>
           <div class="quote-text">
            <div class="p-name">
             <a href="http://dluat.com/session-integration-is-this-approach-secure/">
              Session integration, is this approach secure?
             </a>
            </div>
           </div>
           <a class="u-url" href="http://dluat.com/session-integration-is-this-approach-secure/">
            <span class="date">
             permalink
            </span>
           </a>
          </div>
         </li>
         <li class="p-comment h-cite" data-url="https://freemymind.wordpress.com/2015/04/29/oauth-2-0-for-native-mobile-apps-and-browser-apps/" id="external_https_freemymind_wordpress_com_2015_04_29_oauth-2-0-for-native-mobile-apps-and-browser-apps_">
          <div class="inner">
           <div class="minicard h-card vcard author p-author">
            <div style="position: relative; width: 48px; height: 48px; float: left; margin-right: 6px;">
             <img alt="khalidjaffar" class="photo logo u-photo" src="/images/nouns/user.svg" width="48"/>
            </div>
            <a class="u-url" href="https://freemymind.wordpress.com/author/khalidjaffar/">
             freemymind.wordpress.com/author/khalidjaffar
            </a>
            <a class="p-name fn value name" href="https://freemymind.wordpress.com/author/khalidjaffar/">
             khalidjaffar
            </a>
           </div>
           <div class="quote-text">
            <div class="p-name">
             <a href="https://freemymind.wordpress.com/2015/04/29/oauth-2-0-for-native-mobile-apps-and-browser-apps/">
              OAuth 2.0 for Native Mobile Apps and Browser Apps
             </a>
            </div>
           </div>
           <a class="u-url" href="https://freemymind.wordpress.com/2015/04/29/oauth-2-0-for-native-mobile-apps-and-browser-apps/">
            <span class="date">
             permalink
            </span>
           </a>
          </div>
         </li>
         <li class="h-cite nocontent" id="external_http_7wins_eu_cbprod_detail_34526_self+help+building+mobile+web+apps+and+hosting_html">
          <a href="http://7wins.eu/cbprod/detail_34526/self+help+building+mobile+web+apps+and+hosting.html">
           7wins.eu/cbprod/detail_34526/self+help+building+mobile+web+apps+and+hosting.html
          </a>
          <a href="http://7wins.eu/cbprod/detail_34526/self+help+building+mobile+web+apps+and+hosting.html">
           <time class="date dt-published" datetime="2015-04-30T06:23:21+00:00">
            April 30, 2015 6:23am UTC
           </time>
          </a>
         </li>
         <li class="h-cite nocontent" id="external_https_onehundred15_wordpress_com_2015_06_20_web-authentication-schemes_">
          <a href="https://onehundred15.wordpress.com/2015/06/20/web-authentication-schemes/">
           onehundred15.wordpress.com/2015/06/20/web-authentication-schemes/
          </a>
          <a href="https://onehundred15.wordpress.com/2015/06/20/web-authentication-schemes/">
           <time class="date dt-published" datetime="2015-06-20T04:26:41+00:00">
            June 20, 2015 4:26am UTC
           </time>
          </a>
         </li>
         <li class="h-cite nocontent" id="external_http_dexpage_com_client-secret-for-django-oauth_">
          <a href="http://dexpage.com/client-secret-for-django-oauth/">
           dexpage.com/client-secret-for-django-oauth/
          </a>
          <a href="http://dexpage.com/client-secret-for-django-oauth/">
           <time class="date dt-published" datetime="2015-06-25T16:47:41+00:00">
            June 25, 2015 4:47pm UTC
           </time>
          </a>
         </li>
         <li class="h-cite nocontent" id="external_http_dexpage_com_oauth-2-0-integration-in-ios_">
          <a href="http://dexpage.com/oauth-2-0-integration-in-ios/">
           dexpage.com/oauth-2-0-integration-in-ios/
          </a>
          <a href="http://dexpage.com/oauth-2-0-integration-in-ios/">
           <time class="date dt-published" datetime="2015-07-03T10:03:06+00:00">
            July 3, 2015 10:03am UTC
           </time>
          </a>
         </li>
         <li class="h-cite nocontent" id="external_http_dexpage_com_unable-to-get-json-response-from-curl_">
          <a href="http://dexpage.com/unable-to-get-json-response-from-curl/">
           dexpage.com/unable-to-get-json-response-from-curl/
          </a>
          <a href="http://dexpage.com/unable-to-get-json-response-from-curl/">
           <time class="date dt-published" datetime="2015-07-09T00:06:39+00:00">
            July 9, 2015 12:06am UTC
           </time>
          </a>
         </li>
         <li class="h-cite nocontent" id="external_http_dexpage_com_why-is-there-an-authorization-code-flow-in-oauth2-when-implicit-flow-works-so-well_">
          <a href="http://dexpage.com/why-is-there-an-authorization-code-flow-in-oauth2-when-implicit-flow-works-so-well/">
           dexpage.com/why-is-there-an-authorization-code-flow-in-oauth2-when-implicit-flow-works-so-well/
          </a>
          <a href="http://dexpage.com/why-is-there-an-authorization-code-flow-in-oauth2-when-implicit-flow-works-so-well/">
           <time class="date dt-published" datetime="2015-07-09T02:03:33+00:00">
            July 9, 2015 2:03am UTC
           </time>
          </a>
         </li>
        </ul>
       </div>
      </div>
     </div>
     <!-- span8 -->
     <div class="span4">
      <div class="sidebar">
       <div>
        <nav class="site-navigation">
         <a class="prev" href="/articles/2012/06/18/1/introducing-indieauth" rel="prev">
          <abbr>
           
          </abbr>
         </a>
         <a class="next" href="/articles/2012/08/22/1/tire-tracks-on-mars" rel="next">
          <abbr>
           
          </abbr>
         </a>
         <a class="up" href="/articles?before=2012-07-29-1">
          <abbr>
           Articles
          </abbr>
         </a>
        </nav>
        <div class="minicard h-card vcard author p-author">
         <img alt="Aaron Parecki" class="photo logo u-photo" src="https://aaronparecki.com/images/aaronpk.png"/>
         <a class="u-url u-uid url" href="https://aaronparecki.com/" rel="author">
          aaronparecki.com
         </a>
         <a class="p-name fn value" href="https://aaronparecki.com/">
          Aaron Parecki
         </a>
         <a class="google-profile" href="https://plus.google.com/117847912875913905493" rel="author">
          Aaron Parecki
         </a>
        </div>
        <div style="clear:both;">
        </div>
        <div id="mainnav">
         <ul id="mainnav-1">
          <li>
           <a href="/articles">
            Articles
           </a>
          </li>
          <li>
           <a href="/notes">
            Notes
           </a>
          </li>
          <li>
           <a href="/replies">
            Replies
           </a>
          </li>
          <li>
           <a href="/metrics">
            Metrics
           </a>
          </li>
         </ul>
         <ul id="mainnav-2">
          <li>
           <a href="/pages">
            Pages
           </a>
          </li>
          <li>
           <a href="/bookmarks">
            Bookmarks
           </a>
          </li>
          <li>
           <a href="/presentations">
            Presentations
           </a>
          </li>
          <li>
           <a href="/contact">
            Contact
           </a>
          </li>
         </ul>
        </div>
        <span id="post_tag_list">
         <ul class="tag-list">
          <li>
           <a class="p-category" href="/tag/oauth" rel="tag">
            oauth
            <span>
            </span>
           </a>
          </li>
          <li>
           <a class="p-category" href="/tag/oauth2" rel="tag">
            oauth2
            <span>
            </span>
           </a>
          </li>
          <li>
           <a class="p-category" href="/tag/standards" rel="tag">
            standards
            <span>
            </span>
           </a>
          </li>
          <li>
           <a class="p-category" href="/tag/web" rel="tag">
            web
            <span>
            </span>
           </a>
          </li>
          <li>
           <a class="p-category" href="/tag/authentication" rel="tag">
            authentication
            <span>
            </span>
           </a>
          </li>
         </ul>
        </span>
        <div class="share-and-respond">
         <h3>
          This Post Elsewhere
         </h3>
         <ul>
          <li>
           <a class="u-syndication" href="http://news.ycombinator.com/item?id=4378768">
            View on Hackernews
           </a>
          </li>
         </ul>
         <h3>
          Shortlink
         </h3>
         <input class="shortlink u-shortlink" name="shortlink" onclick="this.focus(); this.select();" style="margin-top: 3px;" type="text" value="http://aaron.pk/a4KA1"/>
         <div class="web-actions">
          <div class="fb-like" data-send="false" data-show-faces="false" data-width="265" href="https://aaronparecki.com/2012/211/article/1/oauth2-simplified">
          </div>
         </div>
         <div style="clear: both;">
         </div>
        </div>
        <div class="sidebar-stats">
         <h4>
          Building
         </h4>
         <ul>
          <li>
           <a href="http://indiewebcamp.com">
            IndieWebCamp
           </a>
          </li>
          <li>
           <a href="http://geoloqi.com">
            Geoloqi
           </a>
          </li>
         </ul>
         <h4>
          Reading
         </h4>
         <ul>
          <li>
           <a href="http://news.ycombinator.com">
            Hackernews
           </a>
          </li>
         </ul>
         <h4>
          Driving
         </h4>
         <div style="float: left;">
          <p>
           <a href="http://www.strava.com/athletes/aaronpk">
            <img alt="bike" src="/images/bike-icon.png"/>
           </a>
          </p>
         </div>
         <div style="float: left; width: 80px;">
          <p>
           <a href="https://www.car2go.com/en/portland/">
            <img alt="Car2Go" src="/images/car2go-icon.png"/>
           </a>
          </p>
         </div>
         <div style="clear: both;">
         </div>
        </div>
        <form action="http://www.google.com/search" class="search" method="get">
         <div class="input-append">
          <input class="span10" name="q" placeholder="Search" type="text"/>
          <button class="btn" type="submit">
           <i class="icon-search">
           </i>
          </button>
         </div>
         <input name="as_sitesearch" type="hidden" value="aaronparecki.com"/>
         <input name="tbs" type="hidden" value="sbd:1,cdr:1,cd_min:1/1/1999"/>
        </form>
       </div>
      </div>
     </div>
     <!-- span4 -->
    </div>
    <!-- row-fluid -->
   </div>
   <!-- container -->
   <footer class="page-footer">
    <div class="container-fluid">
     <div class="row-fluid">
      <div class="span12">
       <form action="https://indieauth.com/auth" class="web-signin" method="get">
        <div class="input-prepend input-append pull-right">
         <span class="add-on">
          <i class="icon-globe">
          </i>
         </span>
         <input class="" name="me" placeholder="yourdomain.com" type="text"/>
         <input class="btn" type="submit" value="Sign In"/>
        </div>
        <input name="redirect_uri" type="hidden" value="https://aaronparecki.com/signin.php?redirect=%2Farticles%2F2012%2F07%2F29%2F1%2Foauth2-simplified"/>
       </form>
      </div>
     </div>
    </div>
    <div class="container-fluid">
     <div class="row-fluid">
      <div class="content span12">
       <div class="tags">
        <ul class="tag-list">
         <li>
          <a href="/tag/hackernews">
           #hackernews
          </a>
         </li>
         <li>
          <a href="/tag/indieweb">
           #indieweb
          </a>
         </li>
         <li>
          <a href="/tag/indiewebcamp">
           #indiewebcamp
          </a>
         </li>
         <li>
          <a href="/tag/geoloqi">
           #geoloqi
          </a>
         </li>
         <li>
          <a href="/tag/web">
           #web
          </a>
         </li>
         <li>
          <a href="/tag/pdx">
           #pdx
          </a>
         </li>
         <li>
          <a href="/tag/tutorial">
           #tutorial
          </a>
         </li>
         <li>
          <a href="/tag/iphone">
           #iphone
          </a>
         </li>
         <li>
          <a href="/tag/w3c">
           #w3c
          </a>
         </li>
         <li>
          <a href="/tag/esri">
           #esri
          </a>
         </li>
         <li>
          <a href="/tag/reference">
           #reference
          </a>
         </li>
         <li>
          <a href="/tag/ios">
           #ios
          </a>
         </li>
         <li>
          <a href="/tag/resources">
           #resources
          </a>
         </li>
         <li>
          <a href="/tag/socialwg">
           #socialwg
          </a>
         </li>
         <li>
          <a href="/tag/design">
           #design
          </a>
         </li>
         <li>
          <a href="/tag/linux">
           #linux
          </a>
         </li>
         <li>
          <a href="/tag/press">
           #press
          </a>
         </li>
         <li>
          <a href="/tag/video">
           #video
          </a>
         </li>
         <li>
          <a href="/tag/indieauth">
           #indieauth
          </a>
         </li>
         <li>
          <a href="/tag/api">
           #api
          </a>
         </li>
         <li>
          <a href="/tag/travel">
           #travel
          </a>
         </li>
         <li>
          <a href="/tag/webdesign">
           #webdesign
          </a>
         </li>
         <li>
          <a href="/tag/sxsw">
           #sxsw
          </a>
         </li>
         <li>
          <a href="/tag/gps">
           #gps
          </a>
         </li>
         <li>
          <a href="/tag/php">
           #php
          </a>
         </li>
         <li>
          <a href="/tag/ui">
           #ui
          </a>
         </li>
         <li>
          <a href="/tags">
           more tags...
          </a>
         </li>
        </ul>
        <div style="clear:both;">
        </div>
       </div>
       <div class="copyright">
        <p>
          1999-2015 by Aaron Parecki.
        </p>
        <p class="license">
         Except where otherwise noted, text content on this site is licensed under a
         <a href="http://creativecommons.org/licenses/by/3.0/">
          Creative Commons Attribution 3.0 License
         </a>
         .
         <a href="http://creativecommons.org/licenses/by/3.0/" rel="license">
          <img alt="Creative Commons Attribution 3.0" src="/images/cc-by.png"/>
         </a>
        </p>
        <p class="credit">
         This site supports
         <a href="https://aaronparecki.com/webmention" rel="webmention">
          webmention
         </a>
         and is powered by
         <a href="http://p3k.io">
          p3k
         </a>
         .
        </p>
       </div>
      </div>
     </div>
    </div>
   </footer>
  </div>
  <script src="/js/jquery-1.7.1.min.js" type="text/javascript">
  </script>
  <script src="/bootstrap-2.2.2/js/bootstrap.min.js" type="text/javascript">
  </script>
  <script type="text/javascript">
   $(document).keydown(function(e){
    // Ignore the keypress if any meta keys were pressed along with the arrows
    if(e.metaKey || e.ctrlKey || e.shiftKey) return;
 
    // alt - left arrow
    if(e.altKey &amp;&amp; e.keyCode == 37) { 
      // Find a rel="prev" link on the page
      if($("a[rel='prev']").length &gt; 0){
        // Highlight it briefly 
        $("a[rel='prev']").addClass('hover');
        // Navigate to the page
        window.location.href = $("a[rel='prev']").attr('href');
      }
      return false;
    }
 
    // alt - right arrow
    if(e.altKey &amp;&amp; e.keyCode == 39) {
      // Find a rel="next" link on the page
      if($("a[rel='next']").length &gt; 0){
        // Highlight it briefly 
        $("a[rel='next']").addClass('hover');
        // Navigate to the page
        window.location.href = $("a[rel='next']").attr('href');
      }
      return false;
    }
});
$(function(){
  // Activate popovers on any element with rel=popover
  $('*[rel="popover"]').popover();
});

// Real-time comments
var commentContainerSelector = '.references ul';
var likeContainerSelector = '.references #likes-list';

if($(commentContainerSelector).length &gt; 0 &amp;&amp; "WebSocket" in window) {
  var ws = new WebSocket(window.location.origin.replace(/https?/,"ws")+":8077");
  ws.onopen = function(event) {
    // Send the current window URL to the server to register to receive notifications about this URL
    ws.send(window.location);
  };
  ws.onmessage = function(event) {
    var data = JSON.parse(event.data);
    if(data &amp;&amp; data.message == "webmention") {
      // Check if we've already added a comment for this ID, and update the existing one if so
      if($("#"+data.element_id).length == 0) {
        if(data.type == 'like') {
          $(likeContainerSelector).append(data.html);
        } else {
          $(commentContainerSelector).append(data.html);
        }
      } else {
        $("#"+data.element_id).html(data.html);
      }
    }
  };
}
  </script>
  <script>
   !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");
  </script>
 </body>
</html>