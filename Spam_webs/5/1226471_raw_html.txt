<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <title>
   Building an Object-Oriented jQuery Plugin | Virgen Technologies
  </title>
  <link href="/css/layout.css" media="screen" rel="stylesheet" type="text/css"/>
  <link href="/css/themeroller/virgentech/virgentech.css" id="shTheme" rel="stylesheet" type="text/css"/>
  <link href="http://www.virgentech.com/blog/entries/feed" rel="alternate" title="VirgenTech Blog RSS Feed" type="application/rss+xml"/>
  <link href="/css/blog.css" media="screen" rel="stylesheet" type="text/css"/>
  <link href="/library/syntaxhighlighter/styles/shCore.css" media="screen" rel="stylesheet" type="text/css"/>
  <link href="/library/syntaxhighlighter/styles/shThemeVirgen.css" media="screen" rel="stylesheet" type="text/css"/>
  <meta content="php mysql apache zend framework" name="keywords"/>
  <meta content="Wed, 26 Feb 1997 08:21:57 GMT" http-equiv="expires"/>
  <meta content="no-cache" http-equiv="pragma"/>
  <meta content="no-cache" http-equiv="Cache-Control"/>
  <meta content="text/html;charset=utf-8" http-equiv="Content-Type"/>
  <meta content="en-US" http-equiv="Content-Language"/>
  <meta content="Building an Object-Oriented jQuery Plugin" name="title"/>
  <meta content="
	Learn how to use your OOP skills in jQuery." name="description"/>
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js" type="text/javascript">
  </script>
  <script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.2/jquery-ui.min.js" type="text/javascript">
  </script>
  <script src="/js/ckeditor/ckeditor.js" type="text/javascript">
  </script>
  <script src="/js/ckeditor/adapters/jquery.js" type="text/javascript">
  </script>
  <script src="/js/blog.js" type="text/javascript">
  </script>
  <script src="/library/syntaxhighlighter/scripts/shCore.js" type="text/javascript">
  </script>
  <script src="/library/syntaxhighlighter/scripts/shBrushXml.js" type="text/javascript">
  </script>
  <script src="/library/syntaxhighlighter/scripts/shBrushJScript.js" type="text/javascript">
  </script>
  <script type="text/javascript">
   //&lt;![CDATA[

		jQuery(function($)
		{
			SyntaxHighlighter.config.clipboardSwf = '/library/syntaxhighlighter/scripts/clipboard.swf';
			SyntaxHighlighter.all();
		});
		    //]]&gt;
  </script>
 </head>
 <body>
  <div id="main-header">
   <a href="/" rel="home">
    <img alt="VirgenTech" id="header-logo" src="/images/main/logo_2.png" title="Virgen Technologies Home"/>
   </a>
   <div class="auth-panel">
    <a href="/login">
     Login with OpenID
    </a>
   </div>
  </div>
  <ul class="navigation">
   <li>
    <a href="/" title="VirgenTech Home Page">
     Home
    </a>
   </li>
   <li class="active">
    <a href="/blog" title="Tech Blog by Hector Virgen">
     Blog
    </a>
   </li>
   <li>
    <a href="/code" title="Sample Code">
     Code
    </a>
   </li>
   <li>
    <a href="/links" title="Useful Links">
     Links
    </a>
   </li>
   <li>
    <a href="http://resume.virgentech.com" title="Hector Virgen's Online Resume">
     Resume
    </a>
   </li>
   <li>
    <a href="/contact" title="Contact Hector Virgen">
     Contact
    </a>
   </li>
  </ul>
  <div id="main-content">
   <div id="main-content-view">
    <div class="flash">
    </div>
    <div class="breadcrumbs">
     <a href="/blog" title="Tech Blog by Hector Virgen">
      Blog
     </a>
     <img alt="" class="icon" src="/images/icons/fatcow/small/bullet_go.png"/>
     Building an Object-Oriented jQuery Plugin
    </div>
    <div class="entry">
     <h1>
      Building an Object-Oriented jQuery Plugin
     </h1>
     <div class="author">
      Written by Hector Virgen
     </div>
     <div class="date published">
      Published on October 4, 2009
     </div>
     <div class="date modified">
      Last updated on August 23, 2010
     </div>
     <ul class="share-actions">
      <li class="facebook">
       <a href="http://www.facebook.com/sharer.php" name="fb_share" type="button_count">
        Share
       </a>
       <script src="http://static.ak.fbcdn.net/connect.php/js/FB.Share" type="text/javascript">
       </script>
      </li>
     </ul>
     <div class="content">
      <p>
       <strong>
        Update: Jamie Talbot has written
        <a href="http://jamietalbot.com/2010/08/22/object-oriented-jquery-plugins/">
         an excellent article
        </a>
        that improves this method and is definitely worth a read.
       </strong>
      </p>
      <p>
       So you've been using
       <a href="http://www.jquery.com/">
        jQuery
       </a>
       as your Javascript framework and now you need to write a plugin. If you come from an Object-Oriented background like me, you may feel that jQuery's plugins leave a lot to be desired.
      </p>
      <p>
       The basic formula to create a jQuery plugin is to extend the plugin namespace with a single method:
      </p>
      <pre class="brush:js">
       #myplugin.js

jQuery.fn.myplugin = function()
{
   // Do some cool stuff here
}
      </pre>
      <p>
       While that seems all fine and dandy for simple plugins, you may need to create more robust plugins that do many things, often in a non-linear fashion.
      </p>
      <p>
       Some plugins get around this by adding tons of methods to jQuery's plugin namespace.
      </p>
      <pre class="brush:js">
       $('#test').plugin();
$('#test').pluginAdd('stuff');
$('#test').pluginRemove('other stuff');
$('#test').pluginDoSomethingCool();
      </pre>
      <p>
       I personally don't like that approach because it pollutes the jQuery plugin namespace with lots of methods. I personally like to stick to just one plugin method per plugin.
      </p>
      <p>
       Other plugins use the first parameter of the plugin to call methods:
      </p>
      <pre class="brush:js">
       $('#test').plugin();
$('#test').plugin('add', 'stuff');
$('#test').plugin('remove', 'other stuff');
$('#test').plugin('doSomethingCool');
      </pre>
      <p>
       I think this approach is a little awkward, especially if the plugin accepts an options object the first time it is created. This approachs means you would have to either write a switch of all the methods you want to expose, or blindly accept any string as a method name.
      </p>
      <p>
       To get around these hurdles, I've created a basic template for jQuery plugins that provides access to an Object-Oriented interface if needed while still maintaining jQuery's simplicity of a single method in the plugin namespace.
      </p>
      <p>
       The first thing you need to do is wrap all your plugin code in an anonymous function. This will help keep things nice and tidy without creating global variables.
      </p>
      <pre class="brush:js">
       #myplugin.js

(function($){
   // Your plugin code goes here
})(jQuery);
      </pre>
      <p>
       Next, create your plugin as a class, where the first parameter is a single DOM element.
      </p>
      <pre class="brush:js">
       #myplugin.js

(function($){
   var MyPlugin = function(element)
   {
       var elem = $(element);
       var obj = this;

       // Public method
       this.publicMethod = function()
       {
           console.log('publicMethod() called!');
       };
   };
})(jQuery);
      </pre>
      <p>
       To make your new object-oriented class available as a jQuery plugin, write a simple wrapper function in the plugin namespace:
      </p>
      <pre class="brush:js">
       #myplugin.js

(function($){
   var MyPlugin = function(element)
   {
       var elem = $(element);
       var obj = this;

       // Public method
       this.publicMethod = function()
       {
           console.log('publicMethod() called!');
       };
   };

   $.fn.myplugin = function()
   {
       return this.each(function()
       {
           var myplugin = new MyPlugin(this);
       });
   };
})(jQuery);
      </pre>
      <p>
       Now, when you call $(element).myplugin(), the jQuery plugin instantiates an instance of MyPlugin, passing the element as the first argument.
      </p>
      <p>
       But now there's a problem of how to get the object "myplugin" once it's been created. For this, I usually store the object in the elements data. This provides easy access to the object while allowing you to prevent accidental double instantiation in the event that the plugin was called again on the same element.
      </p>
      <pre class="brush:js">
       #myplugin.js

(function($){
   var MyPlugin = function(element)
   {
       var elem = $(element);
       var obj = this;

       // Public method
       this.publicMethod = function()
       {
           console.log('publicMethod() called!');
       };
   };

   $.fn.myplugin = function()
   {
       return this.each(function()
       {
           var element = $(this);
          
           // Return early if this element already has a plugin instance
           if (element.data('myplugin')) return;

           var myplugin = new MyPlugin(this);

           // Store plugin object in this element's data
           element.data('myplugin', myplugin);
       });
   };
})(jQuery);
      </pre>
      <p>
       Now you have easy access to the object should you need to run methods on it.
      </p>
      <pre class="brush:js">
       $('#test').myplugin();
var myplugin = $('#test').data('myplugin');
myplugin.publicMethod(); // prints "publicMethod() called!" to console
      </pre>
      <p>
       If you need to get fancy and add options parameter or other required parameters, just pass them from the jQuery plugin to your plugin's constructor:
      </p>
      <pre class="brush:js">
       #myplugin.js

(function($){
   var MyPlugin = function(element, options)
   {
       var elem = $(element);
       var obj = this;

       // Merge options with defaults
       var settings = $.extend({
           param: 'defaultValue'
       }, options || {});

       // Public method
       this.publicMethod = function()
       {
           console.log('publicMethod() called!');
       };
   };

   $.fn.myplugin = function(options)
   {
       return this.each(function()
       {
           var element = $(this);
          
           // Return early if this element already has a plugin instance
           if (element.data('myplugin')) return;

           // pass options to plugin constructor
           var myplugin = new MyPlugin(this, options);

           // Store plugin object in this element's data
           element.data('myplugin', myplugin);
       });
   };
})(jQuery);
      </pre>
      <p>
       You may also want to expose some of your object's methods while keeping others private. To make a private method, create a local function within your object using the
       <code>
        var
       </code>
       keyword:
      </p>
      <pre class="brush:js">
       #myplugin.js

(function($){
   var MyPlugin = function(element, options)
   {
       var elem = $(element);
       var obj = this;
       var settings = $.extend({
           param: 'defaultValue'
       }, options || {});
       
       // Public method - can be called from client code
       this.publicMethod = function()
       {
           console.log('public method called!');
       };

       // Private method - can only be called from within this object
       var privateMethod = function()
       {
           console.log('private method called!');
       };
   };

   $.fn.myplugin = function(options)
   {
       return this.each(function()
       {
           var element = $(this);
          
           // Return early if this element already has a plugin instance
           if (element.data('myplugin')) return;

           // pass options to plugin constructor
           var myplugin = new MyPlugin(this, options);

           // Store plugin object in this element's data
           element.data('myplugin', myplugin);
       });
   };
})(jQuery);
      </pre>
      <p>
       To see an example of a plugin I wrote that uses this template, check out my
       <a href="http://www.virgentech.com/code/view/id/3">
        Tagger
       </a>
       plugin.
      </p>
     </div>
     <div class="googleads">
      <script type="text/javascript">
       &lt;!--
        google_ad_client = "ca-pub-4332110267741275";
        /* Blog Post Footer */
        google_ad_slot = "7393980875";
        google_ad_width = 728;
        google_ad_height = 90;
        //--&gt;
      </script>
      <script src="http://pagead2.googlesyndication.com/pagead/show_ads.js" type="text/javascript">
      </script>
     </div>
     <div class="comments" id="comments">
      <h2>
       <img alt="" class="icon-medium" src="/images/icons/fatcow/medium/comments.png"/>
       <a href="/blog/2009/10/building-object-oriented-jquery-plugin.html#disqus_thread">
        Comments
       </a>
      </h2>
      <div id="disqus_thread">
      </div>
      <script type="text/javascript">
       /**
         * var disqus_identifier; [Optional but recommended: Define a unique identifier (e.g. post id or slug) for this thread] 
         */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = 'http://virgentech.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
      </script>
      <noscript>
       Please enable JavaScript to view the
       <a href="http://disqus.com/?ref_noscript=virgentech">
        comments powered by Disqus.
       </a>
      </noscript>
      <a class="dsq-brlink" href="http://disqus.com">
       blog comments powered by
       <span class="logo-disqus">
        Disqus
       </span>
      </a>
     </div>
    </div>
   </div>
   <ul class="sidebar">
    <li>
     <ul class="sidenav">
     </ul>
    </li>
    <li>
     <dl>
      <dt>
       <img alt="" class="icon" src="/images/icons/fatcow/small/accept.png"/>
       Validate Source
      </dt>
      <dd>
       <a href="http://validator.w3.org/check?uri=http%3A%2F%2Fwww.virgentech.com%2Fblog%2F2009%2F10%2Fbuilding-object-oriented-jquery-plugin.html">
        Validate XHTML
       </a>
      </dd>
     </dl>
    </li>
    <li>
     <dl>
      <dt>
       <img alt="" class="icon" src="/images/icons/fatcow/small/information.png"/>
       About
      </dt>
      <dd>
       <p>
        Hector Virgen is a Zend Certified Engineer with a background
			in web development and audio/video production. His latest projects
			include applications for the education industry and social
			publishing for real estate professionals.
       </p>
      </dd>
     </dl>
    </li>
    <li>
     <dl class="blog-entries">
      <dt>
       <img alt="" class="icon" src="/images/icons/fatcow/small/comment.png"/>
       Latest Blog Entries
      </dt>
      <dd>
       <a href="/blog/2013/08/how-to-include-angularjs-on-your-existing-website.html">
        How to Include AngularJS On Your Existing Website
       </a>
      </dd>
      <dd>
       <a href="/blog/2013/07/angularjs-and-processingjs-integration.html">
        AngularJS and ProcessingJS Integration
       </a>
      </dd>
      <dd>
       <a href="/blog/2013/01/bdd-in-node-js-with-mocha-should-and-coffeescript.html">
        BDD in Node.js with Mocha, Should and CoffeeScript
       </a>
      </dd>
      <dd>
       <a href="/blog/2011/05/extending-navigation-view-helpers-zend-framework.html">
        Extending Navigation View Helpers in Zend Framework
       </a>
      </dd>
     </dl>
    </li>
    <li class="googleads">
     <script type="text/javascript">
      &lt;!--
                google_ad_client = "ca-pub-4332110267741275";
                /* Blog Sidebar */
                google_ad_slot = "5091217209";
                google_ad_width = 160;
                google_ad_height = 600;
                //--&gt;
     </script>
     <script src="http://pagead2.googlesyndication.com/pagead/show_ads.js" type="text/javascript">
     </script>
    </li>
   </ul>
  </div>
  <div id="main-footer">
   <div>
    Powered by
    <a href="http://framework.zend.com">
     Zend Framework
    </a>
    |
    <a href="/about">
     About This Site
    </a>
   </div>
   <div>
    Copyright  2015
    <a href="/contact" rel="contact">
     Hector Virgen
    </a>
    | All Rights Reserved
   </div>
  </div>
  <script type="text/javascript">
   var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
	document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
   try {
		var pageTracker = _gat._getTracker("UA-9504232-1");
		pageTracker._trackPageview();
	} catch(err) {}
  </script>
  <script type="text/javascript">
   var disqus_shortname = 'virgentech';
    (function () {
        var s = document.createElement('script'); s.async = true;
        s.src = 'http://disqus.com/forums/virgentech/count.js';
        (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
    }());
  </script>
 </body>
</html>