<!DOCTYPE html>
<html class="no-js" lang="en-US" prefix="og: http://ogp.me/ns#">
 <head>
  <meta charset="utf-8"/>
  <meta content="width=device-width" name="viewport"/>
  <title>
   Accessing Databases with DB - devshed
  </title>
  <link href="http://gmpg.org/xfn/11" rel="profile"/>
  <link href="http://www.devshed.com/xmlrpc.php" rel="pingback"/>
  <link href="http://www.devshed.com/wp-content/themes/devshed/img/ios/AppIcon40x40.png" rel="apple-touch-icon-precomposed"/>
  <link href="http://www.devshed.com/wp-content/themes/devshed/img/ios/AppIcon60x60.png" rel="apple-touch-icon-precomposed" sizes="72x72"/>
  <link href="http://www.devshed.com/wp-content/themes/devshed/img/ios/AppIcon76x76.png" rel="apple-touch-icon-precomposed" sizes="114x114"/>
  <!-- This site is optimized with the Yoast WordPress SEO plugin v2.2 - https://yoast.com/wordpress/plugins/seo/ -->
  <link href="http://www.devshed.com/c/a/php/accessing-databases-with-db/" rel="canonical"/>
  <meta content="en_US" property="og:locale"/>
  <meta content="article" property="og:type"/>
  <meta content="Accessing Databases with DB - devshed" property="og:title"/>
  <meta content="This chapter discusses the database abstraction layer PEAR DB. This package supplies a standard set of functions for talking to many different kinds of databases (from Essential PHP Modules, Extensions, Tools, by David Sklar, 2004, Apress, ISBN: 1590592808).PEAR DB providesa consistent set of methods for using a relational database no matter what database youre using. " property="og:description"/>
  <meta content="http://www.devshed.com/c/a/php/accessing-databases-with-db/" property="og:url"/>
  <meta content="devshed" property="og:site_name"/>
  <meta content="PHP" property="article:section"/>
  <meta content="2004-11-30T09:01:00+00:00" property="article:published_time"/>
  <!-- / Yoast WordPress SEO plugin. -->
  <link href="http://www.devshed.com/feed/" rel="alternate" title="devshed  Feed" type="application/rss+xml"/>
  <link href="http://www.devshed.com/comments/feed/" rel="alternate" title="devshed  Comments Feed" type="application/rss+xml"/>
  <link href="http://www.devshed.com/c/a/php/accessing-databases-with-db/feed/" rel="alternate" title="devshed  Accessing Databases with DB Comments Feed" type="application/rss+xml"/>
  <script type="text/javascript">
   window._wpemojiSettings = {"baseUrl":"http:\/\/s.w.org\/images\/core\/emoji\/72x72\/","ext":".png","source":{"concatemoji":"http:\/\/www.devshed.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.2.1"}};
			!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&amp;&amp;c.getContext("2d");return d&amp;&amp;d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length&gt;3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f;c.supports={simple:d("simple"),flag:d("flag")},c.supports.simple&amp;&amp;c.supports.flag||(f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&amp;&amp;f.twemoji&amp;&amp;(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
  </script>
  <style type="text/css">
   img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
  </style>
  <link href="http://www.devshed.com/wp-content/plugins/fanciest-author-box/css/ts-fab.min.css?ver=1.4.3" id="ts_fab_css-css" media="all" rel="stylesheet" type="text/css"/>
  <link href="http://www.devshed.com/wp-content/themes/devshed/style.css?ver=4.2.1" id="devshed-style-css" media="all" rel="stylesheet" type="text/css"/>
  <link href="http://www.devshed.com/wp-content/themes/devshed/js/flippant.css?ver=4.2.1" id="flipcss-css" media="all" rel="stylesheet" type="text/css"/>
  <script src="https://code.jquery.com/jquery-1.11.0.min.js?ver=1.11.0" type="text/javascript">
  </script>
  <script src="http://www.devshed.com/wp-content/plugins/fanciest-author-box/js/ts-fab.min.js?ver=1.4.3" type="text/javascript">
  </script>
  <script src="http://www.devshed.com/wp-content/themes/devshed/js/modernizr.min.js?ver=4.2.1" type="text/javascript">
  </script>
  <link href="http://www.devshed.com/xmlrpc.php?rsd" rel="EditURI" title="RSD" type="application/rsd+xml"/>
  <link href="http://www.devshed.com/wp-includes/wlwmanifest.xml" rel="wlwmanifest" type="application/wlwmanifest+xml"/>
  <meta content="WordPress 4.2.1" name="generator"/>
  <link href="http://www.devshed.com/?p=678" rel="shortlink"/>
  <!--[if lt IE 9]&gt;
&lt;script src="http://html5shim.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
&lt;script src="http://www.devshed.com/wp-content/themes/devshed/js/respond.min.js"&gt;&lt;/script&gt;
&lt;link href="http://www.devshed.com/wp-content/themes/devshed/js/icons.fallback.css" rel="stylesheet"&gt;
&lt;![endif]-->
  <style type="text/css">
   .recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}
  </style>
  <style type="text/css">
   .affiliates img {
    display: inline-block;
    margin: 2.5em 1em 0;
    max-width: 11em;
    vertical-align: middle;
    width: 11em;
}
.affiliates img.square-logo {
    display: inline-block;
    margin: 2.5em 1em 0;
    max-width: 7em;
    vertical-align: middle;
    width: 7em;
}
  </style>
 </head>
 <body>
  <noscript>
   <link href="http://www.devshed.com/wp-content/themes/devshed/js/icons.fallback.css" rel="stylesheet"/>
  </noscript>
  <div class="hfeed site" id="page">
   <header class="site-header" data-headroom="" id="masthead" role="banner">
    <div class="grid">
     <div class="col-quarter clear logo-nav-block">
      <h1 class="site-title text-center">
       <a class="icon-site-title" href="http://www.devshed.com/" rel="home" title="devshed">
        <span class="screen-reader-text">
         devshed
        </span>
       </a>
      </h1>
      <span class="dropdown icon-sprite disabled-hide">
       <button class="nav-button">
        <span class="screen-reader-text">
         Navigation
        </span>
       </button>
      </span>
      <nav class="navigation-main text-center" id="site-navigation" role="navigation">
       <div class="screen-reader-text skip-link">
        <a href="#content" title="Skip to content">
         Skip to content
        </a>
       </div>
       <div class="menu-main-navigation-container">
        <ul class="menu" id="menu-main-navigation">
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2072" id="menu-item-2072">
          <a href="http://forums.devshed.com">
           Forums
          </a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2073" id="menu-item-2073">
          <a href="http://seotools.devshed.com/">
           Tools
          </a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2078" id="menu-item-2078">
          <a href="http://www.devshed.com/newsletter-signup/">
           Subscribe to our Mailing List
          </a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2071" id="menu-item-2071">
          <a href="http://www.devshed.com/articles/">
           Articles
          </a>
         </li>
        </ul>
       </div>
      </nav>
      <!-- #site-navigation -->
     </div>
     <div class="col-quarter text-center header-items network-block mobile-hidden" id="network">
      <button class="header-items network-button" id="flipnetwork">
       <span class="icon-sprite network disabled-hide">
       </span>
       Devshed Network
      </button>
      <ul class="ds-network enabled-hide">
       <li class="ds-developer-shed icon-ds-network">
        <a href="http://www.developershed.com" rel="follow">
         Developer Shed
        </a>
       </li>
       <li class="ds-aspfree icon-ds-network">
        <a href="http://www.aspfree.com" rel="follow">
         ASP Free
        </a>
       </li>
       <li class="ds-devshed icon-ds-network">
        <a href="http://www.devshed.com" rel="follow">
         Dev Shed
        </a>
       </li>
       <li class="ds-devarticles icon-ds-network">
        <a href="http://www.devarticles.com" rel="follow">
         Dev Articles
        </a>
       </li>
       <li class="ds-devhardware icon-ds-network">
        <a href="http://www.devhardware.com" rel="follow">
         Dev Hardware
        </a>
       </li>
       <li class="ds-tutorialized icon-ds-network">
        <a href="http://www.tutorialized.com" rel="follow">
         Tutorialized
        </a>
       </li>
       <li class="ds-seochat icon-ds-network">
        <a href="http://www.seochat.com" rel="follow">
         SEO Chat
        </a>
       </li>
       <li class="ds-codewalkers icon-ds-network">
        <a href="http://www.codewalkers.com" rel="follow">
         Codewalkers
        </a>
       </li>
       <li class="ds-webhosters icon-ds-network">
        <a href="http://webhosting.devshed.com" rel="follow">
         Web Hosters
        </a>
       </li>
       <li class="ds-devmechanic icon-ds-network">
        <a href="http://tools.devshed.com" rel="follow">
         Dev Mechanic
        </a>
       </li>
       <li class="ds-creatsite icon-ds-network">
        <a href="http://www.cre8asiteforums.com/forums/" rel="follow">
         Cre8asite Forums
        </a>
       </li>
      </ul>
     </div>
     <div class="col-half social-login-block">
      <div class="col-half clearfix" id="login">
       <div class="text-right">
        <button class="header-items login-button disabled-hide" id="fliplogin">
         login
        </button>
        <!-- causing scrolling on smaller screens -->
        <form action="http://www.devshed.com/" class="search-form header-search" method="get" role="search">
         <label>
          <span class="screen-reader-text">
           Search for:
          </span>
          <input class="search-field" name="s" placeholder="Search " title="Search for:" type="search" value=""/>
         </label>
         <input class="search-submit icon-sprite search-icon" type="submit" value="Search"/>
        </form>
       </div>
       <div class="enabled-hide login-fallback">
        <h4 class="text-left">
         Login
        </h4>
        <form action="http://forums.devshed.com/login.php?do=login" class="login_form shed-form" id="loginForm" method="post">
         <label>
          <span>
           Username
          </span>
          <input accesskey="u" class="input" id="vb_username" name="vb_login_username" placeholder="Tim Berners-Lee " type="text"/>
         </label>
         <label>
          <span>
           Password
          </span>
          <input class="input" id="vb_password" name="vb_login_password" placeholder="Something Secure" type="password"/>
         </label>
         <input accesskey="s" class="button-primary" type="submit" value="Login"/>
         <input name="do" type="hidden" value="login"/>
        </form>
        <ul class="login-meta">
         <li>
          <a class="action-link" href="http://forums.devshed.com/vbsso/vbsso.php?do=register&amp;d=http%3A%2F%2Fwww.seochat.com%2F&amp;lid=50c0f2ea262ab8.65384399" rel="nofollow">
           Register
          </a>
         </li>
         <li>
          <a class="action-link" href="http://forums.devshed.com/vbsso/vbsso.php?do=lost-password&amp;d=http%3A%2F%2Fwww.seochat.com%2F&amp;lid=50c0f2ea262ab8.65384399" rel="nofollow">
           Lost password?
          </a>
         </li>
        </ul>
       </div>
      </div>
      <div class="col-half desktop-text-left mobile-hidden">
       <ul class="social-links header-items">
        <li class="icon-sprite facebook">
         <a href="https://www.facebook.com/DevShed" target="_blank">
          <span class="screen-reader-text">
           facebook
          </span>
         </a>
        </li>
        <li class="icon-sprite google">
         <a href="https://plus.google.com/117600848231262463007" target="_blank">
          <span class="screen-reader-text">
           google
          </span>
         </a>
        </li>
        <li class="icon-sprite twitter">
         <a href="https://twitter.com/Dev_Shed" target="_blank">
          <span class="screen-reader-text">
           twitter
          </span>
         </a>
        </li>
        <li class="icon-sprite rss">
         <a href="/feed/" target="_blank">
          <span class="screen-reader-text">
           rss
          </span>
         </a>
        </li>
       </ul>
      </div>
     </div>
     <!-- .grid -->
     <!-- #masthead -->
     <div class="site-main" id="main">
      <div class="content-area" id="primary">
       <div class="site-content" id="content" role="main">
        <article class="post-678 post type-post status-publish format-standard hentry category-php" id="post-678">
         <header class="entry-header grid">
          <div class="title-block push-quarter col-half">
           <h1 class="entry-title articles">
            Accessing Databases with DB
           </h1>
          </div>
          <!-- .title-block -->
          <div class="entry-meta col-quarter accent-type articles-bg-light-small">
           <span class="posted-on">
            Posted on
            <a href="http://www.devshed.com/c/a/php/accessing-databases-with-db/" rel="bookmark" title="9:01 am">
             <time class="entry-date published" datetime="2004-11-30T09:01:00+00:00">
              November 30, 2004
             </time>
            </a>
           </span>
           <span class="byline">
            by
            <span class="author vcard">
             <a class="url fn n" href="http://forums.devshed.com/vbsso/vbsso.php?do=profile&amp;id=d55928ffc41dcd6c921e3265b9fc4cf4" title="View all posts by seo-admin">
              seo-admin
             </a>
            </span>
           </span>
          </div>
          <!-- .entry-meta -->
         </header>
         <!-- .entry-header -->
         <div class="entry-content entry-main-content grid content-block">
          <div class="col-quarter">
           <div class="featured-image">
           </div>
          </div>
          <div class="col-half">
           This chapter discusses the database abstraction layer PEAR DB. This package supplies a standard set of functions for talking to many different kinds of databases (from
           <em>
            Essential PHP Modules, Extensions, Tools
           </em>
           , by David Sklar, 2004, Apress, ISBN: 1590592808).
           <br/>
           <span id="more-678">
           </span>
           <br/>
           <p>
            <a href="http://www.amazon.com/exec/obidos/tg/detail/-/1590592808/ref=ase_develshedinc-20/103-2161934-6390250?v=glance&amp;s=books">
             <img align="left" alt="php" border="0" hspace="5" src="http://www.aspfree.com/images/stories/Accessing%20Databases%20with%20DB/sklarcover.jpg" vspace="2"/>
            </a>
            PEAR DB provides
            <strong>
            </strong>
            a consistent set of methods for using a relational database no matter what database youre using. It supports the following PHP database extensions: FrontBase, Informix, InterBase, Microsoft SQL Server, mSQL, ODBC, MySQL, Sybase, OCI8, and PostgreSQL. A driver that supports new features in version 4 of MySQL is also in the works. This chapter covers DB version 1.4.
           </p>
           <p>
            <strong>
             Exploring a Simple DB Example
            </strong>
           </p>
           <p>
            Retrieving a result and displaying it in a table with DB looks like this:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              // Load the DB code
              <br/>
              require DB.php';
             </font>
            </p>
            <p>
             <font face="courier new, courier, mono">
              // Connect to the database
              <br/>
              $dbh = DB::connect(mysql://user:password@host/database);
             </font>
            </p>
            <p>
             <font face="courier new, courier, mono">
              // Send a SELECT query to the database
              <br/>
              $sth = $dbh-&gt;query(SELECT flavor, price, calories FROM ice_cream);
             </font>
            </p>
            <p>
             <font face="courier new, courier, mono">
              // Check if any rows were returned
              <br/>
              if ($sth-&gt;numRows()) {
              <br/>
              print &lt;table&gt;;
              <br/>
              print &lt;tr&gt;&lt;th&gt;Ice Cream Flavor&lt;/th&gt;&lt;th&gt;Price per Serving&lt;/th&gt;&lt;th&gt;Calories per Serving&lt;/th&gt;&lt;/tr&gt;;
              <br/>
              // Retrieve each row
              <br/>
              while ($row = $sth-&gt;fetchRow()) {
              <br/>
              // And print out the elements in the row
              <br/>
              print &lt;tr&gt;&lt;td&gt;$row[0]&lt;/td&gt;&lt;td&gt;$row[1]&lt;/td&gt;&lt;td&gt;$row[2&lt;/td&gt;&lt;/tr&gt;n;
              <br/>
              }
              <br/>
              print &lt;/table&gt;;
              <br/>
              } else {
              <br/>
              print No results;
              <br/>
              }
             </font>
            </p>
           </blockquote>
           <p>
            <font face="courier new, courier, mono">
             DB::connect()
            </font>
            is a static class method that returns an object. You interact with the database by calling methods on this object. In this example, the object is assigned to the variable
            <font face="courier new, courier, mono">
             $dbh
            </font>
            , which stands for
            <i>
             database handle
            </i>
            . The argument to
            <font face="courier new, courier, mono">
             DB::connect()
            </font>
            is a Data Source Name (DSN). DSNs are explained in the next section.
           </p>
           <p>
            Next, you send a query to the database server with the
            <font face="courier new, courier, mono">
             $dbh-&gt;query()
            </font>
            method. This method returns a statement handle that is assigned to
            <font face="courier new, courier, mono">
             $sth
            </font>
            . This variable is a
            <font face="courier new, courier, mono">
             DB_Result object
            </font>
            with methods that return information about the retrieved rows. The
            <font face="courier new, courier, mono">
             $sth-&gt;numRows()
            </font>
            method returns the number of retrieved rows. In this example, its used to determine whether to print the retrieved data or just a message saying that no data was retrieved. The Query Information section explains methods such as
            <font face="courier new, courier, mono">
             numRows()
            </font>
            that provide information about a query.
           </p>
           <p>
            The
            <font face="courier new, courier, mono">
             $sth-&gt;fetchRow()
            </font>
            method returns an array that contains one row of data retrieved from the database. The statement handle maintains an internal counter of what the next row to return is, so the first time you call
            <font face="courier new, courier, mono">
             fetchRow(),
            </font>
            you get the first row retrieved from the database; the second time you call
            <font face="courier new, courier, mono">
             fetchRow(),
            </font>
            you get the second row, and so on. After all retrieved rows have been returned, fetchRow() returns NULL instead of a result array. This makes it easy to use in a while() loop as the example does.
           </p>
           <p>
            The fetchRow() method returns an indexed array with retrieved data. The first field requested by the SELECT query is in element 0 of the array, the second field in element 1, and so on. In this example, $row[0] is the value of the flavor column in each row, $row[1] is the price column, and $row[2] is the calories column. You can also retrieve rows as associative arrays or objects. The Sending Queries and Retrieving Results section discusses fetchRow() in more detail.
           </p>
           <p>
           </p>
           <table bgcolor="#efefef" border="0" class="contentpaneopen" width="100%">
            <tbody>
             <tr>
              <td>
               <p>
                <a href="http://www.amazon.com/exec/obidos/tg/detail/-/1590592808/ref=ase_develshedinc-20/103-2161934-6390250?v=glance&amp;s=books">
                 <em>
                  <img align="left" alt="" border="0" hspace="5" src="http://images.devshed.com/ds/stories/icons/buy-now90x68.gif" style="WIDTH: 90px; HEIGHT: 68px" vspace="3"/>
                 </em>
                </a>
                This chapteris from
                <em>
                 Essential PHP Modules, Extensions, Tools
                </em>
                , byDavid Sklar(Apress, 2004, ISBN: 1590592808). Check it out at your favorite bookstore today.
               </p>
               <p>
                <a href="http://www.amazon.com/exec/obidos/tg/detail/-/1590592808/ref=ase_develshedinc-20/103-2161934-6390250?v=glance&amp;s=books">
                 Buy this book now
                </a>
                .
               </p>
              </td>
             </tr>
            </tbody>
           </table>
           <p>
            {mospagebreak title=Introducing DSNs}
           </p>
           <strong>
            Introducing DSNs
           </strong>
           <p>
            As shown in the previous example, the argument to DB::connect() tells DB about the database to which you want to connect. This argument is a DSN, which has the following form:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              databasetype://username:password@hostname/databasename
             </font>
            </p>
           </blockquote>
           <p>
            <font face="courier new, courier, mono">
             databasetype
            </font>
            is the type of database youre connecting to: MySQL, Oracle, ODBC, Sybase, and so on. Table 1-1 shows the acceptable
            <font face="courier new, courier, mono">
             databasetype
            </font>
            values.
           </p>
           <p>
           </p>
           <table border="1" cellpadding="2" cellspacing="1" width="100%">
            <tbody>
             <tr>
              <td>
               <strong>
                <font size="1">
                 databasetype
                </font>
               </strong>
              </td>
              <td>
               <strong>
                <font size="1">
                 Database
                </font>
               </strong>
              </td>
             </tr>
             <tr>
              <td>
               <font size="1">
                fbsql
               </font>
              </td>
              <td>
               <font size="1">
                FrontBase
               </font>
              </td>
             </tr>
             <tr>
              <td>
               <font size="1">
                ibase
               </font>
              </td>
              <td>
               <font size="1">
                InterBase
               </font>
              </td>
             </tr>
             <tr>
              <td>
               <font size="1">
                ifx
               </font>
              </td>
              <td>
               <font size="1">
                Informix
               </font>
              </td>
             </tr>
             <tr>
              <td>
               <font size="1">
                mssql
               </font>
              </td>
              <td>
               <font size="1">
                Microsoft SQL Server
               </font>
              </td>
             </tr>
             <tr>
              <td>
               <font size="1">
                msql
               </font>
              </td>
              <td>
               <font size="1">
                mSQL
               </font>
              </td>
             </tr>
             <tr>
              <td>
               <font size="1">
                mysql
               </font>
              </td>
              <td>
               <font size="1">
                MySQL
               </font>
              </td>
             </tr>
             <tr>
              <td>
               <font size="1">
                oci8
               </font>
              </td>
              <td>
               <font size="1">
                Oracle 7, Oracle 8, Oracle 8i
               </font>
              </td>
             </tr>
             <tr>
              <td>
               <font size="1">
                odbc
               </font>
              </td>
              <td>
               <font size="1">
                ODBC
               </font>
              </td>
             </tr>
             <tr>
              <td>
               <font size="1">
                pgsql
               </font>
              </td>
              <td>
               <font size="1">
                PostgreSQL
               </font>
              </td>
             </tr>
             <tr>
              <td>
               <font size="1">
                sybase
               </font>
              </td>
              <td>
               <font size="1">
                Sybase
               </font>
              </td>
             </tr>
            </tbody>
           </table>
           <p>
           </p>
           <p>
            The
            <font face="courier new, courier, mono">
             username
            </font>
            and
            <font face="courier new, courier, mono">
             password
            </font>
            components of a DSN are the username and password necessary for connecting to the database server, and the
            <font face="courier new, courier, mono">
             hostname
            </font>
            component is the IP address or host name of the machine on which the database server is running. The
            <font face="courier new, courier, mono">
             databasename
            </font>
            component is the name of the individual database to access.
           </p>
           <p>
           </p>
           <p>
            If the database server is running on the same machine as your Web server, you can connect to it by specifying
            <font face="courier new, courier, mono">
             localhost
            </font>
            as the host name or by using a slightly different syntax to specify a Unix socket to connect to instead:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh = DB::connect(mysql://user:password@unix(socketpath)/database);
             </font>
            </p>
           </blockquote>
           <p>
            For example, if the filename of the Unix socket you want to use is
            <font face="courier new, courier, mono">
             /tmp/mysql.sock
            </font>
            , your DSN would look like this:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh = DB::connect(mysql://user:password@unix(/tmp/mysql.sock)/database);
             </font>
            </p>
           </blockquote>
           Sending Queries and Retrieving Results
           <p>
            As you saw in the Exploring a Simple DB Example section, the DB::query() method sends queries to the database. These can be SELECT queries that retrieve data from the database:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $sth = $dbh-&gt;query(SELECT * FROM ice_cream);
             </font>
            </p>
           </blockquote>
           <p>
            They can be INSERT, UPDATE, or DELETE queries that alter data in the database:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $res = $dbh-&gt;query(INSERT INTO ice_cream (flavor, price)
              <br/>
              VALUES (Chocolate,4.50));
              <br/>
              $res = $dbh-&gt;query(UPDATE ice_cream SET price = 5.95
              <br/>
              WHERE flavor LIKE Vanilla');
              <br/>
              $res = $dbh-&gt;query(DELETE FROM ice_cream WHERE price
              <br/>
              &lt; 2.00);
             </font>
            </p>
           </blockquote>
           <p>
            They can be queries that create, alter, or drop tables:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $res = $dbh-&gt;query(CREATE TABLE ice_cream (flavor VARCHAR
              <br/>
              (255),price DECIMAL(6,2), calories
              <br/>
              INT));
              <br/>
              $res = $dbh-&gt;query(ALTER TABLE ice_cream ADD flavor_id INT
              <br/>
              UNSIGNED NOT NULL);
              <br/>
              $res = $dbh-&gt;query(DROP TABLE ice_cream);
             </font>
            </p>
           </blockquote>
           <p>
            The
            <font face="courier new, courier, mono">
             query()
            </font>
            method sends to the database whatever SQL you specify. If you specify an SQL query, then
            <font face="courier new, courier, mono">
             query()
            </font>
            returns a
            <font face="courier new, courier, mono">
             DB_Result
            </font>
            object that provides access to the returned data. The
            <font face="courier new, courier, mono">
             DB_Result::fetchRow()
            </font>
            method returns one row from the retrieved data:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $sth = $dbh-&gt;query(SELECT flavor,price FROM ice_cream);
              <br/>
              $row = $sth-&gt;fetchRow();
              <br/>
              // Prints out the first retrieved row
              <br/>
              print Flavor: $row[0], Price: $row[1]n;
              <br/>
              // Prints out the second retrieved row
              <br/>
              $row = $sth-&gt;fetchRow();
              <br/>
              print Flavor: $row[0], Price: $row[1]n;
             </font>
            </p>
           </blockquote>
           <p>
            Each time you call
            <font face="courier new, courier, mono">
             fetchRow()
            </font>
            , you get the next retrieved row. The
            <font face="courier new, courier, mono">
             fetchRow()
            </font>
            method returns NULL when there are no more rows available. The
            <font face="courier new, courier, mono">
             fetchInto()
            </font>
            method is similar to
            <font face="courier new, courier, mono">
             fetchRow()
            </font>
            , but it puts the row of data directly into a variable instead of returning it:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $sth = $dbh-&gt;query(SELECT flavor,price FROM ice_cream);
              <br/>
              $sth-&gt;fetchInto($row);
              <br/>
              // Prints out the first retrieved row
              <br/>
              print Flavor: $row[0], Price: $row[1]n;
             </font>
            </p>
           </blockquote>
           <p>
            By default,
            <font face="courier new, courier, mono">
             fetchRow()
            </font>
            and
            <font face="courier new, courier, mono">
             fetchInto()
            </font>
            arrange data retrieved from the database in an indexed array. You can pass either of them an additional argument to change that. The constant
            <font face="courier new, courier, mono">
             DB_FETCHMODE_ASSOC
            </font>
            causes the data to be put in an associative array, and
            <font face="courier new, courier, mono">
             DB_FETCHMODE_OBJECT
            </font>
            causes the data to be returned as properties of an object. Pass one of these constants as the only argument to
            <font face="courier new, courier, mono">
             fetchRow()
            </font>
            :
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $sth = $dbh-&gt;query(SELECT flavor,price FROM ice_cream);
              <br/>
              $row = $sth-&gt;fetchRow(DB_FETCHMODE_ASSOC);
              <br/>
              // Prints out the first retrieved row
              <br/>
              print Flavor: $row[flavor], Price: $row[price]n;
              <br/>
              // Prints out the second retrieved row
              <br/>
              $row = $sth-&gt;fetchRow(DB_FETCHMODE_OBJECT);
              <br/>
              print Flavor: $row-&gt;flavor, Price: $row-&gt;pricen;
             </font>
            </p>
           </blockquote>
           <p>
            Or, pass it as the second argument to
            <font face="courier new, courier, mono">
             fetchInto()
            </font>
            :
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $sth = $dbh-&gt;query(SELECT flavor,price FROM ice_cream);
              <br/>
              $sth-&gt;fetchInto($row,DB_FETCHMODE_ASSOC);
              <br/>
              // Prints out the first retrieved row
              <br/>
              print Flavor: $row[flavor], Price: $row[price]n;
              <br/>
              // Prints out the second retrieved row
              <br/>
              $sth-&gt;fetchInto($row,DB_FETCHMODE_OBJECT);
              <br/>
              print Flavor: $row-&gt;flavor, Price: $row-&gt;pricen;
             </font>
            </p>
           </blockquote>
           <p>
            The
            <font face="courier new, courier, mono">
             DB::setFetchMode()
            </font>
            method sets a default fetch mode that is used on all subsequent calls to
            <font face="courier new, courier, mono">
             fetchRow()
            </font>
            or
            <font face="courier new, courier, mono">
             fetchInto()
            </font>
            . Pass
            <font face="courier new, courier, mono">
             setFetchMode()
            </font>
            the constant that corresponds to the default fetch mode you want:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh-&gt;setFetchMode(DB_FETCHMODE_ASSOC);
              <br/>
              $sth = $dbh-&gt;query(SELECT flavor,price FROM ice_cream);
              <br/>
              $row = $sth-&gt;fetchRow();
              <br/>
              // Prints out the first retrieved row
              <br/>
              print Flavor: $row[flavor], Price: $row[price]n;
              <br/>
              // Prints out the second retrieved row
              <br/>
              $row = $sth-&gt;fetchRow();
              <br/>
              print Flavor: $row[flavor], Price: $row[price]n;
             </font>
            </p>
           </blockquote>
           <p>
            Aside from
            <font face="courier new, courier, mono">
             DB_FETCHMODE_ASSOC
            </font>
            and
            <font face="courier new, courier, mono">
             DB_FETCHMODE_OBJECT
            </font>
            , you can also use
            <font face="courier new, courier, mono">
             DB_FETCHMODE_ORDERED
            </font>
            to specify the default behavior of an indexed array. For example, with
            <font face="courier new, courier, mono">
             DB_FETCHMODE_ORDERED
            </font>
            , the first two columns are accessed as
            <font face="courier new, courier, mono">
             $row[0]
            </font>
            and
            <font face="courier new, courier, mono">
             $row[1]
            </font>
            :
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh-&gt;setFetchMode(DB_FETCHMODE_ORDERED);
              <br/>
              $sth = $dbh-&gt;query(SELECT flavor,price FROM ice_cream);
              <br/>
              $row = $sth-&gt;fetchRow();
              <br/>
              // Prints out the first retrieved row
              <br/>
              print Flavor: $row[0], Price: $row[1]n;
              <br/>
              $row = $sth-&gt;fetchRow();
             </font>
            </p>
            <p>
             <font face="courier new, courier, mono">
              // Prints out the second retrieved row
              <br/>
              print Flavor: $row[0], Price: $row[1]n;
             </font>
            </p>
           </blockquote>
           <p>
            With
            <font face="courier new, courier, mono">
             DB_FETCHMODE_OBJECT
            </font>
            , the columns are accessed as
            <font face="courier new, courier, mono">
             $row-&gt;flavor
            </font>
            and
            <font face="courier new, courier, mono">
             $row-&gt;price
            </font>
            :
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh-&gt;setFetchMode(DB_FETCHMODE_OBJECT);
              <br/>
              $sth = $dbh-&gt;query(SELECT flavor,price FROM ice_cream);
              <br/>
              $row = $sth-&gt;fetchRow();
              <br/>
              // Prints out the first retrieved row
              <br/>
              print Flavor: $row-&gt;flavor, Price: $row-&gt;pricen;
              <br/>
              $row = $sth-&gt;fetchRow();
              <br/>
              // Prints out the second retrieved row
              <br/>
              print Flavor: $row-&gt;flavor, Price: $row-&gt;pricen;
             </font>
            </p>
           </blockquote>
           <p>
            The
            <font face="courier new, courier, mono">
             query()
            </font>
            method only returns a
            <font face="courier new, courier, mono">
             DB_Result
            </font>
            object when it successfully executes a SELECT query. If it successfully executes another kind of query that doesnt return any rows, it returns the constant
            <font face="courier new, courier, mono">
             DB_OK
            </font>
            . This is what happens for INSERT, DELETE, and UPDATE queries as well as for queries that change the structure of the database with CREATE TABLE, ALTER TABLE, or DROP TABLE.
           </p>
           <p>
            If the
            <font face="courier new, courier, mono">
             query()
            </font>
            method doesnt successfully execute any kind of query, it returns a DB_Error object. A query may fail because of a syntax error, missing data, or larger problems with the database server. Use the
            <font face="courier new, courier, mono">
             DB::isError()
            </font>
            static method to check that a query has executed successfully:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $sth = $dbh-&gt;query(SELECT flavor,price FROM ice_cream);
              <br/>
              if (DB::isError($sth)) {
              <br/>
              print Error!;
              <br/>
              } else {
              <br/>
              // display results
              <br/>
              }
             </font>
            </p>
           </blockquote>
           <p>
            The
            <font face="courier new, courier, mono">
             DB_Error
            </font>
            object has some methods that return information about the error. The two most useful of these are
            <font face="courier new, courier, mono">
             getMessage()
            </font>
            and
            <font face="courier new, courier, mono">
             getUserInfo().
            </font>
            The
            <font face="courier new, courier, mono">
             getMessage()
            </font>
            method returns a broadly descriptive error message, and the
            <font face="courier new, courier, mono">
             getUserInfo()
            </font>
            returns more specific error information. For example, this query tries to retrieve records from a table that doesnt exist:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $sth = $dbh-&gt;query(SELECT * FROM frozen_yogurt);
              <br/>
              if (DB::isError($sth)) {
              <br/>
              print $sth-&gt;getMessage() . nDetails: 
              <br/>
              .$sth-&gt;getUserInfo();
              <br/>
              } else {
              <br/>
              // display results
              <br/>
              }
             </font>
            </p>
           </blockquote>
           <p>
            The error is displayed like this:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              DB Error: no such table
              <br/>
              Details: SELECT * FROM frozen_yogurt [nativecode=1146 **
              <br/>
              Table test.frozen_yogurt doesnt exist]
             </font>
            </p>
           </blockquote>
           <p>
            The Introducing Error Handling section discusses how to handle errors.
           </p>
           <p>
           </p>
           <table bgcolor="#efefef" border="0" class="contentpaneopen" width="100%">
            <tbody>
             <tr>
              <td>
               <p>
                <a href="http://www.amazon.com/exec/obidos/tg/detail/-/1590592808/ref=ase_develshedinc-20/103-2161934-6390250?v=glance&amp;s=books">
                 <em>
                  <img align="left" alt="" border="0" hspace="5" src="http://images.devshed.com/ds/stories/icons/buy-now90x68.gif" style="WIDTH: 90px; HEIGHT: 68px" vspace="3"/>
                 </em>
                </a>
                This chapteris from
                <em>
                 Essential PHP Modules, Extensions, Tools
                </em>
                , byDavid Sklar(Apress, 2004, ISBN: 1590592808). Check it out at your favorite bookstore today.
               </p>
               <p>
                <a href="http://www.amazon.com/exec/obidos/tg/detail/-/1590592808/ref=ase_develshedinc-20/103-2161934-6390250?v=glance&amp;s=books">
                 Buy this book now
                </a>
                .
               </p>
              </td>
             </tr>
            </tbody>
           </table>
           <p>
            {mospagebreak title=Understanding Quoting and Placeholders}
           </p>
           <strong>
            Understanding Quoting and Placeholders
           </strong>
           <p>
            Frequently, database queries contain user input and other dynamic values. Before putting these data into queries, however, you need to escape any characters that have special meaning to your database. These characters are as follows:
           </p>
           <ul type="disc">
            <li>
             : The single quote character delimits string literals in queries. This helps the database tell the difference between string values and field and table names.
             <p>
             </p>
            </li>
            <li>
             %: The percent character is an SQL wildcard that means match any number of characters, like * in the shell or in a regular expression.
             <p>
             </p>
            </li>
            <li>
             _: The underscore character is an SQL wildcard that means match one character, like ? in the shell or . in a regular expression.
             <p>
             </p>
            </li>
            <li>
             : The backslash character is used by some databases as an escape character, so it itself has to be escaped.
             <p>
             </p>
            </li>
           </ul>
           <p>
            The proper way to escape these characters in many databases is to put a backslash before them:
            <font face="courier new, courier, mono">
             SELECT * FROM songs WHERE title LIKE Dont Be Cruel
            </font>
            becomes
            <font face="courier new, courier, mono">
             SELECT * FROM songs WHERE title LIKE Dont Be Cruel
            </font>
            . The single quote in
            <font face="courier new, courier, mono">
             Dont
            </font>
            is escaped to tell the database the song title is the entire string
            <font face="courier new, courier, mono">
             Dont Be Cruel
            </font>
            , not just
            <font face="courier new, courier, mono">
             Don
            </font>
            . Some databases escape the single quote character by turning it into two single quote characters:
            <font face="courier new, courier, mono">
             SELECT * FROM songs WHERE title LIKE Dont Be Cruel
            </font>
            .
           </p>
           <i>
            <strong>
             Placeholders
            </strong>
           </i>
           <p>
            PEAR DB makes it easy for you to escape single quotes by providing query placeholders. These are special characters in the query that are replaced by actual data when the query is sent to the database. When the data replaces the placeholder in the query, it is appropriately quoted. To use a placeholder, put a ? character where you want the data to end up and pass a second argument to
            <font face="courier new, courier, mono">
             query()
            </font>
            that contains an array holding the data:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $sth = $dbh-&gt;query(SELECT * FROM ice_cream WHERE flavor
              <br/>
              LIKE ?, array($_REQUEST[flavor]));
             </font>
            </p>
           </blockquote>
           <p>
            The query method replaces the ? with the value of
            <font face="courier new, courier, mono">
             $_REQUEST[flavor]
            </font>
            , surrounded by single quotes. Any single quotes in
            <font face="courier new, courier, mono">
             $_REQUEST[flavor]
            </font>
            are escaped in a method appropriate for the database youre using. For example, if the value of
            <font face="courier new, courier, mono">
             $_REQUEST[flavor]
            </font>
            is Straws Berry, then the query thats sent to MySQL is this:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              SELECT * FROM ice_cream WHERE flavor LIKE Straws Berry
             </font>
            </p>
           </blockquote>
           <p>
            The query thats sent to PostgreSQL is this:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              SELECT * FROM ice_cream WHERE flavor LIKE Straws Berry
             </font>
            </p>
           </blockquote>
           <p>
            The ? placeholder only quotes strings. Integers and doubles are put into the query as is, and nulls are replaced with NULL (without quotes).
           </p>
           <p>
            The ! placeholder is replaced by a value without any quoting or modification. This is useful for interpolating table names or column names. In this example, the table name to work with comes from
            <font face="courier new, courier, mono">
             $_REQUEST[dessert]
            </font>
            , and the value to insert comes from
            <font face="courier new, courier, mono">
             $_REQUEST[flavor]
            </font>
            :
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $desserts = array(ice_cream =&gt; 1, frozen_yogurt =&gt; 1, sorbet =&gt; 1);
              <br/>
              if ($desserts[$_REQUEST[dessert]]) {
              <br/>
              $dbh-&gt;query(INSERT INTO ! (flavor) VALUES (?),
              <br/>
              array($_REQUEST[dessert], $_REQUEST[flavor]));
              <br/>
              } else {
              <br/>
              print No such dessert.;
              <br/>
              }
             </font>
            </p>
           </blockquote>
           <p>
            Checking to see whether the specified table is defined in the $desserts array is necessary to prevent a malicious user from inserting data into an arbitrary table in your database. If you use the ! placeholder to specify table or field names, always check to see whether the value that is going to be substituted for the placeholder is an acceptable one before running the query.
           </p>
           <p>
            In addition to ? and !, there is a third placeholder: &amp;. This is replaced with the contents of a file. Include the name of the file in the array of values passed to
            <font face="courier new, courier, mono">
             query()
            </font>
            as a second argument:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh-&gt;query(INSERT INTO dessert_pictures (flavor,image)
              <br/>
              VALUES (?,&amp;), array(Rum Raisin,rum-raisin.jpeg));
             </font>
            </p>
           </blockquote>
           <i>
            <strong>
             The DB::quote() Method
            </strong>
           </i>
           <p>
            To quote values outside of
            <font face="courier new, courier, mono">
             query()
            </font>
            , use the
            <font face="courier new, courier, mono">
             DB::quote()
            </font>
            method. When passed a string, it returns the string quoted with single quotes escaped. It returns integers and doubles unmodified and returns the string NULL when passed a null value. For example:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $flavor = $dbh-&gt;quote($_REQUEST[flavor]);
              <br/>
              $dbh-&gt;query(SELECT * FROM ice_cream WHERE flavor LIKE
              <br/>
              $flavor);
             </font>
            </p>
           </blockquote>
           <i>
            <strong>
             SQL Wildcards
            </strong>
           </i>
           <p>
            Placeholder quoting and the
            <font face="courier new, courier, mono">
             quote()
            </font>
            method make strings safe for inclusion in queries. They dont escape the SQL wildcard characters % and _. You have to escape those characters yourself with
            <font face="courier new, courier, mono">
             str_replace()
            </font>
            :
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $safe_for_select = str_replace(array(%,_),
              <br/>
              array(%,_),$_REQUEST[flavor]);
             </font>
            </p>
           </blockquote>
           <p>
            Replacing % with % and _ with _ tells the database to treat those characters as a literal percent sign and underscore and not as SQL wildcards. If the value of
            <font face="courier new, courier, mono">
             $_REQUEST[flavor]
            </font>
            is
            <font face="courier new, courier, mono">
             Chocolate%
            </font>
            ,
            <font face="courier new, courier, mono">
             $dbh-&gt;query(SELECT * FROM ice_cream WHERE flavor LIKE $safe_for_select')
            </font>
            only finds rows where flavor exactly matches the string
            <font face="courier new, courier, mono">
             Chocolate%
            </font>
            , not all rows where
            <font face="courier new, courier, mono">
             flavor
            </font>
            begins with
            <font face="courier new, courier, mono">
             Chocolate
            </font>
            .
           </p>
           <p>
            Using
            <font face="courier new, courier, mono">
             str_replace()
            </font>
            to escape SQL wildcards can present a problem when used with query placeholders. The string quoting must happen before the wildcard escaping. Otherwise, the backslashes that the wildcard escaping inserts are themselves escaped by the string quoting. A single % character becomes % by the wildcard escaping. The % is turned into \% by string quoting. The expression \% matches any string that begins with a literal backslash character because \ is interpreted by the database as a literal backslash and then % is interpreted as match any number of characters. If the string quoting happens first, % is turned into %, and then the wildcard escaping makes it %. This matches only a one-character string containing a percent sign.
           </p>
           <p>
            What does all this mean in practice? If you want to protect against errant SQL wildcards in user input, use
            <font face="courier new, courier, mono">
             quote()
            </font>
            to quote strings before escaping wild-cards. Put these quoted and escaped values into queries explicitly instead of using placeholders:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $flavor = str_replace(array(%,_),array(%,_),
              <br/>
              $dbh-&gt;quote($_REQUEST[flavor]));
              <br/>
              $sth = $dbh-&gt;query(SELECT * FROM ice_cream WHERE flavor
              <br/>
              LIKE $flavor);
             </font>
            </p>
           </blockquote>
           <i>
            <strong>
             Magic Quotes
            </strong>
           </i>
           <p>
            PHP has some configuration settings that affect string quoting. These settings dont change PEAR DBs behavior, so improper configuration may result in values getting quoted twice.
           </p>
           <p>
            If the
            <font face="courier new, courier, mono">
             magic_quotes_gpc
            </font>
            configuration setting is on, single quotes and backslashes in incoming GET, POST, and cookie data are automatically backslash-escaped. If the
            <font face="courier new, courier, mono">
             magic_quotes_runtime
            </font>
            configuration setting is on, the same quoting happens automatically for data read from a file or database. If
            <font face="courier new, courier, mono">
             magic_quotes_sybase
            </font>
            is on, then
            <font face="courier new, courier, mono">
             magic_quotes_gpc
            </font>
            and
            <font face="courier new, courier, mono">
             magic_quotes_runtime
            </font>
            escape a single quote with another single quote and dont escape backslashes at all.
           </p>
           <p>
            Using query placeholder quoting with GET, POST, or cookie data when
            <font face="courier new, courier, mono">
             magic quotes_gpc
            </font>
            is on or with data read from a file or database when magic_quotes runtime is on results in data being quoted twice. If the submitted POST form variable flavor contains Straws Berry and
            <font face="courier new, courier, mono">
             magic_quotes_gpc
            </font>
            is on, then the value of
            <font face="courier new, courier, mono">
             $_REQUEST[flavor]
            </font>
            is
            <font face="courier new, courier, mono">
             Straws Berry
            </font>
            . A problem results if that value is substituted for the placeholder in this query:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $sth = $dbh-&gt;query(SELECT * FROM ice_cream WHERE flavor
              <br/>
              LIKE ?, array($_REQUEST[flavor]));
             </font>
            </p>
           </blockquote>
           <p>
            The query sent to the database is
            <font face="courier new, courier, mono">
             SELECT * FROM ice_cream WHERE flavor LIKE Straw\s Berry
            </font>
            . Because the backslash inserted by
            <font face="courier new, courier, mono">
             magic_quotes_gpc
            </font>
            is itself escaped by the placeholder substitution, this query doesnt find the appropriate rows.
           </p>
           <p>
            The easiest way to avoid this double escaping is to turn off
            <font face="courier new, courier, mono">
             magic_quotes_gpc
            </font>
            and
            <font face="courier new, courier, mono">
             magic_quotes_runtime
            </font>
            in your
            <font face="courier new, courier, mono">
             php.ini
            </font>
            or Web server configuration file. If you cant do that, use
            <font face="courier new, courier, mono">
             stripslashes()
            </font>
            to remove the escaping that was added:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $_REQUEST[flavor] = stripslashes($_REQUEST[flavor]);
              <br/>
              $sth = $dbh-&gt;query(SELECT * FROM ice_cream WHERE flavor
              <br/>
              LIKE ?, array($_REQUEST[flavor]));
             </font>
            </p>
           </blockquote>
           <p>
            To make your code more portable, call
            <font face="courier new, courier, mono">
             stripslashes()
            </font>
            only when necessary. The
            <font face="courier new, courier, mono">
             get_magic_quotes_gpc()
            </font>
            function returns 1 if
            <font face="courier new, courier, mono">
             magic_quotes_gpc
            </font>
            is on. Use get
            <font face="courier new, courier, mono">
             magic_quotes_gpc()
            </font>
            to determine whether to call
            <font face="courier new, courier, mono">
             stripslashes()
            </font>
            :
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p align="left">
             <font face="courier new, courier, mono">
              if (get_magic_quotes_gpc()) {
              <br/>
              $_REQUEST[flavor] = stripslashes($_REQUEST[flavor]);
              <br/>
              }
              <br/>
              $sth = $dbh-&gt;query(SELECT * FROM ice_cream WHERE flavor
              <br/>
              LIKE ?, array($_REQUEST[flavor]));
             </font>
            </p>
            <p align="left">
            </p>
           </blockquote>
           <p>
            <em>
             Note: The stripslashes() function turns \ into  and  into It doesnt unquote Sybase-style quoted strings. To do that, use str_replace() : $str = str_replace(,,$str); .
            </em>
           </p>
           <p>
           </p>
           <table bgcolor="#efefef" border="0" class="contentpaneopen" width="100%">
            <tbody>
             <tr>
              <td>
               <p>
                <a href="http://www.amazon.com/exec/obidos/tg/detail/-/1590592808/ref=ase_develshedinc-20/103-2161934-6390250?v=glance&amp;s=books">
                 <img align="left" alt="" border="0" hspace="5" src="http://images.devshed.com/ds/stories/icons/buy-now90x68.gif" style="WIDTH: 90px; HEIGHT: 68px" vspace="3"/>
                </a>
                This chapteris from
                <em>
                 Essential PHP Modules, Extensions, Tools
                </em>
                , byDavid Sklar(Apress, 2004, ISBN: 1590592808). Check it out at your favorite bookstore today.
               </p>
               <p>
                <a href="http://www.amazon.com/exec/obidos/tg/detail/-/1590592808/ref=ase_develshedinc-20/103-2161934-6390250?v=glance&amp;s=books">
                 Buy this book now
                </a>
                .
               </p>
              </td>
             </tr>
            </tbody>
           </table>
           <p>
            <em>
            </em>
            {mospagebreak title=Examining Data Retrieval Convenience Methods}
            <strong>
            </strong>
           </p>
           <p>
            PEAR DB provides methods that make common data retrieval operations easier. These methods combine
            <font face="courier new, courier, mono">
             query()
            </font>
            and
            <font face="courier new, courier, mono">
             fetchRow()
            </font>
            , allowing you to send a SELECT query to the database and retrieve its results in one step.
           </p>
           <i>
            <strong>
             DB::getRow()
            </strong>
           </i>
           <p>
            Use the
            <font face="courier new, courier, mono">
             getRow()
            </font>
            method when you want all values in the first or only row returned from a query.
            <font face="courier new, courier, mono">
             getRow()
            </font>
            returns an array or an object, depending on the current fetch mode. The default fetch mode is an indexed array:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $row = $dbh-&gt;getRow(SELECT flavor,price FROM ice_cream
              <br/>
              WHERE id = 56);
              <br/>
              print Flavor: $row[0], Price: $row[1];
             </font>
            </p>
           </blockquote>
           <p>
            Placeholders work with
            <font face="courier new, courier, mono">
             getRow()
            </font>
            just as they do with
            <font face="courier new, courier, mono">
             query():
            </font>
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $row = $dbh-&gt;getRow(SELECT flavor,price FROM ice_cream
              <br/>
              WHERE id = ?, array($id));
             </font>
            </p>
           </blockquote>
           <p>
            An alternate fetch mode can be passed as a third argument to
            <font face="courier new, courier, mono">
             getRow()
            </font>
            :
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $row = $dbh-&gt;getRow(SELECT flavor,price FROM ice_cream
              <br/>
              WHERE id = ?, array($id),DB_FETCHMODE_OBJECT);
              <br/>
              print Flavor: $row-&gt;flavor, Price: $row-&gt;price;
             </font>
            </p>
           </blockquote>
           <p>
            Placeholders must be passed to
            <font face="courier new, courier, mono">
             getRow()
            </font>
            in an array, just as they must be passed to
            <font face="courier new, courier, mono">
             query().
            </font>
           </p>
           <i>
            <strong>
             DB::getAll()
            </strong>
           </i>
           <p>
            Use
            <font face="courier new, courier, mono">
             getAll()
            </font>
            when you want all values in all rows returned from a query. Just like
            <font face="courier new, courier, mono">
             getRow()
            </font>
            ,
            <font face="courier new, courier, mono">
             getAll()
            </font>
            accepts an array of placeholder replacements as a second argument and an optional alternate fetch mode as a third argument. The
            <font face="courier new, courier, mono">
             getAll()
            </font>
            function always returns an array, but the type of each element in the array is controlled by the fetch mode. Iterate through the array that
            <font face="courier new, courier, mono">
             getAll()
            </font>
            returns to display results:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $results = $dbh-&gt;getAll(SELECT flavor,price
              <br/>
              FROM ice_cream);
              <br/>
              foreach($results as $row) {
              <br/>
              print Flavor: $row[0], Price: $row[1]&lt;br&gt;;
              <br/>
              }
             </font>
            </p>
           </blockquote>
           <i>
            <strong>
             DB::getOne()
            </strong>
           </i>
           <p>
            Use
            <font face="courier new, courier, mono">
             getOne()
            </font>
            when you want the first value from the first or only row returned from a query. The
            <font face="courier new, courier, mono">
             getOne()
            </font>
            function accepts an array of placeholder replacements as an optional second argument. It returns a string containing the retrieved value or
            <font face="courier new, courier, mono">
             NULL
            </font>
            if the query returned no results. It also returns
            <font face="courier new, courier, mono">
             NULL
            </font>
            if the first value of the first row of the result is
            <font face="courier new, courier, mono">
             NULL
            </font>
            :
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $flavor = $dbh-&gt;getOne(SELECT flavor FROM ice_cream ORDER
              <br/>
              BY price DESC LIMIT 1);
              <br/>
              if (is_null($flavor)) {
              <br/>
              print We dont have any ice cream!;
              <br/>
              } else {
              <br/>
              print Our most expensive flavor is $flavor.;
              <br/>
              }
             </font>
            </p>
           </blockquote>
           <i>
            <strong>
             DB::getCol()
            </strong>
           </i>
           <p>
            Use
            <font face="courier new, courier, mono">
             getCol()
            </font>
            when you want the value of a particular column in all the rows returned from a query. The
            <font face="courier new, courier, mono">
             getCol()
            </font>
            function accepts a column name or number to return as an optional second argument. If this is not specified,
            <font face="courier new, courier, mono">
             getCol()
            </font>
            returns the first column. The function also accepts an array of placeholder replacements as an optional third argument. The retrieved values are returned as an indexed array:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $flavors = $dbh-&gt;getCol(SELECT flavor FROM ice_cream);
              <br/>
              print Our flavors: &lt;ul&gt; &lt;li&gt;  . join(&lt;li&gt;,$flavors)
              <br/>
              .&lt;/ul&gt;;
             </font>
            </p>
           </blockquote>
           <i>
            <strong>
             DB::getAssoc()
            </strong>
           </i>
           <p>
            Use
            <font face="courier new, courier, mono">
             getAssoc()
            </font>
            when you want an entire result set, such as
            <font face="courier new, courier, mono">
             getAll()
            </font>
            , but you want to easily access particular rows of the result. The
            <font face="courier new, courier, mono">
             getAssoc()
            </font>
            function returns an associative array whose keys are the values of the first column of the query results. If you select two columns, the associative array values are the values of the second column:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $res = $dbh-&gt;getAssoc(SELECT flavor,price FROM
              <br/>
              ice_cream);
              <br/>
              print A serving of Heavenly Hash costs: .$res[Heavenly
              <br/>
              Hash]
             </font>
            </p>
           </blockquote>
           <p>
            If you select more than two columns, the associative array values are themselves arrays of the remaining column values for each row:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $res = $dbh-&gt;getAssoc(SELECT id,flavor,price FROM
              <br/>
              ice_cream);
              <br/>
              if ($flavor = $res[$_REQUEST[flavor_id]]) {
              <br/>
              print Your selected flavor is: $flavor[0] with price
              <br/>
              $flavor[1].;
              <br/>
              } else {
              <br/>
              print No flavor has ID $_REQUEST[flavor_id].;
              <br/>
              }
             </font>
            </p>
           </blockquote>
           <p>
            To force
            <font face="courier new, courier, mono">
             getAssoc()
            </font>
            to return values as arrays instead of scalars when only one column of values is involved, pass true as a second argument when calling the function:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $res = $dbh-&gt;getAssoc(SELECT flavor,price FROM
              <br/>
              ice_cream, true);
              <br/>
              print A serving of Heavenly Hash costs: .$res[Heavenly
              <br/>
              Hash][0];
             </font>
            </p>
           </blockquote>
           <p>
            The third argument to
            <font face="courier new, courier, mono">
             getAssoc()
            </font>
            is an array of values to replace any placeholders in the query:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $res = $dbh-&gt;getAssoc(SELECT id,flavor,price FROM
              <br/>
              ice_cream WHERE price &gt; ?, true,array($_REQUEST
              <br/>
              [min_price]));
              <br/>
              if ($flavor = $res[$_REQUEST[flavor_id]]) {
              <br/>
              print Your selected flavor is: $flavor[0] with price
              <br/>
              $flavor[1].;
              <br/>
              } else {
              <br/>
              print No flavor has ID $_REQUEST[flavor_id].;
              <br/>
              }
             </font>
            </p>
           </blockquote>
           <p>
            Tell
            <font face="courier new, courier, mono">
             getAssoc()
            </font>
            to return each array of values as an associative array instead of an indexed array by passing
            <font face="courier new, courier, mono">
             DB_FETCHMODE_ASSOC
            </font>
            as a fourth argument:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $res = $dbh-&gt;getAssoc(SELECT id,flavor,price FROM
              <br/>
              ice_cream, null, null, DB_FETCHMODE_ASSOC);
              <br/>
              if ($flavor = $res[$_REQUEST[flavor_id]]) {
              <br/>
              print Your selected flavor is: $flavor[flavor] with price
              <br/>
              $flavor[price].;
              <br/>
              } else {
              <br/>
              print No flavor has ID $_REQUEST[flavor_id].;
              <br/>
              }
             </font>
            </p>
           </blockquote>
           <p>
            The
            <font face="courier new, courier, mono">
             getAssoc()
            </font>
            function returns an array whose values are easy to display as an HTML
            <font face="courier new, courier, mono">
             &lt;select&gt;
            </font>
            widget. Select the columns for the value and label of each option and then use foreach to loop through the array:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $flavors= $dbh-&gt;getAssoc(SELECT id,flavor FROM
              <br/>
              ice_cream);
              <br/>
              print &lt;select name=flavor&gt;';
              <br/>
              foreach ($flavors as $id =&gt; $flavor) {
              <br/>
              print &lt;option value=$id&gt;$flavor&lt;/option&gt;;
              <br/>
              }
              <br/>
              print &lt;/select&gt;';
             </font>
            </p>
           </blockquote>
           <p>
           </p>
           <p>
           </p>
           <table bgcolor="#efefef" border="0" class="contentpaneopen" width="100%">
            <tbody>
             <tr>
              <td>
               <p>
                <a href="http://www.amazon.com/exec/obidos/tg/detail/-/1590592808/ref=ase_develshedinc-20/103-2161934-6390250?v=glance&amp;s=books">
                 <em>
                  <img align="left" alt="" border="0" hspace="5" src="http://images.devshed.com/ds/stories/icons/buy-now90x68.gif" style="WIDTH: 90px; HEIGHT: 68px" vspace="3"/>
                 </em>
                </a>
                This chapteris from
                <em>
                 Essential PHP Modules, Extensions, Tools
                </em>
                , byDavid Sklar(Apress, 2004, ISBN: 1590592808). Check it out at your favorite bookstore today.
               </p>
               <p>
                <a href="http://www.amazon.com/exec/obidos/tg/detail/-/1590592808/ref=ase_develshedinc-20/103-2161934-6390250?v=glance&amp;s=books">
                 Buy this book now
                </a>
                .
               </p>
              </td>
             </tr>
            </tbody>
           </table>
           <p>
            {mospagebreak title=Understanding Query Information}
            <strong>
            </strong>
           </p>
           <p>
            In addition to methods that send queries to the database and return results, DB provides some methods that return information about a query. These methods tell you the size of the result set returned or modified by a query.
           </p>
           <i>
            <strong>
             DB_Result::numRows()
            </strong>
           </i>
           <p>
            The
            <font face="courier new, courier, mono">
             numRows()
            </font>
            method returns the number of rows in a result set. This is useful for checking if any rows were selected before printing them:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $res = $dbh-&gt;query(SELECT flavor FROM ice_cream
              <br/>
              WHERE price &lt; 5);
              <br/>
              if ($res-&gt;numRows() &gt; 0) {
              <br/>
              print Your choices: &lt;ul&gt;;
              <br/>
              while($row = $res-&gt;fetchRow())
              <br/>
              { print &lt;li&gt; $row[0]&lt;/li&gt;; }
              <br/>
              print &lt;/ul&gt;;
              <br/>
              } else {
              <br/>
              print No flavors available for less than five
              <br/>
              dollars.;
              <br/>
              }
             </font>
            </p>
           </blockquote>
           <p>
            The
            <font face="courier new, courier, mono">
             numRows()
            </font>
            method is called on the statement handle, not on the database handle. You can only call
            <font face="courier new, courier, mono">
             numRows()
            </font>
            after a SELECT query.
           </p>
           <i>
            <strong>
             DB_Result::numCols()
            </strong>
           </i>
           <p>
            The
            <font face="courier new, courier, mono">
             numCols()
            </font>
            method returns the number of columns in a result set. You can use
            <font face="courier new, courier, mono">
             numCols()
            </font>
            to dynamically display information about a table:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $res = $dbh-&gt;query(SELECT * FROM ice_cream);
              <br/>
              print There are .$res-&gt;numCols(). columns in the
              <br/>
              ice_cream table.'; print &lt;table&gt;';
              <br/>
              while($row = $res-&gt;fetchRow()) {
              <br/>
              print &lt;tr&gt;';
              <br/>
              foreach ($row as $val) { print &lt;td&gt;$val&lt;/td&gt;; }
              <br/>
              print &lt;/tr&gt;';
              <br/>
              }
              <br/>
              print &lt;/table&gt;';
             </font>
            </p>
           </blockquote>
           <p>
            Like
            <font face="courier new, courier, mono">
             numRows()
            </font>
            , the
            <font face="courier new, courier, mono">
             numCols()
            </font>
            method is called on the statement handle, not on the database handle. You can only call
            <font face="courier new, courier, mono">
             numCols()
            </font>
            after a SELECT query.
           </p>
           <i>
            <strong>
             DB::affectedRows()
            </strong>
           </i>
           <p>
            The
            <font face="courier new, courier, mono">
             affectedRows()
            </font>
            method returns how many rows were changed by an UPDATE, INSERT, or DELETE query. It is called on the database handle, not the statement handle. This is because the
            <font face="courier new, courier, mono">
             query()
            </font>
            method doesnt return a statement handle for these kinds of queries, just a status code or error object:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh-&gt;query(UPDATE ice_cream SET price = price  1 WHERE
              <br/>
              flavor
             </font>
             <font face="courier new, courier, mono">
              LIKE Chocolate%');
              <br/>
              print Discount applied to  . $dbh-&gt;affectedRows()
              <br/>
             </font>
             <font face="courier new, courier, mono">
              .  Chocolate flavors.';
             </font>
            </p>
           </blockquote>
           <p>
           </p>
           <p>
           </p>
           <table bgcolor="#efefef" border="0" class="contentpaneopen" width="100%">
            <tbody>
             <tr>
              <td>
               <p>
                <a href="http://www.amazon.com/exec/obidos/tg/detail/-/1590592808/ref=ase_develshedinc-20/103-2161934-6390250?v=glance&amp;s=books">
                 <em>
                  <img align="left" alt="" border="0" hspace="5" src="http://images.devshed.com/ds/stories/icons/buy-now90x68.gif" style="WIDTH: 90px; HEIGHT: 68px" vspace="3"/>
                 </em>
                </a>
                This chapteris from
                <em>
                 Essential PHP Modules, Extensions, Tools
                </em>
                , byDavid Sklar(Apress, 2004, ISBN: 1590592808). Check it out at your favorite bookstore today.
               </p>
               <p>
                <a href="http://www.amazon.com/exec/obidos/tg/detail/-/1590592808/ref=ase_develshedinc-20/103-2161934-6390250?v=glance&amp;s=books">
                 Buy this book now
                </a>
                .
               </p>
              </td>
             </tr>
            </tbody>
           </table>
           <p>
            {mospagebreak title=Running a Query Multiple Times}
            <strong>
            </strong>
           </p>
           <p>
            Often, a program needs to run a query many times with different values each time. A query that inserts a product into a product catalog is called ten times to insert ten new products into the catalog. Each time, the structure of the query is identical. However, new values such as product name and price must be incorporated into the query on each invocation.
           </p>
           <i>
            <strong>
             DB::prepare() and DB::execute()
            </strong>
           </i>
           <p>
            To run a query multiple times with different values each time, use
            <font face="courier new, courier, mono">
             prepare()
            </font>
            and
            <font face="courier new, courier, mono">
             execute()
            </font>
            . Call
            <font face="courier new, courier, mono">
             prepare()
            </font>
            once with placeholders representing the values that change on each query execution. This returns a prepared statement handle. Then, call
            <font face="courier new, courier, mono">
             execute()
            </font>
            with the prepared statement handle and each set of values:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $prh = $dbh-&gt;prepare(INSERT INTO ice_cream (flavor,price)
              <br/>
              VALUES (?,?));
              <br/>
              $dbh-&gt;execute($prh,array(Coffee,1.25));
              <br/>
              $dbh-&gt;execute($prh,array(Pistachio,2.00));
              <br/>
              $dbh-&gt;execute($prh,array(Caramel Pecan,1.75));
             </font>
            </p>
           </blockquote>
           <p>
            The
            <font face="courier new, courier, mono">
             prepare()
            </font>
            method supports the same set of placeholders that
            <font face="courier new, courier, mono">
             query()
            </font>
            does, so you can use ! for unquoted values and &amp; for file contents:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $prh = $dbh-&gt;prepare(INSERT INTO ! (flavor,price,image)
              <br/>
              VALUES (?,?,&amp;));
              <br/>
              $dbh-&gt;execute($prh,array(frozen_yogurt,Tofu Health
              <br/>
              Crunch,2.50, yogurt-tofu-crunch.jpg));
              <br/>
              $dbh-&gt;execute($prh,array
              <br/>
              (ice_cream,Vanilla,1.40,delicious-vanilla.jpg));
             </font>
            </p>
           </blockquote>
           <p>
            These methods can be used for SELECT queries as well. Each successful
            <font face="courier new, courier, mono">
             execute()
            </font>
            of a SELECT query returns a statement handle. These are the same statement handles that
            <font face="courier new, courier, mono">
             query()
            </font>
            returns:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $prh = $dbh-&gt;prepare(SELECT flavor FROM !);
              <br/>
              $res = $dbh-&gt;execute($prh,frozen_yogurt);
              <br/>
              print_flavors(Frozen Yogurt,$res);
              <br/>
              $res = $dbh-&gt;execute($prh,ice_cream);
              <br/>
              print_flavors(Ice Cream,$res);
             </font>
            </p>
           </blockquote>
           <i>
            <strong>
             DB::autoPrepare() and DB::autoExecute()
            </strong>
           </i>
           <p>
            While
            <font face="courier new, courier, mono">
             prepare()
            </font>
            and
            <font face="courier new, courier, mono">
             execute()
            </font>
            make it easier to run the same query multiple times,
            <font face="courier new, courier, mono">
             autoPrepare()
            </font>
            and
            <font face="courier new, courier, mono">
             autoExecute()
            </font>
            make it easier to build queries from arrays of field names and values. The
            <font face="courier new, courier, mono">
             autoPrepare()
            </font>
            method returns a prepared statement handle just like
            <font face="courier new, courier, mono">
             prepare()
            </font>
            . Instead of passing it an SQL query with placeholders, however, you pass it a table name, an array of field names, and amode. For example, these calls to
            <font face="courier new, courier, mono">
             autoPrepare()
            </font>
            and
            <font face="courier new, courier, mono">
             prepare()
            </font>
            return identical statement handles:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh-&gt;autoPrepare(ice_cream,array(flavor,price),
              <br/>
              DB_AUTOQUERY_INSERT);
              <br/>
              $dbh-&gt;prepare(INSERT INTO ice_cream (flavor,price)
              <br/>
              VALUES (?,?));
             </font>
            </p>
           </blockquote>
           <p>
            The first argument to
            <font face="courier new, courier, mono">
             autoPrepare()
            </font>
            is the name of the table to use. The second argument is an array of field names. The third argument tells
            <font face="courier new, courier, mono">
             autoPrepare()
            </font>
            whether to prepare an INSERT or UPDATE query. To prepare an UPDATE query, use
            <font face="courier new, courier, mono">
             DB_AUTOQUERY_UPDATE
            </font>
            :
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh-&gt;autoPrepare(ice_cream,array(flavor,price),
              <br/>
              DB_AUTOQUERY_UPDATE);
             </font>
            </p>
           </blockquote>
           <p>
            This returns a prepared statement handle as if you had called this:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh-&gt;prepare(UPDATE ice_cream SET flavor = ?,
              <br/>
              price = ?);
             </font>
            </p>
           </blockquote>
           <p>
            To include a
            <font face="Verdana, Arial, Helvetica, sans-serif">
             WHERE
            </font>
            clause in an UPDATE query generated by
            <font face="courier new, courier, mono">
             autoPrepare()
            </font>
            , pass it as a fourth argument to
            <font face="courier new, courier, mono">
             autoPrepare()
            </font>
            :
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh-&gt;autoPrepare(ice_cream,array(flavor,price),
              <br/>
              DB_AUTOQUERY_UPDATE, price &lt; 10);
             </font>
            </p>
           </blockquote>
           <p>
            This returns a prepared statement handle as if you had called this:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh-&gt;prepare(UPDATE ice_cream SET flavor = ?, price = ?
              <br/>
              WHERE price &lt; 10);
             </font>
            </p>
           </blockquote>
           <p>
            The
            <font face="courier new, courier, mono">
             autoExecute()
            </font>
            method takes
            <font face="courier new, courier, mono">
             autoPrepare()
            </font>
            one step further. It prepares a query but also executes it with an array of values. Instead of an array of field names such as
            <font face="courier new, courier, mono">
             autoPrepare()
            </font>
            ,
            <font face="courier new, courier, mono">
             autoExecute()
            </font>
            takes an associative array of fields and values:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh-&gt;autoExecute(ice_cream,array(flavor =&gt; Blueberry
              <br/>
              , price =&gt; 3.00), DB_AUTOQUERY_INSERT);
             </font>
            </p>
           </blockquote>
           <p>
            This prepares and executes a query as if you had called this:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $prh = $dbh-&gt;prepare(INSERT INTO ice_cream (flavor,price)
              <br/>
              VALUES (?,?));
              <br/>
              $dbh-&gt;execute($prh, array(Blueberry,3.00));
             </font>
            </p>
           </blockquote>
           <p>
            The
            <font face="courier new, courier, mono">
             autoExecute()
            </font>
            method runs UPDATE queries just like
            <font face="courier new, courier, mono">
             autoPrepare()
            </font>
            :
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             $dbh-&gt;autoExecute(ice_cream,
             <br/>
             array(flavor =&gt; Blueberry, price =&gt; 3.00),
             <br/>
             DB_AUTOQUERY_UPDATE);
            </p>
           </blockquote>
           <p>
            This prepares and executes a query as if you had called this:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $prh = $dbh-&gt;prepare(UPDATE ice_cream SET flavor = ?,
              <br/>
              price = ?);
              <br/>
              $dbh-&gt;execute($prh, array(Blueberry,3.00));
             </font>
            </p>
           </blockquote>
           <p>
            The
            <font face="courier new, courier, mono">
             autoExecute()
            </font>
            method also accepts a WHERE clause just like
            <font face="courier new, courier, mono">
             autoPrepare()
            </font>
            :
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh-&gt;autoExecute(ice_cream,array(flavor =&gt;
              <br/>
              Blueberry, price =&gt; 3.00),
              <br/>
              DB_AUTOQUERY_UPDATE,id = 23);
             </font>
            </p>
           </blockquote>
           <p>
            This prepares and executes a query as if you had called this:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $prh = $dbh-&gt;prepare(UPDATE ice_cream SET flavor = ?,
              <br/>
              price = ? WHERE id = 23);
              <br/>
              $dbh-&gt;execute($prh, array(Blueberry,3.00));
             </font>
            </p>
           </blockquote>
           <p>
            The
            <font face="courier new, courier, mono">
             autoPrepare()
            </font>
            and
            <font face="courier new, courier, mono">
             autoExecute()
            </font>
            methods are especially useful for saving information from a Web form that has many fields. Define those fields in an array, and use
            <font face="courier new, courier, mono">
             autoExecute()
            </font>
            to save information from the
            <font face="courier new, courier, mono">
             $_REQUEST
            </font>
            array into the database. If the fields in the form change, you have to only update the line of code that defines the
            <font face="courier new, courier, mono">
             $fields
            </font>
            array, and the query is automatically changed as well:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $fields = array(flavor,price,id,rating);
              <br/>
              $values = array();
              <br/>
              foreach ($fields as $f) { $values[$f] = $_REQUEST[$f]; }
              <br/>
              $dbh-&gt;autoExecute(ice_cream,$values,DB_AUTOQUERY_INSERT);
             </font>
            </p>
           </blockquote>
           <p>
           </p>
           <p>
           </p>
           <table bgcolor="#efefef" border="0" class="contentpaneopen" width="100%">
            <tbody>
             <tr>
              <td>
               <p>
                <a href="http://www.amazon.com/exec/obidos/tg/detail/-/1590592808/ref=ase_develshedinc-20/103-2161934-6390250?v=glance&amp;s=books">
                 <em>
                  <img align="left" alt="" border="0" hspace="5" src="http://images.devshed.com/ds/stories/icons/buy-now90x68.gif" style="WIDTH: 90px; HEIGHT: 68px" vspace="3"/>
                 </em>
                </a>
                This chapteris from
                <em>
                 Essential PHP Modules, Extensions, Tools
                </em>
                , byDavid Sklar(Apress, 2004, ISBN: 1590592808). Check it out at your favorite bookstore today.
               </p>
               <p>
                <a href="http://www.amazon.com/exec/obidos/tg/detail/-/1590592808/ref=ase_develshedinc-20/103-2161934-6390250?v=glance&amp;s=books">
                 Buy this book now
                </a>
                .
               </p>
              </td>
             </tr>
            </tbody>
           </table>
           <p>
            {mospagebreak title=Introducing Sequences}
            <strong>
            </strong>
           </p>
           <p>
            A
            <i>
             sequence
            </i>
            is a source of unique integer identifiers. When you need an ID for an item in your database, ask a sequence for its next available ID. This ID is guaranteed to be unique within the sequence. If two queries ask the same sequence for an ID at the same time, each query gets a different answer.
           </p>
           <p>
            The easiest way to use a sequence is just to call the
            <font face="courier new, courier, mono">
             DB::nextID()
            </font>
            method. This creates the specified sequence if it doesnt already exist and returns the next available ID in the sequence:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $flavor_id = $dbh-&gt;nextID(flavors);
              <br/>
              $dbh-&gt;query(INSERT INTO ice_cream (id,flavor) VALUES
              <br/>
              (?,?), array($flavor_id,Walnut));
             </font>
            </p>
           </blockquote>
           <p>
            To create sequences explicitly, use
            <font face="courier new, courier, mono">
             createSequence()
            </font>
            :
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh-&gt;createSequence(flavors);
             </font>
            </p>
           </blockquote>
           <p>
            If you are creating your sequences with
            <font face="courier new, courier, mono">
             createSequence()
            </font>
            , you can tell
            <font face="courier new, courier, mono">
             nextID()
            </font>
            not to create sequences automatically by passing false as a second argument:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $flavor_id = $dbh-&gt;nextID(flavors,false);
              <br/>
              if (DB::isError($flavor_id)) {
              <br/>
              die(Cant get sequence ID);
              <br/>
              }
              <br/>
              $dbh-&gt;query(INSERT INTO ice_cream (id,flavor) VALUES
              <br/>
              (?,?), array($flavor_id,Walnut));
             </font>
            </p>
           </blockquote>
           <p>
            Whether they are created automatically by
            <font face="courier new, courier, mono">
             nextID()
            </font>
            or explicitly with
            <font face="courier new, courier, mono">
             createSequence()
            </font>
            , the
            <font face="courier new, courier, mono">
             dropSequence()
            </font>
            method deletes a sequence:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh-&gt;dropSequence(flavors);
             </font>
            </p>
           </blockquote>
           <strong>
            Introducing Error Handling
           </strong>
           <p>
            DB methods return a
            <font face="courier new, courier, mono">
             DB_Error
            </font>
            object if they fail. The
            <font face="courier new, courier, mono">
             DB_Error
            </font>
            object contains fields that describe the error condition. The Sending Queries and Receiving Results section describes the basic use of
            <font face="courier new, courier, mono">
             DB::isError()
            </font>
            . This function returns true when the object passed to it is a
            <font face="courier new, courier, mono">
             DB_Error
            </font>
            object. To comprehensively catch errors with this test, use it each time you call a DB method that may return an error:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh = DB::Connect(mysql://user:pwd@localhost/dbname);
              <br/>
              if (DB::isError($dbh)) {
              <br/>
              die(Cant connect: .$dbh-&gt;getMessage());
              <br/>
              }
              <br/>
              $sth = $dbh-&gt;query(SELECT flavor,price FROM ice_cream);
              <br/>
              if (DB::isError($dbh)) {
              <br/>
              die(Cant SELECT: .$sth-&gt;getMessage());
              <br/>
              }
              <br/>
              while($res = $sth-&gt;fetchRow()) {
              <br/>
              if (DB::isError($res)) {
              <br/>
              die(Cant get row: .$res-&gt;getMessage());
              <br/>
              }
              <br/>
              print Flavor: $res[0], Price: $res[1];
              <br/>
              }
             </font>
            </p>
           </blockquote>
           <p>
            Instead of testing each call to
            <font face="courier new, courier, mono">
             DB::isError()
            </font>
            with
            <font face="courier new, courier, mono">
             if()
            </font>
            , you can use the and logical operator instead, which is slightly more concise:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh = DB::Connect(mysql://test:@localhost/test);
              <br/>
              DB::isError($dbh) and die(Cant connect: 
              <br/>
              .$dbh-&gt;getMessage());
              <br/>
              $sth = $dbh-&gt;query(SELECT flavor,price FROM ice_cream);
              <br/>
              DB::isError($sth) and die(Cant SELECT: 
              <br/>
              .$sth-&gt;getMessage());
              <br/>
              while($res = $sth-&gt;fetchRow()) {
              <br/>
              DB::isError($res) and die(Cant get row: 
              <br/>
              .$res-&gt;getMessage());
              <br/>
              print Flavor: $res[0], Price: $res[1]n;
              <br/>
              }
             </font>
            </p>
           </blockquote>
           <p>
            Still, using
            <font face="courier new, courier, mono">
             DB::isError()
            </font>
            after each relevant method call is cumbersome and error prone. If you forget to check the results of one method and it fails, subsequent operations wont work properly. The
            <font face="courier new, courier, mono">
             DB::setErrorHandling()
            </font>
            method allows you to tell DB to automatically take an action whenever a DB method call returns an error. To print the error and exit the program immediately, pass the constant
            <font face="courier new, courier, mono">
             PEAR_ERROR_DIE
            </font>
            to
            <font face="courier new, courier, mono">
             setErrorHandling():
            </font>
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh = DB::Connect(mysql://test:@localhost/test);
              <br/>
              DB::isError($dbh) and die($dbh-&gt;getMessage());
              <br/>
              $dbh-&gt;setErrorHandling(PEAR_ERROR_DIE);
              <br/>
              $sth = $dbh-&gt;query(SELECT flavor,price FROM ice_cream);
              <br/>
              while($res = $sth-&gt;fetchRow()) {
              <br/>
              print Flavor: $res[0], Price: $res[1]n;
              <br/>
              }
             </font>
            </p>
           </blockquote>
           <p>
            To print the error but continue program execution, use
            <font face="courier new, courier, mono">
             PEAR_ERROR_PRINT
            </font>
            instead of
            <font face="courier new, courier, mono">
             PEAR_ERROR_DIE
            </font>
            . You can also use
            <font face="courier new, courier, mono">
             setErrorHandling()
            </font>
            to have a custom function called each time theres a DB error. Pass
            <font face="courier new, courier, mono">
             PEAR_ERROR_CALLBACK
            </font>
            as the first argument to
            <font face="courier new, courier, mono">
             setErrorHandling()
            </font>
            and the name of the function to call as the second argument:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              $dbh = DB::Connect(mysql://test:@localhost/test);
              <br/>
              DB::isError($dbh) and die($dbh-&gt;getMessage());
              <br/>
              $dbh-&gt;setErrorHandling(PEAR_ERROR_CALLBACK,db_error);
              <br/>
              $sth = $dbh-&gt;query(SELECT flavor_name,price FROM
              <br/>
              ice_cream);
              <br/>
              while($res = $sth-&gt;fetchRow()) {
              <br/>
              print Flavor: $res[0], Price: $res[1]n;
              <br/>
              }
              <br/>
              function db_error($err_obj) {
              <br/>
              print Error! [$err_obj-&gt;code] $err_obj-&gt;userinfo;
              <br/>
              }
             </font>
            </p>
           </blockquote>
           <p>
            Because this example has an unknown field in the SQL query (
            <font face="courier new, courier, mono">
             flavor_name
            </font>
            instead of
            <font face="courier new, courier, mono">
             flavor
            </font>
            ), the
            <font face="courier new, courier, mono">
             db_error()
            </font>
            error callback is called, and it prints this:
           </p>
           <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            <p>
             <font face="courier new, courier, mono">
              Error! [-19] SELECT flavor_name,price FROM ice_cream
              <br/>
              [nativecode=1054 ** Unknown column flavor_name in
              <br/>
              field list]
             </font>
            </p>
           </blockquote>
           <p>
            Error callbacks are useful for queries inside of a transaction. If theres an error, the callback can automatically roll back the transaction and print a message or return the proper value to indicate that the transaction failed.
           </p>
           <p>
           </p>
           <table bgcolor="#efefef" border="0" class="contentpaneopen" width="100%">
            <tbody>
             <tr>
              <td>
               <p>
                <a href="http://www.amazon.com/exec/obidos/tg/detail/-/1590592808/ref=ase_develshedinc-20/103-2161934-6390250?v=glance&amp;s=books">
                 <em>
                  <img align="left" alt="" border="0" hspace="5" src="http://images.devshed.com/ds/stories/icons/buy-now90x68.gif" style="WIDTH: 90px; HEIGHT: 68px" vspace="3"/>
                 </em>
                </a>
                This chapteris from
                <em>
                 Essential PHP Modules, Extensions, Tools
                </em>
                , byDavid Sklar(Apress, 2004, ISBN: 1590592808). Check it out at your favorite bookstore today.
               </p>
               <p>
                <a href="http://www.amazon.com/exec/obidos/tg/detail/-/1590592808/ref=ase_develshedinc-20/103-2161934-6390250?v=glance&amp;s=books">
                 Buy this book now
                </a>
                .
               </p>
              </td>
             </tr>
            </tbody>
           </table>
          </div>
          <div class="col-quarter related">
           <h4 class="forums">
            Related Threads
           </h4>
           <!-- related threads -->
           <h4 class="articles">
            Related Articles
           </h4>
           <ul>
            <li class="truncate">
             <a class="go-to" href="http://www.devshed.com/c/a/php/hackers-compromise-php-sites-to-launch-attacks/" rel="bookmark" title="Hackers Compromise PHP Sites to Launch Attacks">
              Hackers Compromise PHP Sites to Launch Attacks
             </a>
            </li>
            <li class="truncate">
             <a class="go-to" href="http://www.devshed.com/c/a/php/red-hat-zend-form-openshift-paas-alliance/" rel="bookmark" title="Red Hat, Zend Form OpenShift PaaS Alliance">
              Red Hat, Zend Form OpenShift PaaS Alliance
             </a>
            </li>
            <li class="truncate">
             <a class="go-to" href="http://www.devshed.com/c/a/php/php-ide-news/" rel="bookmark" title="PHP IDE News">
              PHP IDE News
             </a>
            </li>
            <li class="truncate">
             <a class="go-to" href="http://www.devshed.com/c/a/php/bcd-zend-extend-php-partnership/" rel="bookmark" title="BCD, Zend Extend PHP Partnership">
              BCD, Zend Extend PHP Partnership
             </a>
            </li>
           </ul>
           <!-- related articles -->
          </div>
         </div>
         <!-- .entry-content -->
         <footer class="entry-meta grid">
          <div class="push-quarter col-half">
           This entry was posted in
           <a href="http://www.devshed.com/c/b/php/" rel="category tag">
            PHP
           </a>
           . Bookmark the
           <a href="http://www.devshed.com/c/a/php/accessing-databases-with-db/" rel="bookmark" title="Permalink to Accessing Databases with DB">
            permalink
           </a>
           .
           <!-- Fanciest Author Box v1.4.3 -->
           <div class="disabled-hide ts-fab-wrapper ts-fab-icons-only" id="ts-fab-template-tag-374-448-587">
            <ul class="ts-fab-list">
             <li class="ts-fab-bio-link">
              <a href="#ts-fab-bio-template-tag-374-448-587">
               Bio
              </a>
             </li>
             <li class="ts-fab-latest-posts-link">
              <a href="#ts-fab-latest-posts-template-tag-374-448-587">
               Latest Posts
              </a>
             </li>
            </ul>
            <div class="ts-fab-tabs">
             <div class="ts-fab-tab" id="ts-fab-bio-template-tag-374-448-587">
              <div class="ts-fab-avatar">
               <img alt="seo-admin" class="avatar avatar-64 photo" height="64" src="http://forums.devshed.com/vbsso/vbsso.php?do=avatar&amp;id=d55928ffc41dcd6c921e3265b9fc4cf4" width="64"/>
              </div>
              <div class="ts-fab-text">
               <div class="ts-fab-header">
                <h4>
                 <a href="http://forums.devshed.com/vbsso/vbsso.php?do=profile&amp;id=d55928ffc41dcd6c921e3265b9fc4cf4">
                  seo-admin
                 </a>
                </h4>
               </div>
               <!-- /.ts-fab-header -->
               <div class="ts-fab-content">
               </div>
              </div>
             </div>
             <div class="ts-fab-tab" id="ts-fab-latest-posts-template-tag-374-448-587">
              <div class="ts-fab-avatar">
               <img alt="seo-admin" class="avatar avatar-64 photo" height="64" src="http://forums.devshed.com/vbsso/vbsso.php?do=avatar&amp;id=d55928ffc41dcd6c921e3265b9fc4cf4" width="64"/>
              </div>
              <div class="ts-fab-text">
               <div class="ts-fab-header">
                <h4>
                 Latest posts by seo-admin
                </h4>
               </div>
               <ul class="ts-fab-latest">
                <li>
                 <a href="http://www.devshed.com/c/a/perl/lists-and-arguments-in-perl/">
                  Lists and Arguments in Perl
                 </a>
                 <span>
                  - May 8, 2012
                 </span>
                </li>
                <li>
                 <a href="http://www.devshed.com/c/a/perl/variables-and-arguments-in-perl/">
                  Variables and Arguments in Perl
                 </a>
                 <span>
                  - May 2, 2012
                 </span>
                </li>
                <li>
                 <a href="http://www.devshed.com/c/a/perl/understanding-scope-and-packages-in-perl/">
                  Understanding Scope and Packages in Perl
                 </a>
                 <span>
                  - April 23, 2012
                 </span>
                </li>
               </ul>
               <div class="ts-fab-header">
                <h4>
                 Latest threads by seo-admin
                </h4>
               </div>
               <ul class="ts-fab-latest">
               </ul>
              </div>
             </div>
            </div>
           </div>
          </div>
         </footer>
         <!-- .entry-meta -->
        </article>
        <!-- #post-## -->
        <div class="comments-area grid" id="comments">
         <div class="col-half push-quarter">
          /?php comment_form(); ?&gt;

    [gp-comments width="770" linklove="off" ]
         </div>
        </div>
        <!-- #comments -->
        <style type="text/css">
         #dofollow {
display:none
}
        </style>
        <h2 id="dofollow">
         <a href="http://www.yuzuk.net" title="chat">
          chat
         </a>
         <a href="http://www.erotikhikayeler.net" title="sex hikayeleri">
          sex hikayeleri
         </a>
         <a href="http://www.sexhikayex.com" title="Ensest hikaye">
          Ensest hikaye
         </a>
        </h2>
        <nav class="navigation-post grid content-block" id="nav-below" role="navigation">
         <h1 class="screen-reader-text">
          Post navigation
         </h1>
         <div class="nav-previous text-right action-link">
          <a href="http://www.devshed.com/c/a/mysql/counting-queries-postgresql-analysis/" rel="prev">
           <span class="meta-nav">
            
           </span>
           Previous Post
          </a>
         </div>
         <div class="nav-next action-link">
          <a href="http://www.devshed.com/c/a/braindump/linux-in-iraq-still-a-wounded-country/" rel="next">
           Next Post
           <span class="meta-nav">
            
           </span>
          </a>
         </div>
        </nav>
        <!-- #nav-below -->
        /?php get_sidebar(); ?&gt;
       </div>
       <!-- #content -->
      </div>
      <!-- #primary -->
     </div>
     <!-- #main -->
     <footer class="site-footer" id="colophon" role="contentinfo">
      <div class="site-info grid">
       <p class="col-third desktop-text-left">
        Devshed is a
        <a href="http://developershed.com" target="_blank">
         Developer Shed Property
        </a>
        , Owned by
        <a href="http://www.internetmarketingninjas.com/blog/author/jim-boykin/" target="_blank">
         Jim Boykin
        </a>
        , CEO of
        <a href="http://www.internetmarketingninjas.com/" target="_blank">
         Internet Marketing Ninjas
        </a>
       </p>
       <p class="col-third text-center">
        <a class="footer-logo" href="/" id="footer-logo-link">
         <span class="screen-reader-text">
          devshed
         </span>
        </a>
         2003 - 2015 by DevShed, LLC. All rights reserved
       </p>
       <ul class="footer-nav col-third">
        <li>
         <a href="/">
          Home
         </a>
        </li>
        <li>
         <a href="http://forums.devshed.com">
          Forums
         </a>
        </li>
        <li>
         <a href="/articles/">
          Articles
         </a>
        </li>
        <li>
         <a href="http://forums.devshed.com/badges/">
          Badges
         </a>
        </li>
        <li>
         <a href="http://www.developershed.com/privacy.php" target="_blank">
          Privacy Policy
         </a>
        </li>
        <li>
         <a href="http://www.developershed.com/esupport/" target="_blank">
          Support
         </a>
        </li>
        <li>
         <a href="/newsletter-signup/" target="_blank">
          Newsletter Signup
         </a>
        </li>
        <li>
         <a href="http://seotools.devshed.com/" target="_blank">
          Free Web Developer Tools
         </a>
        </li>
        <li>
         <a href="/sitemap/">
          Sitemap
         </a>
        </li>
       </ul>
      </div>
      <!-- .grid -->
     </footer>
    </div>
    <!-- .site-info -->
    <!-- #colophon -->
   </header>
  </div>
  <!-- #page -->
  <script type="text/javascript">
   var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-25094208-2']); /*_gaq.push(['_trackPageview']);*/ _gaq.push(['_trackEvent', 'WordPress', window.location.host, window.location.href]);  (function() { var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })();
  </script>
  <script src="http://www.devshed.com/wp-content/themes/devshed/js/skip-link-focus-fix.js?ver=20130115" type="text/javascript">
  </script>
  <script src="http://www.devshed.com/wp-content/themes/devshed/js/ie.bs.js?ver=20130115" type="text/javascript">
  </script>
  <script src="http://www.devshed.com/wp-content/themes/devshed/js/flippant.min.js?ver=20130115" type="text/javascript">
  </script>
  <script src="http://www.devshed.com/wp-content/themes/devshed/js/scripts.js?ver=4.2.1" type="text/javascript">
  </script>
  <script src="http://www.devshed.com/wp-content/themes/devshed/js/google-code-prettify/prettify.js?ver=4.2.1" type="text/javascript">
  </script>
  <script src="http://www.devshed.com/wp-includes/js/comment-reply.min.js?ver=4.2.1" type="text/javascript">
  </script>
 </body>
</html>