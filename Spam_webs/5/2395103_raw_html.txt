<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <title>
   Database Changes Done Right - The Daily WTF
  </title>
  <meta charset="utf-8"/>
  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"/>
  <meta content="" name="description"/>
  <meta content="" name="keywords"/>
  <meta content="humans.txt" name="author"/>
  <link href="/favicon.ico" rel="icon"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <link href="/content/css/gumby.css" rel="stylesheet"/>
  <link href="/content/css/animate.min.css" rel="stylesheet"/>
  <link href="/content/css/screen.css" rel="stylesheet"/>
  <link href="/content/css/prism.css" rel="stylesheet"/>
  <link href="/content/css/jquery.qtip.min.css" rel="stylesheet"/>
  <link href="/content/css/custom.css" rel="stylesheet"/>
  <script src="/scripts/modernizr-2.6.2.min.js">
  </script>
  <!--[if lt IE 9]&gt;
   &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt;
   &lt;script&gt;window.jQuery || document.write('&lt;script src="/scripts/jquery-1.10.2.min.js"&gt;&lt;\/script&gt;')&lt;/script&gt;
   &lt;![endif]-->
  <!--[if gte IE 9]&gt;&lt;!-->
  <script src="//ajax.googleapis.com/ajax/libs/jquery/2.0.1/jquery.min.js">
  </script>
  <script>
   window.jQuery || document.write('&lt;script src="/scripts/jquery-2.0.1.min.js"&gt;&lt;\/script&gt;')
  </script>
  <!--&lt;![endif]-->
 </head>
 <body class="noise">
  <!-- container to normalize fixed navigation behavior when scrolling -->
  <div class="navcontain no-print">
   <div class="navbar dailywtf" gumby-fixed="top" id="nav3">
    <div class="row" style="position: relative;">
     <div class="three columns">
      <a href="/">
       <img class="logo" src="/content/images/wtf-logo.png"/>
      </a>
     </div>
     <a class="toggle" gumby-trigger="#nav3 &gt; .row &gt; ul" href="#">
      <i class="icon-menu">
      </i>
     </a>
     <ul class="seven columns" style="float: left;">
      <li class="featured">
       <a href="/series/feature-articles">
        Feature Articles
       </a>
       <div class="megadropdown">
        <div class="content">
         <div class="row">
          <div>
           <h4>
            Most Recent Articles
           </h4>
           <ul>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/classic-wtf-a-temporary-problem">
               Classic WTF: A Temporary Problem
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/classic-wtf-long-distance-date-ing">
               Classic WTF: Long Distance DATE$ing
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/uncommon-respect">
               Uncommon Respect
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/ponderous-at-the-ponderosa">
               Ponderous at the Ponderosa
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/finally-clear">
               Finally Clear
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/taxing-production-tests">
               Taxing Production Tests
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/paying-cache-for-insurance">
               Paying Cache for Insurance
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/the-software-developers-who-say-ni">
               The Software Developers Who Say Ni
              </a>
             </div>
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
      </li>
      <li class="code">
       <a href="/series/code-sod">
        CodeSOD
       </a>
       <div class="megadropdown">
        <div class="content">
         <div class="row">
          <div>
           <h4>
            Most Recent Articles
           </h4>
           <ul>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/classic-wtf-xml-abuse">
               Classic WTF: XML Abuse
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/mistakes-were-made">
               Mistakes Were Made
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/we-all-float-down-here">
               We All Float Down Here
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/practical-validateion">
               Practical ValiDATEion
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/a-convoluted-time-machine">
               A Convoluted Time Machine
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/defensive-programming">
               Defensive Programming
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/making-progress">
               Making Progress
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/required">
               Required
              </a>
             </div>
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
      </li>
      <li class="errord">
       <a href="/series/errord">
        Error'd
       </a>
       <div class="megadropdown">
        <div class="content">
         <div class="row">
          <div>
           <h4>
            Most Recent Articles
           </h4>
           <ul>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/a-defined-sense-of-taste">
               A Defined Sense of Taste
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/what-what">
               What, What?
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/language-barriers">
               Language Barriers
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/helpful-as-ever-">
               Helpful as Ever!
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/you-ve-been-warned">
               You've Been Warned!
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/it-s-a-kinda-magic">
               It's a Kinda Magic
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/tell-qa-they-missed-one">
               Tell QA They Missed One
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/bsod-could-go-all-the-way-this-year">
               BSOD Could Go All the Way This Year
              </a>
             </div>
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
      </li>
      <li class="tales">
       <a class="tooltip" data-tooltip="Forum opens in a new tab" href="http://what.thedailywtf.com" target="_blank">
        <i class="icon-export">
        </i>
        Forums
       </a>
      </li>
      <li class="soapbox">
       <a href="#">
        Other Articles
       </a>
       <div class="megadropdown">
        <div class="content">
         <div class="row">
          <div>
           <ul>
            <li>
             <div class="nav-article">
              <a class="clean" href="/articles/random">
               Random Article
              </a>
             </div>
            </li>
           </ul>
           <h4>
            Other Series
           </h4>
           <ul>
            <li>
             <div class="nav-article">
              <a class="clean" href="/series/alexs-soapbox">
               Alex's Soapbox
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/series/announcements">
               Announcements
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/series/best-of-email">
               Best of Email
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/series/best-of-the-sidebar">
               Best of the Sidebar
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/series/bring-your-own-code">
               Bring Your Own Code
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/series/coded-smorgasbord">
               Coded Smorgasbord
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/series/mandatory-fun-day">
               Mandatory Fun Day
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/series/off-topic">
               Off Topic
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/series/representative-line">
               Representative Line
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/series/roundup">
               News Roundup
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/series/soapbox">
               Editor's Soapbox
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/series/souvenir-potpourri">
               Souvenir Potpourri
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/series/tales-from-the-interview">
               Tales from the Interview
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/series/tdwtf-live">
               The Daily WTF: Live
              </a>
             </div>
            </li>
            <li>
             <div class="nav-article">
              <a class="clean" href="/series/virtudyne">
               Virtudyne
              </a>
             </div>
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
      </li>
     </ul>
    </div>
   </div>
  </div>
  <div class="hideNonDesktop" id="billboard">
   <div class="row">
    <div class="container da-space">
     <div class="daBlock da-970x250">
      <a href="/fbuster/002b4e54c4074dd2a07fe870205d0fae">
       <img src="/fblast/bd38e7e8f64b4d7f95331be7a349c8cb"/>
      </a>
     </div>
    </div>
   </div>
  </div>
  <div id="wrapper">
   <div class="row">
    <div class="twelve columns">
     <div class="row tales" id="articlePage">
      <div class="twelve columns articleWrapper">
       <div class="content">
        <div class="row">
         <div class="container">
          <h1>
           Database Changes Done Right
          </h1>
          <span class="articleMeta">
           Alex's Soapbox by
           <a href="/authors/alex-papadimoulis">
            Alex Papadimoulis
           </a>
           <span class="date">
            on 2012-02-28
           </span>
           <span class="admin-only pull_right">
            <a href="/admin/article/edit/7273">
             Edit 
            </a>
           </span>
          </span>
          <a class="author hideMobile" href="/authors/alex-papadimoulis">
           <div class="authorPic fadeInDown">
            <img src="http://img.thedailywtf.com/images/alexp/apx-square500.jpg"/>
           </div>
           <br/>
           <h4>
            Alex Papadimoulis
           </h4>
           <p class="short-description">
            Founder, The Daily WTF
           </p>
          </a>
          <div class="article-body">
           <p>
            Throughout my software development career, Ive seen my fair share of debates over
            <em>
             how
            </em>
            databases should be developed. And like most disagreements over technical pedantry, the participants are generally well-intentioned but grossly inexperienced. So much so that it wouldnt matter if they use foreign keys or not. Though elegant, their software will become an unmaintainable mess after a few short years. But regardless, one counter-argument that constantly rears its ugly head goes something like, but what if we have to change it later?
           </p>
           <p>
            In other debates, that question can be quickly rebutted with uh, we just change it then, but when the discussion is on databases, it actually holds water. Its as if the database is a marble statue that, once shipped to production, should never be changed... and if it must, there had better be a damn good reason.
           </p>
           <p>
            Lets keep in mind that the whole point of developing software  that is, spending large sums of money paying developers salaries to build and maintain applications  is to have something that
            <em>
             can
            </em>
            change according to business need. When developers are unable, afraid, or unwilling to change the applications they develop, they make a
            <em>
             very
            </em>
            compelling case for being replaced by SAP.
           </p>
           <h3 style="margin-bottom: 0px">
            Databases are Different
           </h3>
           <p style="margin-top: 0px">
            Databases are indeed different, especially when juxtaposed with what application developers are most familiar with: application code.
           </p>
           <p>
            Generally speaking, application code lives in a source control system and is a set of instructions that tell that tell the machine to do something. Whether its compiled or interpreted, or executed on a real or virtual machine, application code
            <em>
             does stuff
            </em>
            .
           </p>
           <p>
            As a developer, when youre satisfied that its doing the right stuff, the release management process kicks in to promote that code through acceptance testing, quality testing, other testing, and finally production. And all along the way, the code
            <em>
             should not change
            </em>
            . If a bug is found, then its fixed in source control and sent right back through the same process.
           </p>
           <p>
            Databases, on the other hand, live on the production database server. There can certainly be other instances  development, testing, staging  but the only one that really matters is production. And these databases dont actually do stuff, theyre merely modified and queried by other applications with a Structured Query Language. And unlike application code, databases (or at least, their completely integrated data)
            <em>
             do
            </em>
            change after deployment  thats kind of their whole point.
           </p>
           <h3 style="margin-bottom: 0px">
            Database Changes Done Wrong
           </h3>
           <p style="margin-top: 0px">
            Unlike application code, you cant exactly drop a bunch of files in a folder and proclaim that a new version has been successfully deployed. You also cant just put back an older set of files to rollback your changes.
           </p>
           <p>
            The only way to change a database is by running a SQL script against that database, and once youve done that, theres no going back. You can run
            <em>
             another
            </em>
            SQL script to change the database again, but the only way to truly rollback changes is by restoring the
            <em>
             entire
            </em>
            database from back-up.
           </p>
           <p>
            Quite a many developers struggle with this unique change process across multiple environments. Ive heard some go so far as to say that databases are fundamentally broken, as if gravity is to blame for their inability to fly. But most developers reluctance to master this method leads towards a tendency to simultaneously resist change and change things uncontrollably.
           </p>
           <p>
            If those seem contradictory, consider the Entity-Attribute-Value design. Its one of the worst database development anti-patterns out there, and sadly one that I keep seeing happening in the wild because what if we have to change it later.
           </p>
           <blockquote>
            <p>
             <img alt="" src="http://img.thedailywtf.com/images/12/02/soap/image001.png"/>
            </p>
           </blockquote>
           <p>
            An EAV design is a shining example of the
            <a href="http://en.wikipedia.org/wiki/Inner-Platform_Effect">
             Inner-Platform Effect
            </a>
            .
           </p>
           <blockquote>
            <p>
             The inner-platform effect is the tendency of software architects to create a system so customizable as to become a replica, and often a poor replica, of the software development platform they are using.
            </p>
           </blockquote>
           <p>
            In fact, it was exactly what I used to initially describe that anti-pattern. For the record,
            <em>
             the
            </em>
            worst anti-pattern Ive seen took this concept
            <a href="http://thedailywtf.com/Articles/Tom_Kyte_on_The_Ultimate_Extensibility.aspx">
             once step further
            </a>
            .
           </p>
           <!--
&lt;h3 style="margin-bottom: 0px"&gt;Yes to NOSQL?&lt;/h3&gt;
&lt;p style="margin-top: 0px"&gt;While NOSQL databases are somewhat based around EAV principles, I can say with 99.999% certainty that NOSQL is not for you. You are not, nor will not have to deal with Facebook-sized problems, and if you ever do, you&rsquo;ll be in a great position to hire a highly-specialized engineer who actually knows how to solve massive scalability problems.&lt;/p&gt;
&lt;p&gt;NOSQL databases are not a database evolution by any means. In fact, they&rsquo;re a throwback many of the systems designed in the 1960&rsquo;s and 1970&rsquo;s, where a megabyte of memory cost more than a programmer&rsquo;s annual salary. As hardware costs became cheaper (i.e. a megabyte only cost a week&rsquo;s salary), databases evolved into what we know today: the relational model.&lt;/p&gt;
&lt;p&gt;Play with them on your hobby projects, but they don&rsquo;t belong in your work projects. Remember, programming is supposed to be boring. http://thedailywtf.com/Articles/Programming-Sucks!-Or-At-Least,-It-Ought-To-.aspx&lt;/p&gt;
-->
           <h3 style="margin-bottom: 0px">
            The Taxonomy of Database Scripts
           </h3>
           <p style="margin-top: 0px">
            As databases can really only be accessed through SQL scripts, its important to identify the three main categories of scripts as it relates to changes:
           </p>
           <ul>
            <li>
             <b>
              Query Scripts
             </b>
              no impact on data or database structure, such as simple SELECT statements
            </li>
            <li>
             <b>
              Object Scripts
             </b>
              alter the database, but only by adding/updating/deleting non-data objects like stored procedures, views, functions, etc.
            </li>
            <li>
             <b>
              Change Scripts
             </b>
             change the structure of or the data stored within tables (ALTER TABLE, INSERT, CREATE INDEX, etc)
            </li>
           </ul>
           <p>
            The first category of scripts fall out of the realm of database changes, which means that we need to concern ourselves with only two types of scripts: Object Scripts and Change Scripts.
           </p>
           <h3 style="margin-bottom: 0px">
            Object Script Changes Done Right
           </h3>
           <p style="margin-top: 0px">
            Many applications rely on SQL scripts stored
            <em>
             within
            </em>
            the database  stored procedures, views, triggers, etc.  for queries they make to the database. These objects are effectively code that your application depends on, and since theyre code, they should be treated just like code. That means they live in source control, get labeled when your application code is built, deployed with your application code, the whole nine yards.
           </p>
           <p>
            Doing this is surprisingly easy, and starts by creating an object script for each and every object. Each script should do three things:
           </p>
           <blockquote>
            <p>
             <img alt="" src="http://img.thedailywtf.com/images/12/02/soap/image003.png"/>
            </p>
           </blockquote>
           <p>
            Since these object scripts simply create objects, they can be run time and time again without any real consequences. Plenty of tools are available to help extract and create these scripts for you, and once you have everything on disk, its just a matter of dropping it into source control.
           </p>
           <blockquote>
            <p>
             <img alt="" src="http://img.thedailywtf.com/images/12/02/soap/image005.png"/>
            </p>
           </blockquote>
           <p>
            Note how Ive got a prefix before each script. Thats the simplest way to ensure scripts run in the correct order, as all you need is a very simple batch command script to iterate over the files in your source tree.
           </p>
           <blockquote>
            <pre>
             FOR /R . %%f IN (*.sql) DO (
  OSQL -E -i "%%f" -n -b -d MyDataBase
)
            </pre>
           </blockquote>
           <p>
            With this technique, your object change scripts can  and should  follow the exact same process that your application code does. After all, its just another code layer in the overall application.
           </p>
           <h3 style="margin-bottom: 0px">
            Database Change Scripts Done Right
           </h3>
           <p style="margin-top: 0px">
            The thing that makes Database Change Scripts so difficult to work with is that changes are coming from two different directions. Data changes (INSERT, UPDATE, DELETE) are constantly happening in production through the day-to-day use of the application, while data structure changes (ALTER TABLE, etc.) are simultaneously occurring in development and testing environments.
           </p>
           <blockquote>
            <p>
             <img alt="" src="http://img.thedailywtf.com/images/12/02/soap/image007.png"/>
            </p>
           </blockquote>
           <p>
            Changes in both directions are an absolute requirement: application data must flow directly in to production and development changes must flow through a testing process before going to production. Shortcutting the process leads you right back to the anti-patterns we discussed: resisting change and/or uncontrollable change. But before we look at how to do it right, lets consider some fundamentals that apply to any database change script, regardless of the database platform or scope of change.
           </p>
           <h4 style="margin-bottom: 0px">
            The Cardinal Rules of Database Change Scripts
           </h4>
           <ol>
            <li>
             <b>
              Run once and only once
             </b>
              simply put, you cant add the same column to the same table twice; while you could certainly wrap your change script in a big IF block (discussed later), that doesnt count as running it twice
            </li>
            <li>
             <b>
              Impossible to be un-run
             </b>
              once youve dropped that column, its gone forever; you could certainly restore your database from back-up, but thats not exactly an undo, especially when you lose all the intermediate data
            </li>
           </ol>
           <p>
            There is no getting around these rules. Period. Changes
            <em>
             must
            </em>
            flow in both directions, and any solution you engineer to try to work-around this fundamental will lead straight back to the aforementioned anti-patterns: resisting change and/or uncontrollable change.
           </p>
           <h4 style="margin-bottom: 0px">
            Anti-pattern: Re-executable Change Scripts
           </h4>
           <p style="margin-top: 0px">
            One attempt to circumvent Cardinal Rule #1 is something called the re-executable change script. The idea is to surround a change script in IF block that tests whether the enclosed change script has already been run. It looks something like this:
           </p>
           <blockquote>
            <p>
             <img alt="" src="http://img.thedailywtf.com/images/12/02/soap/image008.png"/>
            </p>
           </blockquote>
           <p>
            At first glance, it seems like a relatively sane way of developing change scripts. Just batch these like object scripts, and you can run them over and over and over again. A lot of developers  including many of you  swear by this technique and have had little (if any) problems using it. But like all cardinal rules violations, it leads to one of those two anti-patterns, and in this case, its uncontrolled changes.
           </p>
           <p>
            In the Sprockets example above, the script is testing for the non-existence of a table named
            <code>
             Sprockets
            </code>
            table before running the change script. But what if a previous version of the script defined
            <code>
             Sprocket_Name
            </code>
            as
            <code>
             VARCHAR(50) NULL
            </code>
            , and that version was run and tested in QA? Multiply that by a dozen other changes in a handful of environments, and the consequences of uncontrolled change quickly become costly and difficult to pinpoint problems. Of course, you
            <em>
             could
            </em>
            make your testing logic more and more complex by testing each and every conceivable aspect of a table, and then ensuring that the change script would alter or create it in that precise way but then youd be falling into yet another anti-pattern.
           </p>
           <h4 style="margin-bottom: 0px">
            Anti-pattern: Database Syncing
           </h4>
           <p style="margin-top: 0px">
            There are dozens and dozens of commercial and open-source database diff tools that will programmatically inspect the metadata of two different databases and provide a comparison of whats different. Many of these tools will take it a step further by generating and then executing a change script to sync the two databases. Like re-executable change scripts, many developers swear by these tools and herald them as an end to worrying about database changes. And just like re-executable change scripts, they shortcut the cardinal rules and lead to uncontrolled changes.
           </p>
           <p>
            The biggest sin in syncing is that, by its very nature, the process does not allow for the same change script to be tested in each environment. In each release lifecycle, each and every build is promoted to the first environment; many builds are promoted to other pre-production environments; and just one build is promoted to production. As database changes are intricately tied with application code changes, database synchronizations occur in a similar fashion to builds.
           </p>
           <blockquote>
            <p>
             <img alt="" src="http://img.thedailywtf.com/images/12/02/soap/image011.png"/>
            </p>
           </blockquote>
           <p>
            This funnel is perfectly fine for application code. After all, youre just replacing an entire set of files with an entire set of new files; the operating system doesnt care what new functions or classes have been added to the code. But the database sync process not only needs to understand exactly what changed, but generate and then execute a change script. Compared to application code, thatd be like using Reflector (or any other disassembler) to diff functionality and then deploy those diffs
            <em>
             while the application is running
            </em>
            .
           </p>
           <p>
            To make matters worse, the generated change scripts will be different between each environment because they represent a different set of changes. Worse still, the last and final sync to Production is an amalgam of all syncs before it, making it the riskiest and most uncontrolled change of them all.
            <!--
Anti-pattern: Dumb Migrations
[[maybe ]]
-->
           </p>
           <h4 style="margin-bottom: 0px">
            Following the Cardinal Rules
           </h4>
           <p style="margin-top: 0px">
           </p>
           <blockquote>
            <p>
             <img alt="" class="wtf_imgfloatright" src="http://img.thedailywtf.com/images/12/02/soap/image012.png" style="margin: 5px; float: right"/>
            </p>
           </blockquote>
           <p>
            Since you cant work your way around the Cardinal Rules, you may as well develop a process to work with them.
           </p>
           <ol>
            <li>
             <b>
              Develop a Change Script
             </b>
              use any tool youd like, so long as the output is a SQL script; the more human readable, the better, especially if you want to get in to the next step
            </li>
            <li>
             <b>
              (Optional) Code Review
             </b>
              this is optional, of course, but its always nice to have a second set of eyes
            </li>
            <li>
             <b>
              Execute Script in Test Environment(s)
             </b>
              run the exact same script in each environment as you deploy your application code
            </li>
            <li>
             <b>
              Execute Script in Production
             </b>
              by this point, you should be pretty confident that a script thats been run several times before should run fine when it counts
            </li>
           </ol>
           <p>
            <b>
             ON FAIL, FIX DATABASES AND GO TO 1
            </b>
             this is perhaps the most important part of the process; if something goes wrong in test, fix the database (restore from backup ideally) and the databases before it, figure out
            <em>
             why
            </em>
            it failed, write a new script, and start from the beginning; every environment you dont run the new script in is one less test before production
           </p>
           <h3 style="margin-bottom: 0px">
            Tools of the Trade
           </h3>
           <p style="margin-top: 0px">
            A process is only as good as how its implemented, and with database change scripts, there are three important tools needed to implement the process.
           </p>
           <h4 style="margin-bottom: 0px">
            Change Script Library
           </h4>
           <p style="margin-top: 0px">
            All the change scripts that you write will have to live somewhere, and their home should be a special place. In addition to storing the script itself, the change script library should have:
           </p>
           <ul>
            <li>
             <strong>
              Write-Once
             </strong>
              change scripts cannot change throughout the release lifecycle; they are not changed, they are undone (ideally, through a restore) and discarded
            </li>
            <li>
             <strong>
              Metadata
             </strong>
              in addition to the change script itself, the following attributes are important to track
             <ul>
              <li>
               Unique ID (at least, unique within the application)
              </li>
              <li>
               Author
              </li>
              <li>
               Target Application
              </li>
              <li>
               Target Release Number
              </li>
             </ul>
            </li>
            <li>
             <strong>
              Controlled/Auditable Access
             </strong>
              ensuring not only that authorized developers maintain change scripts, but that they follow the aforementioned rules
            </li>
           </ul>
           <p>
            Neither file systems nor source control systems meet all of these requirements, but they can work with the aid of a spreadsheet and some well-disciplined developers. There are also some tools specifically designed to solve this problem, including the product I work on (
            <a href="http://inedo.com/landing/automation">
             BuildMaster
            </a>
            ) at the day job (
            <a href="http://inedo.com/">
             Inedo
            </a>
            ).
           </p>
           <h4 style="margin-bottom: 0px">
            Execution Logs
           </h4>
           <p style="margin-top: 0px">
            Database change scripts will end up being executed multiple times, and knowing the specifics of these executions is as important as knowing who changed which sourcefiles. At a minimum, an execution log should be maintained in production, but it certainly can be helpful to know which scripts were run in which order in the lower environments. The execution log should track the following:
           </p>
           <ul>
            <li>
             Script Unique ID
            </li>
            <li>
             Who executed the script
            </li>
            <li>
             When it was executed
            </li>
            <li>
             Database it was executed against
            </li>
            <li>
             Status of the execution (Fail or Success)
            </li>
            <li>
             Script output log
            </li>
           </ul>
           <h4 style="margin-bottom: 0px">
            Database Versioning
           </h4>
           <p style="margin-top: 0px">
            Whereas the Execution Log is an external indicator of which change scripts have been executed against which database, a database versioning system allows the database itself to have a history of its own changes. Database versioning is as simple as maintaining a metadata table with two columns: Unique ID and Execution Date. Before executing a change script, simply check the table to see if the script has been executed already and, if not, run it and stored the scripts unique ID and date.
           </p>
           <p>
            Having a metadata table allows you to easily revert to a back-up of the database and re-run any change scripts that need to be executed. This is particularly useful for restoring the production database in pre-production environments. Maintaining a versioning table isnt too difficult of a process to automate, and Ive certainly written my share of scripts to do this over the years. Including the change script management feature within BuildMaster:
           </p>
           <blockquote>
            <p>
             <img alt="" src="http://img.thedailywtf.com/images/12/02/soap/image015.png"/>
            </p>
           </blockquote>
           <p>
            Another great benefit to database versioning (and a change script library) is the ability spin up a new database environment  including developers workstations  with minimal hassle, even if its months or years after the system has been live.
           </p>
           <h3 style="margin-bottom: 0px">
            Wrapping Things Up
           </h3>
           <p style="margin-top: 0px">
            Database are not just at the center of your applications, but they are
            <em>
             the
            </em>
            center. Application data will outlive application code by many lifetimes, especially as we become more and more reliant and software and become accustomed to, say, look at what orders we placed just a few years ago on Amazon.
           </p>
           <p>
            If youre afraid of making database changes, or you make so many reckless changes that youre shamed into never touching a database again, then your legacy will become creating legacy applications that no one wants to  nor can reasonably  maintain.
           </p>
          </div>
          <div class="social">
           <div class="socialButtons">
            <a class="social-icon facebook" href="//www.facebook.com/sharer.php?u=http:http%3a%2f%2fthedailywtf.com%2farticles%2fDatabase-Changes-Done-Right&amp;t=Database+Changes+Done+Right+-+The+Daily+WTF">
            </a>
            <a class="social-icon twitter" href="//www.twitter.com/home?status=http:http%3a%2f%2fthedailywtf.com%2farticles%2fDatabase-Changes-Done-Right+-+Database+Changes+Done+Right+-+The+Daily+WTF">
            </a>
            <a class="social-icon email" href="mailto:%20?subject=Check%20out%20this%20article%20on%20The%20Daily%20WTF...&amp;body=Database%20Changes%20Done%20Right:%20http://thedailywtf.com/articles/Database-Changes-Done-Right">
            </a>
            <a class="social-icon google-plus" href="//plus.google.com/share?url=http%3a%2f%2fthedailywtf.com%2farticles%2fDatabase-Changes-Done-Right">
            </a>
           </div>
          </div>
          <div class="clearfix">
          </div>
          <a class="discourse-link no-print" href="/articles/comments/Database-Changes-Done-Right">
           View All 126 Comments 
          </a>
          <hr/>
          <div class="previous-article no-print">
           <a href="//thedailywtf.com/articles/The-Regex-Code-Review">
             The Regex Code Review
           </a>
          </div>
          <div class="next-article no-print">
           <a href="//thedailywtf.com/articles/DATE_NOT_FOUND">
            DATE_NOT_FOUND 
           </a>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div class="container">
   <footer>
    <div class="row horizontal no-print">
     <ul>
      <li>
       <a href="/contact">
        Contact
       </a>
      </li>
      <li>
       <a href="/info/privacy">
        Privacy Policy &amp; Disclaimer
       </a>
      </li>
      <li>
       <a href="http://syndication.thedailywtf.com/TheDailyWtf">
        RSS
       </a>
      </li>
     </ul>
     <hr/>
    </div>
    <div class="row">
     <p style="float: left;">
      Copyright  2004 - 2014 Inedo Publishing - v1000.16
     </p>
     <p class="hideMobile hideTablet" style="float: right;">
      Hosted on a
      <a href="http://www.hivelocity.net/">
       dedicated server
      </a>
      at HiVelocity
                Deployed with
      <a href="http://inedo.com/landing/buildmaster">
       BuildMaster
      </a>
     </p>
    </div>
   </footer>
  </div>
  <script src="/scripts/gumby.min.js">
  </script>
  <script src="/scripts/jquery.qtip-2.2.0.min.js">
  </script>
  <script src="/scripts/plugins.js">
  </script>
  <script src="/scripts/main.js">
  </script>
  <script src="/scripts/prism.js">
  </script>
  <script src="/scripts/custom.js">
  </script>
  <!--[if lt IE 8 ]&gt;
   &lt;script src="//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js"&gt;&lt;/script&gt;
   &lt;script&gt;window.attachEvent('onload',function(){CFInstall.check({mode:'overlay'})})&lt;/script&gt;
   &lt;![endif]-->
  <script>
   (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-9122028-1', 'auto');
  ga('send', 'pageview');
  </script>
 </body>
</html>