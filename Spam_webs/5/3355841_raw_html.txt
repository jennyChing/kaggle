<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
 <head>
  <title>
   ffs ssl -- wingolog
  </title>
  <meta content="An unholy concoction of parenthetical guile" name="Generator"/>
  <meta content="width=device-width" name="viewport"/>
  <link href="/base.css" media="screen" rel="stylesheet" type="text/css"/>
  <link href="/feed/atom" rel="alternate" title="wingolog" type="application/rss+xml"/>
 </head>
 <body>
  <div id="rap">
   <h1 id="header">
    <a href="/">
     wingolog
    </a>
   </h1>
   <div id="navbar">
    <a href="/about/">
     about
    </a>
    |
    <a href="/projects/">
     projects
    </a>
    |
    <a href="/photos/">
     photos
    </a>
   </div>
   <div id="content">
    <div id="menu">
     <ul>
      <li>
       <h2>
        <a href="/feed/atom">
         subscribe
         <img alt="[feed]" src="/wp-content/feed-icon-14x14.png"/>
        </a>
       </h2>
      </li>
      <li>
       <h2>
        related
       </h2>
       <ul>
        <li style="margin-top: 5px">
         <a href="/archives/2012/03/12/the-merry-month-of-ma">
          the merry month of ma
         </a>
        </li>
        <li style="margin-top: 5px">
         <a href="/archives/2010/12/13/meta-data">
          meta data
         </a>
        </li>
        <li style="margin-top: 5px">
         <a href="/archives/2014/08/27/a-wingolog-users-manual">
          a wingolog user's manual
         </a>
        </li>
        <li style="margin-top: 5px">
         <a href="/archives/2012/08/15/lakewards">
          lakewards
         </a>
        </li>
        <li style="margin-top: 5px">
         <a href="/archives/2012/05/30/10-years-of-wingolog">
          10 years of wingolog
         </a>
        </li>
        <li style="margin-top: 5px">
         <a href="/archives/2011/04/25/meta-per-tag-feeds">
          meta: per-tag feeds
         </a>
        </li>
        <li style="margin-top: 5px">
         <a href="/archives/2010/12/17/on-the-new-posix">
          on the new posix
         </a>
        </li>
        <li style="margin-top: 5px">
         <a href="/archives/2008/04/23/metablog">
          metablog
         </a>
        </li>
        <li style="margin-top: 5px">
         <a href="/archives/2008/03/07/biting-the-hand-that-feeds">
          biting the hand that feeds
         </a>
        </li>
        <li style="margin-top: 5px">
         <a href="/archives/2008/02/29/im-telling-you">
          I'm telling you
         </a>
        </li>
       </ul>
      </li>
     </ul>
    </div>
    <h2 class="storytitle">
     <a href="/archives/2014/10/17/ffs-ssl">
      ffs ssl
     </a>
    </h2>
    <div class="post">
     <h3 class="meta">
      17 October 2014  2:33 PM (
      <a href="/tags/ssl">
       ssl
      </a>
      |
      <a href="/tags/tls">
       tls
      </a>
      |
      <a href="/tags/ffs">
       ffs
      </a>
      |
      <a href="/tags/meta">
       meta
      </a>
      |
      <a href="/tags/https">
       https
      </a>
      |
      <a href="/tags/http">
       http
      </a>
      |
      <a href="/tags/hsts">
       hsts
      </a>
      |
      <a href="/tags/pki">
       pki
      </a>
      |
      <a href="/tags/networking">
       networking
      </a>
      )
     </h3>
     <div class="storycontent">
      <div>
       <p>
        I just set up
        <strike>
         SSL
        </strike>
        <a href="https://thoughtstreams.io/glyph/there-is-no-ssl/">
         TLS
        </a>
        on my web site.  Everything can be had via
        <a href="https://wingolog.org/">
         <tt>
          https://wingolog.org/
         </tt>
        </a>
        , and things appear to work.  However the process of transitioning even a simple web site to SSL is so clownshoes bad that it's amazing anyone ever does it.  So here's an incomplete list of things that can go wrong when you set up TLS on a web site.
       </p>
       <p>
        You search "how to set up https" on the Googs and click the first link.  It takes you
        <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-apache-with-a-free-signed-ssl-certificate-on-a-vps">
         here
        </a>
        which tells you how to use StartSSL, which
        <i>
         generates the key in your browser
        </i>
        .  Whoops, your private key is now known to another server on this internet!  Why do people even recommend this?  It's the worst of the worst of
        <a href="http://matasano.com/articles/javascript-cryptography/">
         Javascript crypto
        </a>
        .
       </p>
       <p>
        OK so you decide to pay for a certificate, assuming that will be better, and because who knows what's going on with StartSSL.  You've heard of RapidSSL so you go to
        <a href="https://www.rapidssl.com">
         rapidssl.com
        </a>
        .  WTF their price is 49 dollars for a stupid certificate?  Your domain name was only 10 dollars, and domain name resolution is an actual ongoing service, unlike certificate issuance that just happens one time.  You can't believe it so you click through to the prices to see, and you get this:
       </p>
       <p>
       </p>
       <center>
        <img src="//wingolog.org/pub/geotrust-wtf.png" style="max-width:100%"/>
       </center>
       <p>
        Whatttttttttt
       </p>
       <p>
        OK so I'm using
        <a href="https://wiki.gnome.org/Apps/Web">
         Epiphany
        </a>
        on Debian and I think that uses the system root CA list which is different from what Chrome or Firefox do but Jesus this is shaking my faith in the internet if I can't connect to an SSL certificate provider over SSL.
       </p>
       <p>
        You remember hearing something on Twitter about cheaper certs, and oh ho ho, it's
        <a href="https://www.rapidsslonline.com/">
         rapidsslonline.com
        </a>
        , not just RapidSSL.  WTF.  OK.  It turns out Geotrust and RapidSSL and Verisign are all owned by Symantec anyway.  So you go and you pay.  Paying is the first thing you have to do on rapidsslonline, before anything else happens.  Welp, cross your fingers and take out your credit card, cause SSLanta Clause is coming to town.
       </p>
       <p>
        Recall, distantly, that SSL has private keys and public keys.  To create an SSL certificate you have to generate a key on your local machine, which is your private key.  That key shouldn't leave your control -- that's why the DigitalOcean page is so bogus.  The certification authority (CA) then needs to receive your public key and then return it signed.  You don't know how to do this, because who does?  So you Google and
        <a href="http://thejh.net/misc/website-terminal-copy-paste">
         copy and paste command line snippets from a website
        </a>
        .  Whoops!
       </p>
       <p>
        Hey neat it didn't delete your home directory, cool.  Let's assume that your local machine isn't rooted and that your server isn't rooted and that your hosting provider isn't rooted, because that would invalidate everything.  Oh what so the NSA and the five eyes have an
        <a href="http://www.heise.de/ct/artikel/NSA-GCHQ-The-HACIENDA-Program-for-Internet-Colonization-2292681.html">
         ongoing program to root servers
        </a>
        ?  Um, well, water under the bridge I guess.  Let's make a key.  You google "generate ssl key" and this is the first result.
       </p>
       <pre>
        # openssl genrsa -des3 -out foo.key 1024
       </pre>
       <p>
        Whoops, you just made a 1024-bit key!  I don't know if those are even accepted by CAs any more.  Happily if you leave off the 1024, it defaults to 2048 bits, which I guess is good.
       </p>
       <p>
        Also you just made a key with a password on it (that's the
        <tt>
         -des3
        </tt>
        part).  This is eminently pointless.  In order to use your key, your web server will need the decrypted key, which means it will need the password to the key.  Adding a password does nothing for you.  If you lost your private key but you did have it password-protected, you're still toast: the available encryption cyphers are meant to be fast, not hard to break.  Any serious attacker will crack it directly.  And if they have access to your private key in the first place, encrypted or not, you're probably toast already.
       </p>
       <p>
        OK.  So let's say you make your key, and make what's called the "
        <strike>
         CRT
        </strike>
        CSR", to ask for the cert.
       </p>
       <pre>
        # openssl req -new -key foo.key -out foo.csr
       </pre>
       <p>
        Now you're presented with a bunch of pointless-looking questions like your country code and your "organization".  Seems pointless, right?  Well now I have to live with this confidence-inspiring dialog, because I left off the organization:
       </p>
       <p>
       </p>
       <center>
        <img src="//wingolog.org/pub/unknown-organization.png" style="max-width:100%"/>
       </center>
       <p>
        Don't mess up, kids!  But wait there's more.  You send in your CSR, finally figure out how to receive mail for
        <tt>
         hostmaster@yourdomain.org
        </tt>
        because that's what "verification" means (not, god forbid, control of the actual web site), and you get back a certificate.  Now the fun starts!
       </p>
       <p>
        How are you actually going to serve SSL?
        <a href="http://www.daemonology.net/blog/2009-09-28-securing-https.html">
         The truly paranoid use an out-of-process SSL terminator
        </a>
        .  Seems legit except if you do that you lose any kind of indication about what IP is connecting to your HTTP server.  You can use a more HTTP-oriented terminator like
        <a href="https://blog.indutny.com/8.bud-a-tls-swiss-knife">
         bud
        </a>
        but then you have to mess with X-Forwarded-For headers and you only get them on the first request of a connection.  You could just enable mod_ssl on your Apache, but that code is terrifying, and do you really want to be running Apache anyway?
       </p>
       <p>
        In my case I ended up switching over to nginx, which has a startlingly underspecified configuration language, but for which the Debian defaults are actually not bad.  So you uncomment that part of the configuration, cross your fingers, Google a bit to remind yourself how systemd works, and restart the web server.  Haich Tee Tee Pee Ess ahoy!  But did you remember to disable the NULL authentication method?  How can you test it?  What about the NULL encryption method?  These are actual things that are configured into OpenSSL, and specified by standards.  (What is the use of a secure communications standard that does not provide any guarantee worth speaking of?)  So you google,
        <a href="https://wiki.mozilla.org/Security/Server_Side_TLS#Nginx">
         copy and paste some inscrutable incantation into your config
        </a>
        , turn them off.  Great, now you are a dilettante tweaking your encryption parameters, I hope you feel like a fool because I sure do.
       </p>
       <p>
        Except
        <a href="http://www.isg.rhul.ac.uk/tls/">
         things are still broken if you allow RC4
        </a>
        !  So you better make sure you disable RC4, which incidentally is exactly
        <a href="https://www.imperialviolet.org/2011/09/23/chromeandbeast.html">
         the opposite of the advice that people were giving out three years ago
        </a>
        .
       </p>
       <p>
        OK, so you took your certificate that you got from the CA and your private key and mashed them into place and it seems the web browser works.  Thing is though, the key that signs your certificate is possibly not in the actual root set of signing keys that browsers use to verify the key validity.  If you put just your key on the web site without the "intermediate CA", then things probably work but browsers will make an additional request to get the intermediate CA's key, slowing down everything.  So you have to
        <i>
         concatenate the text files with your key and the one with the intermediate CA's key
        </i>
        .  They look the same, just a bunch of numbers, but don't get them in the wrong order because apparently the internet says that won't work!
       </p>
       <p>
        But don't put in too many keys either!  In this image we have a cert for
        <tt>
         jsbin.com
        </tt>
        with one intermediate CA:
       </p>
       <p>
        <img src="https://pbs.twimg.com/media/B0GjNdFIYAAAfvS.png" style="max-width:100%"/>
       </p>
       <p>
        And here is the same but with an a different root that signed the GeoTrust Global CA certificate.  Apparently there was a time in which the GeoTrust cert hadn't been added to all of the root sets yet, and it might not hurt to include them all:
       </p>
       <p>
        <img src="https://pbs.twimg.com/media/B0GjNWAIAAEZOZh.png" style="max-width:100%"/>
       </p>
       <p>
        Thing is, the first one shows up "green" in Chrome (yay), but the second one shows problems ("outdated security settings" etc etc etc).  Why?  Because the link from Equifax to Geotrust uses a
        <a href="https://shaaaaaaaaaaaaa.com/">
         SHA-1 signature, and apparently that's not a good idea any more
        </a>
        .  Good times?  (Poor
        <a href="https://twitter.com/rem">
         Remy
        </a>
        last night was doing some basic science on the internet to bring you these results.)
       </p>
       <p>
        Or is Chrome denying you the green because it was RapidSSL that signed your certificate with SHA-1 and not SHA-256?  It won't tell you!  So you Google and apply snakeoil and beg your CA to reissue your cert, hopefully they don't charge for that, and eventually all is well.  Chrome gives you the green.
       </p>
       <p>
        Or does it?  Probably not, if you're switching from a web site that is also available over HTTP.  Probably you have some images or CSS or Javascript that's being loaded over HTTP.  You fix your web site to have scheme-relative URLs (like
        <tt>
         //wingolog.org/
        </tt>
        instead of
        <tt>
         http://wingolog.org/
        </tt>
        ), and make sure that your software can deal with it all (I had to patch Guile :P).  Update all the old blog posts!  Edit all the HTMLs!  And finally, green!  You're golden!
       </p>
       <p>
        Or not!  Because
        <a href="https://www.imperialviolet.org/2014/10/14/poodle.html">
         if you left on SSLv3 support you're still broken
        </a>
        !  Also, TLSv1.0, which is actually greater than SSLv3 for no good reason, also has problems; and then TLS1.1 also has problems, so you better stick with just TLSv1.2.  Except, except, older Android phones don't support TLSv1.2, and neither does the Googlebot, so
        <a href="http://googlewebmastercentral.blogspot.fr/2014/08/https-as-ranking-signal.html">
         you don't get the rankings boost you were going for in the first place
        </a>
        .  So you upgrade your phone because that's a thing you want to do with your evenings, and send snarky tweets into the ether about scumbag google wanting to promote HTTPS but not supporting the latest TLS version.
       </p>
       <p>
        So finally, finally, you have a web site that offers HTTPS and HTTP access.  You're good right?  Except no!  (Catching on to the pattern?)  Because what happens is that people just type in web addresses to their URL bars like "google.com" and leave off the HTTP, because why type those stupid things.  So you arrange for
        <tt>
         http://www.wobsite.com
        </tt>
        to redirect
        <tt>
         https://www.wobsite.com
        </tt>
        for users that have visited the HTTPS site.  Except no!
        <a href="http://www.thoughtcrime.org/software/sslstrip/">
         Because any network attacker can simply strip the redirection from the HTTP site
        </a>
        .
       </p>
       <p>
        The "solution" for this is called HTTP Strict Transport Security, or HSTS.  Once a visitor visits your HTTPS site, the server sends a response that tells the browser never to fetch HTTP from this site.  Except that doesn't work the first time you go to a web site!  So if you're Google, you friggin
        <a href="https://chromium.googlesource.com/chromium/chromium/+/master/net/base/transport_security_state_static.h">
         add your name to a static list in the browser
        </a>
        .  EXCEPT EVEN THEN
        <a href="https://www.blackhat.com/docs/eu-14/materials/eu-14-Selvi-Bypassing-HTTP-Strict-Transport-Security-wp.pdf">
         watch out for the Delorean
        </a>
        .
       </p>
       <p>
        And what if instead they go to
        <tt>
         wobsite.com
        </tt>
        instead of the
        <tt>
         www.wobsite.com
        </tt>
        that you configured?  Well, better enable HSTS for the whole site, but to do anything useful with such a web request you'll need a wildcard certificate to handle the multiple URLs, and those run like 150 bucks a year, for a one-bit change.  Or, just get more single-domain certs and tack them onto your cert, using the precision tool
        <tt>
         cat
        </tt>
        , but don't do too many, because if you do you will
        <a href="https://www.imperialviolet.org/2010/06/25/overclocking-ssl.html">
         overflow the initial congestion window of the TCP connection
        </a>
        and you'll have to wait for an ACK on your certificate before you can actually exchange keys.  Don't know what that means?  Better look it up and be an expert, or your wobsite's going to be slow!
       </p>
       <p>
        If your security goals are more modest, as they probably are, then you could get burned the other way: you could enable HSTS, something could go wrong with your site (an expired certificate perhaps), and then people couldn't access your site at all, even if they have no security needs, because HTTP is turned off.
       </p>
       <p>
        Now you start to add secure features to your web app, safe with the idea you have SSL.  But
        <a href="https://www.owasp.org/index.php/SecureFlag">
         better not forget to mark your cookies as secure
        </a>
        , otherwise they could be leaked in the clear, and better not forget that your website might also be served over HTTP.  And better check up on when your cert expires, and better have a plan for embedded browsers that don't have useful feedback to the user about certificate status, and what about your CA's audit trail, and better stay on top of the new developments in security!
        <a href="http://www.youtube.com/watch?v=6JLWQEuz2gA">
         Did you read it?  Did you read it?  Did you read it?
        </a>
       </p>
       <p>
        It's a wonder anything works.  Indeed I wonder if anything does.
       </p>
      </div>
     </div>
    </div>
    <div>
     <h3 id="comments">
      42 responses
     </h3>
     <ol class="commentlist">
      <li class="alt" id="72151362268a6571a84942d9c47a2ee2f57bb341">
       <cite>
        <a href="https://blog.indutny.com" rel="external nofollow">
         Fedor Indutny
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#72151362268a6571a84942d9c47a2ee2f57bb341">
         17 October 2014  2:46 PM
        </a>
       </small>
       <div>
        <p>
         Good post, thank you!
        </p>
        <p>
         So, on the matter of wildcards, multiple certs, and CWND. You could configure multiple contexts in bud, each for a different domain name (using TLS protocol SNI extension, which works in the most of the browsers).
        </p>
        <p>
         In case of such configuration, only relevant subset of certs will be sent to the client. Keeping you with the safe ServerHello packet size.
        </p>
       </div>
      </li>
      <li class="alt" id="8cd5963a5fd8e626b6ce0c18cd2ccdaa93e5cb27">
       <cite>
        Derek
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#8cd5963a5fd8e626b6ce0c18cd2ccdaa93e5cb27">
         17 October 2014  3:36 PM
        </a>
       </small>
       <div>
        <p>
         You forgot to mention how ECC is totally hacked by NSA and they will be reading all your traffics if you use ECDH.  I really liked your post.
        </p>
        <p>
         On the other hand, a strong password on your private key should not be crackable, even with "fast" ciphers like AES and 3DES.  Yes, it needs to be in-the-clear for the browser to use it.  Perhaps you'd like to add a level of insanity to the pile with an HSM (Hardware Security Module) like the TPM or a smartcard?  Configuring OpenSSL engines is something everyone does, no?
        </p>
        <p>
         Self-sign your certificate and be a hipster; claim you didn't want their traffic anyway, if they're scared off by someone refusing to kowtow to the CA racket.
        </p>
       </div>
      </li>
      <li class="alt" id="b425cbe8960bcb4b239ed4e2b2c03202076fb293">
       <cite>
        <a href="http://gbbmtp.wordpress.com" rel="external nofollow">
         Nicholas
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#b425cbe8960bcb4b239ed4e2b2c03202076fb293">
         17 October 2014  5:18 PM
        </a>
       </small>
       <div>
        <p>
         Great post, very entertaining and brightened my similarly long Friday.
        </p>
        <p>
         Thanks!
        </p>
       </div>
      </li>
      <li class="alt" id="2bb4e07890e180a054d53905032fedd282b42976">
       <cite>
        Curt
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#2bb4e07890e180a054d53905032fedd282b42976">
         17 October 2014  5:24 PM
        </a>
       </small>
       <div>
        <p>
         Like your blog! Glad to know I'm not the only one that rode the SSL Merry-Go-Round! One thing to mention, the Certificate Authorities will be discontinuing the issuing of wildcard keypairs in the near future.
        </p>
       </div>
      </li>
      <li class="alt" id="3d5c208b81c2e08f256348502587d1fba6bcfeb0">
       <cite>
        <a href="http://nerd.ocracy.org/em" rel="external nofollow">
         Emanuele Aina
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#3d5c208b81c2e08f256348502587d1fba6bcfeb0">
         17 October 2014  5:57 PM
        </a>
       </small>
       <div>
        <p>
         I'm currently experimenting with https://www.cloudflare.com/ssl which may sidestep much of the pain described, let's see how it goes.
        </p>
       </div>
      </li>
      <li class="alt" id="60fe959e8fbff4f25680edbae750f9d8a48637ff">
       <cite>
        <a href="https://snitch.io" rel="external nofollow">
         Yousef Ourabi
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#60fe959e8fbff4f25680edbae750f9d8a48637ff">
         17 October 2014  6:17 PM
        </a>
       </small>
       <div>
        <p>
         Yep - getting this right is hard.
        </p>
        <p>
         Couple of points about the article.
        </p>
        <p>
         Browsers verify SSL certificates (OCSP). This is an ongoing service that has a direct impact on latency - so SSL *is* an ongoing service very much like DNS. However, most people don't realize this.
        </p>
        <p>
         Also you send in a CSR - certificate signing request - not CRT (which is usually short-hand for certificate).
        </p>
        <p>
         Also it gets worse - A recent OpenSSL vulnerability would still allow SSLv3 even if it was configured with "no-ssl3":  https://www.openssl.org/news/secadv_20141015.txt
        </p>
        <p>
         This is why I built https://snitch.io - security and SSL secured sites in particular are moving targets and not "fire and forget". You really need an external process monitoring and auditing your secured site.
        </p>
       </div>
      </li>
      <li class="alt" id="c6440def225c3de5191671c315ae0061fd690836">
       <cite>
        <a href="https://twitter.com/geeknik" rel="external nofollow">
         geeknik
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#c6440def225c3de5191671c315ae0061fd690836">
         17 October 2014  6:23 PM
        </a>
       </small>
       <div>
        <p>
         I find that Mozilla has some great information on setting up and configuring TLS.
        </p>
        <p>
         https://wiki.mozilla.org/Security/Server_Side_TLS
        </p>
       </div>
      </li>
      <li class="alt" id="2670f71d5ffa5239b7afa57b1dedb6b4321948ea">
       <cite>
        <a href="https://www.expeditedssl.com" rel="external nofollow">
         Michael Buckbee
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#2670f71d5ffa5239b7afa57b1dedb6b4321948ea">
         17 October 2014  6:26 PM
        </a>
       </small>
       <div>
        <p>
         It's even worse than that as even if all the above is actually correct and done perfectly that you may still not get the "green" depending on the browser as the browser makers are moving to showing domain validated (via email) certificates as gray and only EV (extended validation) certs as green.
        </p>
        <p>
         Things to note: EV certs are much more expensive. You cannot get a cert that is both EV and a Wildcard, single domains only.
        </p>
        <p>
         Screenshots of how the various browsers show Domain vs EV certs at:
        </p>
        <p>
         https://www.expeditedssl.com/pages/visual-security-browser-ssl-icons-and-design
        </p>
       </div>
      </li>
      <li class="alt" id="de0cbb906f125eedc8552ebc34e9dc59f4cf8646">
       <cite>
        <a href="https://lifeforms.nl/" rel="external nofollow">
         lifeforms
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#de0cbb906f125eedc8552ebc34e9dc59f4cf8646">
         17 October 2014  7:08 PM
        </a>
       </small>
       <div>
        <p>
         You forgot that you probably generated SHA1 certificates, which will be deprecated soon in favor of SHA2. Time to re-issue all your certificates!
        </p>
        <p>
         And, that finally as thanks for all your effort, you then got compromised to hell and back through Heartbleed!
        </p>
        <p>
         SSL, who doesn't love it?
        </p>
       </div>
      </li>
      <li class="alt" id="a5149ee07c82a7cfb32047ab4e6276368631f5b9">
       <cite>
        Nick
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#a5149ee07c82a7cfb32047ab4e6276368631f5b9">
         17 October 2014  7:18 PM
        </a>
       </small>
       <div>
        <p>
         Please don't make the fundamental mistake of assuming that SSL is actually trustworthy.  Trusted, yes, but trust-worthy, no.
        </p>
       </div>
      </li>
      <li class="alt" id="b8f47e242269702f87c65de6e14c1b17b4977838">
       <cite>
        Andrew
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#b8f47e242269702f87c65de6e14c1b17b4977838">
         17 October 2014  8:04 PM
        </a>
       </small>
       <div>
        <p>
         I'm using latest Chrome and your site is using AES_128_CBC which means it isn't getting forward secrecy. You need to reorder your  chosen ciphers!
        </p>
       </div>
      </li>
      <li class="alt" id="d6a2d2761ee295ba1065f06ef49e71ab088b2eb6">
       <cite>
        harrybuttle
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#d6a2d2761ee295ba1065f06ef49e71ab088b2eb6">
         17 October 2014  8:11 PM
        </a>
       </small>
       <div>
        <p>
         Last week i went through some of the same, i wish this was written 10 days ago! To start things off i got a free cert from startssl.
        </p>
        <p>
         Some points (and links to other sites, hope it's ok, i found them useful):
        </p>
        <p>
         * Startssl doesn't generate the key in the browser, their web app sends the key password to their server and gets back the generated key.
        </p>
        <p>
         * Their key generation can be skipped and you can use your really private key.
        </p>
        <p>
         * They include a subdomain of your choice (usually www) in the free certificate, so at least that one is covered.
        </p>
        <p>
         * nginx supports sni too, in case that's needed. But old versions of android browser (at least up to gingerbread) don't support it. To quickly check if the browser supports sni: https://sni.velox.ch/
        </p>
        <p>
         * There are some wildcard certificates for less than 100$:
         <br/>
         http://webdesign.about.com/od/ssl/tp/cheapest-ssl-certificates.htm and with some caveats some very cheap non-wildcard too.
        </p>
        <p>
         * This is a fresher and better community tutorial dealing only with openssl (es. passwordless key, example of csr info filling...)
         <br/>
         https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs
        </p>
        <p>
         * It may be important to generate the csr with the -sha256 openssl option, to avoid the deprecated sha1.
        </p>
        <p>
         * I found out the hard way the need to concatenate the intermediate between the key and the certificate: browsers worked fine, but my apps complained.
        </p>
        <p>
         * I should really try out sslstrip and see how effective it can be... certificate pinning will help but not on first connection.
        </p>
       </div>
      </li>
      <li class="alt" id="78ec4670c8f0d1d11dda00d7edcfa46b2530810c">
       <cite>
        <a href="https://blog.g3rt.nl/" rel="external nofollow">
         Gert van Dijk
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#78ec4670c8f0d1d11dda00d7edcfa46b2530810c">
         17 October 2014  8:12 PM
        </a>
       </small>
       <div>
        <p>
         "StartSSL, which generates the key in your browser"
         <br/>
         You misunderstood that part! You're generating an SSL Client Certificate in your browser to authenticate with StartCom on their control panel. You should generate a private key and CSR (SHA-2!) on your server and submit only the CSR to StartCom.
        </p>
       </div>
      </li>
      <li class="alt" id="728ed369974c970c575e8c272a687f22f00a96b3">
       <cite>
        You Are Incorrect
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#728ed369974c970c575e8c272a687f22f00a96b3">
         17 October 2014  8:21 PM
        </a>
       </small>
       <div>
        <p>
         StartSSL doesn't generate your private key on the server side. You are completely incorrect about this and your misinformation is borderline libellous!
        </p>
        <p>
         Look up the "keygen" element in the HTML5 spec, to see what really occurs (hint: the key is generated by your actual browser, and saved locally).
        </p>
       </div>
      </li>
      <li class="alt" id="13a49b142526a0123e91d34f0cabc4565714bc83">
       <cite>
        <a href="https://mathiasbynens.be/" rel="external nofollow">
         Mathias Bynens
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#13a49b142526a0123e91d34f0cabc4565714bc83">
         17 October 2014  8:58 PM
        </a>
       </small>
       <div>
        <blockquote>
         <p>
          You fix your web site to have scheme-relative URLs (like
          <code>
           //wingolog.org/
          </code>
          instead of
          <code>
           http://wingolog.org/
          </code>
          ),
         </p>
        </blockquote>
        <p>
         This is actually an anti-pattern. When a document is available over HTTPS, theres no reason not to include the
         <code>
          https://
         </code>
         scheme and make sure that version is used at all times.
        </p>
       </div>
      </li>
      <li class="alt" id="ce016e86197c534e4e267e79cbef737eaeedee79">
       <cite>
        Paula
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#ce016e86197c534e4e267e79cbef737eaeedee79">
         17 October 2014  9:01 PM
        </a>
       </small>
       <div>
        <p>
         the "which is run by (unknown)" is not due to missing the oranization field. any non EV certificate would have said the same thing in Firefox. latest versions of FF don't have this issue.
        </p>
       </div>
      </li>
      <li class="alt" id="412b5ff13b4c8138d06f88328fd7036d6ad37c97">
       <cite>
        Michael Catanzaro
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#412b5ff13b4c8138d06f88328fd7036d6ad37c97">
         17 October 2014  9:01 PM
        </a>
       </small>
       <div>
        <p>
         https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=743339 is not the cause of your TLS issue with GeoTrust, but it's known to completely break sites signed by GeoTrust certs for Debian users. So add that to your bucket of things to complain about....
        </p>
       </div>
      </li>
      <li class="alt" id="e1b7e37e490a05b0ace3880dac9a23d81ae59112">
       <cite>
        paul
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#e1b7e37e490a05b0ace3880dac9a23d81ae59112">
         17 October 2014  9:34 PM
        </a>
       </small>
       <div>
        <p>
         Generating a key in your browser does NOT upload the private key to the server.  It only uploads the public key, while saving the private key to local storage in the browser configuration.  It's all very clever.  The purpose is for client-side authentication of browsers, not generating server certificates.  Unfortunately, in part because of the cumbersome technical implementation, client side certificates in browsers never caught on, so we still use passwords.
        </p>
       </div>
      </li>
      <li class="alt" id="8e6503946120673ab54e1750bbc97d6b27a4ff00">
       <cite>
        <a href="http://www.hrbuckley.net" rel="external nofollow">
         hrb
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#8e6503946120673ab54e1750bbc97d6b27a4ff00">
         17 October 2014  9:41 PM
        </a>
       </small>
       <div>
        <p>
         Stopped reading when you completely missed how StartSSL lets you generate your own key and submit an CSR.
        </p>
       </div>
      </li>
      <li class="alt" id="bc2542d29576f1286b20b110171e06fcb58595de">
       <cite>
        <a href="http://nickdesaulniers.github.io/" rel="external nofollow">
         Nick Desaulniers
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#bc2542d29576f1286b20b110171e06fcb58595de">
         17 October 2014  9:47 PM
        </a>
       </small>
       <div>
        <p>
         Everyone's all excited for Service Workers; that they will deliver us from our offline-web-app-UX sins, except me.  Their requirement that they only be available to sites with HTTPS (to prevent cache poisoning), and your blog post about how user friendly setting up TLS is, make me quite doubtful that Service Workers will see wide enough adoption.
        </p>
       </div>
      </li>
      <li class="alt" id="341f56608bf42b606f1eef322ac4b98eb6f67125">
       <cite>
        <a href="https://www.tbray.org/ongoing/" rel="external nofollow">
         Tim
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#341f56608bf42b606f1eef322ac4b98eb6f67125">
         17 October 2014 10:21 PM
        </a>
       </small>
       <div>
        <p>
         FWIW, SSLs.com is cheaper plus has completely idiot-proof line-by-line cut/paste setup instructions.
        </p>
        <p>
         But, yeah.
        </p>
       </div>
      </li>
      <li class="alt" id="caddc188f766c40cc98f802d698b04ad29acdfcf">
       <cite>
        Kai
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#caddc188f766c40cc98f802d698b04ad29acdfcf">
         17 October 2014 11:10 PM
        </a>
       </small>
       <div>
        <p>
         I think for now we are better with TOR hidden services even if they don't have nice names and you also need to tell them to others though a secure channel, but all the rest is just crap - let's hope for GNUnet.
        </p>
       </div>
      </li>
      <li class="alt" id="65d79434131bec2bc3aaf5a2498308e88b17a51e">
       <cite>
        <a href="https://solveforall.com" rel="external nofollow">
         Jeff Tsay
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#65d79434131bec2bc3aaf5a2498308e88b17a51e">
         18 October 2014  0:13 AM
        </a>
       </small>
       <div>
        <p>
         Thanks for this post. I recently went through almost the same process when setting up HTTPS on my site. I got a free Rapid SSL cert with my domain registration from Namecheap, and it worked well, but I had to gather the information from various sites to get it to work. I had forgotten about the secure cookie stuff so after reading your post, I immediately added it. One thing that was helpful to me was this free SSL checker: https://www.ssllabs.com/ssltest/ which gave me piece of mind that everything was setup properly (although it didn't catch the secure cookie stuff).
        </p>
        <p>
         It is scary that, for most developers, the steps to secure a server involves copying code snippets from random, insecure blogs all over the world.
        </p>
       </div>
      </li>
      <li class="alt" id="ed9aaf10267433b5187f1a4ade6accecdc628f43">
       <cite>
        <a href="https://blog.samwhited.com" rel="external nofollow">
         Sam whited
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#ed9aaf10267433b5187f1a4ade6accecdc628f43">
         18 October 2014  1:19 AM
        </a>
       </small>
       <div>
        <p>
         Don't forget that OCSP servers can go down and cause your website to fail verification (not that it matters anyways b/c Chrome doesn't even bother to check for non-EV certs and everything else checks and then ignores it if it can't get an answer). Better enable OCSP stapling to fix this.
        </p>
       </div>
      </li>
      <li class="alt" id="2a1bd173fd4fb1aa88224507664035db9cadebf3">
       <cite>
        <a href="https://wingolog.org/" rel="external nofollow">
         wingo
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#2a1bd173fd4fb1aa88224507664035db9cadebf3">
         18 October 2014  8:26 AM
        </a>
       </small>
       <div>
        <p>
         Well, that was fun.  Some thanks:
        </p>
        <p>
         to
         <a href="http://blog.ivanristic.com/">
          Ivan Risti
         </a>
         , on
         <a href="https://news.ycombinator.com/item?id=8473626">
          his pessimism regarding cipher/key exchange blacklists
         </a>
        </p>
        <p>
         to
         <a href="http://yousefourabi.com/">
          Yousef Ourabi
         </a>
         , for
         <a href="http://wingolog.org/archives/2014/10/17/ffs-ssl#60fe959e8fbff4f25680edbae750f9d8a48637ff">
          his comment above
         </a>
         ; I didn't consider the burden of OCSP on CAs.  Also I think Yousef was the only one to recognize the CSR/CRT typo, and for mentioning another bizarre OpenSSL SSLv3 downgrade bug; the idea of a proxy server written in OCaml is getting more attractive by the day.
        </p>
        <p>
         to evvvvverrrrryyyyone that pointed out that the Firefox "unknown organization" thing is because of EV certificates.  EV certificate dogpile!
        </p>
        <p>
         And a big no-thanks to people that didn't click through to read the StartSSL article on DigitalOcean.  I wasn't talking about the client-side cert.  There is a screenshot there of your private key in a web browser textarea; I work on browsers for a living and there is no way you could get me to treat that as safe, for all of the reasons on the Matasano JS crypto article.
        </p>
       </div>
      </li>
      <li class="alt" id="e419693941292d01d3466243445158d8ca8ecbeb">
       <cite>
        lanzz
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#e419693941292d01d3466243445158d8ca8ecbeb">
         18 October 2014  9:16 AM
        </a>
       </small>
       <div>
        <p>
         That private key is displayed by StartSSL only when they're generating it, because, well, they need to give it to you. That won't happen if you generate your own private key and CSR.
        </p>
       </div>
      </li>
      <li class="alt" id="191eae4bdbda8df783e9375b99120e612fd2f64e">
       <cite>
        <a href="http://wingolog.org/" rel="external nofollow">
         wingo
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#191eae4bdbda8df783e9375b99120e612fd2f64e">
         18 October 2014  9:53 AM
        </a>
       </small>
       <div>
        <p>
         lanzz, no argument there -- I'm told that StartSSL can be used in a secure way, and I might give it a go again one of these days.  I just think it's irresponsible to have the option of generating your key in the browser (if that's the case) or on their side (probably better from a crypto perspective as the browser often doesn't have a CSPRNG but totally insecure because in that case they
         <i>
          definitely
         </i>
         have your private key).
        </p>
        <p>
         Unfortunately, "StartSSL can be used in a secure way" in no way contradicts the fact that the first search result (for me) advises you to use StartSSL in an insecure way.  There are many ways for things to go wrong if you don't know what you're about.
        </p>
       </div>
      </li>
      <li class="alt" id="ea8424c354ca7062b417ed774074728af9018a3d">
       <cite>
        Mantas
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#ea8424c354ca7062b417ed774074728af9018a3d">
         18 October 2014 11:16 AM
        </a>
       </small>
       <div>
        <p>
         If you say a browser wouldn't have a CSPRNG, wouldn't it also mean the TLS session key generation is hopelessly insecure as well?
        </p>
        <p>
         Browsers do have CSPRNGs. In the TLS library. The same one handles the keygen tag.
        </p>
       </div>
      </li>
      <li class="alt" id="bbb0268e6863df8600cbc7ad2167a5251c629d0b">
       <cite>
        <a href="http://nucco.org" rel="external nofollow">
         nucco
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#bbb0268e6863df8600cbc7ad2167a5251c629d0b">
         18 October 2014 12:06 PM
        </a>
       </small>
       <div>
        <p>
         StartCom (startssl) is not forcing you to generate a private key on their website (you get the option to bring your own CSR).
        </p>
        <p>
         The javascript creating a certificate when you initiate the process is creating a Client-Authentication certificate (they are using passwordless authentication). I guess you know what this means, but basically, they are generating a certificate with your email address as the subject (they send you a verification code) and the certificate is installed in your browser (you are advised to back it up as it is the primary means of accessing your account).
        </p>
       </div>
      </li>
      <li class="alt" id="bac0c705b72cd1216ab41a53f8b018032dab3e30">
       <cite>
        <a href="http://wingolog.org/" rel="external nofollow">
         wingo
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#bac0c705b72cd1216ab41a53f8b018032dab3e30">
         18 October 2014 12:06 PM
        </a>
       </small>
       <div>
        <p>
         Mantas.  While the thing you say is true, are you seriously arguing that a
         <i>
          web browser
         </i>
         should be involved
         <i>
          in any way
         </i>
         in the generation of the private key for a
         <i>
          web server
         </i>
         ?  Jeebus people!
        </p>
       </div>
      </li>
      <li class="alt" id="8e53a4ca96cfaeff0c1343c88a4a9f12c78ac49e">
       <cite>
        <a href="http://awel.domblogger.net/" rel="external nofollow">
         Alice Wonder
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#8e53a4ca96cfaeff0c1343c88a4a9f12c78ac49e">
         18 October 2014  6:22 PM
        </a>
       </small>
       <div>
        <p>
         Certificate authorities just need to go away. We should just use self-signed certs with our SSL fingerprint inserted into a decentralized crypto-registry, like the namecoin blockchain.
        </p>
        <p>
         Cheaper and more secure and to the point - it removes trust of signing authorities that often can't be trusted.
        </p>
       </div>
      </li>
      <li class="alt" id="6d4513a1194fd84f4bf68b2fea6d87686afa55c6">
       <cite>
        <a href="http://lu.is/" rel="external nofollow">
         Luis
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#6d4513a1194fd84f4bf68b2fea6d87686afa55c6">
         18 October 2014  6:22 PM
        </a>
       </small>
       <div>
        <p>
         By the way, your blog feed is still emitting http links, looks like.
        </p>
       </div>
      </li>
      <li class="alt" id="249888a4656c6970376dd528a3c81423612d8d47">
       <cite>
        lanzz
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#249888a4656c6970376dd528a3c81423612d8d47">
         18 October 2014  6:53 PM
        </a>
       </small>
       <div>
        <p>
         While I agree with you on most of your points, saying "first search result for SSL is crap" is kinda like saying "I'm not an electrical engineer but I wanted to rewire my house myself, and the first search result lead to my house burning down". Not everything can be boiled down to an explanation so simple that you can really understand what you're doing from just the how-to you find on the first search result. Security is a nasty process, not something you can do and be done with, but something you need to be constantly doing, and it's very easy for even good how-tos to get quickly outdated to the point of being actually harmful, and there will always be people who continue to churn out articles based on some stuff they read somewhere ten years ago, but which look knowledgeable enough, and most of all - superficially seem to actually do the job, so they get popular and rank high in search results. Hell, w3schools is a prime example - everybody with half a week of actual experience detests it, but it has been number one result for tons of legitimate questions for decades now, with no end in sight. That's how the internet works. It's okay to do things by googling, but you should always at less make the effort to understand before you paste anything in a shell. I would agree that there is probably a vacuum for a good, authoritative resource on SSL, but there are probably such resources that just haven't been able to rise to top PageRank just because that's too small a niche, probably.
        </p>
       </div>
      </li>
      <li class="alt" id="c9a17906c2ab947cc41f94ef9bc6aa5e42bc36c9">
       <cite>
        <a href="http://awel.domblogger.net/" rel="external nofollow">
         Alice Wonder
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#c9a17906c2ab947cc41f94ef9bc6aa5e42bc36c9">
         18 October 2014  8:13 PM
        </a>
       </small>
       <div>
        <p>
         @lanzz - I use to reall detest w3schools but last few years they haven't been as bad as they were when the hate for them first started going around. They've cleaned up somewhat.
        </p>
        <p>
         Not saying I go to them for a source, but...
        </p>
       </div>
      </li>
      <li class="alt" id="fdc0b01d6dbc4755d493db10104013bb5f46e449">
       <cite>
        AL13N
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#fdc0b01d6dbc4755d493db10104013bb5f46e449">
         19 October 2014 11:33 AM
        </a>
       </small>
       <div>
        <p>
         there's also something called TLSA which is something that uses DNSSEC to validate what kind of certificate is allowed for what specific website. good luck getting that configured :-)
        </p>
       </div>
      </li>
      <li class="alt" id="a7d081b36f6a34fb575d03b08ae24fcba2bd955b">
       <cite>
        <a href="http://thomas.apestaart.org" rel="external nofollow">
         Thomas Vander Stichele
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#a7d081b36f6a34fb575d03b08ae24fcba2bd955b">
         19 October 2014 10:48 PM
        </a>
       </small>
       <div>
        <p>
         Yay, a blog post I understood (and sympathized) with from beginning to end!
        </p>
        <p>
         We have a service that speaks SSL on 3 different ports, two of them with client-side certificates, on 4 different platforms (local/dev/pre/pro) - it's no fun when all of those need to be regenerated, and one of them against a 'real' certificate authority instead of self-signed for the rest, and with wildcard certs...
        </p>
       </div>
      </li>
      <li class="alt" id="90a714b1e0bf264525f1adb7d01b35716c1684ee">
       <cite>
        <a href="http://draketo.de/" rel="external nofollow">
         Arne Babenhauserheide
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#90a714b1e0bf264525f1adb7d01b35716c1684ee">
         19 October 2014 11:36 PM
        </a>
       </small>
       <div>
        <p>
         Thank you for this writeup!
        </p>
        <p>
         About 50: My provider wants 100 for a non-proxy SSL certificate. Per year. Or I would have to use a strange SSL proxy.
        </p>
        <p>
         All that for security we could get with self-signed certificates, because all the big attackers own root-certificates anyway.
        </p>
       </div>
      </li>
      <li class="alt" id="c158175d7953786aa871caf922d18bf2afa8d929">
       <cite>
        <a href="https://blog.ageispolis.net" rel="external nofollow">
         Kevin
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#c158175d7953786aa871caf922d18bf2afa8d929">
         20 October 2014  3:49 AM
        </a>
       </small>
       <div>
        <p>
         Glad that the commentators above have pointed out the ample misinformation and misconceptions in this post. However, other than that it was a great effort!
        </p>
       </div>
      </li>
      <li class="alt" id="ac32ed1a182f02d55d9e9afc2518c4b9d772a08b">
       <cite>
        Dan
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#ac32ed1a182f02d55d9e9afc2518c4b9d772a08b">
         21 October 2014  7:04 AM
        </a>
       </small>
       <div>
        <p>
         So, I get that your private key should be kept, um, private. But I don't see the big deal with your CA generating a new private key for you, server side or (if rng quality is deemed appropriate) client side in JS.
        </p>
        <p>
         I'm not sure what scenario you're protecting against. That your CA is malicious and uses your key to impersonate you? Um, they can already do that.
        </p>
        <p>
         If you were using the private key for other things, then absolutely it would be bad for your CA to have it. But a new key only used for the cert? Meh.
        </p>
        <p>
         Great article, though. So sad that many crypto people think it's ok (preferable, even) to have these systems be complex and obscure.
        </p>
       </div>
      </li>
      <li class="alt" id="77e4592a7f5c3b285e48275b73f3a3c7682178fa">
       <cite>
        Paul T. Lambert
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#77e4592a7f5c3b285e48275b73f3a3c7682178fa">
         31 October 2014  8:28 AM
        </a>
       </small>
       <div>
        <p>
         Dude, this is some funny $#!+.
        </p>
       </div>
      </li>
      <li class="alt" id="1ef4f49bd844835ecd7115b30560480ac4df9b29">
       <cite>
        <a href="http://qulogic.blogspot.com/" rel="external nofollow">
         Elliott
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#1ef4f49bd844835ecd7115b30560480ac4df9b29">
         14 November 2014  9:36 PM
        </a>
       </small>
       <div>
        <p>
         A couple minor missed things:
         <br/>
         * The feed on Planet Gnome still points to your HTTP site.
         <br/>
         * Some internal links are still HTTP, even on the HTTPS site, e.g., http://wingolog.org/archives/2014/11/14/on-yakshave-on-color-on-cosines-on-glitchen uses an HTTP link to this page.
        </p>
       </div>
      </li>
      <li class="alt" id="f0f0c1d748976a9614f11d0047d8e744178be1db">
       <cite>
        <a href="http://dinhe.net/~aredridel/" rel="external nofollow">
         Aria Stewart (@aredridel)
        </a>
       </cite>
       says:
       <br/>
       <small class="commentmetadata">
        <a href="#f0f0c1d748976a9614f11d0047d8e744178be1db">
         3 January 2015  7:55 PM
        </a>
       </small>
       <div>
        <p>
         Browser-generated keys are not 'generated in javascript' -- that's the keygen tag that browsers have supported since Netscape 2.0 or so. That actually is a secure key generator that puts the key into the browser's key store (MacOS keychain, Mozilla's internal manager, etc.)
        </p>
        <p>
         It's the "right" way to do this in an easy, automated fashion. Server gets the public key, browser keeps the private, and the private isn't available to javascript.
        </p>
       </div>
      </li>
     </ol>
     <div>
      <h3>
       Leave a Reply
      </h3>
      <form action="/archives/2014/10/17/ffs-ssl" method="POST">
       <p>
        <input name="author" size="22" tabindex="1" type="text" value=""/>
        <label for="author">
         <small>
          Name
         </small>
        </label>
       </p>
       <p>
        <input name="email" size="22" tabindex="2" type="text" value=""/>
        <label for="email">
         <small>
          Mail (will not be published)
         </small>
        </label>
       </p>
       <p>
        <input name="url" size="22" tabindex="3" type="text" value=""/>
        <label for="url">
         <small>
          Website
         </small>
        </label>
       </p>
       <p>
        <input name="x" size="22" tabindex="3" type="text" value=""/>
        <label for="x">
         <small>
          What's your favorite number?
         </small>
        </label>
       </p>
       <p>
        <textarea cols="65" id="comment" name="comment" rows="10" tabindex="4">
        </textarea>
       </p>
       <p>
        <input id="submit" name="submit" tabindex="5" type="submit" value="Submit Comment"/>
       </p>
      </form>
     </div>
    </div>
   </div>
   <div id="footer">
    powered by
    <a href="//wingolog.org/software/tekuti/">
     tekuti
    </a>
   </div>
  </div>
 </body>
</html>