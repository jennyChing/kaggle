<!DOCTYPE html>
<!--

  ,--,--,--.,--.,--.,--.,--.,------.
  |        ||  ||  ||  ||  |'-.  .-'
  |  |  |  |'  ''  ''  ''  '  |  |
  `--`--`--' `----'  `----'   `--'


  Embeddable real-time discussions (BETA)

  Unlimited traffic &amp; data for free: muut.com

  Built: June 30, 2015

  SPDY served

-->
<html>
 <head>
  <title>
   Riot 2.2 | A React-like UI library
  </title>
  <meta content="And why we need a new UI library" name="description"/>
  <meta charset="utf-8"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="width=device-width, initial-scale=1" id="viewport" name="viewport"/>
  <meta content="https://muut.com/riotjs/index.html" property="og:url"/>
  <meta content="Riot 2.2 | A React-like UI library" property="og:title"/>
  <meta content="And why we need a new UI library" property="og:description"/>
  <meta content="https://muut.com/common/img/og.jpg" property="og:image"/>
  <!--[if lt IE 9]&gt;
    &lt;script src="/common/js/ie8/es5-shiv.js"&gt;&lt;/script&gt;
    &lt;script src="/common/js/ie8/html5-shiv.js"&gt;&lt;/script&gt;
    &lt;script&gt;html5.addElements('connect forgot join login password signup')&lt;/script&gt;
  &lt;![endif]-->
  <script>
   window.global = { api: "https://api.muut.com" };
    
/* Avoiding FOUC */

;(function(win) {

  /* JS media queries */
  var head = document.documentElement,
      raf = win.requestAnimationFrame;

  function media() {
    var w = win.innerWidth, cls = '';

    for (var i = 500; i &lt; 1200; i += 50) {
      if (w &lt; i) cls += " max-" + i;
      if (w &gt; i) cls += " min-" + i;
    }
    head.className = cls.slice(1);
  }

  if (raf) {
    win.onresize = function() { raf(media); }
  }

  media();

  /* Set logged / logged out */

  function el(id) {
    return document.getElementById(id)
  }

  global.setLoggedState = function() {
    var nav_account = el('nav_account'),
        intercom = el('intercom-container'),
        avatar = localStorage.avatar;

    if (nav_account) {
      nav_account.children[0].innerHTML = '&lt;span&gt;Account&lt;/span&gt;' + (avatar ? '&lt;img src="' +avatar+ '"&gt;' : '');
      el('container').className = 'is-' + (avatar ? '' : 'not-') + 'logged';
      if (intercom) intercom.style.display = avatar ? '' : 'none';
    }

  };

})(window);
  </script>
  <link href="https://muut.com/opensearch.xml" rel="search" title="Muut" type="application/opensearchdescription+xml"/>
  <link href="https://muut.com/blog/atom.xml" rel="alternate" title="The Muut blog" type="application/atom+xml"/>
  <link href="https://muut.com/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
  <link href="https://muut.com/favicon.png" rel="icon" type="image/png"/>
  <style>
   @font-face {
  font-family: 'icon';
  font-style: normal;
  font-weight: normal;
  src: url(//muut.com/e/muut/1.13.6/font/icon.woff) format('woff');
}

@font-face {
  font-family: 'Proxima Nova';
  font-style: normal;
  font-weight: 300;
  src: local('Proxima Nova Light'), local('ProximaNova-Light'), url(https://muut.com/font/pn-light.woff) format('woff');
}

@font-face {
  font-family: 'Proxima Nova';
  font-style: normal;
  font-weight: 400;
  src: local('Proxima Nova'), local('ProximaNova'), url(https://muut.com/font/pn-reg.woff) format('woff');
}

@font-face {
  font-family: 'Proxima Nova';
  font-style: normal;
  font-weight: 700;
  src: local('Proxima Nova Bold'), local('ProximaNova-Bold'), url(https://muut.com/font/pn-bold.woff) format('woff');
}

@font-face {
  font-family: 'Proxima Nova';
  font-style: italic;
  font-weight: 400;
  src: local('Proxima Nova Italic'), local('ProximaNova-Italic'), url(https://muut.com/font/pn-regitalic.woff) format('woff');
}
  </style>
  <link href="//muut.com/e/muut/1.13.6/moot.css" rel="stylesheet"/>
  <link href="/common/www+76606.css" rel="stylesheet"/>
  <link href="/riotjs/css/riot+17fcd.css" rel="stylesheet"/>
  <style>
  </style>
 </head>
 <body class="" id="riot-home">
  <div id="container">
   <!--[if lt IE 8]&gt;
      &lt;div id="ie7"&gt;
        &lt;a href="http://browsehappy.com/"&gt;
          Please upgrade your browser to support cross domain messaging.
        &lt;/a&gt;
      &lt;/div&gt;
    &lt;![endif]-->
   <div id="main">
    <a href="https://github.com/riot/riot" id="fork-me">
     <img class="no-retina" src="/common/img/fork-me.png"/>
    </a>
    <div id="header-wrapper">
     <div id="riot-header">
      <div class="wrap">
       <a class="riot-tag" href="/riotjs/" id="riot-logo">
        {
       </a>
       <a href="/" id="muut-logo">
        by
        <span class="icon">
         M
        </span>
       </a>
       <a id="to-top">
        Back to top
       </a>
       <a id="burger">
        menu
        <span class="icon">
         0
        </span>
       </a>
      </div>
     </div>
    </div>
    <div id="hero">
     <div class="riot-tag">
      {
     </div>
     <h1>
      A React-like user interface micro-library
     </h1>
     <h2>
      Custom tags  Enjoyable syntax  Virtual DOM  Tiny size
     </h2>
     <p class="tease normal">
      <a class="tag blue" href="download.html">
       v2.2.1
      </a>
      
      <a href="release-notes.html">
       with 4-5x faster loops than on React
      </a>
     </p>
    </div>
    <div class="wrap">
     <nav class="normal" id="toc">
      <h3>
       Get started
      </h3>
      <div>
       <p>
        <a href="/riotjs/">
         Why Riot?
        </a>
       </p>
       <p>
        <a href="/riotjs/compare.html">
         Compare
        </a>
       </p>
       <p>
        <a href="/riotjs/faq.html">
         FAQ
        </a>
       </p>
       <p>
        <a href="/riotjs/compiler.html">
         Compiler
        </a>
       </p>
       <p>
        <a href="/riotjs/download.html">
         Download
        </a>
       </p>
       <p>
        <a href="/riotjs/forum/">
         Forum
        </a>
       </p>
      </div>
      <h3>
       Guide
      </h3>
      <h5>
       Custom tags
      </h5>
      <div>
       <p>
        <a href="/riotjs/guide/">
         Example
        </a>
       </p>
       <p>
        <a href="/riotjs/guide/#tag-syntax">
         Tag syntax
        </a>
       </p>
       <p>
        <a href="/riotjs/guide/#mounting">
         Mounting
        </a>
       </p>
       <p>
        <a href="/riotjs/guide/#options">
         Options
        </a>
       </p>
       <p>
        <a href="/riotjs/guide/#mixins">
         Mixins
        </a>
       </p>
       <p>
        <a href="/riotjs/guide/#tag-lifecycle">
         Tag lifecycle
        </a>
       </p>
       <p>
        <a href="/riotjs/guide/#expressions">
         Expressions
        </a>
       </p>
       <p>
        <a href="/riotjs/guide/#nested-tags">
         Nested tags
        </a>
       </p>
       <p>
        <a href="/riotjs/guide/#named-elements">
         Named elements
        </a>
       </p>
       <p>
        <a href="/riotjs/guide/#event-handlers">
         Event handlers
        </a>
       </p>
       <p>
        <a href="/riotjs/guide/#conditionals">
         Conditionals
        </a>
       </p>
       <p>
        <a href="/riotjs/guide/#loops">
         Loops
        </a>
       </p>
       <p>
        <a href="/riotjs/guide/#server-side">
         Server-side rendering
        </a>
       </p>
      </div>
      <h5>
       Application design
      </h5>
      <div>
       <p>
        <a href="/riotjs/guide/#tools-not-policy">
         Tools, not policy
        </a>
       </p>
       <p>
        <a href="/riotjs/guide/#observable">
         Observable
        </a>
       </p>
       <p>
        <a href="/riotjs/guide/#routing">
         Routing
        </a>
       </p>
       <p>
        <a href="/riotjs/guide/#modularity">
         Modularity
        </a>
       </p>
      </div>
      <h3>
       API
      </h3>
      <div>
       <p>
        <a href="/riotjs/api/#general">
         General
        </a>
       </p>
       <p>
        <a href="/riotjs/api/#custom-tags">
         Custom tags
        </a>
       </p>
       <p>
        <a href="/riotjs/api/#compiler">
         Compiler
        </a>
       </p>
       <p>
        <a href="/riotjs/api/#observable">
         Observable
        </a>
       </p>
       <p>
        <a href="/riotjs/api/#router">
         Router
        </a>
       </p>
      </div>
      <h3>
       v1.0
      </h3>
      <div>
       <p>
        <a href="/riotjs/v1.0.html">
         User guide
        </a>
       </p>
      </div>
      <a class="close">
       x
      </a>
     </nav>
     <!--
-->
     <div class="normal" id="content">
      <div class="hgroup">
       <h1>
        Why Riot?
       </h1>
       <h2>
        And why we need a new UI library
       </h2>
      </div>
      <h1 id="1-custom-tags">
       1. Custom tags
      </h1>
      <p>
       Riot brings custom tags to all browsers starting from IE8.
      </p>
      <pre class="syntax lang-html">
       <span class="bracket">
        &lt;
       </span>
       <span class="accent1">
        todo
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="comment">
        &lt;!-- layout --&gt;
       </span>
       <span class="bracket">
        &lt;
       </span>
       <span class="accent1">
        h3
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="accent3">
        { opts.title }
       </span>
       <span class="bracket">
        &lt;/
       </span>
       <span class="accent1">
        h3
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;
       </span>
       <span class="accent1">
        ul
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;
       </span>
       <span class="accent1">
        li
       </span>
       <span class="accent2">
        each
       </span>
       <span class="operator">
        =
       </span>
       <span class="accent3">
        { item, i in items }
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="accent3">
        { item }
       </span>
       <span class="bracket">
        &lt;/
       </span>
       <span class="accent1">
        li
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;/
       </span>
       <span class="accent1">
        ul
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;
       </span>
       <span class="accent1">
        form
       </span>
       <span class="accent2">
        onsubmit
       </span>
       <span class="operator">
        =
       </span>
       <span class="accent3">
        { add }
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;
       </span>
       <span class="accent1">
        input
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;
       </span>
       <span class="accent1">
        button
       </span>
       <span class="bracket">
        &gt;
       </span>
       Add #
       <span class="accent3">
        { items.length + 1 }
       </span>
       <span class="bracket">
        &lt;/
       </span>
       <span class="accent1">
        button
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;/
       </span>
       <span class="accent1">
        form
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="comment">
        &lt;!-- logic --&gt;
       </span>
       <span class="bracket">
        &lt;
       </span>
       <span class="accent1">
        script
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="keyword">
        this
       </span>
       .items = []

    add(e) {
       <span class="keyword">
        var
       </span>
       input = e.target[
       <span class="number">
        0
       </span>
       ]
       <span class="keyword">
        this
       </span>
       .items.push(input.value)
      input.value =
       <span class="string">
        ''
       </span>
       }
       <span class="bracket">
        &lt;/
       </span>
       <span class="accent1">
        script
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;/
       </span>
       <span class="accent1">
        todo
       </span>
       <span class="bracket">
        &gt;
       </span>
      </pre>
      <p>
       A custom tag glues relevant HTML and JavaScript together forming a reusable component. Think React + Polymer but with enjoyable syntax and a small learning curve.
      </p>
      <h3 id="human-readable">
       Human-readable
      </h3>
      <p>
       Custom tags let you build complex views with HTML. Your application might look something like this:
      </p>
      <pre class="syntax lang-html">
       <span class="bracket">
        &lt;
       </span>
       <span class="accent1">
        body
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;
       </span>
       <span class="accent1">
        h1
       </span>
       <span class="bracket">
        &gt;
       </span>
       Acme community
       <span class="bracket">
        &lt;/
       </span>
       <span class="accent1">
        h1
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;
       </span>
       <span class="accent1">
        forum-header
       </span>
       /
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;
       </span>
       <span class="accent1">
        forum-content
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;
       </span>
       <span class="accent1">
        forum-threads
       </span>
       /
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;
       </span>
       <span class="accent1">
        forum-sidebar
       </span>
       /
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;/
       </span>
       <span class="accent1">
        forum-content
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;
       </span>
       <span class="accent1">
        forum-footer
       </span>
       /
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;
       </span>
       <span class="accent1">
        script
       </span>
       <span class="bracket">
        &gt;
       </span>
       riot.mount(
       <span class="string">
        '*'
       </span>
       ,
       <span class="accent3">
        { api: forum_api }
       </span>
       )
       <span class="bracket">
        &lt;/
       </span>
       <span class="accent1">
        script
       </span>
       <span class="bracket">
        &gt;
       </span>
       <span class="bracket">
        &lt;/
       </span>
       <span class="accent1">
        body
       </span>
       <span class="bracket">
        &gt;
       </span>
      </pre>
      <p>
       HTML syntax is the
       <em>
        de facto
       </em>
       language of the web and its designed for building user interfaces. The syntax is explicit, nesting is inherent to the language, and attributes offer a clean way to provide options for custom tags.
      </p>
      <p>
       <span class="tag">
        note
       </span>
       the tags are
       <a href="compiler.html">
        converted
       </a>
       to JavaScript before browsers can execute them.
      </p>
      <h3 id="virtual-dom">
       Virtual DOM
      </h3>
      <ul>
       <li>
        Absolutely the smallest possible amount of DOM updates and reflows.
       </li>
       <li>
        One way data flow: updates and unmounts are propagated downwards from parent to children.
       </li>
       <li>
        Expressions are pre-compiled and cached for high performance.
       </li>
       <li>
        Lifecycle events for more control.
       </li>
       <li>
        Server-side rendering of custom tags for isomorphic applications.
       </li>
      </ul>
      <h3 id="close-to-standards">
       Close to standards
      </h3>
      <ul>
       <li>
        No proprietary event system.
       </li>
       <li>
        Event normalization for IE8.
       </li>
       <li>
        The rendered DOM can be freely manipulated with other tools.
       </li>
       <li>
        No extra HTML root elements or
        <code>
         data-
        </code>
        attributes.
       </li>
       <li>
        Plays well with jQuery.
       </li>
      </ul>
      <h3 id="use-your-favorite-tools">
       Use your favorite tools
      </h3>
      <ul>
       <li>
        Create tags with CoffeeScript, Jade, Typescript, LiveScript, ES6 or
        <a href="compiler.html#pre-processors">
         any pre-processor
        </a>
        you want.
       </li>
       <li>
        Integrate with NPM, CommonJS, AMD, Bower or Component
       </li>
       <li>
        Develop with
        <a href="https://github.com/e-jigsaw/gulp-riot">
         Gulp
        </a>
        ,
        <a href="https://github.com/ariesjia/grunt-riot">
         Grunt
        </a>
        or
        <a href="https://github.com/jhthorsen/riotify">
         Browserify
        </a>
        plugins
       </li>
      </ul>
      <h1 id="2-simple-and-minimalistic">
       2. Simple and minimalistic
      </h1>
      <p>
       Minimalism sets Riot apart from others:
      </p>
      <h3 id="1-enjoyable-syntax">
       1. Enjoyable syntax
      </h3>
      <p>
       One of the design goals was to introduce a powerful tag syntax with as little boilerplate as possible:
      </p>
      <ul>
       <li>
        Power shortcuts:
        <code>
         class={ enabled: is_enabled, hidden: hasErrors() }
        </code>
        .
       </li>
       <li>
        No extra brain load such as
        <code>
         render
        </code>
        ,
        <code>
         state
        </code>
        ,
        <code>
         constructor
        </code>
        or
        <code>
         shouldComponentUpdate
        </code>
       </li>
       <li>
        Interpolation:
        <code>
         Add #{ items.length + 1 }
        </code>
        or
        <code>
         class="item { selected: flag }"
        </code>
       </li>
       <li>
        The
        <code>
         &lt;script&gt;
        </code>
        tag to enclose the logic is optional
       </li>
       <li>
        Compact ES6 method syntax
       </li>
      </ul>
      <h3 id="2-small-learning-curve">
       2. Small learning curve
      </h3>
      <p>
       Riot has between 10 and 100 times fewer API methods than other UI libraries.
      </p>
      <ol>
       <li>
        Less to learn. Fewer books and tutorials to view
       </li>
       <li>
        Less proprietary stuff and more standard stuff
       </li>
      </ol>
      <h3 id="3-tiny-size">
       3. Tiny size
      </h3>
      <p>
       <small>
        <em>
         react.min.js
        </em>
         127KB
       </small>
       <span class="bar red">
       </span>
      </p>
      <p>
       <small>
        <em>
         polymer.min.js
        </em>
         120KB
       </small>
       <span class="bar red" style="width: 94%">
       </span>
      </p>
      <p>
       <small>
        <em>
         riot.min.js
        </em>
         6.7KB
       </small>
       <span class="bar blue" style="width: 4.8%">
       </span>
      </p>
      <ol>
       <li>
        Fewer bugs.
       </li>
       <li>
        Faster to parse and cheaper to download.
       </li>
       <li>
        Embeddable. The library should be smaller than the application.
       </li>
       <li>
        Less to maintain. We dont need a big team to maintain Riot.
       </li>
      </ol>
      <h3 id="4-small-but-complete">
       4. Small, but complete
      </h3>
      <p>
       Riot has all the essential building blocks for modern client-side applications:
      </p>
      <ul>
       <li>
        Reactive views for building user interfaces.
       </li>
       <li>
        Event library for building APIs with isolated modules.
       </li>
       <li>
        Router for taking care of URL and the back button.
       </li>
      </ul>
      <p>
       Riot is an open stack. Its meant for developers who want to avoid framework specific idioms. The generic tools let you mix and match design patterns. Systems like Facebook Flux can be
       <a href="https://github.com/jimsparkman/RiotControl">
        self-made
       </a>
       .
      </p>
      <div class="tweets section normal has1">
       <div class="wrap">
        <div class="block block0">
         <p>
          Today I have used #riotjs 2.0 for the first time and I could admit that It will be a long term relationship #js highly recommended.
          <a href="https://twitter.com/gianlucaguarini/status/559756081862574080">
           @gianlucaguarini
          </a>
         </p>
         <p>
          I liked the idea of #reactjs with #flux but I like #riotjs with #riotcontrol even better!
          <a href="https://twitter.com/tscok/status/580509124598829056">
           @tscok
          </a>
         </p>
         <p>
          Im loving riot.js! So much power packed into 3.5kb.
          <a href="https://twitter.com/ncthis/status/575204037877833728">
           @ncthis
          </a>
         </p>
         <p>
          looking at RiotJS
          <a href="https://muut.com/riotjs/">
           https://muut.com/riotjs/
          </a>
          - blown away by its simplicity.
          <a href="https://twitter.com/defeated/status/559215403541757952">
           @defeated
          </a>
         </p>
         <p>
          Played with riot.js and like it so much more than react. Minimalistic, fast and a comprehensible API.
          <a href="https://twitter.com/juriansluiman/status/560399379035865088">
           @juriansluiman
          </a>
         </p>
         <p>
          I looked at the riot.js example, and it feels so clean, its scary.
          <a href="https://twitter.com/paulbjensen/status/558378720403419137">
           @paulbjensen
          </a>
         </p>
        </div>
       </div>
      </div>
      <div class="section narrow normal has1">
       <div class="wrap">
        <div class="block block0">
         <h1 id="conclusion">
          Conclusion
         </h1>
         <p>
          Riot is React + Polymer + models + routing without the bloat. It works today, even on IE8. Its dead simple to use and it weighs almost nothing. No reinventing the wheel, but rather taking the good parts of whats there and making the simplest tool possible.
         </p>
         <p>
          We should focus on reusable components instead of templates. According to the developers of React:
         </p>
         <blockquote>
          <p>
           Templates separate technologies, not concerns.
          </p>
         </blockquote>
         <p>
          By having related layout and logic together under the same component the overall system becomes cleaner. We respect React for this important insight.
         </p>
         <h4 class="tall" id="muut-blog-a-href-blog-techn">
          Muut blog:
          <a href="/blog/technology/riot-2.0/">
           From React to Riot 2.0
          </a>
         </h4>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
   <footer id="footer">
    <div id="nav-footer">
     <a class="nav" href="/tour/">
      Tour
     </a>
     <a class="nav" href="/pricing/">
      Pricing
     </a>
     <a class="nav" href="/help/">
      Help
     </a>
     <nw>
      <a class="nav" href="/forum/">
       Forum
      </a>
      <span class="news-wrap">
       <a class="nav" href="/news/">
        News
       </a>
       <a class="news-splash" href="/blog/technology/from-disqus-to-muut/">
        From Disqus to Muut
        <span>
         x
        </span>
       </a>
      </span>
     </nw>
    </div>
    <div id="nav-manifesto">
     The best thing to happen to forums since forums!  read our
     <a href="/manifesto/">
      manifesto
     </a>
     .
    </div>
    <div id="nav-bottom">
     <div class="wrap">
      <div id="nav-muut">
       <a href="/" id="nav-muut-inc">
        Muut, Inc.
       </a>
       <small>
        Copyright  2015
       </small>
       <a href="/about/">
        About us
       </a>
       <a href="/terms/">
        Terms
       </a>
       <a href="/terms/privacy-policy.html">
        Privacy Policy
       </a>
       <a href="/l/affiliate/">
        Affiliates
       </a>
       <a href="/riotjs/">
        Riot.js
       </a>
      </div>
      <!--
-->
      <div id="nav-social">
       <a href="https://facebook.com/getmuut" id="nav-facebook">
        Facebook
       </a>
       <a href="https://twitter.com/getmuut" id="nav-twitter">
        Twitter
       </a>
      </div>
     </div>
    </div>
   </footer>
  </div>
  <script>
   global.setLoggedState();

  if ('Srm11wv7miNwCQS2Ym9ZaacRfqdg2ERW') {
    !function(){var analytics=window.analytics=window.analytics||[];if(analytics.invoked)window.console&amp;&amp;console.error&amp;&amp;console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","group","track","ready","alias","page","once","off","on"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t&lt;analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement("script");e.type="text/javascript";e.async=!0;e.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.com/analytics.js/v1/"+t+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION="3.0.0";
    analytics.load('Srm11wv7miNwCQS2Ym9ZaacRfqdg2ERW');
    analytics.page()
    }}();

  } else {
    window.analytics = {
      reset: function() { console.info('reset') },
      track: function(event) { console.info(event) },
      identify: function(accountId, user) {
        console.info('identify', accountId, user)
      }
    };
  }
  </script>
  <script src="/common/js/jquery-1.11.2.min.js">
  </script>
  <script src="//muut.com/e/muut/1.13.6/moot.min.js">
  </script>
  <script src="/common/js/dev/hmac-sha256+74bda.js">
  </script>
  <script src="/common/js/dev/enc-base64+0f75e.js">
  </script>
  <script src="/common/www+fe4fb.js">
  </script>
  <script src="/riotjs/site+140fb.js">
  </script>
  <script>
   ;
  var async = [  ];

    $.getScript('//muut.com/e/op/1120330043.js');

  global.identify();
  </script>
  <script src="//assets.pcrl.co/js/jstracker.min.js">
  </script>
 </body>
</html>