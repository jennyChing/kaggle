<!DOCTYPE html>
<html>
 <head>
  <meta charset="utf-8"/>
  <meta content="chrome=1" http-equiv="X-UA-Compatible"/>
  <title>
   Authority by Vespakoen
  </title>
  <link href="stylesheets/styles.css" rel="stylesheet"/>
  <link href="stylesheets/pygment_trac.css" rel="stylesheet"/>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js">
  </script>
  <script src="javascripts/main.js">
  </script>
  <!--[if lt IE 9]&gt;
      &lt;script src="//html5shiv.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
    &lt;![endif]-->
  <meta content="width=device-width, initial-scale=1, user-scalable=no" name="viewport"/>
 </head>
 <body>
  <header>
   <h1>
    Authority
   </h1>
   <p>
    Role Based Access Control bundle for Laravel
   </p>
  </header>
  <div id="banner">
   <span id="logo">
   </span>
   <a class="button fork" href="https://github.com/Vespakoen/authority-laravel">
    <strong>
     View On GitHub
    </strong>
   </a>
   <div class="downloads">
    <span>
     Downloads:
    </span>
    <ul>
     <li>
      <a class="button" href="https://github.com/Vespakoen/authority-laravel/zipball/master">
       ZIP
      </a>
     </li>
     <li>
      <a class="button" href="https://github.com/Vespakoen/authority-laravel/tarball/master">
       TAR
      </a>
     </li>
    </ul>
   </div>
  </div>
  <!-- end banner -->
  <div class="wrapper">
   <nav>
    <ul>
    </ul>
   </nav>
   <section>
    <h1>
     Welcome to Authority for Laravel.
    </h1>
    <p>
     This is a clone from codeigniter-authority-authorization
Check
     <a href="https://github.com/machuga/codeigniter-authority-authorization">
      https://github.com/machuga/codeigniter-authority-authorization
     </a>
     for more info.
All credits go to
     <strong>
      <em>
       machuga
      </em>
     </strong>
     for PHP-izing this awesome library
    </p>
    <h2>
     Installation
    </h2>
    <ul>
     <li>
      Enter your database settings in config/database.php
     </li>
     <li>
      Choose a session driver in config/session.php
     </li>
     <li>
      Run the following commands on the terminal
     </li>
    </ul>
    <pre>
     <code>
      $ cd to/your/project/root/
$ php artisan bundle:install authority
$ php artisan migrate:install
     </code>
    </pre>
    <p>
     Before we can run the migration, you will have to register the bundle as seen below.
    </p>
    <ul>
     <li>
      Edit
      <strong>
       <em>
        application/bundles.php
       </em>
      </strong>
      and add authority to the array as seen below
     </li>
    </ul>
    <div class="highlight">
     <pre>
      <span class="k">
       return
      </span>
      <span class="k">
       array
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'authority'
      </span>
      <span class="o">
       =&gt;
      </span>
      <span class="k">
       array
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'auto'
      </span>
      <span class="o">
       =&gt;
      </span>
      <span class="k">
       true
      </span>
      <span class="p">
       )
      </span>
      <span class="p">
       )
      </span>
     </pre>
    </div>
    <p>
     Now we can run authority's migration to setup the tables
    </p>
    <pre>
     <code>
      $ php artisan migrate authority
     </code>
    </pre>
    <p>
     Since we don't want updates (via artisan, Laravel's CLI) to break our configuration later, we move the config outside of the Authority bundle.
    </p>
    <ul>
     <li>
      Move
      <strong>
       <em>
        bundles/authority/config/authority.php
       </em>
      </strong>
      to
      <strong>
       <em>
        application/config/authority.php
       </em>
      </strong>
     </li>
    </ul>
    <p>
     If you want your authority config to live in another bundle, you have to point to that location by changing the location in
     <strong>
      <em>
       bundles/authority/authority.php
      </em>
     </strong>
     .
    </p>
    <h3>
     Configuring the Auth driver
    </h3>
    <p>
     Open up
     <strong>
      <em>
       application/config/auth.php
      </em>
     </strong>
     and change the
     <strong>
      value
     </strong>
     of "driver" to "eloquent"
    </p>
    <h3>
     Adding the models
    </h3>
    <h4>
     User model
    </h4>
    <p>
     <strong>
      <em>
       application/models/user.php
      </em>
     </strong>
    </p>
    <div class="highlight">
     <pre>
      <span class="k">
       class
      </span>
      <span class="nc">
       User
      </span>
      <span class="k">
       extends
      </span>
      <span class="nx">
       Eloquent
      </span>
      <span class="p">
       {
      </span>
      <span class="k">
       public
      </span>
      <span class="k">
       static
      </span>
      <span class="nv">
       $timestamps
      </span>
      <span class="o">
       =
      </span>
      <span class="k">
       true
      </span>
      <span class="p">
       ;
      </span>
      <span class="k">
       public
      </span>
      <span class="k">
       function
      </span>
      <span class="nf">
       roles
      </span>
      <span class="p">
       ()
      </span>
      <span class="p">
       {
      </span>
      <span class="k">
       return
      </span>
      <span class="nv">
       $this
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       has_many_and_belongs_to
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'Role'
      </span>
      <span class="p">
       ,
      </span>
      <span class="s1">
       'role_user'
      </span>
      <span class="p">
       );
      </span>
      <span class="p">
       }
      </span>
      <span class="k">
       public
      </span>
      <span class="k">
       function
      </span>
      <span class="nf">
       has_role
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $key
      </span>
      <span class="p">
       )
      </span>
      <span class="p">
       {
      </span>
      <span class="k">
       foreach
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $this
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       roles
      </span>
      <span class="k">
       as
      </span>
      <span class="nv">
       $role
      </span>
      <span class="p">
       )
      </span>
      <span class="p">
       {
      </span>
      <span class="k">
       if
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $role
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       name
      </span>
      <span class="o">
       ==
      </span>
      <span class="nv">
       $key
      </span>
      <span class="p">
       )
      </span>
      <span class="p">
       {
      </span>
      <span class="k">
       return
      </span>
      <span class="k">
       true
      </span>
      <span class="p">
       ;
      </span>
      <span class="p">
       }
      </span>
      <span class="p">
       }
      </span>
      <span class="k">
       return
      </span>
      <span class="k">
       false
      </span>
      <span class="p">
       ;
      </span>
      <span class="p">
       }
      </span>
      <span class="k">
       public
      </span>
      <span class="k">
       function
      </span>
      <span class="nf">
       has_any_role
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $keys
      </span>
      <span class="p">
       )
      </span>
      <span class="p">
       {
      </span>
      <span class="k">
       if
      </span>
      <span class="p">
       (
      </span>
      <span class="o">
       !
      </span>
      <span class="nb">
       is_array
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $keys
      </span>
      <span class="p">
       ))
      </span>
      <span class="p">
       {
      </span>
      <span class="nv">
       $keys
      </span>
      <span class="o">
       =
      </span>
      <span class="nb">
       func_get_args
      </span>
      <span class="p">
       ();
      </span>
      <span class="p">
       }
      </span>
      <span class="k">
       foreach
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $this
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       roles
      </span>
      <span class="k">
       as
      </span>
      <span class="nv">
       $role
      </span>
      <span class="p">
       )
      </span>
      <span class="p">
       {
      </span>
      <span class="k">
       if
      </span>
      <span class="p">
       (
      </span>
      <span class="nb">
       in_array
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $role
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       name
      </span>
      <span class="p">
       ,
      </span>
      <span class="nv">
       $keys
      </span>
      <span class="p">
       ))
      </span>
      <span class="p">
       {
      </span>
      <span class="k">
       return
      </span>
      <span class="k">
       true
      </span>
      <span class="p">
       ;
      </span>
      <span class="p">
       }
      </span>
      <span class="p">
       }
      </span>
      <span class="k">
       return
      </span>
      <span class="k">
       false
      </span>
      <span class="p">
       ;
      </span>
      <span class="p">
       }
      </span>
      <span class="p">
       }
      </span>
     </pre>
    </div>
    <h4>
     Role model
    </h4>
    <p>
     <strong>
      <em>
       application/models/role.php
      </em>
     </strong>
    </p>
    <div class="highlight">
     <pre>
      <span class="k">
       class
      </span>
      <span class="nc">
       Role
      </span>
      <span class="k">
       extends
      </span>
      <span class="nx">
       Eloquent
      </span>
      <span class="p">
       {
      </span>
      <span class="k">
       public
      </span>
      <span class="k">
       function
      </span>
      <span class="nf">
       users
      </span>
      <span class="p">
       ()
      </span>
      <span class="p">
       {
      </span>
      <span class="k">
       return
      </span>
      <span class="nv">
       $this
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       has_many_and_belongs_to
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'User'
      </span>
      <span class="p">
       );
      </span>
      <span class="p">
       }
      </span>
      <span class="p">
       }
      </span>
     </pre>
    </div>
    <h2>
     Using Authority
    </h2>
    <p>
     Authority is very flexible, allowing you to make complex rules, load permissions from different places, and make handy action aliases.
    </p>
    <p>
     Before we can use Authority, we need to understand how it works. In order to understand how it works, we have to be aware of some concepts.
    </p>
    <h4>
     Actions
    </h4>
    <ul>
     <li>
      Actions apply to Resources
     </li>
     <li>
      Actions are strings
     </li>
     <li>
      Actions can be grouped by action_aliases
     </li>
    </ul>
    <h4>
     Resources
    </h4>
    <ul>
     <li>
      Resource is simply a name for a thing or group of things (User, Page, UserEditButton, PageTitle)
     </li>
     <li>
      Resources are strings
     </li>
     <li>
      There is an "all" wildcard Resource predefined (handy for admins)
     </li>
    </ul>
    <h4>
     Rules
    </h4>
    <ul>
     <li>
      A Rule is a way to allow or deny a User to perform an Action on a Resource
     </li>
     <li>
      A Rule contains 1 Action, 1 Resource and optionally a Closure (internal logic)
     </li>
     <li>
      Rules will be initialized once per page load (only when being called) for the user that does the request
     </li>
    </ul>
    <h4>
     Allow
    </h4>
    <ul>
     <li>
      Allow applies a Rule to a User, that allows the user to perform an Action on a Resource
     </li>
     <li>
      If the Rule contains a Closure, the User will only be allowed to perform the Action when the Closure returns "true"
     </li>
    </ul>
    <h4>
     Deny
    </h4>
    <ul>
     <li>
      Deny applies a Rule to a user, that denies the user to perform an Action on a Resource
     </li>
     <li>
      If the Rule contains a Closure, the User will only be denied from performing the Action when the Closure returns "true"
     </li>
    </ul>
    <p>
     Now that we are familiar with these concepts, let's dive into some example configurations.
    </p>
    <div class="highlight">
     <pre>
      <span class="s1">
       'initialize'
      </span>
      <span class="o">
       =&gt;
      </span>
      <span class="k">
       function
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $user
      </span>
      <span class="p">
       )
      </span>
      <span class="p">
       {
      </span>
      <span class="c1">
       // The initialize method (this Closure function) will be ran on every page load when the bundle get's started.
      </span>
      <span class="c1">
       // A User Object will be passed into this method and is available via $user
      </span>
      <span class="c1">
       // The $user variable is a instantiated User Object (application/models/user.php)
      </span>
      <span class="c1">
       // First, let's group together some "Actions" so we can later give a User access to multiple actions at once
      </span>
      <span class="nx">
       Authority
      </span>
      <span class="o">
       ::
      </span>
      <span class="na">
       action_alias
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'manage'
      </span>
      <span class="p">
       ,
      </span>
      <span class="k">
       array
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'create'
      </span>
      <span class="p">
       ,
      </span>
      <span class="s1">
       'read'
      </span>
      <span class="p">
       ,
      </span>
      <span class="s1">
       'update'
      </span>
      <span class="p">
       ,
      </span>
      <span class="s1">
       'delete'
      </span>
      <span class="p">
       ));
      </span>
      <span class="nx">
       Authority
      </span>
      <span class="o">
       ::
      </span>
      <span class="na">
       action_alias
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'moderate'
      </span>
      <span class="p">
       ,
      </span>
      <span class="k">
       array
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'update'
      </span>
      <span class="p">
       ,
      </span>
      <span class="s1">
       'delete'
      </span>
      <span class="p">
       ));
      </span>
      <span class="c1">
       // If a user doesn't have any roles, we don't have to give him permissions so we can stop right here.
      </span>
      <span class="k">
       if
      </span>
      <span class="p">
       (
      </span>
      <span class="nb">
       count
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $user
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       roles
      </span>
      <span class="p">
       )
      </span>
      <span class="o">
       ==
      </span>
      <span class="mi">
       0
      </span>
      <span class="p">
       )
      </span>
      <span class="k">
       return
      </span>
      <span class="k">
       false
      </span>
      <span class="p">
       ;
      </span>
      <span class="c1">
       // Let's say we want to "Deny" the User from adding accounts if his age is below 21 (i don't mean to discriminate ;)
      </span>
      <span class="c1">
       // Since we have the User object, and it has an "age" property, we can make a simple if statement.
      </span>
      <span class="k">
       if
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $user
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       age
      </span>
      <span class="o">
       &lt;
      </span>
      <span class="mi">
       21
      </span>
      <span class="p">
       )
      </span>
      <span class="p">
       {
      </span>
      <span class="c1">
       // Too young! we "deny" the user to create users, i'm sorry...
      </span>
      <span class="nx">
       Authority
      </span>
      <span class="o">
       ::
      </span>
      <span class="na">
       deny
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'create'
      </span>
      <span class="p">
       ,
      </span>
      <span class="s1">
       'User'
      </span>
      <span class="p">
       );
      </span>
      <span class="p">
       }
      </span>
      <span class="k">
       if
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $user
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       has_role
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'admin'
      </span>
      <span class="p">
       ))
      </span>
      <span class="p">
       {
      </span>
      <span class="c1">
       // The logged in user is an admin, we allow him to perform manage actions (create, read, update, delete) on "all" "Resources".
      </span>
      <span class="nx">
       Authority
      </span>
      <span class="o">
       ::
      </span>
      <span class="na">
       allow
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'manage'
      </span>
      <span class="p">
       ,
      </span>
      <span class="s1">
       'all'
      </span>
      <span class="p">
       );
      </span>
      <span class="c1">
       // Let's make it a little harder, we don't want the admin to be able to delete his own User account, but has to be allowed to delete other Users.
      </span>
      <span class="c1">
       // We only know that the "Resource" is a User, But we don't know the User id, we can send that information to the Rule Closure, in the Closure below, the argument is called $that_user.
      </span>
      <span class="c1">
       // We also pass in the logged in user, since the Closure is outside of the scope where this comment is in.
      </span>
      <span class="nx">
       Authority
      </span>
      <span class="o">
       ::
      </span>
      <span class="na">
       deny
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'delete'
      </span>
      <span class="p">
       ,
      </span>
      <span class="s1">
       'User'
      </span>
      <span class="p">
       ,
      </span>
      <span class="k">
       function
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $that_user
      </span>
      <span class="p">
       )
      </span>
      <span class="k">
       use
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $user
      </span>
      <span class="p">
       )
      </span>
      <span class="p">
       {
      </span>
      <span class="c1">
       // If the id of the User that we are trying to delete is equal to our logged in user, we return true, meaning the Deny Rule will be set.
      </span>
      <span class="k">
       return
      </span>
      <span class="nv">
       $that_user
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       id
      </span>
      <span class="o">
       ==
      </span>
      <span class="nv">
       $user
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       id
      </span>
      <span class="p">
       ;
      </span>
      <span class="p">
       });
      </span>
      <span class="p">
       }
      </span>
      <span class="k">
       if
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $user
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       has_role
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'store_owner'
      </span>
      <span class="p">
       ))
      </span>
      <span class="p">
       {
      </span>
      <span class="c1">
       // What if the logged in User has the role "store_owner", let's allow the user to manage his own store
      </span>
      <span class="nx">
       Authority
      </span>
      <span class="o">
       ::
      </span>
      <span class="na">
       allow
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'manage'
      </span>
      <span class="p">
       ,
      </span>
      <span class="s1">
       'Store'
      </span>
      <span class="p">
       ,
      </span>
      <span class="k">
       function
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $store
      </span>
      <span class="p">
       )
      </span>
      <span class="k">
       use
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $user
      </span>
      <span class="p">
       )
      </span>
      <span class="p">
       {
      </span>
      <span class="k">
       return
      </span>
      <span class="o">
       !
      </span>
      <span class="nb">
       is_null
      </span>
      <span class="p">
       (
      </span>
      <span class="nx">
       DB
      </span>
      <span class="o">
       ::
      </span>
      <span class="na">
       table
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'stores'
      </span>
      <span class="p">
       )
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       where_id
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $store
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       id
      </span>
      <span class="p">
       )
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       where_user_id
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $user
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       id
      </span>
      <span class="p">
       )
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       first
      </span>
      <span class="p">
       ());
      </span>
      <span class="p">
       });
      </span>
      <span class="p">
       }
      </span>
      <span class="c1">
       // We can set Allow and Deny Rules by looping through results we get from somewhere else, in this example, a database
      </span>
      <span class="k">
       foreach
      </span>
      <span class="p">
       (
      </span>
      <span class="nx">
       DB
      </span>
      <span class="o">
       ::
      </span>
      <span class="na">
       table
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'rules'
      </span>
      <span class="p">
       )
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       where_user_id
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $user
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       id
      </span>
      <span class="p">
       )
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       get
      </span>
      <span class="p">
       ()
      </span>
      <span class="k">
       as
      </span>
      <span class="nv">
       $permission
      </span>
      <span class="p">
       )
      </span>
      <span class="p">
       {
      </span>
      <span class="k">
       if
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $permission
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       type
      </span>
      <span class="o">
       ==
      </span>
      <span class="s1">
       'allow'
      </span>
      <span class="p">
       )
      </span>
      <span class="p">
       {
      </span>
      <span class="nx">
       Authority
      </span>
      <span class="o">
       ::
      </span>
      <span class="na">
       allow
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $permission
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       action
      </span>
      <span class="p">
       ,
      </span>
      <span class="nv">
       $permission
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       resource
      </span>
      <span class="p">
       );
      </span>
      <span class="p">
       }
      </span>
      <span class="k">
       else
      </span>
      <span class="p">
       {
      </span>
      <span class="nx">
       Authority
      </span>
      <span class="o">
       ::
      </span>
      <span class="na">
       deny
      </span>
      <span class="p">
       (
      </span>
      <span class="nv">
       $permission
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       action
      </span>
      <span class="p">
       ,
      </span>
      <span class="nv">
       $permission
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       resource
      </span>
      <span class="p">
       );
      </span>
      <span class="p">
       }
      </span>
      <span class="p">
       }
      </span>
      <span class="p">
       }
      </span>
     </pre>
    </div>
    <p>
     Now that we have the initialize method setup, we can do checks throughout our code (controllers/models/views) like this
    </p>
    <div class="highlight">
     <pre>
      <span class="c1">
       // in some controller
      </span>
      <span class="k">
       if
      </span>
      <span class="p">
       (
      </span>
      <span class="nx">
       Authority
      </span>
      <span class="o">
       ::
      </span>
      <span class="na">
       cannot
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'create'
      </span>
      <span class="p">
       ,
      </span>
      <span class="s1">
       'User'
      </span>
      <span class="p">
       ))
      </span>
      <span class="p">
       {
      </span>
      <span class="nx">
       Redirect
      </span>
      <span class="o">
       ::
      </span>
      <span class="na">
       to
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'home'
      </span>
      <span class="p">
       );
      </span>
      <span class="p">
       }
      </span>
      <span class="c1">
       // in some view
      </span>
      <span class="o">
       &lt;?
      </span>
      <span class="nx">
       php
      </span>
      <span class="k">
       if
      </span>
      <span class="p">
       (
      </span>
      <span class="nx">
       Authority
      </span>
      <span class="o">
       ::
      </span>
      <span class="na">
       can
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'edit'
      </span>
      <span class="p">
       ,
      </span>
      <span class="s1">
       'User'
      </span>
      <span class="p">
       ))
      </span>
      <span class="o">
       :
      </span>
      <span class="cp">
       ?&gt;
      </span>
      <span class="x">
      </span>
      <span class="x">
      </span>
      <span class="cp">
       &lt;?php
      </span>
      <span class="k">
       echo
      </span>
      <span class="nx">
       HTML
      </span>
      <span class="o">
       ::
      </span>
      <span class="na">
       link
      </span>
      <span class="p">
       (
      </span>
      <span class="s1">
       'users/edit/'
      </span>
      <span class="o">
       .
      </span>
      <span class="nv">
       $user
      </span>
      <span class="o">
       -&gt;
      </span>
      <span class="na">
       id
      </span>
      <span class="p">
       ,
      </span>
      <span class="s1">
       'Edit User'
      </span>
      <span class="p">
       );
      </span>
      <span class="cp">
       ?&gt;
      </span>
      <span class="x">
      </span>
      <span class="x">
      </span>
      <span class="cp">
       &lt;?php
      </span>
      <span class="k">
       endif
      </span>
      <span class="cp">
       ?&gt;
      </span>
      <span class="x">
      </span>
      <span class="x">
       // In some model
      </span>
      <span class="x">
       $user = User::find($id);
      </span>
      <span class="x">
       if(Authority::can('delete', 'User', $user))
      </span>
      <span class="x">
       {
      </span>
      <span class="x">
       $user-&gt;delete();
      </span>
      <span class="x">
       }
      </span>
     </pre>
    </div>
    <h2>
     Support or Contact
    </h2>
    <p>
     Having trouble with Authority? Find me in the #laravel IRC channel or contact me @
     <a href="mailto:k.schmeets@gmail.com">
      k.schmeets@gmail.com
     </a>
     and ill help you sort it out.
    </p>
    <h2>
     A big Thanks
    </h2>
    <p>
     To (
     <a class="user-mention" href="https://github.com/ryanb">
      @ryanb
     </a>
     ) for making CanCan
    </p>
    <p>
     To (
     <a class="user-mention" href="https://github.com/machuga">
      @machuga
     </a>
     ) for porting CanCan to PHP
    </p>
   </section>
   <footer>
    <p>
     Project maintained by
     <a href="https://github.com/Vespakoen">
      Vespakoen
     </a>
    </p>
    <p>
     <small>
      Hosted on GitHub Pages  Theme by
      <a href="http://twitter.com/#!/michigangraham">
       mattgraham
      </a>
     </small>
    </p>
   </footer>
  </div>
  <!--[if !IE]&gt;&lt;script&gt;fixScale(document);&lt;/script&gt;&lt;![endif]-->
  <script type="text/javascript">
   var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
            document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
   try {
              var pageTracker = _gat._getTracker("&lt;script type=&quot;text/javascript&quot;&gt;    var _gaq = _gaq || [];   _gaq.push(['_setAccount', 'UA-30563892-1']);   _gaq.push(['_trackPageview']);    (function() {     var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;     ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';     var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);   })();  &lt;/script&gt;");
            pageTracker._trackPageview();
            } catch(err) {}
  </script>
 </body>
</html>